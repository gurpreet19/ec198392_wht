
 -- START PKG_GEN_PKGS.sf_get_functions at:11/15/2018 08.57.00 AM


CREATE or REPLACE PACKAGE RP_LOB_TEMPLATE
IS

   FUNCTION IS_ACTIVE(
      P_TEMPLATE_TYPE IN VARCHAR2,
      P_TEMPLATE_CODE IN VARCHAR2)
      RETURN VARCHAR2;
   FUNCTION IS_SYSTEM_CODE(
      P_TEMPLATE_TYPE IN VARCHAR2,
      P_TEMPLATE_CODE IN VARCHAR2)
      RETURN VARCHAR2;
   FUNCTION SORT_ORDER(
      P_TEMPLATE_TYPE IN VARCHAR2,
      P_TEMPLATE_CODE IN VARCHAR2)
      RETURN NUMBER;
   FUNCTION APPROVAL_BY(
      P_TEMPLATE_TYPE IN VARCHAR2,
      P_TEMPLATE_CODE IN VARCHAR2)
      RETURN VARCHAR2;
   FUNCTION APPROVAL_STATE(
      P_TEMPLATE_TYPE IN VARCHAR2,
      P_TEMPLATE_CODE IN VARCHAR2)
      RETURN VARCHAR2;
   FUNCTION BLOB_VALUE(
      P_TEMPLATE_TYPE IN VARCHAR2,
      P_TEMPLATE_CODE IN VARCHAR2)
      RETURN BLOB;
   FUNCTION IS_SYSTEM_TYPE(
      P_TEMPLATE_TYPE IN VARCHAR2,
      P_TEMPLATE_CODE IN VARCHAR2)
      RETURN VARCHAR2;
   FUNCTION RECORD_STATUS(
      P_TEMPLATE_TYPE IN VARCHAR2,
      P_TEMPLATE_CODE IN VARCHAR2)
      RETURN VARCHAR2;
   FUNCTION APPROVAL_DATE(
      P_TEMPLATE_TYPE IN VARCHAR2,
      P_TEMPLATE_CODE IN VARCHAR2)
      RETURN DATE;
   FUNCTION CLOB_VALUE(
      P_TEMPLATE_TYPE IN VARCHAR2,
      P_TEMPLATE_CODE IN VARCHAR2)
      RETURN CLOB;
      TYPE REC_ROW_BY_PK IS RECORD (
         TEMPLATE_TYPE VARCHAR2 (32) ,
         TEMPLATE_CODE VARCHAR2 (32) ,
         TEMPLATE_TEXT VARCHAR2 (240) ,
         IS_SYSTEM_TYPE VARCHAR2 (1) ,
         IS_SYSTEM_CODE VARCHAR2 (1) ,
         IS_ACTIVE VARCHAR2 (1) ,
         SORT_ORDER NUMBER ,
         CLOB_VALUE  CLOB ,
         BLOB_VALUE  BLOB ,
         DESCRIPTION VARCHAR2 (1000) ,
         RECORD_STATUS VARCHAR2 (1) ,
         CREATED_BY VARCHAR2 (30) ,
         CREATED_DATE  DATE ,
         LAST_UPDATED_BY VARCHAR2 (30) ,
         LAST_UPDATED_DATE  DATE ,
         REV_NO NUMBER ,
         REV_TEXT VARCHAR2 (2000) ,
         APPROVAL_BY VARCHAR2 (30) ,
         APPROVAL_DATE  DATE ,
         APPROVAL_STATE VARCHAR2 (1) ,
         REC_ID VARCHAR2 (32)  );
   FUNCTION ROW_BY_PK(
      P_TEMPLATE_TYPE IN VARCHAR2,
      P_TEMPLATE_CODE IN VARCHAR2)
      RETURN REC_ROW_BY_PK;
   FUNCTION REC_ID(
      P_TEMPLATE_TYPE IN VARCHAR2,
      P_TEMPLATE_CODE IN VARCHAR2)
      RETURN VARCHAR2;
   FUNCTION DESCRIPTION(
      P_TEMPLATE_TYPE IN VARCHAR2,
      P_TEMPLATE_CODE IN VARCHAR2)
      RETURN VARCHAR2;
   FUNCTION TEMPLATE_TEXT(
      P_TEMPLATE_TYPE IN VARCHAR2,
      P_TEMPLATE_CODE IN VARCHAR2)
      RETURN VARCHAR2;

END RP_LOB_TEMPLATE;

/



CREATE or REPLACE PACKAGE BODY RP_LOB_TEMPLATE
IS

   FUNCTION IS_ACTIVE(
      P_TEMPLATE_TYPE IN VARCHAR2,
      P_TEMPLATE_CODE IN VARCHAR2)
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2 (1) ;
   BEGIN
      ret_value := EC_LOB_TEMPLATE.IS_ACTIVE      (
         P_TEMPLATE_TYPE,
         P_TEMPLATE_CODE );
         RETURN ret_value;
   END IS_ACTIVE;
   FUNCTION IS_SYSTEM_CODE(
      P_TEMPLATE_TYPE IN VARCHAR2,
      P_TEMPLATE_CODE IN VARCHAR2)
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2 (1) ;
   BEGIN
      ret_value := EC_LOB_TEMPLATE.IS_SYSTEM_CODE      (
         P_TEMPLATE_TYPE,
         P_TEMPLATE_CODE );
         RETURN ret_value;
   END IS_SYSTEM_CODE;
   FUNCTION SORT_ORDER(
      P_TEMPLATE_TYPE IN VARCHAR2,
      P_TEMPLATE_CODE IN VARCHAR2)
      RETURN NUMBER
   IS
      ret_value   NUMBER ;
   BEGIN
      ret_value := EC_LOB_TEMPLATE.SORT_ORDER      (
         P_TEMPLATE_TYPE,
         P_TEMPLATE_CODE );
         RETURN ret_value;
   END SORT_ORDER;
   FUNCTION APPROVAL_BY(
      P_TEMPLATE_TYPE IN VARCHAR2,
      P_TEMPLATE_CODE IN VARCHAR2)
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2 (30) ;
   BEGIN
      ret_value := EC_LOB_TEMPLATE.APPROVAL_BY      (
         P_TEMPLATE_TYPE,
         P_TEMPLATE_CODE );
         RETURN ret_value;
   END APPROVAL_BY;
   FUNCTION APPROVAL_STATE(
      P_TEMPLATE_TYPE IN VARCHAR2,
      P_TEMPLATE_CODE IN VARCHAR2)
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2 (1) ;
   BEGIN
      ret_value := EC_LOB_TEMPLATE.APPROVAL_STATE      (
         P_TEMPLATE_TYPE,
         P_TEMPLATE_CODE );
         RETURN ret_value;
   END APPROVAL_STATE;
   FUNCTION BLOB_VALUE(
      P_TEMPLATE_TYPE IN VARCHAR2,
      P_TEMPLATE_CODE IN VARCHAR2)
      RETURN BLOB
   IS
      ret_value    BLOB ;
   BEGIN
      ret_value := EC_LOB_TEMPLATE.BLOB_VALUE      (
         P_TEMPLATE_TYPE,
         P_TEMPLATE_CODE );
         RETURN ret_value;
   END BLOB_VALUE;
   FUNCTION IS_SYSTEM_TYPE(
      P_TEMPLATE_TYPE IN VARCHAR2,
      P_TEMPLATE_CODE IN VARCHAR2)
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2 (1) ;
   BEGIN
      ret_value := EC_LOB_TEMPLATE.IS_SYSTEM_TYPE      (
         P_TEMPLATE_TYPE,
         P_TEMPLATE_CODE );
         RETURN ret_value;
   END IS_SYSTEM_TYPE;
   FUNCTION RECORD_STATUS(
      P_TEMPLATE_TYPE IN VARCHAR2,
      P_TEMPLATE_CODE IN VARCHAR2)
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2 (1) ;
   BEGIN
      ret_value := EC_LOB_TEMPLATE.RECORD_STATUS      (
         P_TEMPLATE_TYPE,
         P_TEMPLATE_CODE );
         RETURN ret_value;
   END RECORD_STATUS;
   FUNCTION APPROVAL_DATE(
      P_TEMPLATE_TYPE IN VARCHAR2,
      P_TEMPLATE_CODE IN VARCHAR2)
      RETURN DATE
   IS
      ret_value    DATE ;
   BEGIN
      ret_value := EC_LOB_TEMPLATE.APPROVAL_DATE      (
         P_TEMPLATE_TYPE,
         P_TEMPLATE_CODE );
         RETURN ret_value;
   END APPROVAL_DATE;
   FUNCTION CLOB_VALUE(
      P_TEMPLATE_TYPE IN VARCHAR2,
      P_TEMPLATE_CODE IN VARCHAR2)
      RETURN CLOB
   IS
      ret_value    CLOB ;
   BEGIN
      ret_value := EC_LOB_TEMPLATE.CLOB_VALUE      (
         P_TEMPLATE_TYPE,
         P_TEMPLATE_CODE );
         RETURN ret_value;
   END CLOB_VALUE;
   FUNCTION ROW_BY_PK(
      P_TEMPLATE_TYPE IN VARCHAR2,
      P_TEMPLATE_CODE IN VARCHAR2)
      RETURN REC_ROW_BY_PK
   IS
      ret_value    REC_ROW_BY_PK ;
   BEGIN
      ret_value := EC_LOB_TEMPLATE.ROW_BY_PK      (
         P_TEMPLATE_TYPE,
         P_TEMPLATE_CODE );
         RETURN ret_value;
   END ROW_BY_PK;
   FUNCTION REC_ID(
      P_TEMPLATE_TYPE IN VARCHAR2,
      P_TEMPLATE_CODE IN VARCHAR2)
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2 (32) ;
   BEGIN
      ret_value := EC_LOB_TEMPLATE.REC_ID      (
         P_TEMPLATE_TYPE,
         P_TEMPLATE_CODE );
         RETURN ret_value;
   END REC_ID;
   FUNCTION DESCRIPTION(
      P_TEMPLATE_TYPE IN VARCHAR2,
      P_TEMPLATE_CODE IN VARCHAR2)
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2 (1000) ;
   BEGIN
      ret_value := EC_LOB_TEMPLATE.DESCRIPTION      (
         P_TEMPLATE_TYPE,
         P_TEMPLATE_CODE );
         RETURN ret_value;
   END DESCRIPTION;
   FUNCTION TEMPLATE_TEXT(
      P_TEMPLATE_TYPE IN VARCHAR2,
      P_TEMPLATE_CODE IN VARCHAR2)
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2 (240) ;
   BEGIN
      ret_value := EC_LOB_TEMPLATE.TEMPLATE_TEXT      (
         P_TEMPLATE_TYPE,
         P_TEMPLATE_CODE );
         RETURN ret_value;
   END TEMPLATE_TEXT;

END RP_LOB_TEMPLATE;

/
--GRANT EXECUTE ON ECKERNEL_WST.RP_LOB_TEMPLATE TO REPORT_ROLE_XXX;



 -- FINISH PKG_GEN_PKGS.sf_get_functions at:11/15/2018 08.57.04 AM


