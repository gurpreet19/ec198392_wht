
 -- START PKG_GEN_PKGS.sf_get_functions at:11/15/2018 08.03.41 AM


CREATE or REPLACE PACKAGE RP_REPORT_TEMPLATE_PARAM
IS

   FUNCTION PARAMETER_SUB_TYPE(
      P_TEMPLATE_CODE IN VARCHAR2,
      P_PARAMETER_NAME IN VARCHAR2)
      RETURN VARCHAR2;
   FUNCTION SORT_ORDER(
      P_TEMPLATE_CODE IN VARCHAR2,
      P_PARAMETER_NAME IN VARCHAR2)
      RETURN NUMBER;
   FUNCTION TEXT_3(
      P_TEMPLATE_CODE IN VARCHAR2,
      P_PARAMETER_NAME IN VARCHAR2)
      RETURN VARCHAR2;
   FUNCTION TEXT_4(
      P_TEMPLATE_CODE IN VARCHAR2,
      P_PARAMETER_NAME IN VARCHAR2)
      RETURN VARCHAR2;
   FUNCTION APPROVAL_BY(
      P_TEMPLATE_CODE IN VARCHAR2,
      P_PARAMETER_NAME IN VARCHAR2)
      RETURN VARCHAR2;
   FUNCTION APPROVAL_STATE(
      P_TEMPLATE_CODE IN VARCHAR2,
      P_PARAMETER_NAME IN VARCHAR2)
      RETURN VARCHAR2;
   FUNCTION VALUE_5(
      P_TEMPLATE_CODE IN VARCHAR2,
      P_PARAMETER_NAME IN VARCHAR2)
      RETURN NUMBER;
   FUNCTION ACCESS_CHECK_IND(
      P_TEMPLATE_CODE IN VARCHAR2,
      P_PARAMETER_NAME IN VARCHAR2)
      RETURN VARCHAR2;
   FUNCTION RECORD_STATUS(
      P_TEMPLATE_CODE IN VARCHAR2,
      P_PARAMETER_NAME IN VARCHAR2)
      RETURN VARCHAR2;
   FUNCTION VALUE_1(
      P_TEMPLATE_CODE IN VARCHAR2,
      P_PARAMETER_NAME IN VARCHAR2)
      RETURN NUMBER;
   FUNCTION APPROVAL_DATE(
      P_TEMPLATE_CODE IN VARCHAR2,
      P_PARAMETER_NAME IN VARCHAR2)
      RETURN DATE;
   FUNCTION DESCR(
      P_TEMPLATE_CODE IN VARCHAR2,
      P_PARAMETER_NAME IN VARCHAR2)
      RETURN VARCHAR2;
   FUNCTION PARAMETER_STATIC_VALUE(
      P_TEMPLATE_CODE IN VARCHAR2,
      P_PARAMETER_NAME IN VARCHAR2)
      RETURN VARCHAR2;
      TYPE REC_ROW_BY_PK IS RECORD (
         TEMPLATE_CODE VARCHAR2 (32) ,
         PARAMETER_NAME VARCHAR2 (240) ,
         PARAMETER_TYPE VARCHAR2 (32) ,
         PARAMETER_SUB_TYPE VARCHAR2 (32) ,
         PARAMETER_STATIC_VALUE VARCHAR2 (2000) ,
         MANDATORY_IND VARCHAR2 (1) ,
         ACCESS_CHECK_IND VARCHAR2 (1) ,
         SORT_ORDER NUMBER ,
         DESCR VARCHAR2 (255) ,
         TEXT_1 VARCHAR2 (16) ,
         TEXT_2 VARCHAR2 (32) ,
         TEXT_3 VARCHAR2 (240) ,
         TEXT_4 VARCHAR2 (2000) ,
         VALUE_1 NUMBER ,
         VALUE_2 NUMBER ,
         VALUE_3 NUMBER ,
         VALUE_4 NUMBER ,
         VALUE_5 NUMBER ,
         RECORD_STATUS VARCHAR2 (1) ,
         CREATED_BY VARCHAR2 (30) ,
         CREATED_DATE  DATE ,
         LAST_UPDATED_BY VARCHAR2 (30) ,
         LAST_UPDATED_DATE  DATE ,
         REV_NO NUMBER ,
         REV_TEXT VARCHAR2 (2000) ,
         APPROVAL_STATE VARCHAR2 (1) ,
         APPROVAL_BY VARCHAR2 (30) ,
         APPROVAL_DATE  DATE ,
         REC_ID VARCHAR2 (32)  );
   FUNCTION ROW_BY_PK(
      P_TEMPLATE_CODE IN VARCHAR2,
      P_PARAMETER_NAME IN VARCHAR2)
      RETURN REC_ROW_BY_PK;
   FUNCTION VALUE_2(
      P_TEMPLATE_CODE IN VARCHAR2,
      P_PARAMETER_NAME IN VARCHAR2)
      RETURN NUMBER;
   FUNCTION VALUE_3(
      P_TEMPLATE_CODE IN VARCHAR2,
      P_PARAMETER_NAME IN VARCHAR2)
      RETURN NUMBER;
   FUNCTION VALUE_4(
      P_TEMPLATE_CODE IN VARCHAR2,
      P_PARAMETER_NAME IN VARCHAR2)
      RETURN NUMBER;
   FUNCTION MANDATORY_IND(
      P_TEMPLATE_CODE IN VARCHAR2,
      P_PARAMETER_NAME IN VARCHAR2)
      RETURN VARCHAR2;
   FUNCTION PARAMETER_TYPE(
      P_TEMPLATE_CODE IN VARCHAR2,
      P_PARAMETER_NAME IN VARCHAR2)
      RETURN VARCHAR2;
   FUNCTION REC_ID(
      P_TEMPLATE_CODE IN VARCHAR2,
      P_PARAMETER_NAME IN VARCHAR2)
      RETURN VARCHAR2;
   FUNCTION TEXT_1(
      P_TEMPLATE_CODE IN VARCHAR2,
      P_PARAMETER_NAME IN VARCHAR2)
      RETURN VARCHAR2;
   FUNCTION TEXT_2(
      P_TEMPLATE_CODE IN VARCHAR2,
      P_PARAMETER_NAME IN VARCHAR2)
      RETURN VARCHAR2;

END RP_REPORT_TEMPLATE_PARAM;

/



CREATE or REPLACE PACKAGE BODY RP_REPORT_TEMPLATE_PARAM
IS

   FUNCTION PARAMETER_SUB_TYPE(
      P_TEMPLATE_CODE IN VARCHAR2,
      P_PARAMETER_NAME IN VARCHAR2)
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2 (32) ;
   BEGIN
      ret_value := EC_REPORT_TEMPLATE_PARAM.PARAMETER_SUB_TYPE      (
         P_TEMPLATE_CODE,
         P_PARAMETER_NAME );
         RETURN ret_value;
   END PARAMETER_SUB_TYPE;
   FUNCTION SORT_ORDER(
      P_TEMPLATE_CODE IN VARCHAR2,
      P_PARAMETER_NAME IN VARCHAR2)
      RETURN NUMBER
   IS
      ret_value   NUMBER ;
   BEGIN
      ret_value := EC_REPORT_TEMPLATE_PARAM.SORT_ORDER      (
         P_TEMPLATE_CODE,
         P_PARAMETER_NAME );
         RETURN ret_value;
   END SORT_ORDER;
   FUNCTION TEXT_3(
      P_TEMPLATE_CODE IN VARCHAR2,
      P_PARAMETER_NAME IN VARCHAR2)
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2 (240) ;
   BEGIN
      ret_value := EC_REPORT_TEMPLATE_PARAM.TEXT_3      (
         P_TEMPLATE_CODE,
         P_PARAMETER_NAME );
         RETURN ret_value;
   END TEXT_3;
   FUNCTION TEXT_4(
      P_TEMPLATE_CODE IN VARCHAR2,
      P_PARAMETER_NAME IN VARCHAR2)
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2 (2000) ;
   BEGIN
      ret_value := EC_REPORT_TEMPLATE_PARAM.TEXT_4      (
         P_TEMPLATE_CODE,
         P_PARAMETER_NAME );
         RETURN ret_value;
   END TEXT_4;
   FUNCTION APPROVAL_BY(
      P_TEMPLATE_CODE IN VARCHAR2,
      P_PARAMETER_NAME IN VARCHAR2)
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2 (30) ;
   BEGIN
      ret_value := EC_REPORT_TEMPLATE_PARAM.APPROVAL_BY      (
         P_TEMPLATE_CODE,
         P_PARAMETER_NAME );
         RETURN ret_value;
   END APPROVAL_BY;
   FUNCTION APPROVAL_STATE(
      P_TEMPLATE_CODE IN VARCHAR2,
      P_PARAMETER_NAME IN VARCHAR2)
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2 (1) ;
   BEGIN
      ret_value := EC_REPORT_TEMPLATE_PARAM.APPROVAL_STATE      (
         P_TEMPLATE_CODE,
         P_PARAMETER_NAME );
         RETURN ret_value;
   END APPROVAL_STATE;
   FUNCTION VALUE_5(
      P_TEMPLATE_CODE IN VARCHAR2,
      P_PARAMETER_NAME IN VARCHAR2)
      RETURN NUMBER
   IS
      ret_value   NUMBER ;
   BEGIN
      ret_value := EC_REPORT_TEMPLATE_PARAM.VALUE_5      (
         P_TEMPLATE_CODE,
         P_PARAMETER_NAME );
         RETURN ret_value;
   END VALUE_5;
   FUNCTION ACCESS_CHECK_IND(
      P_TEMPLATE_CODE IN VARCHAR2,
      P_PARAMETER_NAME IN VARCHAR2)
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2 (1) ;
   BEGIN
      ret_value := EC_REPORT_TEMPLATE_PARAM.ACCESS_CHECK_IND      (
         P_TEMPLATE_CODE,
         P_PARAMETER_NAME );
         RETURN ret_value;
   END ACCESS_CHECK_IND;
   FUNCTION RECORD_STATUS(
      P_TEMPLATE_CODE IN VARCHAR2,
      P_PARAMETER_NAME IN VARCHAR2)
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2 (1) ;
   BEGIN
      ret_value := EC_REPORT_TEMPLATE_PARAM.RECORD_STATUS      (
         P_TEMPLATE_CODE,
         P_PARAMETER_NAME );
         RETURN ret_value;
   END RECORD_STATUS;
   FUNCTION VALUE_1(
      P_TEMPLATE_CODE IN VARCHAR2,
      P_PARAMETER_NAME IN VARCHAR2)
      RETURN NUMBER
   IS
      ret_value   NUMBER ;
   BEGIN
      ret_value := EC_REPORT_TEMPLATE_PARAM.VALUE_1      (
         P_TEMPLATE_CODE,
         P_PARAMETER_NAME );
         RETURN ret_value;
   END VALUE_1;
   FUNCTION APPROVAL_DATE(
      P_TEMPLATE_CODE IN VARCHAR2,
      P_PARAMETER_NAME IN VARCHAR2)
      RETURN DATE
   IS
      ret_value    DATE ;
   BEGIN
      ret_value := EC_REPORT_TEMPLATE_PARAM.APPROVAL_DATE      (
         P_TEMPLATE_CODE,
         P_PARAMETER_NAME );
         RETURN ret_value;
   END APPROVAL_DATE;
   FUNCTION DESCR(
      P_TEMPLATE_CODE IN VARCHAR2,
      P_PARAMETER_NAME IN VARCHAR2)
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2 (255) ;
   BEGIN
      ret_value := EC_REPORT_TEMPLATE_PARAM.DESCR      (
         P_TEMPLATE_CODE,
         P_PARAMETER_NAME );
         RETURN ret_value;
   END DESCR;
   FUNCTION PARAMETER_STATIC_VALUE(
      P_TEMPLATE_CODE IN VARCHAR2,
      P_PARAMETER_NAME IN VARCHAR2)
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2 (2000) ;
   BEGIN
      ret_value := EC_REPORT_TEMPLATE_PARAM.PARAMETER_STATIC_VALUE      (
         P_TEMPLATE_CODE,
         P_PARAMETER_NAME );
         RETURN ret_value;
   END PARAMETER_STATIC_VALUE;
   FUNCTION ROW_BY_PK(
      P_TEMPLATE_CODE IN VARCHAR2,
      P_PARAMETER_NAME IN VARCHAR2)
      RETURN REC_ROW_BY_PK
   IS
      ret_value    REC_ROW_BY_PK ;
   BEGIN
      ret_value := EC_REPORT_TEMPLATE_PARAM.ROW_BY_PK      (
         P_TEMPLATE_CODE,
         P_PARAMETER_NAME );
         RETURN ret_value;
   END ROW_BY_PK;
   FUNCTION VALUE_2(
      P_TEMPLATE_CODE IN VARCHAR2,
      P_PARAMETER_NAME IN VARCHAR2)
      RETURN NUMBER
   IS
      ret_value   NUMBER ;
   BEGIN
      ret_value := EC_REPORT_TEMPLATE_PARAM.VALUE_2      (
         P_TEMPLATE_CODE,
         P_PARAMETER_NAME );
         RETURN ret_value;
   END VALUE_2;
   FUNCTION VALUE_3(
      P_TEMPLATE_CODE IN VARCHAR2,
      P_PARAMETER_NAME IN VARCHAR2)
      RETURN NUMBER
   IS
      ret_value   NUMBER ;
   BEGIN
      ret_value := EC_REPORT_TEMPLATE_PARAM.VALUE_3      (
         P_TEMPLATE_CODE,
         P_PARAMETER_NAME );
         RETURN ret_value;
   END VALUE_3;
   FUNCTION VALUE_4(
      P_TEMPLATE_CODE IN VARCHAR2,
      P_PARAMETER_NAME IN VARCHAR2)
      RETURN NUMBER
   IS
      ret_value   NUMBER ;
   BEGIN
      ret_value := EC_REPORT_TEMPLATE_PARAM.VALUE_4      (
         P_TEMPLATE_CODE,
         P_PARAMETER_NAME );
         RETURN ret_value;
   END VALUE_4;
   FUNCTION MANDATORY_IND(
      P_TEMPLATE_CODE IN VARCHAR2,
      P_PARAMETER_NAME IN VARCHAR2)
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2 (1) ;
   BEGIN
      ret_value := EC_REPORT_TEMPLATE_PARAM.MANDATORY_IND      (
         P_TEMPLATE_CODE,
         P_PARAMETER_NAME );
         RETURN ret_value;
   END MANDATORY_IND;
   FUNCTION PARAMETER_TYPE(
      P_TEMPLATE_CODE IN VARCHAR2,
      P_PARAMETER_NAME IN VARCHAR2)
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2 (32) ;
   BEGIN
      ret_value := EC_REPORT_TEMPLATE_PARAM.PARAMETER_TYPE      (
         P_TEMPLATE_CODE,
         P_PARAMETER_NAME );
         RETURN ret_value;
   END PARAMETER_TYPE;
   FUNCTION REC_ID(
      P_TEMPLATE_CODE IN VARCHAR2,
      P_PARAMETER_NAME IN VARCHAR2)
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2 (32) ;
   BEGIN
      ret_value := EC_REPORT_TEMPLATE_PARAM.REC_ID      (
         P_TEMPLATE_CODE,
         P_PARAMETER_NAME );
         RETURN ret_value;
   END REC_ID;
   FUNCTION TEXT_1(
      P_TEMPLATE_CODE IN VARCHAR2,
      P_PARAMETER_NAME IN VARCHAR2)
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2 (16) ;
   BEGIN
      ret_value := EC_REPORT_TEMPLATE_PARAM.TEXT_1      (
         P_TEMPLATE_CODE,
         P_PARAMETER_NAME );
         RETURN ret_value;
   END TEXT_1;
   FUNCTION TEXT_2(
      P_TEMPLATE_CODE IN VARCHAR2,
      P_PARAMETER_NAME IN VARCHAR2)
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2 (32) ;
   BEGIN
      ret_value := EC_REPORT_TEMPLATE_PARAM.TEXT_2      (
         P_TEMPLATE_CODE,
         P_PARAMETER_NAME );
         RETURN ret_value;
   END TEXT_2;

END RP_REPORT_TEMPLATE_PARAM;

/
--GRANT EXECUTE ON ECKERNEL_WST.RP_REPORT_TEMPLATE_PARAM TO REPORT_ROLE_XXX;



 -- FINISH PKG_GEN_PKGS.sf_get_functions at:11/15/2018 08.03.45 AM


