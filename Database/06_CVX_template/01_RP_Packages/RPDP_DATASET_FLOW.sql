
 -- START PKG_GEN_PKGS.sf_get_functions at:11/16/2018 09.24.39 AM


CREATE or REPLACE PACKAGE RPDP_DATASET_FLOW
IS

   FUNCTION GETMAPPINGSCREEN(
      P_MAPPING_TYPE IN VARCHAR2,
      P_DIRECTION IN VARCHAR2,
      P_TYPE IN VARCHAR2 default null,
      P_OTHER_TYPE IN VARCHAR2 default null,
      P_OTHER_REF_ID IN VARCHAR2 DEFAULT NULL)
      RETURN VARCHAR2;
   FUNCTION GETSTATUSMESSAGE(
      P_DOCUMENTKEY IN VARCHAR2,
      P_STATUS IN VARCHAR2,
      P_TYPE IN VARCHAR2)
      RETURN VARCHAR2;
   FUNCTION GETOBJECTTEXT(
      P_REF_ID IN VARCHAR2,
      P_MAPPING_TYPE IN VARCHAR2,
      P_OBJECT_ID IN VARCHAR2,
      P_DAYTIME IN DATE)
      RETURN VARCHAR2;
   FUNCTION SUBMIT(
      P_REPORT_RUN IN NUMBER,
      P_USER_ID IN VARCHAR2)
      RETURN VARCHAR2;
   FUNCTION GETFILTERLABEL(
      P_MAPPING_TYPE IN VARCHAR2,
      P_DIRECTION IN VARCHAR2,
      P_TYPE IN VARCHAR2 default null,
      P_FILTER_NUMBER IN NUMBER)
      RETURN VARCHAR2;
   FUNCTION GETLASTJMDOC(
      P_CONTRACT_ID IN VARCHAR2,
      P_DATASET IN VARCHAR2,
      P_PERIOD IN DATE)
      RETURN VARCHAR2;
   FUNCTION GETMAPPINGPARAMETERS(
      P_DAYTIME IN DATE,
      P_REF_ID IN VARCHAR2,
      P_MAPPING_TYPE IN VARCHAR2,
      P_CLASS_NAME IN VARCHAR2,
      P_PARAMETERS IN VARCHAR2)
      RETURN VARCHAR2;
   FUNCTION DELETE(
      P_TYPE IN VARCHAR2,
      P_DOC_ID IN VARCHAR2,
      P_OBJECT_ID IN VARCHAR2,
      P_CLEAN IN VARCHAR2 DEFAULT 'Y')
      RETURN VARCHAR2;
   FUNCTION GETFILTERCOLUMN(
      P_MAPPING_TYPE IN VARCHAR2,
      P_DIRECTION IN VARCHAR2,
      P_TYPE IN VARCHAR2 default null,
      P_FILTER_NUMBER IN NUMBER)
      RETURN VARCHAR2;
   FUNCTION GETMAPPINGTEXT(
      P_DAYTIME IN DATE,
      P_REF_ID IN VARCHAR2,
      P_MAPPING_TYPE IN VARCHAR2,
      P_MAPPING_ID IN VARCHAR2)
      RETURN VARCHAR2;
   FUNCTION GETREPORTVERSION(
      P_DAYTIME IN DATE,
      P_RUNABLE IN NUMBER)
      RETURN VARCHAR2;
   FUNCTION UPDATEREPORT(
      P_REPORT_NO IN VARCHAR2)
      RETURN VARCHAR2;
   FUNCTION UPDATEDOCFLOWSTATUS(
      P_TYPE IN VARCHAR2,
      P_REFERENCE_ID IN VARCHAR2,
      P_STATUS IN VARCHAR2,
      P_USER IN VARCHAR2,
      P_NO_TABLE_UPDATE IN BOOLEAN DEFAULT FALSE,
      P_OLD_STATUS IN VARCHAR2 DEFAULT NULL,
      P_ALLOW_UNAPPROVE IN BOOLEAN DEFAULT FALSE)
      RETURN VARCHAR2;
   FUNCTION CHECKREPORTGEN(
      P_REPORT_NO IN VARCHAR2)
      RETURN VARCHAR2;
   FUNCTION GETCONNECTIONID(
      P_TO_TYPE IN VARCHAR2,
      P_TO_REFERENCE_ID IN VARCHAR2,
      P_FROM_TYPE IN VARCHAR2,
      P_FROM_REFERENCE_ID IN VARCHAR2,
      P_INSERT IN BOOLEAN DEFAULT FALSE)
      RETURN NUMBER;
   FUNCTION GETREFERENCEDESC(
      P_DOCUMENTKEY IN VARCHAR2,
      P_TYPE IN VARCHAR2)
      RETURN VARCHAR2;

END RPDP_DATASET_FLOW;

/



CREATE or REPLACE PACKAGE BODY RPDP_DATASET_FLOW
IS

   FUNCTION GETMAPPINGSCREEN(
      P_MAPPING_TYPE IN VARCHAR2,
      P_DIRECTION IN VARCHAR2,
      P_TYPE IN VARCHAR2 default null,
      P_OTHER_TYPE IN VARCHAR2 default null,
      P_OTHER_REF_ID IN VARCHAR2 DEFAULT NULL)
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2(4000) ;
   BEGIN
      ret_value := ECDP_DATASET_FLOW.GETMAPPINGSCREEN      (
         P_MAPPING_TYPE,
         P_DIRECTION,
         P_TYPE,
         P_OTHER_TYPE,
         P_OTHER_REF_ID );
         RETURN ret_value;
   END GETMAPPINGSCREEN;
   FUNCTION GETSTATUSMESSAGE(
      P_DOCUMENTKEY IN VARCHAR2,
      P_STATUS IN VARCHAR2,
      P_TYPE IN VARCHAR2)
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2(4000) ;
   BEGIN
      ret_value := ECDP_DATASET_FLOW.GETSTATUSMESSAGE      (
         P_DOCUMENTKEY,
         P_STATUS,
         P_TYPE );
         RETURN ret_value;
   END GETSTATUSMESSAGE;
   FUNCTION GETOBJECTTEXT(
      P_REF_ID IN VARCHAR2,
      P_MAPPING_TYPE IN VARCHAR2,
      P_OBJECT_ID IN VARCHAR2,
      P_DAYTIME IN DATE)
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2(4000) ;
   BEGIN
      ret_value := ECDP_DATASET_FLOW.GETOBJECTTEXT      (
         P_REF_ID,
         P_MAPPING_TYPE,
         P_OBJECT_ID,
         P_DAYTIME );
         RETURN ret_value;
   END GETOBJECTTEXT;
   FUNCTION SUBMIT(
      P_REPORT_RUN IN NUMBER,
      P_USER_ID IN VARCHAR2)
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2(4000) ;
   BEGIN
      ret_value := ECDP_DATASET_FLOW.SUBMIT      (
         P_REPORT_RUN,
         P_USER_ID );
         RETURN ret_value;
   END SUBMIT;
   FUNCTION GETFILTERLABEL(
      P_MAPPING_TYPE IN VARCHAR2,
      P_DIRECTION IN VARCHAR2,
      P_TYPE IN VARCHAR2 default null,
      P_FILTER_NUMBER IN NUMBER)
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2(4000) ;
   BEGIN
      ret_value := ECDP_DATASET_FLOW.GETFILTERLABEL      (
         P_MAPPING_TYPE,
         P_DIRECTION,
         P_TYPE,
         P_FILTER_NUMBER );
         RETURN ret_value;
   END GETFILTERLABEL;
   FUNCTION GETLASTJMDOC(
      P_CONTRACT_ID IN VARCHAR2,
      P_DATASET IN VARCHAR2,
      P_PERIOD IN DATE)
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2(4000) ;
   BEGIN
      ret_value := ECDP_DATASET_FLOW.GETLASTJMDOC      (
         P_CONTRACT_ID,
         P_DATASET,
         P_PERIOD );
         RETURN ret_value;
   END GETLASTJMDOC;
   FUNCTION GETMAPPINGPARAMETERS(
      P_DAYTIME IN DATE,
      P_REF_ID IN VARCHAR2,
      P_MAPPING_TYPE IN VARCHAR2,
      P_CLASS_NAME IN VARCHAR2,
      P_PARAMETERS IN VARCHAR2)
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2(4000) ;
   BEGIN
      ret_value := ECDP_DATASET_FLOW.GETMAPPINGPARAMETERS      (
         P_DAYTIME,
         P_REF_ID,
         P_MAPPING_TYPE,
         P_CLASS_NAME,
         P_PARAMETERS );
         RETURN ret_value;
   END GETMAPPINGPARAMETERS;
   FUNCTION DELETE(
      P_TYPE IN VARCHAR2,
      P_DOC_ID IN VARCHAR2,
      P_OBJECT_ID IN VARCHAR2,
      P_CLEAN IN VARCHAR2 DEFAULT 'Y')
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2(4000) ;
   BEGIN
      ret_value := ECDP_DATASET_FLOW.DELETE      (
         P_TYPE,
         P_DOC_ID,
         P_OBJECT_ID,
         P_CLEAN );
         RETURN ret_value;
   END DELETE;
   FUNCTION GETFILTERCOLUMN(
      P_MAPPING_TYPE IN VARCHAR2,
      P_DIRECTION IN VARCHAR2,
      P_TYPE IN VARCHAR2 default null,
      P_FILTER_NUMBER IN NUMBER)
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2(4000) ;
   BEGIN
      ret_value := ECDP_DATASET_FLOW.GETFILTERCOLUMN      (
         P_MAPPING_TYPE,
         P_DIRECTION,
         P_TYPE,
         P_FILTER_NUMBER );
         RETURN ret_value;
   END GETFILTERCOLUMN;
   FUNCTION GETMAPPINGTEXT(
      P_DAYTIME IN DATE,
      P_REF_ID IN VARCHAR2,
      P_MAPPING_TYPE IN VARCHAR2,
      P_MAPPING_ID IN VARCHAR2)
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2(4000) ;
   BEGIN
      ret_value := ECDP_DATASET_FLOW.GETMAPPINGTEXT      (
         P_DAYTIME,
         P_REF_ID,
         P_MAPPING_TYPE,
         P_MAPPING_ID );
         RETURN ret_value;
   END GETMAPPINGTEXT;
   FUNCTION GETREPORTVERSION(
      P_DAYTIME IN DATE,
      P_RUNABLE IN NUMBER)
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2(4000) ;
   BEGIN
      ret_value := ECDP_DATASET_FLOW.GETREPORTVERSION      (
         P_DAYTIME,
         P_RUNABLE );
         RETURN ret_value;
   END GETREPORTVERSION;
   FUNCTION UPDATEREPORT(
      P_REPORT_NO IN VARCHAR2)
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2(4000) ;
   BEGIN
      ret_value := ECDP_DATASET_FLOW.UPDATEREPORT      (
         P_REPORT_NO );
         RETURN ret_value;
   END UPDATEREPORT;
   FUNCTION UPDATEDOCFLOWSTATUS(
      P_TYPE IN VARCHAR2,
      P_REFERENCE_ID IN VARCHAR2,
      P_STATUS IN VARCHAR2,
      P_USER IN VARCHAR2,
      P_NO_TABLE_UPDATE IN BOOLEAN DEFAULT FALSE,
      P_OLD_STATUS IN VARCHAR2 DEFAULT NULL,
      P_ALLOW_UNAPPROVE IN BOOLEAN DEFAULT FALSE)
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2(4000) ;
   BEGIN
      ret_value := ECDP_DATASET_FLOW.UPDATEDOCFLOWSTATUS      (
         P_TYPE,
         P_REFERENCE_ID,
         P_STATUS,
         P_USER,
         P_NO_TABLE_UPDATE,
         P_OLD_STATUS,
         P_ALLOW_UNAPPROVE );
         RETURN ret_value;
   END UPDATEDOCFLOWSTATUS;
   FUNCTION CHECKREPORTGEN(
      P_REPORT_NO IN VARCHAR2)
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2(4000) ;
   BEGIN
      ret_value := ECDP_DATASET_FLOW.CHECKREPORTGEN      (
         P_REPORT_NO );
         RETURN ret_value;
   END CHECKREPORTGEN;
   FUNCTION GETCONNECTIONID(
      P_TO_TYPE IN VARCHAR2,
      P_TO_REFERENCE_ID IN VARCHAR2,
      P_FROM_TYPE IN VARCHAR2,
      P_FROM_REFERENCE_ID IN VARCHAR2,
      P_INSERT IN BOOLEAN DEFAULT FALSE)
      RETURN NUMBER
   IS
      ret_value   NUMBER ;
   BEGIN
      ret_value := ECDP_DATASET_FLOW.GETCONNECTIONID      (
         P_TO_TYPE,
         P_TO_REFERENCE_ID,
         P_FROM_TYPE,
         P_FROM_REFERENCE_ID,
         P_INSERT );
         RETURN ret_value;
   END GETCONNECTIONID;
   FUNCTION GETREFERENCEDESC(
      P_DOCUMENTKEY IN VARCHAR2,
      P_TYPE IN VARCHAR2)
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2(4000) ;
   BEGIN
      ret_value := ECDP_DATASET_FLOW.GETREFERENCEDESC      (
         P_DOCUMENTKEY,
         P_TYPE );
         RETURN ret_value;
   END GETREFERENCEDESC;

END RPDP_DATASET_FLOW;

/
--GRANT EXECUTE ON ECKERNEL_WST.RPDP_DATASET_FLOW TO REPORT_ROLE_XXX;



 -- FINISH PKG_GEN_PKGS.sf_get_functions at:11/16/2018 09.24.42 AM


