
 -- START PKG_GEN_PKGS.sf_get_functions at:05/07/2019 05.33.18 AM


CREATE or REPLACE PACKAGE RP_TRANS_INVENTORY_TMPL_ATTR
IS

   FUNCTION SORT_ORDER(
      P_TEMPLATE_CODE IN VARCHAR2,
      P_ATTRIBUTE_NAME IN VARCHAR2)
      RETURN NUMBER;
   FUNCTION SUM_FUNCTION(
      P_TEMPLATE_CODE IN VARCHAR2,
      P_ATTRIBUTE_NAME IN VARCHAR2)
      RETURN VARCHAR2;
   FUNCTION APPROVAL_BY(
      P_TEMPLATE_CODE IN VARCHAR2,
      P_ATTRIBUTE_NAME IN VARCHAR2)
      RETURN VARCHAR2;
   FUNCTION APPROVAL_STATE(
      P_TEMPLATE_CODE IN VARCHAR2,
      P_ATTRIBUTE_NAME IN VARCHAR2)
      RETURN VARCHAR2;
   FUNCTION CURRENCY_ID(
      P_TEMPLATE_CODE IN VARCHAR2,
      P_ATTRIBUTE_NAME IN VARCHAR2)
      RETURN VARCHAR2;
   FUNCTION FORMAT_MASK(
      P_TEMPLATE_CODE IN VARCHAR2,
      P_ATTRIBUTE_NAME IN VARCHAR2)
      RETURN VARCHAR2;
   FUNCTION RECORD_STATUS(
      P_TEMPLATE_CODE IN VARCHAR2,
      P_ATTRIBUTE_NAME IN VARCHAR2)
      RETURN VARCHAR2;
   FUNCTION APPROVAL_DATE(
      P_TEMPLATE_CODE IN VARCHAR2,
      P_ATTRIBUTE_NAME IN VARCHAR2)
      RETURN DATE;
      TYPE REC_ROW_BY_PK IS RECORD (
         TEMPLATE_CODE VARCHAR2 (32) ,
         ATTRIBUTE_NAME VARCHAR2 (24) ,
         ATTRIBUTE_SYNTAX VARCHAR2 (240) ,
         TRANS_INVENTORY_SCOPE VARCHAR2 (32) ,
         LABEL VARCHAR2 (64) ,
         LABEL_HEADER VARCHAR2 (64) ,
         UOM VARCHAR2 (16) ,
         CURRENCY_ID VARCHAR2 (32) ,
         FORMAT_MASK VARCHAR2 (32) ,
         SUM_FUNCTION VARCHAR2 (32) ,
         SORT_ORDER NUMBER ,
         RECORD_STATUS VARCHAR2 (1) ,
         CREATED_BY VARCHAR2 (30) ,
         CREATED_DATE  DATE ,
         LAST_UPDATED_BY VARCHAR2 (30) ,
         LAST_UPDATED_DATE  DATE ,
         REV_NO NUMBER ,
         REV_TEXT VARCHAR2 (2000) ,
         APPROVAL_BY VARCHAR2 (30) ,
         APPROVAL_DATE  DATE ,
         APPROVAL_STATE VARCHAR2 (1) ,
         REC_ID VARCHAR2 (32)  );
   FUNCTION ROW_BY_PK(
      P_TEMPLATE_CODE IN VARCHAR2,
      P_ATTRIBUTE_NAME IN VARCHAR2)
      RETURN REC_ROW_BY_PK;
   FUNCTION TRANS_INVENTORY_SCOPE(
      P_TEMPLATE_CODE IN VARCHAR2,
      P_ATTRIBUTE_NAME IN VARCHAR2)
      RETURN VARCHAR2;
   FUNCTION REC_ID(
      P_TEMPLATE_CODE IN VARCHAR2,
      P_ATTRIBUTE_NAME IN VARCHAR2)
      RETURN VARCHAR2;
   FUNCTION ATTRIBUTE_SYNTAX(
      P_TEMPLATE_CODE IN VARCHAR2,
      P_ATTRIBUTE_NAME IN VARCHAR2)
      RETURN VARCHAR2;
   FUNCTION LABEL(
      P_TEMPLATE_CODE IN VARCHAR2,
      P_ATTRIBUTE_NAME IN VARCHAR2)
      RETURN VARCHAR2;
   FUNCTION LABEL_HEADER(
      P_TEMPLATE_CODE IN VARCHAR2,
      P_ATTRIBUTE_NAME IN VARCHAR2)
      RETURN VARCHAR2;
   FUNCTION UOM(
      P_TEMPLATE_CODE IN VARCHAR2,
      P_ATTRIBUTE_NAME IN VARCHAR2)
      RETURN VARCHAR2;

END RP_TRANS_INVENTORY_TMPL_ATTR;

/



CREATE or REPLACE PACKAGE BODY RP_TRANS_INVENTORY_TMPL_ATTR
IS

   FUNCTION SORT_ORDER(
      P_TEMPLATE_CODE IN VARCHAR2,
      P_ATTRIBUTE_NAME IN VARCHAR2)
      RETURN NUMBER
   IS
      ret_value   NUMBER ;
   BEGIN
      ret_value := EC_TRANS_INVENTORY_TMPL_ATTR.SORT_ORDER      (
         P_TEMPLATE_CODE,
         P_ATTRIBUTE_NAME );
         RETURN ret_value;
   END SORT_ORDER;
   FUNCTION SUM_FUNCTION(
      P_TEMPLATE_CODE IN VARCHAR2,
      P_ATTRIBUTE_NAME IN VARCHAR2)
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2 (32) ;
   BEGIN
      ret_value := EC_TRANS_INVENTORY_TMPL_ATTR.SUM_FUNCTION      (
         P_TEMPLATE_CODE,
         P_ATTRIBUTE_NAME );
         RETURN ret_value;
   END SUM_FUNCTION;
   FUNCTION APPROVAL_BY(
      P_TEMPLATE_CODE IN VARCHAR2,
      P_ATTRIBUTE_NAME IN VARCHAR2)
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2 (30) ;
   BEGIN
      ret_value := EC_TRANS_INVENTORY_TMPL_ATTR.APPROVAL_BY      (
         P_TEMPLATE_CODE,
         P_ATTRIBUTE_NAME );
         RETURN ret_value;
   END APPROVAL_BY;
   FUNCTION APPROVAL_STATE(
      P_TEMPLATE_CODE IN VARCHAR2,
      P_ATTRIBUTE_NAME IN VARCHAR2)
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2 (1) ;
   BEGIN
      ret_value := EC_TRANS_INVENTORY_TMPL_ATTR.APPROVAL_STATE      (
         P_TEMPLATE_CODE,
         P_ATTRIBUTE_NAME );
         RETURN ret_value;
   END APPROVAL_STATE;
   FUNCTION CURRENCY_ID(
      P_TEMPLATE_CODE IN VARCHAR2,
      P_ATTRIBUTE_NAME IN VARCHAR2)
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2 (32) ;
   BEGIN
      ret_value := EC_TRANS_INVENTORY_TMPL_ATTR.CURRENCY_ID      (
         P_TEMPLATE_CODE,
         P_ATTRIBUTE_NAME );
         RETURN ret_value;
   END CURRENCY_ID;
   FUNCTION FORMAT_MASK(
      P_TEMPLATE_CODE IN VARCHAR2,
      P_ATTRIBUTE_NAME IN VARCHAR2)
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2 (32) ;
   BEGIN
      ret_value := EC_TRANS_INVENTORY_TMPL_ATTR.FORMAT_MASK      (
         P_TEMPLATE_CODE,
         P_ATTRIBUTE_NAME );
         RETURN ret_value;
   END FORMAT_MASK;
   FUNCTION RECORD_STATUS(
      P_TEMPLATE_CODE IN VARCHAR2,
      P_ATTRIBUTE_NAME IN VARCHAR2)
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2 (1) ;
   BEGIN
      ret_value := EC_TRANS_INVENTORY_TMPL_ATTR.RECORD_STATUS      (
         P_TEMPLATE_CODE,
         P_ATTRIBUTE_NAME );
         RETURN ret_value;
   END RECORD_STATUS;
   FUNCTION APPROVAL_DATE(
      P_TEMPLATE_CODE IN VARCHAR2,
      P_ATTRIBUTE_NAME IN VARCHAR2)
      RETURN DATE
   IS
      ret_value    DATE ;
   BEGIN
      ret_value := EC_TRANS_INVENTORY_TMPL_ATTR.APPROVAL_DATE      (
         P_TEMPLATE_CODE,
         P_ATTRIBUTE_NAME );
         RETURN ret_value;
   END APPROVAL_DATE;
   FUNCTION ROW_BY_PK(
      P_TEMPLATE_CODE IN VARCHAR2,
      P_ATTRIBUTE_NAME IN VARCHAR2)
      RETURN REC_ROW_BY_PK
   IS
      ret_value    REC_ROW_BY_PK ;
   BEGIN
      ret_value := EC_TRANS_INVENTORY_TMPL_ATTR.ROW_BY_PK      (
         P_TEMPLATE_CODE,
         P_ATTRIBUTE_NAME );
         RETURN ret_value;
   END ROW_BY_PK;
   FUNCTION TRANS_INVENTORY_SCOPE(
      P_TEMPLATE_CODE IN VARCHAR2,
      P_ATTRIBUTE_NAME IN VARCHAR2)
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2 (32) ;
   BEGIN
      ret_value := EC_TRANS_INVENTORY_TMPL_ATTR.TRANS_INVENTORY_SCOPE      (
         P_TEMPLATE_CODE,
         P_ATTRIBUTE_NAME );
         RETURN ret_value;
   END TRANS_INVENTORY_SCOPE;
   FUNCTION REC_ID(
      P_TEMPLATE_CODE IN VARCHAR2,
      P_ATTRIBUTE_NAME IN VARCHAR2)
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2 (32) ;
   BEGIN
      ret_value := EC_TRANS_INVENTORY_TMPL_ATTR.REC_ID      (
         P_TEMPLATE_CODE,
         P_ATTRIBUTE_NAME );
         RETURN ret_value;
   END REC_ID;
   FUNCTION ATTRIBUTE_SYNTAX(
      P_TEMPLATE_CODE IN VARCHAR2,
      P_ATTRIBUTE_NAME IN VARCHAR2)
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2 (240) ;
   BEGIN
      ret_value := EC_TRANS_INVENTORY_TMPL_ATTR.ATTRIBUTE_SYNTAX      (
         P_TEMPLATE_CODE,
         P_ATTRIBUTE_NAME );
         RETURN ret_value;
   END ATTRIBUTE_SYNTAX;
   FUNCTION LABEL(
      P_TEMPLATE_CODE IN VARCHAR2,
      P_ATTRIBUTE_NAME IN VARCHAR2)
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2 (64) ;
   BEGIN
      ret_value := EC_TRANS_INVENTORY_TMPL_ATTR.LABEL      (
         P_TEMPLATE_CODE,
         P_ATTRIBUTE_NAME );
         RETURN ret_value;
   END LABEL;
   FUNCTION LABEL_HEADER(
      P_TEMPLATE_CODE IN VARCHAR2,
      P_ATTRIBUTE_NAME IN VARCHAR2)
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2 (64) ;
   BEGIN
      ret_value := EC_TRANS_INVENTORY_TMPL_ATTR.LABEL_HEADER      (
         P_TEMPLATE_CODE,
         P_ATTRIBUTE_NAME );
         RETURN ret_value;
   END LABEL_HEADER;
   FUNCTION UOM(
      P_TEMPLATE_CODE IN VARCHAR2,
      P_ATTRIBUTE_NAME IN VARCHAR2)
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2 (16) ;
   BEGIN
      ret_value := EC_TRANS_INVENTORY_TMPL_ATTR.UOM      (
         P_TEMPLATE_CODE,
         P_ATTRIBUTE_NAME );
         RETURN ret_value;
   END UOM;

END RP_TRANS_INVENTORY_TMPL_ATTR;

/
--GRANT EXECUTE ON ECKERNEL_WST.RP_TRANS_INVENTORY_TMPL_ATTR TO REPORT_ROLE_XXX;



 -- FINISH PKG_GEN_PKGS.sf_get_functions at:05/07/2019 05.33.27 AM


