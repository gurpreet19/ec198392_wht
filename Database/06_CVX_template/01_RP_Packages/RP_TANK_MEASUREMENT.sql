
 -- START PKG_GEN_PKGS.sf_get_functions at:05/07/2019 06.06.38 AM


CREATE or REPLACE PACKAGE RP_TANK_MEASUREMENT
IS

   FUNCTION CORR_DENSITY(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN NUMBER;
   FUNCTION MATH_API(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_FROM_DAY IN DATE,
      P_TO_DAY IN DATE,
      P_METHOD IN VARCHAR2 DEFAULT 'SUM')
      RETURN NUMBER;
   FUNCTION MATH_DENSITY(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_FROM_DAY IN DATE,
      P_TO_DAY IN DATE,
      P_METHOD IN VARCHAR2 DEFAULT 'SUM')
      RETURN NUMBER;
   FUNCTION MATH_GRS_DIP_LEVEL(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_FROM_DAY IN DATE,
      P_TO_DAY IN DATE,
      P_METHOD IN VARCHAR2 DEFAULT 'SUM')
      RETURN NUMBER;
   FUNCTION MATH_TANK_LEVEL_M3(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_FROM_DAY IN DATE,
      P_TO_DAY IN DATE,
      P_METHOD IN VARCHAR2 DEFAULT 'SUM')
      RETURN NUMBER;
   FUNCTION OBS_DENSITY(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN NUMBER;
   FUNCTION TEXT_3(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN VARCHAR2;
   FUNCTION TEXT_4(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN VARCHAR2;
   FUNCTION APPROVAL_BY(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN VARCHAR2;
   FUNCTION APPROVAL_STATE(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN VARCHAR2;
   FUNCTION DENSITY_STOR(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN NUMBER;
   FUNCTION GRS_DIP_LEVEL(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN NUMBER;
   FUNCTION MATH_BSW_VOL(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_FROM_DAY IN DATE,
      P_TO_DAY IN DATE,
      P_METHOD IN VARCHAR2 DEFAULT 'SUM')
      RETURN NUMBER;
   FUNCTION MATH_CLOSING_ENERGY(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_FROM_DAY IN DATE,
      P_TO_DAY IN DATE,
      P_METHOD IN VARCHAR2 DEFAULT 'SUM')
      RETURN NUMBER;
   FUNCTION MATH_CORR_API(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_FROM_DAY IN DATE,
      P_TO_DAY IN DATE,
      P_METHOD IN VARCHAR2 DEFAULT 'SUM')
      RETURN NUMBER;
   FUNCTION MATH_VALUE_15(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_FROM_DAY IN DATE,
      P_TO_DAY IN DATE,
      P_METHOD IN VARCHAR2 DEFAULT 'SUM')
      RETURN NUMBER;
   FUNCTION MATH_VALUE_3(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_FROM_DAY IN DATE,
      P_TO_DAY IN DATE,
      P_METHOD IN VARCHAR2 DEFAULT 'SUM')
      RETURN NUMBER;
   FUNCTION MATH_VALUE_4(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_FROM_DAY IN DATE,
      P_TO_DAY IN DATE,
      P_METHOD IN VARCHAR2 DEFAULT 'SUM')
      RETURN NUMBER;
   FUNCTION MATH_VALUE_8(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_FROM_DAY IN DATE,
      P_TO_DAY IN DATE,
      P_METHOD IN VARCHAR2 DEFAULT 'SUM')
      RETURN NUMBER;
   FUNCTION NET_VOL_AVAIL(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN NUMBER;
   FUNCTION PRESS(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN NUMBER;
   FUNCTION VALUE_5(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN NUMBER;
   FUNCTION AVG_OIL_IN_BLST_WATER(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN NUMBER;
   FUNCTION BSW_VOL(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN NUMBER;
   FUNCTION DILUENT_CUT(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN NUMBER;
   FUNCTION MATH_AVG_OIL_IN_BLST_WATER(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_FROM_DAY IN DATE,
      P_TO_DAY IN DATE,
      P_METHOD IN VARCHAR2 DEFAULT 'SUM')
      RETURN NUMBER;
   FUNCTION MATH_GRS_MASS(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_FROM_DAY IN DATE,
      P_TO_DAY IN DATE,
      P_METHOD IN VARCHAR2 DEFAULT 'SUM')
      RETURN NUMBER;
   FUNCTION MATH_TANK_LEVEL_PCT(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_FROM_DAY IN DATE,
      P_TO_DAY IN DATE,
      P_METHOD IN VARCHAR2 DEFAULT 'SUM')
      RETURN NUMBER;
   FUNCTION MATH_VALUE_11(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_FROM_DAY IN DATE,
      P_TO_DAY IN DATE,
      P_METHOD IN VARCHAR2 DEFAULT 'SUM')
      RETURN NUMBER;
   FUNCTION MATH_VALUE_6(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_FROM_DAY IN DATE,
      P_TO_DAY IN DATE,
      P_METHOD IN VARCHAR2 DEFAULT 'SUM')
      RETURN NUMBER;
   FUNCTION NET_MASS(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN NUMBER;
   FUNCTION NEXT_DAYTIME(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_NUM_ROWS IN NUMBER DEFAULT 1)
      RETURN DATE;
   FUNCTION PREV_EQUAL_DAYTIME(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_NUM_ROWS IN NUMBER DEFAULT 1)
      RETURN DATE;
   FUNCTION TEXT_7(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN VARCHAR2;
   FUNCTION TEXT_8(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN VARCHAR2;
   FUNCTION WAT_DIP_LEVEL(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN NUMBER;
   FUNCTION COMMENTS(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN VARCHAR2;
   FUNCTION COUNT_ROWS(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_FROM_DAY IN DATE,
      P_TO_DAY IN DATE)
      RETURN NUMBER;
   FUNCTION EVENT_DAY(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN DATE;
   FUNCTION MATH_DILUENT_CUT(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_FROM_DAY IN DATE,
      P_TO_DAY IN DATE,
      P_METHOD IN VARCHAR2 DEFAULT 'SUM')
      RETURN NUMBER;
   FUNCTION MATH_VALUE_1(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_FROM_DAY IN DATE,
      P_TO_DAY IN DATE,
      P_METHOD IN VARCHAR2 DEFAULT 'SUM')
      RETURN NUMBER;
   FUNCTION MATH_VALUE_5(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_FROM_DAY IN DATE,
      P_TO_DAY IN DATE,
      P_METHOD IN VARCHAR2 DEFAULT 'SUM')
      RETURN NUMBER;
   FUNCTION MATH_VALUE_7(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_FROM_DAY IN DATE,
      P_TO_DAY IN DATE,
      P_METHOD IN VARCHAR2 DEFAULT 'SUM')
      RETURN NUMBER;
   FUNCTION MATH_VALUE_9(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_FROM_DAY IN DATE,
      P_TO_DAY IN DATE,
      P_METHOD IN VARCHAR2 DEFAULT 'SUM')
      RETURN NUMBER;
   FUNCTION NET_VOL(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN NUMBER;
   FUNCTION NEXT_EQUAL_DAYTIME(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_NUM_ROWS IN NUMBER DEFAULT 1)
      RETURN DATE;
   FUNCTION TANK_LEVEL_PCT(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN NUMBER;
   FUNCTION TEMP(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN NUMBER;
   FUNCTION TEXT_6(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN VARCHAR2;
   FUNCTION TEXT_9(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN VARCHAR2;
   FUNCTION UTC_DAYTIME(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN DATE;
   FUNCTION VALUE_12(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN NUMBER;
   FUNCTION VALUE_6(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN NUMBER;
   FUNCTION VCF(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN NUMBER;
   FUNCTION DATE_2(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN DATE;
   FUNCTION MATH_LIQ_DIP_LEVEL(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_FROM_DAY IN DATE,
      P_TO_DAY IN DATE,
      P_METHOD IN VARCHAR2 DEFAULT 'SUM')
      RETURN NUMBER;
   FUNCTION MATH_MAX_OIL_IN_BLST_WATER(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_FROM_DAY IN DATE,
      P_TO_DAY IN DATE,
      P_METHOD IN VARCHAR2 DEFAULT 'SUM')
      RETURN NUMBER;
   FUNCTION MATH_NET_MASS(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_FROM_DAY IN DATE,
      P_TO_DAY IN DATE,
      P_METHOD IN VARCHAR2 DEFAULT 'SUM')
      RETURN NUMBER;
   FUNCTION MATH_NET_MASS_AVAIL(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_FROM_DAY IN DATE,
      P_TO_DAY IN DATE,
      P_METHOD IN VARCHAR2 DEFAULT 'SUM')
      RETURN NUMBER;
   FUNCTION MATH_RUN_TEMP(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_FROM_DAY IN DATE,
      P_TO_DAY IN DATE,
      P_METHOD IN VARCHAR2 DEFAULT 'SUM')
      RETURN NUMBER;
   FUNCTION MATH_VALUE_13(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_FROM_DAY IN DATE,
      P_TO_DAY IN DATE,
      P_METHOD IN VARCHAR2 DEFAULT 'SUM')
      RETURN NUMBER;
   FUNCTION PREV_DAYTIME(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_NUM_ROWS IN NUMBER DEFAULT 1)
      RETURN DATE;
   FUNCTION RECORD_STATUS(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN VARCHAR2;
   FUNCTION TANK_LEVEL_M3(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN NUMBER;
   FUNCTION VALUE_1(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN NUMBER;
   FUNCTION VALUE_15(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN NUMBER;
   FUNCTION WATER_VOL(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN NUMBER;
   FUNCTION APPROVAL_DATE(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN DATE;
   FUNCTION DENSITY(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN NUMBER;
   FUNCTION LIQ_DIP_LEVEL(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN NUMBER;
   FUNCTION MATH_DENSITY_STOR(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_FROM_DAY IN DATE,
      P_TO_DAY IN DATE,
      P_METHOD IN VARCHAR2 DEFAULT 'SUM')
      RETURN NUMBER;
   FUNCTION MATH_DENSITY_VAP(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_FROM_DAY IN DATE,
      P_TO_DAY IN DATE,
      P_METHOD IN VARCHAR2 DEFAULT 'SUM')
      RETURN NUMBER;
   FUNCTION MATH_NET_VOL_AVAIL(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_FROM_DAY IN DATE,
      P_TO_DAY IN DATE,
      P_METHOD IN VARCHAR2 DEFAULT 'SUM')
      RETURN NUMBER;
   FUNCTION MATH_OBS_DENSITY(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_FROM_DAY IN DATE,
      P_TO_DAY IN DATE,
      P_METHOD IN VARCHAR2 DEFAULT 'SUM')
      RETURN NUMBER;
   FUNCTION MATH_PRESS(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_FROM_DAY IN DATE,
      P_TO_DAY IN DATE,
      P_METHOD IN VARCHAR2 DEFAULT 'SUM')
      RETURN NUMBER;
   FUNCTION MATH_VALUE_12(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_FROM_DAY IN DATE,
      P_TO_DAY IN DATE,
      P_METHOD IN VARCHAR2 DEFAULT 'SUM')
      RETURN NUMBER;
   FUNCTION MATH_VALUE_2(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_FROM_DAY IN DATE,
      P_TO_DAY IN DATE,
      P_METHOD IN VARCHAR2 DEFAULT 'SUM')
      RETURN NUMBER;
   FUNCTION MATH_VCF(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_FROM_DAY IN DATE,
      P_TO_DAY IN DATE,
      P_METHOD IN VARCHAR2 DEFAULT 'SUM')
      RETURN NUMBER;
      TYPE REC_ROW_BY_PK IS RECORD (
         OBJECT_ID VARCHAR2 (32) ,
         MEASUREMENT_EVENT_TYPE VARCHAR2 (32) ,
         DAYTIME  DATE ,
         EVENT_DAY  DATE ,
         GRS_DIP_LEVEL NUMBER ,
         WAT_DIP_LEVEL NUMBER ,
         TEMP NUMBER ,
         LINE_TEMP NUMBER ,
         PRESS NUMBER ,
         DENSITY NUMBER ,
         DENSITY_STOR NUMBER ,
         DENSITY_VAP NUMBER ,
         API NUMBER ,
         CORR_API NUMBER ,
         VCF NUMBER ,
         CORR_DENSITY NUMBER ,
         OBS_DENSITY NUMBER ,
         RUN_TEMP NUMBER ,
         BSW_MASS NUMBER ,
         BSW_VOL NUMBER ,
         GRS_VOL NUMBER ,
         GRS_MASS NUMBER ,
         NET_VOL NUMBER ,
         NET_MASS NUMBER ,
         NET_VOL_AVAIL NUMBER ,
         NET_MASS_AVAIL NUMBER ,
         TANK_LEVEL NUMBER ,
         TANK_LEVEL_M3 NUMBER ,
         TANK_LEVEL_PCT NUMBER ,
         MAX_OIL_IN_BLST_WATER NUMBER ,
         AVG_OIL_IN_BLST_WATER NUMBER ,
         WATER_VOL NUMBER ,
         GRS_VOL_NSC NUMBER ,
         CLOSING_ENERGY NUMBER ,
         LIQ_DIP_LEVEL NUMBER ,
         USE_BSW VARCHAR2 (1) ,
         COMMENTS VARCHAR2 (2000) ,
         VALUE_1 NUMBER ,
         VALUE_2 NUMBER ,
         VALUE_3 NUMBER ,
         VALUE_4 NUMBER ,
         VALUE_5 NUMBER ,
         VALUE_6 NUMBER ,
         VALUE_7 NUMBER ,
         VALUE_8 NUMBER ,
         VALUE_9 NUMBER ,
         VALUE_10 NUMBER ,
         TEXT_1 VARCHAR2 (16) ,
         TEXT_2 VARCHAR2 (32) ,
         TEXT_3 VARCHAR2 (240) ,
         TEXT_4 VARCHAR2 (2000) ,
         DATE_1  DATE ,
         RECORD_STATUS VARCHAR2 (1) ,
         CREATED_BY VARCHAR2 (30) ,
         CREATED_DATE  DATE ,
         LAST_UPDATED_BY VARCHAR2 (30) ,
         LAST_UPDATED_DATE  DATE ,
         REV_NO NUMBER ,
         REV_TEXT VARCHAR2 (2000) ,
         APPROVAL_BY VARCHAR2 (30) ,
         APPROVAL_DATE  DATE ,
         APPROVAL_STATE VARCHAR2 (1) ,
         REC_ID VARCHAR2 (32) ,
         DILUENT_CUT NUMBER ,
         DATE_2  DATE ,
         UTC_DAYTIME  DATE ,
         VALUE_11 NUMBER ,
         VALUE_12 NUMBER ,
         VALUE_13 NUMBER ,
         VALUE_14 NUMBER ,
         VALUE_15 NUMBER ,
         TEXT_5 VARCHAR2 (240) ,
         TEXT_6 VARCHAR2 (240) ,
         TEXT_7 VARCHAR2 (240) ,
         TEXT_8 VARCHAR2 (240) ,
         TEXT_9 VARCHAR2 (240) ,
         TEXT_10 VARCHAR2 (240)  );
   FUNCTION ROW_BY_PK(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN REC_ROW_BY_PK;
      TYPE REC_ROW_BY_REL_OPERATOR IS RECORD (
         OBJECT_ID VARCHAR2 (32) ,
         MEASUREMENT_EVENT_TYPE VARCHAR2 (32) ,
         DAYTIME  DATE ,
         EVENT_DAY  DATE ,
         GRS_DIP_LEVEL NUMBER ,
         WAT_DIP_LEVEL NUMBER ,
         TEMP NUMBER ,
         LINE_TEMP NUMBER ,
         PRESS NUMBER ,
         DENSITY NUMBER ,
         DENSITY_STOR NUMBER ,
         DENSITY_VAP NUMBER ,
         API NUMBER ,
         CORR_API NUMBER ,
         VCF NUMBER ,
         CORR_DENSITY NUMBER ,
         OBS_DENSITY NUMBER ,
         RUN_TEMP NUMBER ,
         BSW_MASS NUMBER ,
         BSW_VOL NUMBER ,
         GRS_VOL NUMBER ,
         GRS_MASS NUMBER ,
         NET_VOL NUMBER ,
         NET_MASS NUMBER ,
         NET_VOL_AVAIL NUMBER ,
         NET_MASS_AVAIL NUMBER ,
         TANK_LEVEL NUMBER ,
         TANK_LEVEL_M3 NUMBER ,
         TANK_LEVEL_PCT NUMBER ,
         MAX_OIL_IN_BLST_WATER NUMBER ,
         AVG_OIL_IN_BLST_WATER NUMBER ,
         WATER_VOL NUMBER ,
         GRS_VOL_NSC NUMBER ,
         CLOSING_ENERGY NUMBER ,
         LIQ_DIP_LEVEL NUMBER ,
         USE_BSW VARCHAR2 (1) ,
         COMMENTS VARCHAR2 (2000) ,
         VALUE_1 NUMBER ,
         VALUE_2 NUMBER ,
         VALUE_3 NUMBER ,
         VALUE_4 NUMBER ,
         VALUE_5 NUMBER ,
         VALUE_6 NUMBER ,
         VALUE_7 NUMBER ,
         VALUE_8 NUMBER ,
         VALUE_9 NUMBER ,
         VALUE_10 NUMBER ,
         TEXT_1 VARCHAR2 (16) ,
         TEXT_2 VARCHAR2 (32) ,
         TEXT_3 VARCHAR2 (240) ,
         TEXT_4 VARCHAR2 (2000) ,
         DATE_1  DATE ,
         RECORD_STATUS VARCHAR2 (1) ,
         CREATED_BY VARCHAR2 (30) ,
         CREATED_DATE  DATE ,
         LAST_UPDATED_BY VARCHAR2 (30) ,
         LAST_UPDATED_DATE  DATE ,
         REV_NO NUMBER ,
         REV_TEXT VARCHAR2 (2000) ,
         APPROVAL_BY VARCHAR2 (30) ,
         APPROVAL_DATE  DATE ,
         APPROVAL_STATE VARCHAR2 (1) ,
         REC_ID VARCHAR2 (32) ,
         DILUENT_CUT NUMBER ,
         DATE_2  DATE ,
         UTC_DAYTIME  DATE ,
         VALUE_11 NUMBER ,
         VALUE_12 NUMBER ,
         VALUE_13 NUMBER ,
         VALUE_14 NUMBER ,
         VALUE_15 NUMBER ,
         TEXT_5 VARCHAR2 (240) ,
         TEXT_6 VARCHAR2 (240) ,
         TEXT_7 VARCHAR2 (240) ,
         TEXT_8 VARCHAR2 (240) ,
         TEXT_9 VARCHAR2 (240) ,
         TEXT_10 VARCHAR2 (240)  );
   FUNCTION ROW_BY_REL_OPERATOR(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN REC_ROW_BY_REL_OPERATOR;
   FUNCTION TANK_LEVEL(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN NUMBER;
   FUNCTION TEXT_5(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN VARCHAR2;
   FUNCTION USE_BSW(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN VARCHAR2;
   FUNCTION VALUE_13(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN NUMBER;
   FUNCTION VALUE_2(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN NUMBER;
   FUNCTION VALUE_3(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN NUMBER;
   FUNCTION VALUE_4(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN NUMBER;
   FUNCTION BSW_MASS(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN NUMBER;
   FUNCTION GRS_MASS(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN NUMBER;
   FUNCTION GRS_VOL(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN NUMBER;
   FUNCTION LINE_TEMP(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN NUMBER;
   FUNCTION MATH_BSW_MASS(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_FROM_DAY IN DATE,
      P_TO_DAY IN DATE,
      P_METHOD IN VARCHAR2 DEFAULT 'SUM')
      RETURN NUMBER;
   FUNCTION MATH_CORR_DENSITY(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_FROM_DAY IN DATE,
      P_TO_DAY IN DATE,
      P_METHOD IN VARCHAR2 DEFAULT 'SUM')
      RETURN NUMBER;
   FUNCTION MATH_GRS_VOL_NSC(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_FROM_DAY IN DATE,
      P_TO_DAY IN DATE,
      P_METHOD IN VARCHAR2 DEFAULT 'SUM')
      RETURN NUMBER;
   FUNCTION MATH_LINE_TEMP(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_FROM_DAY IN DATE,
      P_TO_DAY IN DATE,
      P_METHOD IN VARCHAR2 DEFAULT 'SUM')
      RETURN NUMBER;
   FUNCTION MATH_TANK_LEVEL(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_FROM_DAY IN DATE,
      P_TO_DAY IN DATE,
      P_METHOD IN VARCHAR2 DEFAULT 'SUM')
      RETURN NUMBER;
   FUNCTION MATH_TEMP(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_FROM_DAY IN DATE,
      P_TO_DAY IN DATE,
      P_METHOD IN VARCHAR2 DEFAULT 'SUM')
      RETURN NUMBER;
   FUNCTION MATH_WATER_VOL(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_FROM_DAY IN DATE,
      P_TO_DAY IN DATE,
      P_METHOD IN VARCHAR2 DEFAULT 'SUM')
      RETURN NUMBER;
   FUNCTION MATH_WAT_DIP_LEVEL(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_FROM_DAY IN DATE,
      P_TO_DAY IN DATE,
      P_METHOD IN VARCHAR2 DEFAULT 'SUM')
      RETURN NUMBER;
   FUNCTION REC_ID(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN VARCHAR2;
   FUNCTION RUN_TEMP(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN NUMBER;
   FUNCTION TEXT_1(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN VARCHAR2;
   FUNCTION TEXT_2(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN VARCHAR2;
   FUNCTION VALUE_7(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN NUMBER;
   FUNCTION VALUE_9(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN NUMBER;
   FUNCTION API(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN NUMBER;
   FUNCTION CLOSING_ENERGY(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN NUMBER;
   FUNCTION CORR_API(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN NUMBER;
   FUNCTION DATE_1(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN DATE;
   FUNCTION DENSITY_VAP(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN NUMBER;
   FUNCTION GRS_VOL_NSC(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN NUMBER;
   FUNCTION MATH_GRS_VOL(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_FROM_DAY IN DATE,
      P_TO_DAY IN DATE,
      P_METHOD IN VARCHAR2 DEFAULT 'SUM')
      RETURN NUMBER;
   FUNCTION MATH_NET_VOL(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_FROM_DAY IN DATE,
      P_TO_DAY IN DATE,
      P_METHOD IN VARCHAR2 DEFAULT 'SUM')
      RETURN NUMBER;
   FUNCTION MATH_VALUE_10(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_FROM_DAY IN DATE,
      P_TO_DAY IN DATE,
      P_METHOD IN VARCHAR2 DEFAULT 'SUM')
      RETURN NUMBER;
   FUNCTION MATH_VALUE_14(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_FROM_DAY IN DATE,
      P_TO_DAY IN DATE,
      P_METHOD IN VARCHAR2 DEFAULT 'SUM')
      RETURN NUMBER;
   FUNCTION MAX_OIL_IN_BLST_WATER(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN NUMBER;
   FUNCTION NET_MASS_AVAIL(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN NUMBER;
   FUNCTION TEXT_10(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN VARCHAR2;
   FUNCTION VALUE_10(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN NUMBER;
   FUNCTION VALUE_11(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN NUMBER;
   FUNCTION VALUE_14(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN NUMBER;
   FUNCTION VALUE_8(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN NUMBER;

END RP_TANK_MEASUREMENT;

/



CREATE or REPLACE PACKAGE BODY RP_TANK_MEASUREMENT
IS

   FUNCTION CORR_DENSITY(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN NUMBER
   IS
      ret_value   NUMBER ;
   BEGIN
      ret_value := EC_TANK_MEASUREMENT.CORR_DENSITY      (
         P_OBJECT_ID,
         P_MEASUREMENT_EVENT_TYPE,
         P_DAYTIME,
         P_COMPARE_OPER );
         RETURN ret_value;
   END CORR_DENSITY;
   FUNCTION MATH_API(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_FROM_DAY IN DATE,
      P_TO_DAY IN DATE,
      P_METHOD IN VARCHAR2 DEFAULT 'SUM')
      RETURN NUMBER
   IS
      ret_value   NUMBER ;
   BEGIN
      ret_value := EC_TANK_MEASUREMENT.MATH_API      (
         P_OBJECT_ID,
         P_MEASUREMENT_EVENT_TYPE,
         P_FROM_DAY,
         P_TO_DAY,
         P_METHOD );
         RETURN ret_value;
   END MATH_API;
   FUNCTION MATH_DENSITY(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_FROM_DAY IN DATE,
      P_TO_DAY IN DATE,
      P_METHOD IN VARCHAR2 DEFAULT 'SUM')
      RETURN NUMBER
   IS
      ret_value   NUMBER ;
   BEGIN
      ret_value := EC_TANK_MEASUREMENT.MATH_DENSITY      (
         P_OBJECT_ID,
         P_MEASUREMENT_EVENT_TYPE,
         P_FROM_DAY,
         P_TO_DAY,
         P_METHOD );
         RETURN ret_value;
   END MATH_DENSITY;
   FUNCTION MATH_GRS_DIP_LEVEL(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_FROM_DAY IN DATE,
      P_TO_DAY IN DATE,
      P_METHOD IN VARCHAR2 DEFAULT 'SUM')
      RETURN NUMBER
   IS
      ret_value   NUMBER ;
   BEGIN
      ret_value := EC_TANK_MEASUREMENT.MATH_GRS_DIP_LEVEL      (
         P_OBJECT_ID,
         P_MEASUREMENT_EVENT_TYPE,
         P_FROM_DAY,
         P_TO_DAY,
         P_METHOD );
         RETURN ret_value;
   END MATH_GRS_DIP_LEVEL;
   FUNCTION MATH_TANK_LEVEL_M3(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_FROM_DAY IN DATE,
      P_TO_DAY IN DATE,
      P_METHOD IN VARCHAR2 DEFAULT 'SUM')
      RETURN NUMBER
   IS
      ret_value   NUMBER ;
   BEGIN
      ret_value := EC_TANK_MEASUREMENT.MATH_TANK_LEVEL_M3      (
         P_OBJECT_ID,
         P_MEASUREMENT_EVENT_TYPE,
         P_FROM_DAY,
         P_TO_DAY,
         P_METHOD );
         RETURN ret_value;
   END MATH_TANK_LEVEL_M3;
   FUNCTION OBS_DENSITY(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN NUMBER
   IS
      ret_value   NUMBER ;
   BEGIN
      ret_value := EC_TANK_MEASUREMENT.OBS_DENSITY      (
         P_OBJECT_ID,
         P_MEASUREMENT_EVENT_TYPE,
         P_DAYTIME,
         P_COMPARE_OPER );
         RETURN ret_value;
   END OBS_DENSITY;
   FUNCTION TEXT_3(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2 (240) ;
   BEGIN
      ret_value := EC_TANK_MEASUREMENT.TEXT_3      (
         P_OBJECT_ID,
         P_MEASUREMENT_EVENT_TYPE,
         P_DAYTIME,
         P_COMPARE_OPER );
         RETURN ret_value;
   END TEXT_3;
   FUNCTION TEXT_4(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2 (2000) ;
   BEGIN
      ret_value := EC_TANK_MEASUREMENT.TEXT_4      (
         P_OBJECT_ID,
         P_MEASUREMENT_EVENT_TYPE,
         P_DAYTIME,
         P_COMPARE_OPER );
         RETURN ret_value;
   END TEXT_4;
   FUNCTION APPROVAL_BY(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2 (30) ;
   BEGIN
      ret_value := EC_TANK_MEASUREMENT.APPROVAL_BY      (
         P_OBJECT_ID,
         P_MEASUREMENT_EVENT_TYPE,
         P_DAYTIME,
         P_COMPARE_OPER );
         RETURN ret_value;
   END APPROVAL_BY;
   FUNCTION APPROVAL_STATE(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2 (1) ;
   BEGIN
      ret_value := EC_TANK_MEASUREMENT.APPROVAL_STATE      (
         P_OBJECT_ID,
         P_MEASUREMENT_EVENT_TYPE,
         P_DAYTIME,
         P_COMPARE_OPER );
         RETURN ret_value;
   END APPROVAL_STATE;
   FUNCTION DENSITY_STOR(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN NUMBER
   IS
      ret_value   NUMBER ;
   BEGIN
      ret_value := EC_TANK_MEASUREMENT.DENSITY_STOR      (
         P_OBJECT_ID,
         P_MEASUREMENT_EVENT_TYPE,
         P_DAYTIME,
         P_COMPARE_OPER );
         RETURN ret_value;
   END DENSITY_STOR;
   FUNCTION GRS_DIP_LEVEL(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN NUMBER
   IS
      ret_value   NUMBER ;
   BEGIN
      ret_value := EC_TANK_MEASUREMENT.GRS_DIP_LEVEL      (
         P_OBJECT_ID,
         P_MEASUREMENT_EVENT_TYPE,
         P_DAYTIME,
         P_COMPARE_OPER );
         RETURN ret_value;
   END GRS_DIP_LEVEL;
   FUNCTION MATH_BSW_VOL(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_FROM_DAY IN DATE,
      P_TO_DAY IN DATE,
      P_METHOD IN VARCHAR2 DEFAULT 'SUM')
      RETURN NUMBER
   IS
      ret_value   NUMBER ;
   BEGIN
      ret_value := EC_TANK_MEASUREMENT.MATH_BSW_VOL      (
         P_OBJECT_ID,
         P_MEASUREMENT_EVENT_TYPE,
         P_FROM_DAY,
         P_TO_DAY,
         P_METHOD );
         RETURN ret_value;
   END MATH_BSW_VOL;
   FUNCTION MATH_CLOSING_ENERGY(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_FROM_DAY IN DATE,
      P_TO_DAY IN DATE,
      P_METHOD IN VARCHAR2 DEFAULT 'SUM')
      RETURN NUMBER
   IS
      ret_value   NUMBER ;
   BEGIN
      ret_value := EC_TANK_MEASUREMENT.MATH_CLOSING_ENERGY      (
         P_OBJECT_ID,
         P_MEASUREMENT_EVENT_TYPE,
         P_FROM_DAY,
         P_TO_DAY,
         P_METHOD );
         RETURN ret_value;
   END MATH_CLOSING_ENERGY;
   FUNCTION MATH_CORR_API(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_FROM_DAY IN DATE,
      P_TO_DAY IN DATE,
      P_METHOD IN VARCHAR2 DEFAULT 'SUM')
      RETURN NUMBER
   IS
      ret_value   NUMBER ;
   BEGIN
      ret_value := EC_TANK_MEASUREMENT.MATH_CORR_API      (
         P_OBJECT_ID,
         P_MEASUREMENT_EVENT_TYPE,
         P_FROM_DAY,
         P_TO_DAY,
         P_METHOD );
         RETURN ret_value;
   END MATH_CORR_API;
   FUNCTION MATH_VALUE_15(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_FROM_DAY IN DATE,
      P_TO_DAY IN DATE,
      P_METHOD IN VARCHAR2 DEFAULT 'SUM')
      RETURN NUMBER
   IS
      ret_value   NUMBER ;
   BEGIN
      ret_value := EC_TANK_MEASUREMENT.MATH_VALUE_15      (
         P_OBJECT_ID,
         P_MEASUREMENT_EVENT_TYPE,
         P_FROM_DAY,
         P_TO_DAY,
         P_METHOD );
         RETURN ret_value;
   END MATH_VALUE_15;
   FUNCTION MATH_VALUE_3(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_FROM_DAY IN DATE,
      P_TO_DAY IN DATE,
      P_METHOD IN VARCHAR2 DEFAULT 'SUM')
      RETURN NUMBER
   IS
      ret_value   NUMBER ;
   BEGIN
      ret_value := EC_TANK_MEASUREMENT.MATH_VALUE_3      (
         P_OBJECT_ID,
         P_MEASUREMENT_EVENT_TYPE,
         P_FROM_DAY,
         P_TO_DAY,
         P_METHOD );
         RETURN ret_value;
   END MATH_VALUE_3;
   FUNCTION MATH_VALUE_4(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_FROM_DAY IN DATE,
      P_TO_DAY IN DATE,
      P_METHOD IN VARCHAR2 DEFAULT 'SUM')
      RETURN NUMBER
   IS
      ret_value   NUMBER ;
   BEGIN
      ret_value := EC_TANK_MEASUREMENT.MATH_VALUE_4      (
         P_OBJECT_ID,
         P_MEASUREMENT_EVENT_TYPE,
         P_FROM_DAY,
         P_TO_DAY,
         P_METHOD );
         RETURN ret_value;
   END MATH_VALUE_4;
   FUNCTION MATH_VALUE_8(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_FROM_DAY IN DATE,
      P_TO_DAY IN DATE,
      P_METHOD IN VARCHAR2 DEFAULT 'SUM')
      RETURN NUMBER
   IS
      ret_value   NUMBER ;
   BEGIN
      ret_value := EC_TANK_MEASUREMENT.MATH_VALUE_8      (
         P_OBJECT_ID,
         P_MEASUREMENT_EVENT_TYPE,
         P_FROM_DAY,
         P_TO_DAY,
         P_METHOD );
         RETURN ret_value;
   END MATH_VALUE_8;
   FUNCTION NET_VOL_AVAIL(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN NUMBER
   IS
      ret_value   NUMBER ;
   BEGIN
      ret_value := EC_TANK_MEASUREMENT.NET_VOL_AVAIL      (
         P_OBJECT_ID,
         P_MEASUREMENT_EVENT_TYPE,
         P_DAYTIME,
         P_COMPARE_OPER );
         RETURN ret_value;
   END NET_VOL_AVAIL;
   FUNCTION PRESS(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN NUMBER
   IS
      ret_value   NUMBER ;
   BEGIN
      ret_value := EC_TANK_MEASUREMENT.PRESS      (
         P_OBJECT_ID,
         P_MEASUREMENT_EVENT_TYPE,
         P_DAYTIME,
         P_COMPARE_OPER );
         RETURN ret_value;
   END PRESS;
   FUNCTION VALUE_5(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN NUMBER
   IS
      ret_value   NUMBER ;
   BEGIN
      ret_value := EC_TANK_MEASUREMENT.VALUE_5      (
         P_OBJECT_ID,
         P_MEASUREMENT_EVENT_TYPE,
         P_DAYTIME,
         P_COMPARE_OPER );
         RETURN ret_value;
   END VALUE_5;
   FUNCTION AVG_OIL_IN_BLST_WATER(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN NUMBER
   IS
      ret_value   NUMBER ;
   BEGIN
      ret_value := EC_TANK_MEASUREMENT.AVG_OIL_IN_BLST_WATER      (
         P_OBJECT_ID,
         P_MEASUREMENT_EVENT_TYPE,
         P_DAYTIME,
         P_COMPARE_OPER );
         RETURN ret_value;
   END AVG_OIL_IN_BLST_WATER;
   FUNCTION BSW_VOL(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN NUMBER
   IS
      ret_value   NUMBER ;
   BEGIN
      ret_value := EC_TANK_MEASUREMENT.BSW_VOL      (
         P_OBJECT_ID,
         P_MEASUREMENT_EVENT_TYPE,
         P_DAYTIME,
         P_COMPARE_OPER );
         RETURN ret_value;
   END BSW_VOL;
   FUNCTION DILUENT_CUT(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN NUMBER
   IS
      ret_value   NUMBER ;
   BEGIN
      ret_value := EC_TANK_MEASUREMENT.DILUENT_CUT      (
         P_OBJECT_ID,
         P_MEASUREMENT_EVENT_TYPE,
         P_DAYTIME,
         P_COMPARE_OPER );
         RETURN ret_value;
   END DILUENT_CUT;
   FUNCTION MATH_AVG_OIL_IN_BLST_WATER(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_FROM_DAY IN DATE,
      P_TO_DAY IN DATE,
      P_METHOD IN VARCHAR2 DEFAULT 'SUM')
      RETURN NUMBER
   IS
      ret_value   NUMBER ;
   BEGIN
      ret_value := EC_TANK_MEASUREMENT.MATH_AVG_OIL_IN_BLST_WATER      (
         P_OBJECT_ID,
         P_MEASUREMENT_EVENT_TYPE,
         P_FROM_DAY,
         P_TO_DAY,
         P_METHOD );
         RETURN ret_value;
   END MATH_AVG_OIL_IN_BLST_WATER;
   FUNCTION MATH_GRS_MASS(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_FROM_DAY IN DATE,
      P_TO_DAY IN DATE,
      P_METHOD IN VARCHAR2 DEFAULT 'SUM')
      RETURN NUMBER
   IS
      ret_value   NUMBER ;
   BEGIN
      ret_value := EC_TANK_MEASUREMENT.MATH_GRS_MASS      (
         P_OBJECT_ID,
         P_MEASUREMENT_EVENT_TYPE,
         P_FROM_DAY,
         P_TO_DAY,
         P_METHOD );
         RETURN ret_value;
   END MATH_GRS_MASS;
   FUNCTION MATH_TANK_LEVEL_PCT(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_FROM_DAY IN DATE,
      P_TO_DAY IN DATE,
      P_METHOD IN VARCHAR2 DEFAULT 'SUM')
      RETURN NUMBER
   IS
      ret_value   NUMBER ;
   BEGIN
      ret_value := EC_TANK_MEASUREMENT.MATH_TANK_LEVEL_PCT      (
         P_OBJECT_ID,
         P_MEASUREMENT_EVENT_TYPE,
         P_FROM_DAY,
         P_TO_DAY,
         P_METHOD );
         RETURN ret_value;
   END MATH_TANK_LEVEL_PCT;
   FUNCTION MATH_VALUE_11(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_FROM_DAY IN DATE,
      P_TO_DAY IN DATE,
      P_METHOD IN VARCHAR2 DEFAULT 'SUM')
      RETURN NUMBER
   IS
      ret_value   NUMBER ;
   BEGIN
      ret_value := EC_TANK_MEASUREMENT.MATH_VALUE_11      (
         P_OBJECT_ID,
         P_MEASUREMENT_EVENT_TYPE,
         P_FROM_DAY,
         P_TO_DAY,
         P_METHOD );
         RETURN ret_value;
   END MATH_VALUE_11;
   FUNCTION MATH_VALUE_6(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_FROM_DAY IN DATE,
      P_TO_DAY IN DATE,
      P_METHOD IN VARCHAR2 DEFAULT 'SUM')
      RETURN NUMBER
   IS
      ret_value   NUMBER ;
   BEGIN
      ret_value := EC_TANK_MEASUREMENT.MATH_VALUE_6      (
         P_OBJECT_ID,
         P_MEASUREMENT_EVENT_TYPE,
         P_FROM_DAY,
         P_TO_DAY,
         P_METHOD );
         RETURN ret_value;
   END MATH_VALUE_6;
   FUNCTION NET_MASS(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN NUMBER
   IS
      ret_value   NUMBER ;
   BEGIN
      ret_value := EC_TANK_MEASUREMENT.NET_MASS      (
         P_OBJECT_ID,
         P_MEASUREMENT_EVENT_TYPE,
         P_DAYTIME,
         P_COMPARE_OPER );
         RETURN ret_value;
   END NET_MASS;
   FUNCTION NEXT_DAYTIME(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_NUM_ROWS IN NUMBER DEFAULT 1)
      RETURN DATE
   IS
      ret_value    DATE ;
   BEGIN
      ret_value := EC_TANK_MEASUREMENT.NEXT_DAYTIME      (
         P_OBJECT_ID,
         P_MEASUREMENT_EVENT_TYPE,
         P_DAYTIME,
         P_NUM_ROWS );
         RETURN ret_value;
   END NEXT_DAYTIME;
   FUNCTION PREV_EQUAL_DAYTIME(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_NUM_ROWS IN NUMBER DEFAULT 1)
      RETURN DATE
   IS
      ret_value    DATE ;
   BEGIN
      ret_value := EC_TANK_MEASUREMENT.PREV_EQUAL_DAYTIME      (
         P_OBJECT_ID,
         P_MEASUREMENT_EVENT_TYPE,
         P_DAYTIME,
         P_NUM_ROWS );
         RETURN ret_value;
   END PREV_EQUAL_DAYTIME;
   FUNCTION TEXT_7(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2 (240) ;
   BEGIN
      ret_value := EC_TANK_MEASUREMENT.TEXT_7      (
         P_OBJECT_ID,
         P_MEASUREMENT_EVENT_TYPE,
         P_DAYTIME,
         P_COMPARE_OPER );
         RETURN ret_value;
   END TEXT_7;
   FUNCTION TEXT_8(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2 (240) ;
   BEGIN
      ret_value := EC_TANK_MEASUREMENT.TEXT_8      (
         P_OBJECT_ID,
         P_MEASUREMENT_EVENT_TYPE,
         P_DAYTIME,
         P_COMPARE_OPER );
         RETURN ret_value;
   END TEXT_8;
   FUNCTION WAT_DIP_LEVEL(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN NUMBER
   IS
      ret_value   NUMBER ;
   BEGIN
      ret_value := EC_TANK_MEASUREMENT.WAT_DIP_LEVEL      (
         P_OBJECT_ID,
         P_MEASUREMENT_EVENT_TYPE,
         P_DAYTIME,
         P_COMPARE_OPER );
         RETURN ret_value;
   END WAT_DIP_LEVEL;
   FUNCTION COMMENTS(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2 (2000) ;
   BEGIN
      ret_value := EC_TANK_MEASUREMENT.COMMENTS      (
         P_OBJECT_ID,
         P_MEASUREMENT_EVENT_TYPE,
         P_DAYTIME,
         P_COMPARE_OPER );
         RETURN ret_value;
   END COMMENTS;
   FUNCTION COUNT_ROWS(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_FROM_DAY IN DATE,
      P_TO_DAY IN DATE)
      RETURN NUMBER
   IS
      ret_value   NUMBER ;
   BEGIN
      ret_value := EC_TANK_MEASUREMENT.COUNT_ROWS      (
         P_OBJECT_ID,
         P_MEASUREMENT_EVENT_TYPE,
         P_FROM_DAY,
         P_TO_DAY );
         RETURN ret_value;
   END COUNT_ROWS;
   FUNCTION EVENT_DAY(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN DATE
   IS
      ret_value    DATE ;
   BEGIN
      ret_value := EC_TANK_MEASUREMENT.EVENT_DAY      (
         P_OBJECT_ID,
         P_MEASUREMENT_EVENT_TYPE,
         P_DAYTIME,
         P_COMPARE_OPER );
         RETURN ret_value;
   END EVENT_DAY;
   FUNCTION MATH_DILUENT_CUT(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_FROM_DAY IN DATE,
      P_TO_DAY IN DATE,
      P_METHOD IN VARCHAR2 DEFAULT 'SUM')
      RETURN NUMBER
   IS
      ret_value   NUMBER ;
   BEGIN
      ret_value := EC_TANK_MEASUREMENT.MATH_DILUENT_CUT      (
         P_OBJECT_ID,
         P_MEASUREMENT_EVENT_TYPE,
         P_FROM_DAY,
         P_TO_DAY,
         P_METHOD );
         RETURN ret_value;
   END MATH_DILUENT_CUT;
   FUNCTION MATH_VALUE_1(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_FROM_DAY IN DATE,
      P_TO_DAY IN DATE,
      P_METHOD IN VARCHAR2 DEFAULT 'SUM')
      RETURN NUMBER
   IS
      ret_value   NUMBER ;
   BEGIN
      ret_value := EC_TANK_MEASUREMENT.MATH_VALUE_1      (
         P_OBJECT_ID,
         P_MEASUREMENT_EVENT_TYPE,
         P_FROM_DAY,
         P_TO_DAY,
         P_METHOD );
         RETURN ret_value;
   END MATH_VALUE_1;
   FUNCTION MATH_VALUE_5(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_FROM_DAY IN DATE,
      P_TO_DAY IN DATE,
      P_METHOD IN VARCHAR2 DEFAULT 'SUM')
      RETURN NUMBER
   IS
      ret_value   NUMBER ;
   BEGIN
      ret_value := EC_TANK_MEASUREMENT.MATH_VALUE_5      (
         P_OBJECT_ID,
         P_MEASUREMENT_EVENT_TYPE,
         P_FROM_DAY,
         P_TO_DAY,
         P_METHOD );
         RETURN ret_value;
   END MATH_VALUE_5;
   FUNCTION MATH_VALUE_7(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_FROM_DAY IN DATE,
      P_TO_DAY IN DATE,
      P_METHOD IN VARCHAR2 DEFAULT 'SUM')
      RETURN NUMBER
   IS
      ret_value   NUMBER ;
   BEGIN
      ret_value := EC_TANK_MEASUREMENT.MATH_VALUE_7      (
         P_OBJECT_ID,
         P_MEASUREMENT_EVENT_TYPE,
         P_FROM_DAY,
         P_TO_DAY,
         P_METHOD );
         RETURN ret_value;
   END MATH_VALUE_7;
   FUNCTION MATH_VALUE_9(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_FROM_DAY IN DATE,
      P_TO_DAY IN DATE,
      P_METHOD IN VARCHAR2 DEFAULT 'SUM')
      RETURN NUMBER
   IS
      ret_value   NUMBER ;
   BEGIN
      ret_value := EC_TANK_MEASUREMENT.MATH_VALUE_9      (
         P_OBJECT_ID,
         P_MEASUREMENT_EVENT_TYPE,
         P_FROM_DAY,
         P_TO_DAY,
         P_METHOD );
         RETURN ret_value;
   END MATH_VALUE_9;
   FUNCTION NET_VOL(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN NUMBER
   IS
      ret_value   NUMBER ;
   BEGIN
      ret_value := EC_TANK_MEASUREMENT.NET_VOL      (
         P_OBJECT_ID,
         P_MEASUREMENT_EVENT_TYPE,
         P_DAYTIME,
         P_COMPARE_OPER );
         RETURN ret_value;
   END NET_VOL;
   FUNCTION NEXT_EQUAL_DAYTIME(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_NUM_ROWS IN NUMBER DEFAULT 1)
      RETURN DATE
   IS
      ret_value    DATE ;
   BEGIN
      ret_value := EC_TANK_MEASUREMENT.NEXT_EQUAL_DAYTIME      (
         P_OBJECT_ID,
         P_MEASUREMENT_EVENT_TYPE,
         P_DAYTIME,
         P_NUM_ROWS );
         RETURN ret_value;
   END NEXT_EQUAL_DAYTIME;
   FUNCTION TANK_LEVEL_PCT(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN NUMBER
   IS
      ret_value   NUMBER ;
   BEGIN
      ret_value := EC_TANK_MEASUREMENT.TANK_LEVEL_PCT      (
         P_OBJECT_ID,
         P_MEASUREMENT_EVENT_TYPE,
         P_DAYTIME,
         P_COMPARE_OPER );
         RETURN ret_value;
   END TANK_LEVEL_PCT;
   FUNCTION TEMP(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN NUMBER
   IS
      ret_value   NUMBER ;
   BEGIN
      ret_value := EC_TANK_MEASUREMENT.TEMP      (
         P_OBJECT_ID,
         P_MEASUREMENT_EVENT_TYPE,
         P_DAYTIME,
         P_COMPARE_OPER );
         RETURN ret_value;
   END TEMP;
   FUNCTION TEXT_6(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2 (240) ;
   BEGIN
      ret_value := EC_TANK_MEASUREMENT.TEXT_6      (
         P_OBJECT_ID,
         P_MEASUREMENT_EVENT_TYPE,
         P_DAYTIME,
         P_COMPARE_OPER );
         RETURN ret_value;
   END TEXT_6;
   FUNCTION TEXT_9(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2 (240) ;
   BEGIN
      ret_value := EC_TANK_MEASUREMENT.TEXT_9      (
         P_OBJECT_ID,
         P_MEASUREMENT_EVENT_TYPE,
         P_DAYTIME,
         P_COMPARE_OPER );
         RETURN ret_value;
   END TEXT_9;
   FUNCTION UTC_DAYTIME(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN DATE
   IS
      ret_value    DATE ;
   BEGIN
      ret_value := EC_TANK_MEASUREMENT.UTC_DAYTIME      (
         P_OBJECT_ID,
         P_MEASUREMENT_EVENT_TYPE,
         P_DAYTIME,
         P_COMPARE_OPER );
         RETURN ret_value;
   END UTC_DAYTIME;
   FUNCTION VALUE_12(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN NUMBER
   IS
      ret_value   NUMBER ;
   BEGIN
      ret_value := EC_TANK_MEASUREMENT.VALUE_12      (
         P_OBJECT_ID,
         P_MEASUREMENT_EVENT_TYPE,
         P_DAYTIME,
         P_COMPARE_OPER );
         RETURN ret_value;
   END VALUE_12;
   FUNCTION VALUE_6(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN NUMBER
   IS
      ret_value   NUMBER ;
   BEGIN
      ret_value := EC_TANK_MEASUREMENT.VALUE_6      (
         P_OBJECT_ID,
         P_MEASUREMENT_EVENT_TYPE,
         P_DAYTIME,
         P_COMPARE_OPER );
         RETURN ret_value;
   END VALUE_6;
   FUNCTION VCF(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN NUMBER
   IS
      ret_value   NUMBER ;
   BEGIN
      ret_value := EC_TANK_MEASUREMENT.VCF      (
         P_OBJECT_ID,
         P_MEASUREMENT_EVENT_TYPE,
         P_DAYTIME,
         P_COMPARE_OPER );
         RETURN ret_value;
   END VCF;
   FUNCTION DATE_2(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN DATE
   IS
      ret_value    DATE ;
   BEGIN
      ret_value := EC_TANK_MEASUREMENT.DATE_2      (
         P_OBJECT_ID,
         P_MEASUREMENT_EVENT_TYPE,
         P_DAYTIME,
         P_COMPARE_OPER );
         RETURN ret_value;
   END DATE_2;
   FUNCTION MATH_LIQ_DIP_LEVEL(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_FROM_DAY IN DATE,
      P_TO_DAY IN DATE,
      P_METHOD IN VARCHAR2 DEFAULT 'SUM')
      RETURN NUMBER
   IS
      ret_value   NUMBER ;
   BEGIN
      ret_value := EC_TANK_MEASUREMENT.MATH_LIQ_DIP_LEVEL      (
         P_OBJECT_ID,
         P_MEASUREMENT_EVENT_TYPE,
         P_FROM_DAY,
         P_TO_DAY,
         P_METHOD );
         RETURN ret_value;
   END MATH_LIQ_DIP_LEVEL;
   FUNCTION MATH_MAX_OIL_IN_BLST_WATER(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_FROM_DAY IN DATE,
      P_TO_DAY IN DATE,
      P_METHOD IN VARCHAR2 DEFAULT 'SUM')
      RETURN NUMBER
   IS
      ret_value   NUMBER ;
   BEGIN
      ret_value := EC_TANK_MEASUREMENT.MATH_MAX_OIL_IN_BLST_WATER      (
         P_OBJECT_ID,
         P_MEASUREMENT_EVENT_TYPE,
         P_FROM_DAY,
         P_TO_DAY,
         P_METHOD );
         RETURN ret_value;
   END MATH_MAX_OIL_IN_BLST_WATER;
   FUNCTION MATH_NET_MASS(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_FROM_DAY IN DATE,
      P_TO_DAY IN DATE,
      P_METHOD IN VARCHAR2 DEFAULT 'SUM')
      RETURN NUMBER
   IS
      ret_value   NUMBER ;
   BEGIN
      ret_value := EC_TANK_MEASUREMENT.MATH_NET_MASS      (
         P_OBJECT_ID,
         P_MEASUREMENT_EVENT_TYPE,
         P_FROM_DAY,
         P_TO_DAY,
         P_METHOD );
         RETURN ret_value;
   END MATH_NET_MASS;
   FUNCTION MATH_NET_MASS_AVAIL(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_FROM_DAY IN DATE,
      P_TO_DAY IN DATE,
      P_METHOD IN VARCHAR2 DEFAULT 'SUM')
      RETURN NUMBER
   IS
      ret_value   NUMBER ;
   BEGIN
      ret_value := EC_TANK_MEASUREMENT.MATH_NET_MASS_AVAIL      (
         P_OBJECT_ID,
         P_MEASUREMENT_EVENT_TYPE,
         P_FROM_DAY,
         P_TO_DAY,
         P_METHOD );
         RETURN ret_value;
   END MATH_NET_MASS_AVAIL;
   FUNCTION MATH_RUN_TEMP(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_FROM_DAY IN DATE,
      P_TO_DAY IN DATE,
      P_METHOD IN VARCHAR2 DEFAULT 'SUM')
      RETURN NUMBER
   IS
      ret_value   NUMBER ;
   BEGIN
      ret_value := EC_TANK_MEASUREMENT.MATH_RUN_TEMP      (
         P_OBJECT_ID,
         P_MEASUREMENT_EVENT_TYPE,
         P_FROM_DAY,
         P_TO_DAY,
         P_METHOD );
         RETURN ret_value;
   END MATH_RUN_TEMP;
   FUNCTION MATH_VALUE_13(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_FROM_DAY IN DATE,
      P_TO_DAY IN DATE,
      P_METHOD IN VARCHAR2 DEFAULT 'SUM')
      RETURN NUMBER
   IS
      ret_value   NUMBER ;
   BEGIN
      ret_value := EC_TANK_MEASUREMENT.MATH_VALUE_13      (
         P_OBJECT_ID,
         P_MEASUREMENT_EVENT_TYPE,
         P_FROM_DAY,
         P_TO_DAY,
         P_METHOD );
         RETURN ret_value;
   END MATH_VALUE_13;
   FUNCTION PREV_DAYTIME(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_NUM_ROWS IN NUMBER DEFAULT 1)
      RETURN DATE
   IS
      ret_value    DATE ;
   BEGIN
      ret_value := EC_TANK_MEASUREMENT.PREV_DAYTIME      (
         P_OBJECT_ID,
         P_MEASUREMENT_EVENT_TYPE,
         P_DAYTIME,
         P_NUM_ROWS );
         RETURN ret_value;
   END PREV_DAYTIME;
   FUNCTION RECORD_STATUS(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2 (1) ;
   BEGIN
      ret_value := EC_TANK_MEASUREMENT.RECORD_STATUS      (
         P_OBJECT_ID,
         P_MEASUREMENT_EVENT_TYPE,
         P_DAYTIME,
         P_COMPARE_OPER );
         RETURN ret_value;
   END RECORD_STATUS;
   FUNCTION TANK_LEVEL_M3(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN NUMBER
   IS
      ret_value   NUMBER ;
   BEGIN
      ret_value := EC_TANK_MEASUREMENT.TANK_LEVEL_M3      (
         P_OBJECT_ID,
         P_MEASUREMENT_EVENT_TYPE,
         P_DAYTIME,
         P_COMPARE_OPER );
         RETURN ret_value;
   END TANK_LEVEL_M3;
   FUNCTION VALUE_1(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN NUMBER
   IS
      ret_value   NUMBER ;
   BEGIN
      ret_value := EC_TANK_MEASUREMENT.VALUE_1      (
         P_OBJECT_ID,
         P_MEASUREMENT_EVENT_TYPE,
         P_DAYTIME,
         P_COMPARE_OPER );
         RETURN ret_value;
   END VALUE_1;
   FUNCTION VALUE_15(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN NUMBER
   IS
      ret_value   NUMBER ;
   BEGIN
      ret_value := EC_TANK_MEASUREMENT.VALUE_15      (
         P_OBJECT_ID,
         P_MEASUREMENT_EVENT_TYPE,
         P_DAYTIME,
         P_COMPARE_OPER );
         RETURN ret_value;
   END VALUE_15;
   FUNCTION WATER_VOL(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN NUMBER
   IS
      ret_value   NUMBER ;
   BEGIN
      ret_value := EC_TANK_MEASUREMENT.WATER_VOL      (
         P_OBJECT_ID,
         P_MEASUREMENT_EVENT_TYPE,
         P_DAYTIME,
         P_COMPARE_OPER );
         RETURN ret_value;
   END WATER_VOL;
   FUNCTION APPROVAL_DATE(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN DATE
   IS
      ret_value    DATE ;
   BEGIN
      ret_value := EC_TANK_MEASUREMENT.APPROVAL_DATE      (
         P_OBJECT_ID,
         P_MEASUREMENT_EVENT_TYPE,
         P_DAYTIME,
         P_COMPARE_OPER );
         RETURN ret_value;
   END APPROVAL_DATE;
   FUNCTION DENSITY(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN NUMBER
   IS
      ret_value   NUMBER ;
   BEGIN
      ret_value := EC_TANK_MEASUREMENT.DENSITY      (
         P_OBJECT_ID,
         P_MEASUREMENT_EVENT_TYPE,
         P_DAYTIME,
         P_COMPARE_OPER );
         RETURN ret_value;
   END DENSITY;
   FUNCTION LIQ_DIP_LEVEL(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN NUMBER
   IS
      ret_value   NUMBER ;
   BEGIN
      ret_value := EC_TANK_MEASUREMENT.LIQ_DIP_LEVEL      (
         P_OBJECT_ID,
         P_MEASUREMENT_EVENT_TYPE,
         P_DAYTIME,
         P_COMPARE_OPER );
         RETURN ret_value;
   END LIQ_DIP_LEVEL;
   FUNCTION MATH_DENSITY_STOR(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_FROM_DAY IN DATE,
      P_TO_DAY IN DATE,
      P_METHOD IN VARCHAR2 DEFAULT 'SUM')
      RETURN NUMBER
   IS
      ret_value   NUMBER ;
   BEGIN
      ret_value := EC_TANK_MEASUREMENT.MATH_DENSITY_STOR      (
         P_OBJECT_ID,
         P_MEASUREMENT_EVENT_TYPE,
         P_FROM_DAY,
         P_TO_DAY,
         P_METHOD );
         RETURN ret_value;
   END MATH_DENSITY_STOR;
   FUNCTION MATH_DENSITY_VAP(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_FROM_DAY IN DATE,
      P_TO_DAY IN DATE,
      P_METHOD IN VARCHAR2 DEFAULT 'SUM')
      RETURN NUMBER
   IS
      ret_value   NUMBER ;
   BEGIN
      ret_value := EC_TANK_MEASUREMENT.MATH_DENSITY_VAP      (
         P_OBJECT_ID,
         P_MEASUREMENT_EVENT_TYPE,
         P_FROM_DAY,
         P_TO_DAY,
         P_METHOD );
         RETURN ret_value;
   END MATH_DENSITY_VAP;
   FUNCTION MATH_NET_VOL_AVAIL(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_FROM_DAY IN DATE,
      P_TO_DAY IN DATE,
      P_METHOD IN VARCHAR2 DEFAULT 'SUM')
      RETURN NUMBER
   IS
      ret_value   NUMBER ;
   BEGIN
      ret_value := EC_TANK_MEASUREMENT.MATH_NET_VOL_AVAIL      (
         P_OBJECT_ID,
         P_MEASUREMENT_EVENT_TYPE,
         P_FROM_DAY,
         P_TO_DAY,
         P_METHOD );
         RETURN ret_value;
   END MATH_NET_VOL_AVAIL;
   FUNCTION MATH_OBS_DENSITY(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_FROM_DAY IN DATE,
      P_TO_DAY IN DATE,
      P_METHOD IN VARCHAR2 DEFAULT 'SUM')
      RETURN NUMBER
   IS
      ret_value   NUMBER ;
   BEGIN
      ret_value := EC_TANK_MEASUREMENT.MATH_OBS_DENSITY      (
         P_OBJECT_ID,
         P_MEASUREMENT_EVENT_TYPE,
         P_FROM_DAY,
         P_TO_DAY,
         P_METHOD );
         RETURN ret_value;
   END MATH_OBS_DENSITY;
   FUNCTION MATH_PRESS(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_FROM_DAY IN DATE,
      P_TO_DAY IN DATE,
      P_METHOD IN VARCHAR2 DEFAULT 'SUM')
      RETURN NUMBER
   IS
      ret_value   NUMBER ;
   BEGIN
      ret_value := EC_TANK_MEASUREMENT.MATH_PRESS      (
         P_OBJECT_ID,
         P_MEASUREMENT_EVENT_TYPE,
         P_FROM_DAY,
         P_TO_DAY,
         P_METHOD );
         RETURN ret_value;
   END MATH_PRESS;
   FUNCTION MATH_VALUE_12(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_FROM_DAY IN DATE,
      P_TO_DAY IN DATE,
      P_METHOD IN VARCHAR2 DEFAULT 'SUM')
      RETURN NUMBER
   IS
      ret_value   NUMBER ;
   BEGIN
      ret_value := EC_TANK_MEASUREMENT.MATH_VALUE_12      (
         P_OBJECT_ID,
         P_MEASUREMENT_EVENT_TYPE,
         P_FROM_DAY,
         P_TO_DAY,
         P_METHOD );
         RETURN ret_value;
   END MATH_VALUE_12;
   FUNCTION MATH_VALUE_2(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_FROM_DAY IN DATE,
      P_TO_DAY IN DATE,
      P_METHOD IN VARCHAR2 DEFAULT 'SUM')
      RETURN NUMBER
   IS
      ret_value   NUMBER ;
   BEGIN
      ret_value := EC_TANK_MEASUREMENT.MATH_VALUE_2      (
         P_OBJECT_ID,
         P_MEASUREMENT_EVENT_TYPE,
         P_FROM_DAY,
         P_TO_DAY,
         P_METHOD );
         RETURN ret_value;
   END MATH_VALUE_2;
   FUNCTION MATH_VCF(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_FROM_DAY IN DATE,
      P_TO_DAY IN DATE,
      P_METHOD IN VARCHAR2 DEFAULT 'SUM')
      RETURN NUMBER
   IS
      ret_value   NUMBER ;
   BEGIN
      ret_value := EC_TANK_MEASUREMENT.MATH_VCF      (
         P_OBJECT_ID,
         P_MEASUREMENT_EVENT_TYPE,
         P_FROM_DAY,
         P_TO_DAY,
         P_METHOD );
         RETURN ret_value;
   END MATH_VCF;
   FUNCTION ROW_BY_PK(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN REC_ROW_BY_PK
   IS
      ret_value    REC_ROW_BY_PK ;
   BEGIN
      ret_value := EC_TANK_MEASUREMENT.ROW_BY_PK      (
         P_OBJECT_ID,
         P_MEASUREMENT_EVENT_TYPE,
         P_DAYTIME,
         P_COMPARE_OPER );
         RETURN ret_value;
   END ROW_BY_PK;
   FUNCTION ROW_BY_REL_OPERATOR(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN REC_ROW_BY_REL_OPERATOR
   IS
      ret_value    REC_ROW_BY_REL_OPERATOR ;
   BEGIN
      ret_value := EC_TANK_MEASUREMENT.ROW_BY_REL_OPERATOR      (
         P_OBJECT_ID,
         P_MEASUREMENT_EVENT_TYPE,
         P_DAYTIME,
         P_COMPARE_OPER );
         RETURN ret_value;
   END ROW_BY_REL_OPERATOR;
   FUNCTION TANK_LEVEL(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN NUMBER
   IS
      ret_value   NUMBER ;
   BEGIN
      ret_value := EC_TANK_MEASUREMENT.TANK_LEVEL      (
         P_OBJECT_ID,
         P_MEASUREMENT_EVENT_TYPE,
         P_DAYTIME,
         P_COMPARE_OPER );
         RETURN ret_value;
   END TANK_LEVEL;
   FUNCTION TEXT_5(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2 (240) ;
   BEGIN
      ret_value := EC_TANK_MEASUREMENT.TEXT_5      (
         P_OBJECT_ID,
         P_MEASUREMENT_EVENT_TYPE,
         P_DAYTIME,
         P_COMPARE_OPER );
         RETURN ret_value;
   END TEXT_5;
   FUNCTION USE_BSW(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2 (1) ;
   BEGIN
      ret_value := EC_TANK_MEASUREMENT.USE_BSW      (
         P_OBJECT_ID,
         P_MEASUREMENT_EVENT_TYPE,
         P_DAYTIME,
         P_COMPARE_OPER );
         RETURN ret_value;
   END USE_BSW;
   FUNCTION VALUE_13(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN NUMBER
   IS
      ret_value   NUMBER ;
   BEGIN
      ret_value := EC_TANK_MEASUREMENT.VALUE_13      (
         P_OBJECT_ID,
         P_MEASUREMENT_EVENT_TYPE,
         P_DAYTIME,
         P_COMPARE_OPER );
         RETURN ret_value;
   END VALUE_13;
   FUNCTION VALUE_2(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN NUMBER
   IS
      ret_value   NUMBER ;
   BEGIN
      ret_value := EC_TANK_MEASUREMENT.VALUE_2      (
         P_OBJECT_ID,
         P_MEASUREMENT_EVENT_TYPE,
         P_DAYTIME,
         P_COMPARE_OPER );
         RETURN ret_value;
   END VALUE_2;
   FUNCTION VALUE_3(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN NUMBER
   IS
      ret_value   NUMBER ;
   BEGIN
      ret_value := EC_TANK_MEASUREMENT.VALUE_3      (
         P_OBJECT_ID,
         P_MEASUREMENT_EVENT_TYPE,
         P_DAYTIME,
         P_COMPARE_OPER );
         RETURN ret_value;
   END VALUE_3;
   FUNCTION VALUE_4(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN NUMBER
   IS
      ret_value   NUMBER ;
   BEGIN
      ret_value := EC_TANK_MEASUREMENT.VALUE_4      (
         P_OBJECT_ID,
         P_MEASUREMENT_EVENT_TYPE,
         P_DAYTIME,
         P_COMPARE_OPER );
         RETURN ret_value;
   END VALUE_4;
   FUNCTION BSW_MASS(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN NUMBER
   IS
      ret_value   NUMBER ;
   BEGIN
      ret_value := EC_TANK_MEASUREMENT.BSW_MASS      (
         P_OBJECT_ID,
         P_MEASUREMENT_EVENT_TYPE,
         P_DAYTIME,
         P_COMPARE_OPER );
         RETURN ret_value;
   END BSW_MASS;
   FUNCTION GRS_MASS(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN NUMBER
   IS
      ret_value   NUMBER ;
   BEGIN
      ret_value := EC_TANK_MEASUREMENT.GRS_MASS      (
         P_OBJECT_ID,
         P_MEASUREMENT_EVENT_TYPE,
         P_DAYTIME,
         P_COMPARE_OPER );
         RETURN ret_value;
   END GRS_MASS;
   FUNCTION GRS_VOL(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN NUMBER
   IS
      ret_value   NUMBER ;
   BEGIN
      ret_value := EC_TANK_MEASUREMENT.GRS_VOL      (
         P_OBJECT_ID,
         P_MEASUREMENT_EVENT_TYPE,
         P_DAYTIME,
         P_COMPARE_OPER );
         RETURN ret_value;
   END GRS_VOL;
   FUNCTION LINE_TEMP(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN NUMBER
   IS
      ret_value   NUMBER ;
   BEGIN
      ret_value := EC_TANK_MEASUREMENT.LINE_TEMP      (
         P_OBJECT_ID,
         P_MEASUREMENT_EVENT_TYPE,
         P_DAYTIME,
         P_COMPARE_OPER );
         RETURN ret_value;
   END LINE_TEMP;
   FUNCTION MATH_BSW_MASS(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_FROM_DAY IN DATE,
      P_TO_DAY IN DATE,
      P_METHOD IN VARCHAR2 DEFAULT 'SUM')
      RETURN NUMBER
   IS
      ret_value   NUMBER ;
   BEGIN
      ret_value := EC_TANK_MEASUREMENT.MATH_BSW_MASS      (
         P_OBJECT_ID,
         P_MEASUREMENT_EVENT_TYPE,
         P_FROM_DAY,
         P_TO_DAY,
         P_METHOD );
         RETURN ret_value;
   END MATH_BSW_MASS;
   FUNCTION MATH_CORR_DENSITY(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_FROM_DAY IN DATE,
      P_TO_DAY IN DATE,
      P_METHOD IN VARCHAR2 DEFAULT 'SUM')
      RETURN NUMBER
   IS
      ret_value   NUMBER ;
   BEGIN
      ret_value := EC_TANK_MEASUREMENT.MATH_CORR_DENSITY      (
         P_OBJECT_ID,
         P_MEASUREMENT_EVENT_TYPE,
         P_FROM_DAY,
         P_TO_DAY,
         P_METHOD );
         RETURN ret_value;
   END MATH_CORR_DENSITY;
   FUNCTION MATH_GRS_VOL_NSC(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_FROM_DAY IN DATE,
      P_TO_DAY IN DATE,
      P_METHOD IN VARCHAR2 DEFAULT 'SUM')
      RETURN NUMBER
   IS
      ret_value   NUMBER ;
   BEGIN
      ret_value := EC_TANK_MEASUREMENT.MATH_GRS_VOL_NSC      (
         P_OBJECT_ID,
         P_MEASUREMENT_EVENT_TYPE,
         P_FROM_DAY,
         P_TO_DAY,
         P_METHOD );
         RETURN ret_value;
   END MATH_GRS_VOL_NSC;
   FUNCTION MATH_LINE_TEMP(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_FROM_DAY IN DATE,
      P_TO_DAY IN DATE,
      P_METHOD IN VARCHAR2 DEFAULT 'SUM')
      RETURN NUMBER
   IS
      ret_value   NUMBER ;
   BEGIN
      ret_value := EC_TANK_MEASUREMENT.MATH_LINE_TEMP      (
         P_OBJECT_ID,
         P_MEASUREMENT_EVENT_TYPE,
         P_FROM_DAY,
         P_TO_DAY,
         P_METHOD );
         RETURN ret_value;
   END MATH_LINE_TEMP;
   FUNCTION MATH_TANK_LEVEL(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_FROM_DAY IN DATE,
      P_TO_DAY IN DATE,
      P_METHOD IN VARCHAR2 DEFAULT 'SUM')
      RETURN NUMBER
   IS
      ret_value   NUMBER ;
   BEGIN
      ret_value := EC_TANK_MEASUREMENT.MATH_TANK_LEVEL      (
         P_OBJECT_ID,
         P_MEASUREMENT_EVENT_TYPE,
         P_FROM_DAY,
         P_TO_DAY,
         P_METHOD );
         RETURN ret_value;
   END MATH_TANK_LEVEL;
   FUNCTION MATH_TEMP(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_FROM_DAY IN DATE,
      P_TO_DAY IN DATE,
      P_METHOD IN VARCHAR2 DEFAULT 'SUM')
      RETURN NUMBER
   IS
      ret_value   NUMBER ;
   BEGIN
      ret_value := EC_TANK_MEASUREMENT.MATH_TEMP      (
         P_OBJECT_ID,
         P_MEASUREMENT_EVENT_TYPE,
         P_FROM_DAY,
         P_TO_DAY,
         P_METHOD );
         RETURN ret_value;
   END MATH_TEMP;
   FUNCTION MATH_WATER_VOL(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_FROM_DAY IN DATE,
      P_TO_DAY IN DATE,
      P_METHOD IN VARCHAR2 DEFAULT 'SUM')
      RETURN NUMBER
   IS
      ret_value   NUMBER ;
   BEGIN
      ret_value := EC_TANK_MEASUREMENT.MATH_WATER_VOL      (
         P_OBJECT_ID,
         P_MEASUREMENT_EVENT_TYPE,
         P_FROM_DAY,
         P_TO_DAY,
         P_METHOD );
         RETURN ret_value;
   END MATH_WATER_VOL;
   FUNCTION MATH_WAT_DIP_LEVEL(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_FROM_DAY IN DATE,
      P_TO_DAY IN DATE,
      P_METHOD IN VARCHAR2 DEFAULT 'SUM')
      RETURN NUMBER
   IS
      ret_value   NUMBER ;
   BEGIN
      ret_value := EC_TANK_MEASUREMENT.MATH_WAT_DIP_LEVEL      (
         P_OBJECT_ID,
         P_MEASUREMENT_EVENT_TYPE,
         P_FROM_DAY,
         P_TO_DAY,
         P_METHOD );
         RETURN ret_value;
   END MATH_WAT_DIP_LEVEL;
   FUNCTION REC_ID(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2 (32) ;
   BEGIN
      ret_value := EC_TANK_MEASUREMENT.REC_ID      (
         P_OBJECT_ID,
         P_MEASUREMENT_EVENT_TYPE,
         P_DAYTIME,
         P_COMPARE_OPER );
         RETURN ret_value;
   END REC_ID;
   FUNCTION RUN_TEMP(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN NUMBER
   IS
      ret_value   NUMBER ;
   BEGIN
      ret_value := EC_TANK_MEASUREMENT.RUN_TEMP      (
         P_OBJECT_ID,
         P_MEASUREMENT_EVENT_TYPE,
         P_DAYTIME,
         P_COMPARE_OPER );
         RETURN ret_value;
   END RUN_TEMP;
   FUNCTION TEXT_1(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2 (16) ;
   BEGIN
      ret_value := EC_TANK_MEASUREMENT.TEXT_1      (
         P_OBJECT_ID,
         P_MEASUREMENT_EVENT_TYPE,
         P_DAYTIME,
         P_COMPARE_OPER );
         RETURN ret_value;
   END TEXT_1;
   FUNCTION TEXT_2(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2 (32) ;
   BEGIN
      ret_value := EC_TANK_MEASUREMENT.TEXT_2      (
         P_OBJECT_ID,
         P_MEASUREMENT_EVENT_TYPE,
         P_DAYTIME,
         P_COMPARE_OPER );
         RETURN ret_value;
   END TEXT_2;
   FUNCTION VALUE_7(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN NUMBER
   IS
      ret_value   NUMBER ;
   BEGIN
      ret_value := EC_TANK_MEASUREMENT.VALUE_7      (
         P_OBJECT_ID,
         P_MEASUREMENT_EVENT_TYPE,
         P_DAYTIME,
         P_COMPARE_OPER );
         RETURN ret_value;
   END VALUE_7;
   FUNCTION VALUE_9(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN NUMBER
   IS
      ret_value   NUMBER ;
   BEGIN
      ret_value := EC_TANK_MEASUREMENT.VALUE_9      (
         P_OBJECT_ID,
         P_MEASUREMENT_EVENT_TYPE,
         P_DAYTIME,
         P_COMPARE_OPER );
         RETURN ret_value;
   END VALUE_9;
   FUNCTION API(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN NUMBER
   IS
      ret_value   NUMBER ;
   BEGIN
      ret_value := EC_TANK_MEASUREMENT.API      (
         P_OBJECT_ID,
         P_MEASUREMENT_EVENT_TYPE,
         P_DAYTIME,
         P_COMPARE_OPER );
         RETURN ret_value;
   END API;
   FUNCTION CLOSING_ENERGY(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN NUMBER
   IS
      ret_value   NUMBER ;
   BEGIN
      ret_value := EC_TANK_MEASUREMENT.CLOSING_ENERGY      (
         P_OBJECT_ID,
         P_MEASUREMENT_EVENT_TYPE,
         P_DAYTIME,
         P_COMPARE_OPER );
         RETURN ret_value;
   END CLOSING_ENERGY;
   FUNCTION CORR_API(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN NUMBER
   IS
      ret_value   NUMBER ;
   BEGIN
      ret_value := EC_TANK_MEASUREMENT.CORR_API      (
         P_OBJECT_ID,
         P_MEASUREMENT_EVENT_TYPE,
         P_DAYTIME,
         P_COMPARE_OPER );
         RETURN ret_value;
   END CORR_API;
   FUNCTION DATE_1(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN DATE
   IS
      ret_value    DATE ;
   BEGIN
      ret_value := EC_TANK_MEASUREMENT.DATE_1      (
         P_OBJECT_ID,
         P_MEASUREMENT_EVENT_TYPE,
         P_DAYTIME,
         P_COMPARE_OPER );
         RETURN ret_value;
   END DATE_1;
   FUNCTION DENSITY_VAP(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN NUMBER
   IS
      ret_value   NUMBER ;
   BEGIN
      ret_value := EC_TANK_MEASUREMENT.DENSITY_VAP      (
         P_OBJECT_ID,
         P_MEASUREMENT_EVENT_TYPE,
         P_DAYTIME,
         P_COMPARE_OPER );
         RETURN ret_value;
   END DENSITY_VAP;
   FUNCTION GRS_VOL_NSC(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN NUMBER
   IS
      ret_value   NUMBER ;
   BEGIN
      ret_value := EC_TANK_MEASUREMENT.GRS_VOL_NSC      (
         P_OBJECT_ID,
         P_MEASUREMENT_EVENT_TYPE,
         P_DAYTIME,
         P_COMPARE_OPER );
         RETURN ret_value;
   END GRS_VOL_NSC;
   FUNCTION MATH_GRS_VOL(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_FROM_DAY IN DATE,
      P_TO_DAY IN DATE,
      P_METHOD IN VARCHAR2 DEFAULT 'SUM')
      RETURN NUMBER
   IS
      ret_value   NUMBER ;
   BEGIN
      ret_value := EC_TANK_MEASUREMENT.MATH_GRS_VOL      (
         P_OBJECT_ID,
         P_MEASUREMENT_EVENT_TYPE,
         P_FROM_DAY,
         P_TO_DAY,
         P_METHOD );
         RETURN ret_value;
   END MATH_GRS_VOL;
   FUNCTION MATH_NET_VOL(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_FROM_DAY IN DATE,
      P_TO_DAY IN DATE,
      P_METHOD IN VARCHAR2 DEFAULT 'SUM')
      RETURN NUMBER
   IS
      ret_value   NUMBER ;
   BEGIN
      ret_value := EC_TANK_MEASUREMENT.MATH_NET_VOL      (
         P_OBJECT_ID,
         P_MEASUREMENT_EVENT_TYPE,
         P_FROM_DAY,
         P_TO_DAY,
         P_METHOD );
         RETURN ret_value;
   END MATH_NET_VOL;
   FUNCTION MATH_VALUE_10(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_FROM_DAY IN DATE,
      P_TO_DAY IN DATE,
      P_METHOD IN VARCHAR2 DEFAULT 'SUM')
      RETURN NUMBER
   IS
      ret_value   NUMBER ;
   BEGIN
      ret_value := EC_TANK_MEASUREMENT.MATH_VALUE_10      (
         P_OBJECT_ID,
         P_MEASUREMENT_EVENT_TYPE,
         P_FROM_DAY,
         P_TO_DAY,
         P_METHOD );
         RETURN ret_value;
   END MATH_VALUE_10;
   FUNCTION MATH_VALUE_14(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_FROM_DAY IN DATE,
      P_TO_DAY IN DATE,
      P_METHOD IN VARCHAR2 DEFAULT 'SUM')
      RETURN NUMBER
   IS
      ret_value   NUMBER ;
   BEGIN
      ret_value := EC_TANK_MEASUREMENT.MATH_VALUE_14      (
         P_OBJECT_ID,
         P_MEASUREMENT_EVENT_TYPE,
         P_FROM_DAY,
         P_TO_DAY,
         P_METHOD );
         RETURN ret_value;
   END MATH_VALUE_14;
   FUNCTION MAX_OIL_IN_BLST_WATER(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN NUMBER
   IS
      ret_value   NUMBER ;
   BEGIN
      ret_value := EC_TANK_MEASUREMENT.MAX_OIL_IN_BLST_WATER      (
         P_OBJECT_ID,
         P_MEASUREMENT_EVENT_TYPE,
         P_DAYTIME,
         P_COMPARE_OPER );
         RETURN ret_value;
   END MAX_OIL_IN_BLST_WATER;
   FUNCTION NET_MASS_AVAIL(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN NUMBER
   IS
      ret_value   NUMBER ;
   BEGIN
      ret_value := EC_TANK_MEASUREMENT.NET_MASS_AVAIL      (
         P_OBJECT_ID,
         P_MEASUREMENT_EVENT_TYPE,
         P_DAYTIME,
         P_COMPARE_OPER );
         RETURN ret_value;
   END NET_MASS_AVAIL;
   FUNCTION TEXT_10(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2 (240) ;
   BEGIN
      ret_value := EC_TANK_MEASUREMENT.TEXT_10      (
         P_OBJECT_ID,
         P_MEASUREMENT_EVENT_TYPE,
         P_DAYTIME,
         P_COMPARE_OPER );
         RETURN ret_value;
   END TEXT_10;
   FUNCTION VALUE_10(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN NUMBER
   IS
      ret_value   NUMBER ;
   BEGIN
      ret_value := EC_TANK_MEASUREMENT.VALUE_10      (
         P_OBJECT_ID,
         P_MEASUREMENT_EVENT_TYPE,
         P_DAYTIME,
         P_COMPARE_OPER );
         RETURN ret_value;
   END VALUE_10;
   FUNCTION VALUE_11(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN NUMBER
   IS
      ret_value   NUMBER ;
   BEGIN
      ret_value := EC_TANK_MEASUREMENT.VALUE_11      (
         P_OBJECT_ID,
         P_MEASUREMENT_EVENT_TYPE,
         P_DAYTIME,
         P_COMPARE_OPER );
         RETURN ret_value;
   END VALUE_11;
   FUNCTION VALUE_14(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN NUMBER
   IS
      ret_value   NUMBER ;
   BEGIN
      ret_value := EC_TANK_MEASUREMENT.VALUE_14      (
         P_OBJECT_ID,
         P_MEASUREMENT_EVENT_TYPE,
         P_DAYTIME,
         P_COMPARE_OPER );
         RETURN ret_value;
   END VALUE_14;
   FUNCTION VALUE_8(
      P_OBJECT_ID IN VARCHAR2,
      P_MEASUREMENT_EVENT_TYPE IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN NUMBER
   IS
      ret_value   NUMBER ;
   BEGIN
      ret_value := EC_TANK_MEASUREMENT.VALUE_8      (
         P_OBJECT_ID,
         P_MEASUREMENT_EVENT_TYPE,
         P_DAYTIME,
         P_COMPARE_OPER );
         RETURN ret_value;
   END VALUE_8;

END RP_TANK_MEASUREMENT;

/
--GRANT EXECUTE ON ECKERNEL_WST.RP_TANK_MEASUREMENT TO REPORT_ROLE_XXX;



 -- FINISH PKG_GEN_PKGS.sf_get_functions at:05/07/2019 06.08.31 AM


