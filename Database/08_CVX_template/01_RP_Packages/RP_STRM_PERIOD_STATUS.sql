
 -- START PKG_GEN_PKGS.sf_get_functions at:05/07/2019 06.31.30 AM


CREATE or REPLACE PACKAGE RP_STRM_PERIOD_STATUS
IS

   FUNCTION WATER(
      P_OBJECT_ID IN VARCHAR2,
      P_TIME_SPAN IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN NUMBER;
   FUNCTION WATER_FRAC(
      P_OBJECT_ID IN VARCHAR2,
      P_TIME_SPAN IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN NUMBER;
   FUNCTION APPROVAL_BY(
      P_OBJECT_ID IN VARCHAR2,
      P_TIME_SPAN IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN VARCHAR2;
   FUNCTION APPROVAL_STATE(
      P_OBJECT_ID IN VARCHAR2,
      P_TIME_SPAN IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN VARCHAR2;
   FUNCTION AVG_MASS_FLOW_RATE(
      P_OBJECT_ID IN VARCHAR2,
      P_TIME_SPAN IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN NUMBER;
   FUNCTION AVG_MASS_RATE(
      P_OBJECT_ID IN VARCHAR2,
      P_TIME_SPAN IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN NUMBER;
   FUNCTION ENERGY(
      P_OBJECT_ID IN VARCHAR2,
      P_TIME_SPAN IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN NUMBER;
   FUNCTION FLOW_RATE_MASS(
      P_OBJECT_ID IN VARCHAR2,
      P_TIME_SPAN IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN NUMBER;
   FUNCTION FLOW_RATE_VOL(
      P_OBJECT_ID IN VARCHAR2,
      P_TIME_SPAN IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN NUMBER;
   FUNCTION MASS_TOTALISER(
      P_OBJECT_ID IN VARCHAR2,
      P_TIME_SPAN IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN NUMBER;
   FUNCTION PRESS(
      P_OBJECT_ID IN VARCHAR2,
      P_TIME_SPAN IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN NUMBER;
   FUNCTION NET_MASS(
      P_OBJECT_ID IN VARCHAR2,
      P_TIME_SPAN IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN NUMBER;
   FUNCTION NEXT_DAYTIME(
      P_OBJECT_ID IN VARCHAR2,
      P_TIME_SPAN IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_NUM_ROWS IN NUMBER DEFAULT 1)
      RETURN DATE;
   FUNCTION PREV_EQUAL_DAYTIME(
      P_OBJECT_ID IN VARCHAR2,
      P_TIME_SPAN IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_NUM_ROWS IN NUMBER DEFAULT 1)
      RETURN DATE;
   FUNCTION COMMENTS(
      P_OBJECT_ID IN VARCHAR2,
      P_TIME_SPAN IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN VARCHAR2;
   FUNCTION GCV(
      P_OBJECT_ID IN VARCHAR2,
      P_TIME_SPAN IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN NUMBER;
   FUNCTION GRS_DENSITY(
      P_OBJECT_ID IN VARCHAR2,
      P_TIME_SPAN IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN NUMBER;
   FUNCTION NET_VOL(
      P_OBJECT_ID IN VARCHAR2,
      P_TIME_SPAN IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN NUMBER;
   FUNCTION NEXT_EQUAL_DAYTIME(
      P_OBJECT_ID IN VARCHAR2,
      P_TIME_SPAN IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_NUM_ROWS IN NUMBER DEFAULT 1)
      RETURN DATE;
   FUNCTION PERIOD_NAME(
      P_OBJECT_ID IN VARCHAR2,
      P_TIME_SPAN IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN VARCHAR2;
   FUNCTION TEMP(
      P_OBJECT_ID IN VARCHAR2,
      P_TIME_SPAN IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN NUMBER;
   FUNCTION MOL_WT(
      P_OBJECT_ID IN VARCHAR2,
      P_TIME_SPAN IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN NUMBER;
   FUNCTION PREV_DAYTIME(
      P_OBJECT_ID IN VARCHAR2,
      P_TIME_SPAN IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_NUM_ROWS IN NUMBER DEFAULT 1)
      RETURN DATE;
   FUNCTION RECORD_STATUS(
      P_OBJECT_ID IN VARCHAR2,
      P_TIME_SPAN IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN VARCHAR2;
   FUNCTION APPROVAL_DATE(
      P_OBJECT_ID IN VARCHAR2,
      P_TIME_SPAN IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN DATE;
   FUNCTION AVG_NET_VOL_RATE(
      P_OBJECT_ID IN VARCHAR2,
      P_TIME_SPAN IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN NUMBER;
   FUNCTION DENSITY(
      P_OBJECT_ID IN VARCHAR2,
      P_TIME_SPAN IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN NUMBER;
   FUNCTION ENERGY_TOTALISER(
      P_OBJECT_ID IN VARCHAR2,
      P_TIME_SPAN IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN NUMBER;
   FUNCTION NET_VOL_TOTALISER(
      P_OBJECT_ID IN VARCHAR2,
      P_TIME_SPAN IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN NUMBER;
      TYPE REC_ROW_BY_PK IS RECORD (
         OBJECT_ID VARCHAR2 (32) ,
         TIME_SPAN VARCHAR2 (16) ,
         DAYTIME  DATE ,
         PERIOD_NAME VARCHAR2 (16) ,
         DAY  DATE ,
         GRS_MASS NUMBER ,
         GRS_VOL NUMBER ,
         NET_MASS NUMBER ,
         NET_VOL NUMBER ,
         ENERGY NUMBER ,
         GRS_ENERGY NUMBER ,
         GRS_DENSITY NUMBER ,
         GRS_DENSITY_KGM3 NUMBER ,
         TEMP NUMBER ,
         PRESS NUMBER ,
         DENSITY NUMBER ,
         AVG_MASS_FLOW_RATE NUMBER ,
         TTL_MASS_FLOW_RATE NUMBER ,
         ENERGY_TOTALISER NUMBER ,
         WATER_FRAC NUMBER ,
         AVG_MASS_RATE NUMBER ,
         AVG_NET_VOL_RATE NUMBER ,
         MASS_TOTALISER NUMBER ,
         NET_VOL_TOTALISER NUMBER ,
         FLOW_RATE_VOL NUMBER ,
         FLOW_RATE_MASS NUMBER ,
         GCV NUMBER ,
         MOL_WT NUMBER ,
         WATER NUMBER ,
         COMMENTS VARCHAR2 (2000) ,
         RECORD_STATUS VARCHAR2 (1) ,
         CREATED_BY VARCHAR2 (30) ,
         CREATED_DATE  DATE ,
         LAST_UPDATED_BY VARCHAR2 (30) ,
         LAST_UPDATED_DATE  DATE ,
         REV_NO NUMBER ,
         REV_TEXT VARCHAR2 (2000) ,
         APPROVAL_BY VARCHAR2 (30) ,
         APPROVAL_DATE  DATE ,
         APPROVAL_STATE VARCHAR2 (1) ,
         REC_ID VARCHAR2 (32)  );
   FUNCTION ROW_BY_PK(
      P_OBJECT_ID IN VARCHAR2,
      P_TIME_SPAN IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN REC_ROW_BY_PK;
      TYPE REC_ROW_BY_REL_OPERATOR IS RECORD (
         OBJECT_ID VARCHAR2 (32) ,
         TIME_SPAN VARCHAR2 (16) ,
         DAYTIME  DATE ,
         PERIOD_NAME VARCHAR2 (16) ,
         DAY  DATE ,
         GRS_MASS NUMBER ,
         GRS_VOL NUMBER ,
         NET_MASS NUMBER ,
         NET_VOL NUMBER ,
         ENERGY NUMBER ,
         GRS_ENERGY NUMBER ,
         GRS_DENSITY NUMBER ,
         GRS_DENSITY_KGM3 NUMBER ,
         TEMP NUMBER ,
         PRESS NUMBER ,
         DENSITY NUMBER ,
         AVG_MASS_FLOW_RATE NUMBER ,
         TTL_MASS_FLOW_RATE NUMBER ,
         ENERGY_TOTALISER NUMBER ,
         WATER_FRAC NUMBER ,
         AVG_MASS_RATE NUMBER ,
         AVG_NET_VOL_RATE NUMBER ,
         MASS_TOTALISER NUMBER ,
         NET_VOL_TOTALISER NUMBER ,
         FLOW_RATE_VOL NUMBER ,
         FLOW_RATE_MASS NUMBER ,
         GCV NUMBER ,
         MOL_WT NUMBER ,
         WATER NUMBER ,
         COMMENTS VARCHAR2 (2000) ,
         RECORD_STATUS VARCHAR2 (1) ,
         CREATED_BY VARCHAR2 (30) ,
         CREATED_DATE  DATE ,
         LAST_UPDATED_BY VARCHAR2 (30) ,
         LAST_UPDATED_DATE  DATE ,
         REV_NO NUMBER ,
         REV_TEXT VARCHAR2 (2000) ,
         APPROVAL_BY VARCHAR2 (30) ,
         APPROVAL_DATE  DATE ,
         APPROVAL_STATE VARCHAR2 (1) ,
         REC_ID VARCHAR2 (32)  );
   FUNCTION ROW_BY_REL_OPERATOR(
      P_OBJECT_ID IN VARCHAR2,
      P_TIME_SPAN IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN REC_ROW_BY_REL_OPERATOR;
   FUNCTION DAY(
      P_OBJECT_ID IN VARCHAR2,
      P_TIME_SPAN IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN DATE;
   FUNCTION GRS_DENSITY_KGM3(
      P_OBJECT_ID IN VARCHAR2,
      P_TIME_SPAN IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN NUMBER;
   FUNCTION GRS_MASS(
      P_OBJECT_ID IN VARCHAR2,
      P_TIME_SPAN IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN NUMBER;
   FUNCTION GRS_VOL(
      P_OBJECT_ID IN VARCHAR2,
      P_TIME_SPAN IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN NUMBER;
   FUNCTION REC_ID(
      P_OBJECT_ID IN VARCHAR2,
      P_TIME_SPAN IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN VARCHAR2;
   FUNCTION GRS_ENERGY(
      P_OBJECT_ID IN VARCHAR2,
      P_TIME_SPAN IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN NUMBER;
   FUNCTION TTL_MASS_FLOW_RATE(
      P_OBJECT_ID IN VARCHAR2,
      P_TIME_SPAN IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN NUMBER;

END RP_STRM_PERIOD_STATUS;

/



CREATE or REPLACE PACKAGE BODY RP_STRM_PERIOD_STATUS
IS

   FUNCTION WATER(
      P_OBJECT_ID IN VARCHAR2,
      P_TIME_SPAN IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN NUMBER
   IS
      ret_value   NUMBER ;
   BEGIN
      ret_value := EC_STRM_PERIOD_STATUS.WATER      (
         P_OBJECT_ID,
         P_TIME_SPAN,
         P_DAYTIME,
         P_COMPARE_OPER );
         RETURN ret_value;
   END WATER;
   FUNCTION WATER_FRAC(
      P_OBJECT_ID IN VARCHAR2,
      P_TIME_SPAN IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN NUMBER
   IS
      ret_value   NUMBER ;
   BEGIN
      ret_value := EC_STRM_PERIOD_STATUS.WATER_FRAC      (
         P_OBJECT_ID,
         P_TIME_SPAN,
         P_DAYTIME,
         P_COMPARE_OPER );
         RETURN ret_value;
   END WATER_FRAC;
   FUNCTION APPROVAL_BY(
      P_OBJECT_ID IN VARCHAR2,
      P_TIME_SPAN IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2 (30) ;
   BEGIN
      ret_value := EC_STRM_PERIOD_STATUS.APPROVAL_BY      (
         P_OBJECT_ID,
         P_TIME_SPAN,
         P_DAYTIME,
         P_COMPARE_OPER );
         RETURN ret_value;
   END APPROVAL_BY;
   FUNCTION APPROVAL_STATE(
      P_OBJECT_ID IN VARCHAR2,
      P_TIME_SPAN IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2 (1) ;
   BEGIN
      ret_value := EC_STRM_PERIOD_STATUS.APPROVAL_STATE      (
         P_OBJECT_ID,
         P_TIME_SPAN,
         P_DAYTIME,
         P_COMPARE_OPER );
         RETURN ret_value;
   END APPROVAL_STATE;
   FUNCTION AVG_MASS_FLOW_RATE(
      P_OBJECT_ID IN VARCHAR2,
      P_TIME_SPAN IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN NUMBER
   IS
      ret_value   NUMBER ;
   BEGIN
      ret_value := EC_STRM_PERIOD_STATUS.AVG_MASS_FLOW_RATE      (
         P_OBJECT_ID,
         P_TIME_SPAN,
         P_DAYTIME,
         P_COMPARE_OPER );
         RETURN ret_value;
   END AVG_MASS_FLOW_RATE;
   FUNCTION AVG_MASS_RATE(
      P_OBJECT_ID IN VARCHAR2,
      P_TIME_SPAN IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN NUMBER
   IS
      ret_value   NUMBER ;
   BEGIN
      ret_value := EC_STRM_PERIOD_STATUS.AVG_MASS_RATE      (
         P_OBJECT_ID,
         P_TIME_SPAN,
         P_DAYTIME,
         P_COMPARE_OPER );
         RETURN ret_value;
   END AVG_MASS_RATE;
   FUNCTION ENERGY(
      P_OBJECT_ID IN VARCHAR2,
      P_TIME_SPAN IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN NUMBER
   IS
      ret_value   NUMBER ;
   BEGIN
      ret_value := EC_STRM_PERIOD_STATUS.ENERGY      (
         P_OBJECT_ID,
         P_TIME_SPAN,
         P_DAYTIME,
         P_COMPARE_OPER );
         RETURN ret_value;
   END ENERGY;
   FUNCTION FLOW_RATE_MASS(
      P_OBJECT_ID IN VARCHAR2,
      P_TIME_SPAN IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN NUMBER
   IS
      ret_value   NUMBER ;
   BEGIN
      ret_value := EC_STRM_PERIOD_STATUS.FLOW_RATE_MASS      (
         P_OBJECT_ID,
         P_TIME_SPAN,
         P_DAYTIME,
         P_COMPARE_OPER );
         RETURN ret_value;
   END FLOW_RATE_MASS;
   FUNCTION FLOW_RATE_VOL(
      P_OBJECT_ID IN VARCHAR2,
      P_TIME_SPAN IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN NUMBER
   IS
      ret_value   NUMBER ;
   BEGIN
      ret_value := EC_STRM_PERIOD_STATUS.FLOW_RATE_VOL      (
         P_OBJECT_ID,
         P_TIME_SPAN,
         P_DAYTIME,
         P_COMPARE_OPER );
         RETURN ret_value;
   END FLOW_RATE_VOL;
   FUNCTION MASS_TOTALISER(
      P_OBJECT_ID IN VARCHAR2,
      P_TIME_SPAN IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN NUMBER
   IS
      ret_value   NUMBER ;
   BEGIN
      ret_value := EC_STRM_PERIOD_STATUS.MASS_TOTALISER      (
         P_OBJECT_ID,
         P_TIME_SPAN,
         P_DAYTIME,
         P_COMPARE_OPER );
         RETURN ret_value;
   END MASS_TOTALISER;
   FUNCTION PRESS(
      P_OBJECT_ID IN VARCHAR2,
      P_TIME_SPAN IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN NUMBER
   IS
      ret_value   NUMBER ;
   BEGIN
      ret_value := EC_STRM_PERIOD_STATUS.PRESS      (
         P_OBJECT_ID,
         P_TIME_SPAN,
         P_DAYTIME,
         P_COMPARE_OPER );
         RETURN ret_value;
   END PRESS;
   FUNCTION NET_MASS(
      P_OBJECT_ID IN VARCHAR2,
      P_TIME_SPAN IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN NUMBER
   IS
      ret_value   NUMBER ;
   BEGIN
      ret_value := EC_STRM_PERIOD_STATUS.NET_MASS      (
         P_OBJECT_ID,
         P_TIME_SPAN,
         P_DAYTIME,
         P_COMPARE_OPER );
         RETURN ret_value;
   END NET_MASS;
   FUNCTION NEXT_DAYTIME(
      P_OBJECT_ID IN VARCHAR2,
      P_TIME_SPAN IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_NUM_ROWS IN NUMBER DEFAULT 1)
      RETURN DATE
   IS
      ret_value    DATE ;
   BEGIN
      ret_value := EC_STRM_PERIOD_STATUS.NEXT_DAYTIME      (
         P_OBJECT_ID,
         P_TIME_SPAN,
         P_DAYTIME,
         P_NUM_ROWS );
         RETURN ret_value;
   END NEXT_DAYTIME;
   FUNCTION PREV_EQUAL_DAYTIME(
      P_OBJECT_ID IN VARCHAR2,
      P_TIME_SPAN IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_NUM_ROWS IN NUMBER DEFAULT 1)
      RETURN DATE
   IS
      ret_value    DATE ;
   BEGIN
      ret_value := EC_STRM_PERIOD_STATUS.PREV_EQUAL_DAYTIME      (
         P_OBJECT_ID,
         P_TIME_SPAN,
         P_DAYTIME,
         P_NUM_ROWS );
         RETURN ret_value;
   END PREV_EQUAL_DAYTIME;
   FUNCTION COMMENTS(
      P_OBJECT_ID IN VARCHAR2,
      P_TIME_SPAN IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2 (2000) ;
   BEGIN
      ret_value := EC_STRM_PERIOD_STATUS.COMMENTS      (
         P_OBJECT_ID,
         P_TIME_SPAN,
         P_DAYTIME,
         P_COMPARE_OPER );
         RETURN ret_value;
   END COMMENTS;
   FUNCTION GCV(
      P_OBJECT_ID IN VARCHAR2,
      P_TIME_SPAN IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN NUMBER
   IS
      ret_value   NUMBER ;
   BEGIN
      ret_value := EC_STRM_PERIOD_STATUS.GCV      (
         P_OBJECT_ID,
         P_TIME_SPAN,
         P_DAYTIME,
         P_COMPARE_OPER );
         RETURN ret_value;
   END GCV;
   FUNCTION GRS_DENSITY(
      P_OBJECT_ID IN VARCHAR2,
      P_TIME_SPAN IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN NUMBER
   IS
      ret_value   NUMBER ;
   BEGIN
      ret_value := EC_STRM_PERIOD_STATUS.GRS_DENSITY      (
         P_OBJECT_ID,
         P_TIME_SPAN,
         P_DAYTIME,
         P_COMPARE_OPER );
         RETURN ret_value;
   END GRS_DENSITY;
   FUNCTION NET_VOL(
      P_OBJECT_ID IN VARCHAR2,
      P_TIME_SPAN IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN NUMBER
   IS
      ret_value   NUMBER ;
   BEGIN
      ret_value := EC_STRM_PERIOD_STATUS.NET_VOL      (
         P_OBJECT_ID,
         P_TIME_SPAN,
         P_DAYTIME,
         P_COMPARE_OPER );
         RETURN ret_value;
   END NET_VOL;
   FUNCTION NEXT_EQUAL_DAYTIME(
      P_OBJECT_ID IN VARCHAR2,
      P_TIME_SPAN IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_NUM_ROWS IN NUMBER DEFAULT 1)
      RETURN DATE
   IS
      ret_value    DATE ;
   BEGIN
      ret_value := EC_STRM_PERIOD_STATUS.NEXT_EQUAL_DAYTIME      (
         P_OBJECT_ID,
         P_TIME_SPAN,
         P_DAYTIME,
         P_NUM_ROWS );
         RETURN ret_value;
   END NEXT_EQUAL_DAYTIME;
   FUNCTION PERIOD_NAME(
      P_OBJECT_ID IN VARCHAR2,
      P_TIME_SPAN IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2 (16) ;
   BEGIN
      ret_value := EC_STRM_PERIOD_STATUS.PERIOD_NAME      (
         P_OBJECT_ID,
         P_TIME_SPAN,
         P_DAYTIME,
         P_COMPARE_OPER );
         RETURN ret_value;
   END PERIOD_NAME;
   FUNCTION TEMP(
      P_OBJECT_ID IN VARCHAR2,
      P_TIME_SPAN IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN NUMBER
   IS
      ret_value   NUMBER ;
   BEGIN
      ret_value := EC_STRM_PERIOD_STATUS.TEMP      (
         P_OBJECT_ID,
         P_TIME_SPAN,
         P_DAYTIME,
         P_COMPARE_OPER );
         RETURN ret_value;
   END TEMP;
   FUNCTION MOL_WT(
      P_OBJECT_ID IN VARCHAR2,
      P_TIME_SPAN IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN NUMBER
   IS
      ret_value   NUMBER ;
   BEGIN
      ret_value := EC_STRM_PERIOD_STATUS.MOL_WT      (
         P_OBJECT_ID,
         P_TIME_SPAN,
         P_DAYTIME,
         P_COMPARE_OPER );
         RETURN ret_value;
   END MOL_WT;
   FUNCTION PREV_DAYTIME(
      P_OBJECT_ID IN VARCHAR2,
      P_TIME_SPAN IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_NUM_ROWS IN NUMBER DEFAULT 1)
      RETURN DATE
   IS
      ret_value    DATE ;
   BEGIN
      ret_value := EC_STRM_PERIOD_STATUS.PREV_DAYTIME      (
         P_OBJECT_ID,
         P_TIME_SPAN,
         P_DAYTIME,
         P_NUM_ROWS );
         RETURN ret_value;
   END PREV_DAYTIME;
   FUNCTION RECORD_STATUS(
      P_OBJECT_ID IN VARCHAR2,
      P_TIME_SPAN IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2 (1) ;
   BEGIN
      ret_value := EC_STRM_PERIOD_STATUS.RECORD_STATUS      (
         P_OBJECT_ID,
         P_TIME_SPAN,
         P_DAYTIME,
         P_COMPARE_OPER );
         RETURN ret_value;
   END RECORD_STATUS;
   FUNCTION APPROVAL_DATE(
      P_OBJECT_ID IN VARCHAR2,
      P_TIME_SPAN IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN DATE
   IS
      ret_value    DATE ;
   BEGIN
      ret_value := EC_STRM_PERIOD_STATUS.APPROVAL_DATE      (
         P_OBJECT_ID,
         P_TIME_SPAN,
         P_DAYTIME,
         P_COMPARE_OPER );
         RETURN ret_value;
   END APPROVAL_DATE;
   FUNCTION AVG_NET_VOL_RATE(
      P_OBJECT_ID IN VARCHAR2,
      P_TIME_SPAN IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN NUMBER
   IS
      ret_value   NUMBER ;
   BEGIN
      ret_value := EC_STRM_PERIOD_STATUS.AVG_NET_VOL_RATE      (
         P_OBJECT_ID,
         P_TIME_SPAN,
         P_DAYTIME,
         P_COMPARE_OPER );
         RETURN ret_value;
   END AVG_NET_VOL_RATE;
   FUNCTION DENSITY(
      P_OBJECT_ID IN VARCHAR2,
      P_TIME_SPAN IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN NUMBER
   IS
      ret_value   NUMBER ;
   BEGIN
      ret_value := EC_STRM_PERIOD_STATUS.DENSITY      (
         P_OBJECT_ID,
         P_TIME_SPAN,
         P_DAYTIME,
         P_COMPARE_OPER );
         RETURN ret_value;
   END DENSITY;
   FUNCTION ENERGY_TOTALISER(
      P_OBJECT_ID IN VARCHAR2,
      P_TIME_SPAN IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN NUMBER
   IS
      ret_value   NUMBER ;
   BEGIN
      ret_value := EC_STRM_PERIOD_STATUS.ENERGY_TOTALISER      (
         P_OBJECT_ID,
         P_TIME_SPAN,
         P_DAYTIME,
         P_COMPARE_OPER );
         RETURN ret_value;
   END ENERGY_TOTALISER;
   FUNCTION NET_VOL_TOTALISER(
      P_OBJECT_ID IN VARCHAR2,
      P_TIME_SPAN IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN NUMBER
   IS
      ret_value   NUMBER ;
   BEGIN
      ret_value := EC_STRM_PERIOD_STATUS.NET_VOL_TOTALISER      (
         P_OBJECT_ID,
         P_TIME_SPAN,
         P_DAYTIME,
         P_COMPARE_OPER );
         RETURN ret_value;
   END NET_VOL_TOTALISER;
   FUNCTION ROW_BY_PK(
      P_OBJECT_ID IN VARCHAR2,
      P_TIME_SPAN IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN REC_ROW_BY_PK
   IS
      ret_value    REC_ROW_BY_PK ;
   BEGIN
      ret_value := EC_STRM_PERIOD_STATUS.ROW_BY_PK      (
         P_OBJECT_ID,
         P_TIME_SPAN,
         P_DAYTIME,
         P_COMPARE_OPER );
         RETURN ret_value;
   END ROW_BY_PK;
   FUNCTION ROW_BY_REL_OPERATOR(
      P_OBJECT_ID IN VARCHAR2,
      P_TIME_SPAN IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN REC_ROW_BY_REL_OPERATOR
   IS
      ret_value    REC_ROW_BY_REL_OPERATOR ;
   BEGIN
      ret_value := EC_STRM_PERIOD_STATUS.ROW_BY_REL_OPERATOR      (
         P_OBJECT_ID,
         P_TIME_SPAN,
         P_DAYTIME,
         P_COMPARE_OPER );
         RETURN ret_value;
   END ROW_BY_REL_OPERATOR;
   FUNCTION DAY(
      P_OBJECT_ID IN VARCHAR2,
      P_TIME_SPAN IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN DATE
   IS
      ret_value    DATE ;
   BEGIN
      ret_value := EC_STRM_PERIOD_STATUS.DAY      (
         P_OBJECT_ID,
         P_TIME_SPAN,
         P_DAYTIME,
         P_COMPARE_OPER );
         RETURN ret_value;
   END DAY;
   FUNCTION GRS_DENSITY_KGM3(
      P_OBJECT_ID IN VARCHAR2,
      P_TIME_SPAN IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN NUMBER
   IS
      ret_value   NUMBER ;
   BEGIN
      ret_value := EC_STRM_PERIOD_STATUS.GRS_DENSITY_KGM3      (
         P_OBJECT_ID,
         P_TIME_SPAN,
         P_DAYTIME,
         P_COMPARE_OPER );
         RETURN ret_value;
   END GRS_DENSITY_KGM3;
   FUNCTION GRS_MASS(
      P_OBJECT_ID IN VARCHAR2,
      P_TIME_SPAN IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN NUMBER
   IS
      ret_value   NUMBER ;
   BEGIN
      ret_value := EC_STRM_PERIOD_STATUS.GRS_MASS      (
         P_OBJECT_ID,
         P_TIME_SPAN,
         P_DAYTIME,
         P_COMPARE_OPER );
         RETURN ret_value;
   END GRS_MASS;
   FUNCTION GRS_VOL(
      P_OBJECT_ID IN VARCHAR2,
      P_TIME_SPAN IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN NUMBER
   IS
      ret_value   NUMBER ;
   BEGIN
      ret_value := EC_STRM_PERIOD_STATUS.GRS_VOL      (
         P_OBJECT_ID,
         P_TIME_SPAN,
         P_DAYTIME,
         P_COMPARE_OPER );
         RETURN ret_value;
   END GRS_VOL;
   FUNCTION REC_ID(
      P_OBJECT_ID IN VARCHAR2,
      P_TIME_SPAN IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2 (32) ;
   BEGIN
      ret_value := EC_STRM_PERIOD_STATUS.REC_ID      (
         P_OBJECT_ID,
         P_TIME_SPAN,
         P_DAYTIME,
         P_COMPARE_OPER );
         RETURN ret_value;
   END REC_ID;
   FUNCTION GRS_ENERGY(
      P_OBJECT_ID IN VARCHAR2,
      P_TIME_SPAN IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN NUMBER
   IS
      ret_value   NUMBER ;
   BEGIN
      ret_value := EC_STRM_PERIOD_STATUS.GRS_ENERGY      (
         P_OBJECT_ID,
         P_TIME_SPAN,
         P_DAYTIME,
         P_COMPARE_OPER );
         RETURN ret_value;
   END GRS_ENERGY;
   FUNCTION TTL_MASS_FLOW_RATE(
      P_OBJECT_ID IN VARCHAR2,
      P_TIME_SPAN IN VARCHAR2,
      P_DAYTIME IN DATE,
      P_COMPARE_OPER IN VARCHAR2 DEFAULT '=')
      RETURN NUMBER
   IS
      ret_value   NUMBER ;
   BEGIN
      ret_value := EC_STRM_PERIOD_STATUS.TTL_MASS_FLOW_RATE      (
         P_OBJECT_ID,
         P_TIME_SPAN,
         P_DAYTIME,
         P_COMPARE_OPER );
         RETURN ret_value;
   END TTL_MASS_FLOW_RATE;

END RP_STRM_PERIOD_STATUS;

/
--GRANT EXECUTE ON ECKERNEL_WST.RP_STRM_PERIOD_STATUS TO REPORT_ROLE_XXX;



 -- FINISH PKG_GEN_PKGS.sf_get_functions at:05/07/2019 06.31.58 AM


