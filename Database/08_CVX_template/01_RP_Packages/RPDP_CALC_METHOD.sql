
 -- START PKG_GEN_PKGS.sf_get_functions at:05/07/2019 11.51.50 AM


CREATE or REPLACE PACKAGE RPDP_CALC_METHOD
IS

   FUNCTION ANALYSIS_SP_GRAV
      RETURN VARCHAR2;
   FUNCTION API_ANALYSIS
      RETURN VARCHAR2;
   FUNCTION ATTRIBUTE
      RETURN VARCHAR2;
   FUNCTION CURVE_GAS_LIFT
      RETURN VARCHAR2;
   FUNCTION EVENT_INJ_DATA
      RETURN VARCHAR2;
   FUNCTION FORECAST
      RETURN VARCHAR2;
   FUNCTION FORECAST_PROD
      RETURN VARCHAR2;
   FUNCTION GROSS_BSW_SALT
      RETURN VARCHAR2;
   FUNCTION HEAVY_CRUDE
      RETURN VARCHAR2;
   FUNCTION LAB
      RETURN VARCHAR2;
   FUNCTION LAST_RATE_AND_ONTIME
      RETURN VARCHAR2;
   FUNCTION MEASURED_MTH
      RETURN VARCHAR2;
   FUNCTION MPM
      RETURN VARCHAR2;
   FUNCTION MPM_NET
      RETURN VARCHAR2;
   FUNCTION NA
      RETURN VARCHAR2;
   FUNCTION OIL_GOR
      RETURN VARCHAR2;
   FUNCTION PERIOD_WELL_TEST
      RETURN VARCHAR2;
   FUNCTION REF_VALUE
      RETURN VARCHAR2;
   FUNCTION THEORETICAL
      RETURN VARCHAR2;
   FUNCTION TOTALIZER_EVENT
      RETURN VARCHAR2;
   FUNCTION TOTALIZER_EVENT_EXTRAPOLATE
      RETURN VARCHAR2;
   FUNCTION VOLUME_GCV
      RETURN VARCHAR2;
   FUNCTION WELL_EST_DETAIL_DEFERRED
      RETURN VARCHAR2;
   FUNCTION WELL_TEST_AND_ESTIMATE
      RETURN VARCHAR2;
   FUNCTION CALCULATED
      RETURN VARCHAR2;
   FUNCTION CO2_REF_VALUE
      RETURN VARCHAR2;
   FUNCTION COMP_ANALYSIS_DAY
      RETURN VARCHAR2;
   FUNCTION CONSEC_WELL_TEST
      RETURN VARCHAR2;
   FUNCTION CURVE_WHP
      RETURN VARCHAR2;
   FUNCTION GAS_WATER_CUT
      RETURN VARCHAR2;
   FUNCTION INTERPOLATE_WT
      RETURN VARCHAR2;
   FUNCTION MASS_DENSITY
      RETURN VARCHAR2;
   FUNCTION NET_VOL_WATER
      RETURN VARCHAR2;
   FUNCTION ONE
      RETURN VARCHAR2;
   FUNCTION OTHER_PLAN
      RETURN VARCHAR2;
   FUNCTION SUBSEA_WELLS
      RETURN VARCHAR2;
   FUNCTION SYSTEM_DENSITY
      RETURN VARCHAR2;
   FUNCTION TOTALIZER_DAY_EXTRAPOLATE
      RETURN VARCHAR2;
   FUNCTION VOL
      RETURN VARCHAR2;
   FUNCTION WELLTEST_FWS
      RETURN VARCHAR2;
   FUNCTION WELL_EST_PUMP_SPEED
      RETURN VARCHAR2;
   FUNCTION AGA
      RETURN VARCHAR2;
   FUNCTION ANALYSIS
      RETURN VARCHAR2;
   FUNCTION COMP_ANALYSIS
      RETURN VARCHAR2;
   FUNCTION COND_WATER_FRAC
      RETURN VARCHAR2;
   FUNCTION CURVE
      RETURN VARCHAR2;
   FUNCTION CURVE_LIQUID
      RETURN VARCHAR2;
   FUNCTION EXTERNAL_1
      RETURN VARCHAR2;
   FUNCTION EXTERNAL_5
      RETURN VARCHAR2;
   FUNCTION GRS_MINUS_NET
      RETURN VARCHAR2;
   FUNCTION LIQUID_MEASURED
      RETURN VARCHAR2;
   FUNCTION LIQ_WATER_CUT
      RETURN VARCHAR2;
   FUNCTION MEASURED_MTH_XTPL_DAY
      RETURN VARCHAR2;
   FUNCTION NET_MASS_WATER
      RETURN VARCHAR2;
   FUNCTION NET_VOL
      RETURN VARCHAR2;
   FUNCTION NET_VOL_WGR
      RETURN VARCHAR2;
   FUNCTION OPEN_CLOSE_WEIGHT
      RETURN VARCHAR2;
   FUNCTION POT_CLOSED_DEFERRED
      RETURN VARCHAR2;
   FUNCTION PREV_WT_RPM
      RETURN VARCHAR2;
   FUNCTION REF_STREAM
      RETURN VARCHAR2;
   FUNCTION SAMPLE_ANALYSIS_DAY
      RETURN VARCHAR2;
   FUNCTION SHIP_ALLOC
      RETURN VARCHAR2;
   FUNCTION TOTALIZER_DAY
      RETURN VARCHAR2;
   FUNCTION USER_EXIT
      RETURN VARCHAR2;
   FUNCTION WELL_TEST
      RETURN VARCHAR2;
   FUNCTION ANALYSIS_QUALITY_STRM
      RETURN VARCHAR2;
   FUNCTION BHP_SI_BHP_FLOW
      RETURN VARCHAR2;
   FUNCTION CHOKE_QUADRATIC_CURVE
      RETURN VARCHAR2;
   FUNCTION DECLINE
      RETURN VARCHAR2;
   FUNCTION EXTERNAL_2
      RETURN VARCHAR2;
   FUNCTION FORMULA
      RETURN VARCHAR2;
   FUNCTION GAS_CGR
      RETURN VARCHAR2;
   FUNCTION GRS_BSW
      RETURN VARCHAR2;
   FUNCTION GRS_MASS_BSW_VOL
      RETURN VARCHAR2;
   FUNCTION GRS_MASS_WDF
      RETURN VARCHAR2;
   FUNCTION INTERPOLATE_EXTRAPOLATE
      RETURN VARCHAR2;
   FUNCTION MEAS_OW_TEST_GOR
      RETURN VARCHAR2;
   FUNCTION MPM2
      RETURN VARCHAR2;
   FUNCTION NODE
      RETURN VARCHAR2;
   FUNCTION OIL_WATER_CUT
      RETURN VARCHAR2;
   FUNCTION OIL_WOR
      RETURN VARCHAR2;
   FUNCTION POTENTIAL_PLAN
      RETURN VARCHAR2;
   FUNCTION SHIP_COMP_ALLOC
      RETURN VARCHAR2;
   FUNCTION SHIP_COMP_STREAM
      RETURN VARCHAR2;
   FUNCTION TARGET_PLAN
      RETURN VARCHAR2;
   FUNCTION VFM_PRIORITIZED
      RETURN VARCHAR2;
   FUNCTION VOLUME_REF_MBTU
      RETURN VARCHAR2;
   FUNCTION WELL_EST_DETAIL
      RETURN VARCHAR2;
   FUNCTION WELL_REFERENCE
      RETURN VARCHAR2;
   FUNCTION WET_GAS_MEASURED
      RETURN VARCHAR2;
   FUNCTION ALLOC_THEOR
      RETURN VARCHAR2;
   FUNCTION CHOKE_QUADRATIC_CURVE_CORR
      RETURN VARCHAR2;
   FUNCTION COMP_ANALYSIS_MTH
      RETURN VARCHAR2;
   FUNCTION CRUDE
      RETURN VARCHAR2;
   FUNCTION CURVE_ANNULUS_PRESS
      RETURN VARCHAR2;
   FUNCTION CURVE_CHOKE_NAT
      RETURN VARCHAR2;
   FUNCTION CURVE_WATER
      RETURN VARCHAR2;
   FUNCTION ENERGY_GCV
      RETURN VARCHAR2;
   FUNCTION GOR
      RETURN VARCHAR2;
   FUNCTION GRS_BSW_VOL
      RETURN VARCHAR2;
   FUNCTION GRS_VOL_WDF
      RETURN VARCHAR2;
   FUNCTION MEASURED_API
      RETURN VARCHAR2;
   FUNCTION MPM2_CORR
      RETURN VARCHAR2;
   FUNCTION QUAL_ANALYSIS
      RETURN VARCHAR2;
   FUNCTION SPLIT_FRAC
      RETURN VARCHAR2;
   FUNCTION WELL_INV_WITHDRAW
      RETURN VARCHAR2;
   FUNCTION WPI_RP_BHP
      RETURN VARCHAR2;
   FUNCTION COMP_ANALYSIS_SPOT
      RETURN VARCHAR2;
   FUNCTION EXTRAPOLATE
      RETURN VARCHAR2;
   FUNCTION FLWL_EST_DETAIL
      RETURN VARCHAR2;
   FUNCTION GAS_WGR
      RETURN VARCHAR2;
   FUNCTION GRS_MASS
      RETURN VARCHAR2;
   FUNCTION GRS_MASS_MINUS_WATER
      RETURN VARCHAR2;
   FUNCTION MASS
      RETURN VARCHAR2;
   FUNCTION MASS_DIV_DENSITY
      RETURN VARCHAR2;
   FUNCTION MPM2_NET
      RETURN VARCHAR2;
   FUNCTION NET_VOL_CGR
      RETURN VARCHAR2;
   FUNCTION PREALLOC_MEAS_GL
      RETURN VARCHAR2;
   FUNCTION SAMPLE_ANALYSIS
      RETURN VARCHAR2;
   FUNCTION SEASONAL_VALUE
      RETURN VARCHAR2;
   FUNCTION SHIP_STREAM
      RETURN VARCHAR2;
   FUNCTION STEPPED
      RETURN VARCHAR2;
   FUNCTION SUBWELL
      RETURN VARCHAR2;
   FUNCTION SUM_FROM_DAILY
      RETURN VARCHAR2;
   FUNCTION TANK_DUAL_DIP
      RETURN VARCHAR2;
   FUNCTION TOTALIZER_EVENT_RAW
      RETURN VARCHAR2;
   FUNCTION VOLUME_DENSITY
      RETURN VARCHAR2;
   FUNCTION AGGR_SUB_DAY_THEOR
      RETURN VARCHAR2;
   FUNCTION BATCH_API
      RETURN VARCHAR2;
   FUNCTION BUDGET_PLAN
      RETURN VARCHAR2;
   FUNCTION CARGO_ANALYSIS
      RETURN VARCHAR2;
   FUNCTION COMP_ALLOC
      RETURN VARCHAR2;
   FUNCTION CURVE_CHOKE
      RETURN VARCHAR2;
   FUNCTION CURVE_GAS
      RETURN VARCHAR2;
   FUNCTION GROSS_BSW
      RETURN VARCHAR2;
   FUNCTION GROSS_FACTOR
      RETURN VARCHAR2;
   FUNCTION GRS_ANALYSIS
      RETURN VARCHAR2;
   FUNCTION INTERMEDIATE
      RETURN VARCHAR2;
   FUNCTION MEASURED
      RETURN VARCHAR2;
   FUNCTION MEASURED_NET
      RETURN VARCHAR2;
   FUNCTION MEASURED_TRUCKED
      RETURN VARCHAR2;
   FUNCTION MPM_CORR
      RETURN VARCHAR2;
   FUNCTION NET_MASS
      RETURN VARCHAR2;
   FUNCTION POTENTIAL_DEFERED
      RETURN VARCHAR2;
   FUNCTION TANK_WELL
      RETURN VARCHAR2;
   FUNCTION WELL_TANK
      RETURN VARCHAR2;
   FUNCTION AGGR_EVENT_THEOR
      RETURN VARCHAR2;
   FUNCTION ALLOCATED
      RETURN VARCHAR2;
   FUNCTION CALC_METHOD
      RETURN VARCHAR2;
   FUNCTION EXTERNAL_3
      RETURN VARCHAR2;
   FUNCTION EXTERNAL_4
      RETURN VARCHAR2;
   FUNCTION GRS_VOL
      RETURN VARCHAR2;
   FUNCTION INTERPOLATED_GOR
      RETURN VARCHAR2;
   FUNCTION MEAS_SWING_WELL
      RETURN VARCHAR2;
   FUNCTION REF_GCV
      RETURN VARCHAR2;
   FUNCTION RUNTIME_RATE
      RETURN VARCHAR2;
   FUNCTION SAMPLE_ANALYSIS_MTH
      RETURN VARCHAR2;
   FUNCTION SAMPLE_ANALYSIS_SPOT
      RETURN VARCHAR2;
   FUNCTION SUM_FROM_DAILY_ALLOCATED
      RETURN VARCHAR2;
   FUNCTION TOTALIZER
      RETURN VARCHAR2;
   FUNCTION VFM
      RETURN VARCHAR2;
   FUNCTION VFM_NET
      RETURN VARCHAR2;
   FUNCTION WATER_GWR
      RETURN VARCHAR2;
   FUNCTION WELL
      RETURN VARCHAR2;
   FUNCTION WET_GAS_MEASURED_DWF
      RETURN VARCHAR2;
   FUNCTION ZERO
      RETURN VARCHAR2;

END RPDP_CALC_METHOD;

/



CREATE or REPLACE PACKAGE BODY RPDP_CALC_METHOD
IS

   FUNCTION ANALYSIS_SP_GRAV
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2(4000) ;
   BEGIN

         ret_value := ECDP_CALC_METHOD.ANALYSIS_SP_GRAV ;
         RETURN ret_value;
   END ANALYSIS_SP_GRAV;
   FUNCTION API_ANALYSIS
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2(4000) ;
   BEGIN

         ret_value := ECDP_CALC_METHOD.API_ANALYSIS ;
         RETURN ret_value;
   END API_ANALYSIS;
   FUNCTION ATTRIBUTE
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2(4000) ;
   BEGIN

         ret_value := ECDP_CALC_METHOD.ATTRIBUTE ;
         RETURN ret_value;
   END ATTRIBUTE;
   FUNCTION CURVE_GAS_LIFT
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2(4000) ;
   BEGIN

         ret_value := ECDP_CALC_METHOD.CURVE_GAS_LIFT ;
         RETURN ret_value;
   END CURVE_GAS_LIFT;
   FUNCTION EVENT_INJ_DATA
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2(4000) ;
   BEGIN

         ret_value := ECDP_CALC_METHOD.EVENT_INJ_DATA ;
         RETURN ret_value;
   END EVENT_INJ_DATA;
   FUNCTION FORECAST
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2(4000) ;
   BEGIN

         ret_value := ECDP_CALC_METHOD.FORECAST ;
         RETURN ret_value;
   END FORECAST;
   FUNCTION FORECAST_PROD
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2(4000) ;
   BEGIN

         ret_value := ECDP_CALC_METHOD.FORECAST_PROD ;
         RETURN ret_value;
   END FORECAST_PROD;
   FUNCTION GROSS_BSW_SALT
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2(4000) ;
   BEGIN

         ret_value := ECDP_CALC_METHOD.GROSS_BSW_SALT ;
         RETURN ret_value;
   END GROSS_BSW_SALT;
   FUNCTION HEAVY_CRUDE
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2(4000) ;
   BEGIN

         ret_value := ECDP_CALC_METHOD.HEAVY_CRUDE ;
         RETURN ret_value;
   END HEAVY_CRUDE;
   FUNCTION LAB
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2(4000) ;
   BEGIN

         ret_value := ECDP_CALC_METHOD.LAB ;
         RETURN ret_value;
   END LAB;
   FUNCTION LAST_RATE_AND_ONTIME
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2(4000) ;
   BEGIN

         ret_value := ECDP_CALC_METHOD.LAST_RATE_AND_ONTIME ;
         RETURN ret_value;
   END LAST_RATE_AND_ONTIME;
   FUNCTION MEASURED_MTH
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2(4000) ;
   BEGIN

         ret_value := ECDP_CALC_METHOD.MEASURED_MTH ;
         RETURN ret_value;
   END MEASURED_MTH;
   FUNCTION MPM
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2(4000) ;
   BEGIN

         ret_value := ECDP_CALC_METHOD.MPM ;
         RETURN ret_value;
   END MPM;
   FUNCTION MPM_NET
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2(4000) ;
   BEGIN

         ret_value := ECDP_CALC_METHOD.MPM_NET ;
         RETURN ret_value;
   END MPM_NET;
   FUNCTION NA
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2(4000) ;
   BEGIN

         ret_value := ECDP_CALC_METHOD.NA ;
         RETURN ret_value;
   END NA;
   FUNCTION OIL_GOR
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2(4000) ;
   BEGIN

         ret_value := ECDP_CALC_METHOD.OIL_GOR ;
         RETURN ret_value;
   END OIL_GOR;
   FUNCTION PERIOD_WELL_TEST
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2(4000) ;
   BEGIN

         ret_value := ECDP_CALC_METHOD.PERIOD_WELL_TEST ;
         RETURN ret_value;
   END PERIOD_WELL_TEST;
   FUNCTION REF_VALUE
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2(4000) ;
   BEGIN

         ret_value := ECDP_CALC_METHOD.REF_VALUE ;
         RETURN ret_value;
   END REF_VALUE;
   FUNCTION THEORETICAL
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2(4000) ;
   BEGIN

         ret_value := ECDP_CALC_METHOD.THEORETICAL ;
         RETURN ret_value;
   END THEORETICAL;
   FUNCTION TOTALIZER_EVENT
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2(4000) ;
   BEGIN

         ret_value := ECDP_CALC_METHOD.TOTALIZER_EVENT ;
         RETURN ret_value;
   END TOTALIZER_EVENT;
   FUNCTION TOTALIZER_EVENT_EXTRAPOLATE
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2(4000) ;
   BEGIN

         ret_value := ECDP_CALC_METHOD.TOTALIZER_EVENT_EXTRAPOLATE ;
         RETURN ret_value;
   END TOTALIZER_EVENT_EXTRAPOLATE;
   FUNCTION VOLUME_GCV
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2(4000) ;
   BEGIN

         ret_value := ECDP_CALC_METHOD.VOLUME_GCV ;
         RETURN ret_value;
   END VOLUME_GCV;
   FUNCTION WELL_EST_DETAIL_DEFERRED
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2(4000) ;
   BEGIN

         ret_value := ECDP_CALC_METHOD.WELL_EST_DETAIL_DEFERRED ;
         RETURN ret_value;
   END WELL_EST_DETAIL_DEFERRED;
   FUNCTION WELL_TEST_AND_ESTIMATE
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2(4000) ;
   BEGIN

         ret_value := ECDP_CALC_METHOD.WELL_TEST_AND_ESTIMATE ;
         RETURN ret_value;
   END WELL_TEST_AND_ESTIMATE;
   FUNCTION CALCULATED
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2(4000) ;
   BEGIN

         ret_value := ECDP_CALC_METHOD.CALCULATED ;
         RETURN ret_value;
   END CALCULATED;
   FUNCTION CO2_REF_VALUE
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2(4000) ;
   BEGIN

         ret_value := ECDP_CALC_METHOD.CO2_REF_VALUE ;
         RETURN ret_value;
   END CO2_REF_VALUE;
   FUNCTION COMP_ANALYSIS_DAY
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2(4000) ;
   BEGIN

         ret_value := ECDP_CALC_METHOD.COMP_ANALYSIS_DAY ;
         RETURN ret_value;
   END COMP_ANALYSIS_DAY;
   FUNCTION CONSEC_WELL_TEST
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2(4000) ;
   BEGIN

         ret_value := ECDP_CALC_METHOD.CONSEC_WELL_TEST ;
         RETURN ret_value;
   END CONSEC_WELL_TEST;
   FUNCTION CURVE_WHP
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2(4000) ;
   BEGIN

         ret_value := ECDP_CALC_METHOD.CURVE_WHP ;
         RETURN ret_value;
   END CURVE_WHP;
   FUNCTION GAS_WATER_CUT
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2(4000) ;
   BEGIN

         ret_value := ECDP_CALC_METHOD.GAS_WATER_CUT ;
         RETURN ret_value;
   END GAS_WATER_CUT;
   FUNCTION INTERPOLATE_WT
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2(4000) ;
   BEGIN

         ret_value := ECDP_CALC_METHOD.INTERPOLATE_WT ;
         RETURN ret_value;
   END INTERPOLATE_WT;
   FUNCTION MASS_DENSITY
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2(4000) ;
   BEGIN

         ret_value := ECDP_CALC_METHOD.MASS_DENSITY ;
         RETURN ret_value;
   END MASS_DENSITY;
   FUNCTION NET_VOL_WATER
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2(4000) ;
   BEGIN

         ret_value := ECDP_CALC_METHOD.NET_VOL_WATER ;
         RETURN ret_value;
   END NET_VOL_WATER;
   FUNCTION ONE
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2(4000) ;
   BEGIN

         ret_value := ECDP_CALC_METHOD.ONE ;
         RETURN ret_value;
   END ONE;
   FUNCTION OTHER_PLAN
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2(4000) ;
   BEGIN

         ret_value := ECDP_CALC_METHOD.OTHER_PLAN ;
         RETURN ret_value;
   END OTHER_PLAN;
   FUNCTION SUBSEA_WELLS
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2(4000) ;
   BEGIN

         ret_value := ECDP_CALC_METHOD.SUBSEA_WELLS ;
         RETURN ret_value;
   END SUBSEA_WELLS;
   FUNCTION SYSTEM_DENSITY
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2(4000) ;
   BEGIN

         ret_value := ECDP_CALC_METHOD.SYSTEM_DENSITY ;
         RETURN ret_value;
   END SYSTEM_DENSITY;
   FUNCTION TOTALIZER_DAY_EXTRAPOLATE
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2(4000) ;
   BEGIN

         ret_value := ECDP_CALC_METHOD.TOTALIZER_DAY_EXTRAPOLATE ;
         RETURN ret_value;
   END TOTALIZER_DAY_EXTRAPOLATE;
   FUNCTION VOL
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2(4000) ;
   BEGIN

         ret_value := ECDP_CALC_METHOD.VOL ;
         RETURN ret_value;
   END VOL;
   FUNCTION WELLTEST_FWS
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2(4000) ;
   BEGIN

         ret_value := ECDP_CALC_METHOD.WELLTEST_FWS ;
         RETURN ret_value;
   END WELLTEST_FWS;
   FUNCTION WELL_EST_PUMP_SPEED
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2(4000) ;
   BEGIN

         ret_value := ECDP_CALC_METHOD.WELL_EST_PUMP_SPEED ;
         RETURN ret_value;
   END WELL_EST_PUMP_SPEED;
   FUNCTION AGA
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2(4000) ;
   BEGIN

         ret_value := ECDP_CALC_METHOD.AGA ;
         RETURN ret_value;
   END AGA;
   FUNCTION ANALYSIS
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2(4000) ;
   BEGIN

         ret_value := ECDP_CALC_METHOD.ANALYSIS ;
         RETURN ret_value;
   END ANALYSIS;
   FUNCTION COMP_ANALYSIS
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2(4000) ;
   BEGIN

         ret_value := ECDP_CALC_METHOD.COMP_ANALYSIS ;
         RETURN ret_value;
   END COMP_ANALYSIS;
   FUNCTION COND_WATER_FRAC
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2(4000) ;
   BEGIN

         ret_value := ECDP_CALC_METHOD.COND_WATER_FRAC ;
         RETURN ret_value;
   END COND_WATER_FRAC;
   FUNCTION CURVE
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2(4000) ;
   BEGIN

         ret_value := ECDP_CALC_METHOD.CURVE ;
         RETURN ret_value;
   END CURVE;
   FUNCTION CURVE_LIQUID
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2(4000) ;
   BEGIN

         ret_value := ECDP_CALC_METHOD.CURVE_LIQUID ;
         RETURN ret_value;
   END CURVE_LIQUID;
   FUNCTION EXTERNAL_1
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2(4000) ;
   BEGIN

         ret_value := ECDP_CALC_METHOD.EXTERNAL_1 ;
         RETURN ret_value;
   END EXTERNAL_1;
   FUNCTION EXTERNAL_5
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2(4000) ;
   BEGIN

         ret_value := ECDP_CALC_METHOD.EXTERNAL_5 ;
         RETURN ret_value;
   END EXTERNAL_5;
   FUNCTION GRS_MINUS_NET
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2(4000) ;
   BEGIN

         ret_value := ECDP_CALC_METHOD.GRS_MINUS_NET ;
         RETURN ret_value;
   END GRS_MINUS_NET;
   FUNCTION LIQUID_MEASURED
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2(4000) ;
   BEGIN

         ret_value := ECDP_CALC_METHOD.LIQUID_MEASURED ;
         RETURN ret_value;
   END LIQUID_MEASURED;
   FUNCTION LIQ_WATER_CUT
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2(4000) ;
   BEGIN

         ret_value := ECDP_CALC_METHOD.LIQ_WATER_CUT ;
         RETURN ret_value;
   END LIQ_WATER_CUT;
   FUNCTION MEASURED_MTH_XTPL_DAY
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2(4000) ;
   BEGIN

         ret_value := ECDP_CALC_METHOD.MEASURED_MTH_XTPL_DAY ;
         RETURN ret_value;
   END MEASURED_MTH_XTPL_DAY;
   FUNCTION NET_MASS_WATER
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2(4000) ;
   BEGIN

         ret_value := ECDP_CALC_METHOD.NET_MASS_WATER ;
         RETURN ret_value;
   END NET_MASS_WATER;
   FUNCTION NET_VOL
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2(4000) ;
   BEGIN

         ret_value := ECDP_CALC_METHOD.NET_VOL ;
         RETURN ret_value;
   END NET_VOL;
   FUNCTION NET_VOL_WGR
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2(4000) ;
   BEGIN

         ret_value := ECDP_CALC_METHOD.NET_VOL_WGR ;
         RETURN ret_value;
   END NET_VOL_WGR;
   FUNCTION OPEN_CLOSE_WEIGHT
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2(4000) ;
   BEGIN

         ret_value := ECDP_CALC_METHOD.OPEN_CLOSE_WEIGHT ;
         RETURN ret_value;
   END OPEN_CLOSE_WEIGHT;
   FUNCTION POT_CLOSED_DEFERRED
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2(4000) ;
   BEGIN

         ret_value := ECDP_CALC_METHOD.POT_CLOSED_DEFERRED ;
         RETURN ret_value;
   END POT_CLOSED_DEFERRED;
   FUNCTION PREV_WT_RPM
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2(4000) ;
   BEGIN

         ret_value := ECDP_CALC_METHOD.PREV_WT_RPM ;
         RETURN ret_value;
   END PREV_WT_RPM;
   FUNCTION REF_STREAM
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2(4000) ;
   BEGIN

         ret_value := ECDP_CALC_METHOD.REF_STREAM ;
         RETURN ret_value;
   END REF_STREAM;
   FUNCTION SAMPLE_ANALYSIS_DAY
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2(4000) ;
   BEGIN

         ret_value := ECDP_CALC_METHOD.SAMPLE_ANALYSIS_DAY ;
         RETURN ret_value;
   END SAMPLE_ANALYSIS_DAY;
   FUNCTION SHIP_ALLOC
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2(4000) ;
   BEGIN

         ret_value := ECDP_CALC_METHOD.SHIP_ALLOC ;
         RETURN ret_value;
   END SHIP_ALLOC;
   FUNCTION TOTALIZER_DAY
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2(4000) ;
   BEGIN

         ret_value := ECDP_CALC_METHOD.TOTALIZER_DAY ;
         RETURN ret_value;
   END TOTALIZER_DAY;
   FUNCTION USER_EXIT
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2(4000) ;
   BEGIN

         ret_value := ECDP_CALC_METHOD.USER_EXIT ;
         RETURN ret_value;
   END USER_EXIT;
   FUNCTION WELL_TEST
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2(4000) ;
   BEGIN

         ret_value := ECDP_CALC_METHOD.WELL_TEST ;
         RETURN ret_value;
   END WELL_TEST;
   FUNCTION ANALYSIS_QUALITY_STRM
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2(4000) ;
   BEGIN

         ret_value := ECDP_CALC_METHOD.ANALYSIS_QUALITY_STRM ;
         RETURN ret_value;
   END ANALYSIS_QUALITY_STRM;
   FUNCTION BHP_SI_BHP_FLOW
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2(4000) ;
   BEGIN

         ret_value := ECDP_CALC_METHOD.BHP_SI_BHP_FLOW ;
         RETURN ret_value;
   END BHP_SI_BHP_FLOW;
   FUNCTION CHOKE_QUADRATIC_CURVE
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2(4000) ;
   BEGIN

         ret_value := ECDP_CALC_METHOD.CHOKE_QUADRATIC_CURVE ;
         RETURN ret_value;
   END CHOKE_QUADRATIC_CURVE;
   FUNCTION DECLINE
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2(4000) ;
   BEGIN

         ret_value := ECDP_CALC_METHOD.DECLINE ;
         RETURN ret_value;
   END DECLINE;
   FUNCTION EXTERNAL_2
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2(4000) ;
   BEGIN

         ret_value := ECDP_CALC_METHOD.EXTERNAL_2 ;
         RETURN ret_value;
   END EXTERNAL_2;
   FUNCTION FORMULA
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2(4000) ;
   BEGIN

         ret_value := ECDP_CALC_METHOD.FORMULA ;
         RETURN ret_value;
   END FORMULA;
   FUNCTION GAS_CGR
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2(4000) ;
   BEGIN

         ret_value := ECDP_CALC_METHOD.GAS_CGR ;
         RETURN ret_value;
   END GAS_CGR;
   FUNCTION GRS_BSW
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2(4000) ;
   BEGIN

         ret_value := ECDP_CALC_METHOD.GRS_BSW ;
         RETURN ret_value;
   END GRS_BSW;
   FUNCTION GRS_MASS_BSW_VOL
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2(4000) ;
   BEGIN

         ret_value := ECDP_CALC_METHOD.GRS_MASS_BSW_VOL ;
         RETURN ret_value;
   END GRS_MASS_BSW_VOL;
   FUNCTION GRS_MASS_WDF
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2(4000) ;
   BEGIN

         ret_value := ECDP_CALC_METHOD.GRS_MASS_WDF ;
         RETURN ret_value;
   END GRS_MASS_WDF;
   FUNCTION INTERPOLATE_EXTRAPOLATE
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2(4000) ;
   BEGIN

         ret_value := ECDP_CALC_METHOD.INTERPOLATE_EXTRAPOLATE ;
         RETURN ret_value;
   END INTERPOLATE_EXTRAPOLATE;
   FUNCTION MEAS_OW_TEST_GOR
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2(4000) ;
   BEGIN

         ret_value := ECDP_CALC_METHOD.MEAS_OW_TEST_GOR ;
         RETURN ret_value;
   END MEAS_OW_TEST_GOR;
   FUNCTION MPM2
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2(4000) ;
   BEGIN

         ret_value := ECDP_CALC_METHOD.MPM2 ;
         RETURN ret_value;
   END MPM2;
   FUNCTION NODE
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2(4000) ;
   BEGIN

         ret_value := ECDP_CALC_METHOD.NODE ;
         RETURN ret_value;
   END NODE;
   FUNCTION OIL_WATER_CUT
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2(4000) ;
   BEGIN

         ret_value := ECDP_CALC_METHOD.OIL_WATER_CUT ;
         RETURN ret_value;
   END OIL_WATER_CUT;
   FUNCTION OIL_WOR
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2(4000) ;
   BEGIN

         ret_value := ECDP_CALC_METHOD.OIL_WOR ;
         RETURN ret_value;
   END OIL_WOR;
   FUNCTION POTENTIAL_PLAN
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2(4000) ;
   BEGIN

         ret_value := ECDP_CALC_METHOD.POTENTIAL_PLAN ;
         RETURN ret_value;
   END POTENTIAL_PLAN;
   FUNCTION SHIP_COMP_ALLOC
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2(4000) ;
   BEGIN

         ret_value := ECDP_CALC_METHOD.SHIP_COMP_ALLOC ;
         RETURN ret_value;
   END SHIP_COMP_ALLOC;
   FUNCTION SHIP_COMP_STREAM
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2(4000) ;
   BEGIN

         ret_value := ECDP_CALC_METHOD.SHIP_COMP_STREAM ;
         RETURN ret_value;
   END SHIP_COMP_STREAM;
   FUNCTION TARGET_PLAN
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2(4000) ;
   BEGIN

         ret_value := ECDP_CALC_METHOD.TARGET_PLAN ;
         RETURN ret_value;
   END TARGET_PLAN;
   FUNCTION VFM_PRIORITIZED
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2(4000) ;
   BEGIN

         ret_value := ECDP_CALC_METHOD.VFM_PRIORITIZED ;
         RETURN ret_value;
   END VFM_PRIORITIZED;
   FUNCTION VOLUME_REF_MBTU
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2(4000) ;
   BEGIN

         ret_value := ECDP_CALC_METHOD.VOLUME_REF_MBTU ;
         RETURN ret_value;
   END VOLUME_REF_MBTU;
   FUNCTION WELL_EST_DETAIL
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2(4000) ;
   BEGIN

         ret_value := ECDP_CALC_METHOD.WELL_EST_DETAIL ;
         RETURN ret_value;
   END WELL_EST_DETAIL;
   FUNCTION WELL_REFERENCE
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2(4000) ;
   BEGIN

         ret_value := ECDP_CALC_METHOD.WELL_REFERENCE ;
         RETURN ret_value;
   END WELL_REFERENCE;
   FUNCTION WET_GAS_MEASURED
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2(4000) ;
   BEGIN

         ret_value := ECDP_CALC_METHOD.WET_GAS_MEASURED ;
         RETURN ret_value;
   END WET_GAS_MEASURED;
   FUNCTION ALLOC_THEOR
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2(4000) ;
   BEGIN

         ret_value := ECDP_CALC_METHOD.ALLOC_THEOR ;
         RETURN ret_value;
   END ALLOC_THEOR;
   FUNCTION CHOKE_QUADRATIC_CURVE_CORR
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2(4000) ;
   BEGIN

         ret_value := ECDP_CALC_METHOD.CHOKE_QUADRATIC_CURVE_CORR ;
         RETURN ret_value;
   END CHOKE_QUADRATIC_CURVE_CORR;
   FUNCTION COMP_ANALYSIS_MTH
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2(4000) ;
   BEGIN

         ret_value := ECDP_CALC_METHOD.COMP_ANALYSIS_MTH ;
         RETURN ret_value;
   END COMP_ANALYSIS_MTH;
   FUNCTION CRUDE
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2(4000) ;
   BEGIN

         ret_value := ECDP_CALC_METHOD.CRUDE ;
         RETURN ret_value;
   END CRUDE;
   FUNCTION CURVE_ANNULUS_PRESS
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2(4000) ;
   BEGIN

         ret_value := ECDP_CALC_METHOD.CURVE_ANNULUS_PRESS ;
         RETURN ret_value;
   END CURVE_ANNULUS_PRESS;
   FUNCTION CURVE_CHOKE_NAT
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2(4000) ;
   BEGIN

         ret_value := ECDP_CALC_METHOD.CURVE_CHOKE_NAT ;
         RETURN ret_value;
   END CURVE_CHOKE_NAT;
   FUNCTION CURVE_WATER
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2(4000) ;
   BEGIN

         ret_value := ECDP_CALC_METHOD.CURVE_WATER ;
         RETURN ret_value;
   END CURVE_WATER;
   FUNCTION ENERGY_GCV
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2(4000) ;
   BEGIN

         ret_value := ECDP_CALC_METHOD.ENERGY_GCV ;
         RETURN ret_value;
   END ENERGY_GCV;
   FUNCTION GOR
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2(4000) ;
   BEGIN

         ret_value := ECDP_CALC_METHOD.GOR ;
         RETURN ret_value;
   END GOR;
   FUNCTION GRS_BSW_VOL
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2(4000) ;
   BEGIN

         ret_value := ECDP_CALC_METHOD.GRS_BSW_VOL ;
         RETURN ret_value;
   END GRS_BSW_VOL;
   FUNCTION GRS_VOL_WDF
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2(4000) ;
   BEGIN

         ret_value := ECDP_CALC_METHOD.GRS_VOL_WDF ;
         RETURN ret_value;
   END GRS_VOL_WDF;
   FUNCTION MEASURED_API
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2(4000) ;
   BEGIN

         ret_value := ECDP_CALC_METHOD.MEASURED_API ;
         RETURN ret_value;
   END MEASURED_API;
   FUNCTION MPM2_CORR
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2(4000) ;
   BEGIN

         ret_value := ECDP_CALC_METHOD.MPM2_CORR ;
         RETURN ret_value;
   END MPM2_CORR;
   FUNCTION QUAL_ANALYSIS
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2(4000) ;
   BEGIN

         ret_value := ECDP_CALC_METHOD.QUAL_ANALYSIS ;
         RETURN ret_value;
   END QUAL_ANALYSIS;
   FUNCTION SPLIT_FRAC
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2(4000) ;
   BEGIN

         ret_value := ECDP_CALC_METHOD.SPLIT_FRAC ;
         RETURN ret_value;
   END SPLIT_FRAC;
   FUNCTION WELL_INV_WITHDRAW
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2(4000) ;
   BEGIN

         ret_value := ECDP_CALC_METHOD.WELL_INV_WITHDRAW ;
         RETURN ret_value;
   END WELL_INV_WITHDRAW;
   FUNCTION WPI_RP_BHP
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2(4000) ;
   BEGIN

         ret_value := ECDP_CALC_METHOD.WPI_RP_BHP ;
         RETURN ret_value;
   END WPI_RP_BHP;
   FUNCTION COMP_ANALYSIS_SPOT
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2(4000) ;
   BEGIN

         ret_value := ECDP_CALC_METHOD.COMP_ANALYSIS_SPOT ;
         RETURN ret_value;
   END COMP_ANALYSIS_SPOT;
   FUNCTION EXTRAPOLATE
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2(4000) ;
   BEGIN

         ret_value := ECDP_CALC_METHOD.EXTRAPOLATE ;
         RETURN ret_value;
   END EXTRAPOLATE;
   FUNCTION FLWL_EST_DETAIL
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2(4000) ;
   BEGIN

         ret_value := ECDP_CALC_METHOD.FLWL_EST_DETAIL ;
         RETURN ret_value;
   END FLWL_EST_DETAIL;
   FUNCTION GAS_WGR
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2(4000) ;
   BEGIN

         ret_value := ECDP_CALC_METHOD.GAS_WGR ;
         RETURN ret_value;
   END GAS_WGR;
   FUNCTION GRS_MASS
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2(4000) ;
   BEGIN

         ret_value := ECDP_CALC_METHOD.GRS_MASS ;
         RETURN ret_value;
   END GRS_MASS;
   FUNCTION GRS_MASS_MINUS_WATER
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2(4000) ;
   BEGIN

         ret_value := ECDP_CALC_METHOD.GRS_MASS_MINUS_WATER ;
         RETURN ret_value;
   END GRS_MASS_MINUS_WATER;
   FUNCTION MASS
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2(4000) ;
   BEGIN

         ret_value := ECDP_CALC_METHOD.MASS ;
         RETURN ret_value;
   END MASS;
   FUNCTION MASS_DIV_DENSITY
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2(4000) ;
   BEGIN

         ret_value := ECDP_CALC_METHOD.MASS_DIV_DENSITY ;
         RETURN ret_value;
   END MASS_DIV_DENSITY;
   FUNCTION MPM2_NET
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2(4000) ;
   BEGIN

         ret_value := ECDP_CALC_METHOD.MPM2_NET ;
         RETURN ret_value;
   END MPM2_NET;
   FUNCTION NET_VOL_CGR
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2(4000) ;
   BEGIN

         ret_value := ECDP_CALC_METHOD.NET_VOL_CGR ;
         RETURN ret_value;
   END NET_VOL_CGR;
   FUNCTION PREALLOC_MEAS_GL
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2(4000) ;
   BEGIN

         ret_value := ECDP_CALC_METHOD.PREALLOC_MEAS_GL ;
         RETURN ret_value;
   END PREALLOC_MEAS_GL;
   FUNCTION SAMPLE_ANALYSIS
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2(4000) ;
   BEGIN

         ret_value := ECDP_CALC_METHOD.SAMPLE_ANALYSIS ;
         RETURN ret_value;
   END SAMPLE_ANALYSIS;
   FUNCTION SEASONAL_VALUE
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2(4000) ;
   BEGIN

         ret_value := ECDP_CALC_METHOD.SEASONAL_VALUE ;
         RETURN ret_value;
   END SEASONAL_VALUE;
   FUNCTION SHIP_STREAM
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2(4000) ;
   BEGIN

         ret_value := ECDP_CALC_METHOD.SHIP_STREAM ;
         RETURN ret_value;
   END SHIP_STREAM;
   FUNCTION STEPPED
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2(4000) ;
   BEGIN

         ret_value := ECDP_CALC_METHOD.STEPPED ;
         RETURN ret_value;
   END STEPPED;
   FUNCTION SUBWELL
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2(4000) ;
   BEGIN

         ret_value := ECDP_CALC_METHOD.SUBWELL ;
         RETURN ret_value;
   END SUBWELL;
   FUNCTION SUM_FROM_DAILY
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2(4000) ;
   BEGIN

         ret_value := ECDP_CALC_METHOD.SUM_FROM_DAILY ;
         RETURN ret_value;
   END SUM_FROM_DAILY;
   FUNCTION TANK_DUAL_DIP
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2(4000) ;
   BEGIN

         ret_value := ECDP_CALC_METHOD.TANK_DUAL_DIP ;
         RETURN ret_value;
   END TANK_DUAL_DIP;
   FUNCTION TOTALIZER_EVENT_RAW
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2(4000) ;
   BEGIN

         ret_value := ECDP_CALC_METHOD.TOTALIZER_EVENT_RAW ;
         RETURN ret_value;
   END TOTALIZER_EVENT_RAW;
   FUNCTION VOLUME_DENSITY
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2(4000) ;
   BEGIN

         ret_value := ECDP_CALC_METHOD.VOLUME_DENSITY ;
         RETURN ret_value;
   END VOLUME_DENSITY;
   FUNCTION AGGR_SUB_DAY_THEOR
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2(4000) ;
   BEGIN

         ret_value := ECDP_CALC_METHOD.AGGR_SUB_DAY_THEOR ;
         RETURN ret_value;
   END AGGR_SUB_DAY_THEOR;
   FUNCTION BATCH_API
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2(4000) ;
   BEGIN

         ret_value := ECDP_CALC_METHOD.BATCH_API ;
         RETURN ret_value;
   END BATCH_API;
   FUNCTION BUDGET_PLAN
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2(4000) ;
   BEGIN

         ret_value := ECDP_CALC_METHOD.BUDGET_PLAN ;
         RETURN ret_value;
   END BUDGET_PLAN;
   FUNCTION CARGO_ANALYSIS
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2(4000) ;
   BEGIN

         ret_value := ECDP_CALC_METHOD.CARGO_ANALYSIS ;
         RETURN ret_value;
   END CARGO_ANALYSIS;
   FUNCTION COMP_ALLOC
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2(4000) ;
   BEGIN

         ret_value := ECDP_CALC_METHOD.COMP_ALLOC ;
         RETURN ret_value;
   END COMP_ALLOC;
   FUNCTION CURVE_CHOKE
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2(4000) ;
   BEGIN

         ret_value := ECDP_CALC_METHOD.CURVE_CHOKE ;
         RETURN ret_value;
   END CURVE_CHOKE;
   FUNCTION CURVE_GAS
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2(4000) ;
   BEGIN

         ret_value := ECDP_CALC_METHOD.CURVE_GAS ;
         RETURN ret_value;
   END CURVE_GAS;
   FUNCTION GROSS_BSW
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2(4000) ;
   BEGIN

         ret_value := ECDP_CALC_METHOD.GROSS_BSW ;
         RETURN ret_value;
   END GROSS_BSW;
   FUNCTION GROSS_FACTOR
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2(4000) ;
   BEGIN

         ret_value := ECDP_CALC_METHOD.GROSS_FACTOR ;
         RETURN ret_value;
   END GROSS_FACTOR;
   FUNCTION GRS_ANALYSIS
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2(4000) ;
   BEGIN

         ret_value := ECDP_CALC_METHOD.GRS_ANALYSIS ;
         RETURN ret_value;
   END GRS_ANALYSIS;
   FUNCTION INTERMEDIATE
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2(4000) ;
   BEGIN

         ret_value := ECDP_CALC_METHOD.INTERMEDIATE ;
         RETURN ret_value;
   END INTERMEDIATE;
   FUNCTION MEASURED
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2(4000) ;
   BEGIN

         ret_value := ECDP_CALC_METHOD.MEASURED ;
         RETURN ret_value;
   END MEASURED;
   FUNCTION MEASURED_NET
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2(4000) ;
   BEGIN

         ret_value := ECDP_CALC_METHOD.MEASURED_NET ;
         RETURN ret_value;
   END MEASURED_NET;
   FUNCTION MEASURED_TRUCKED
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2(4000) ;
   BEGIN

         ret_value := ECDP_CALC_METHOD.MEASURED_TRUCKED ;
         RETURN ret_value;
   END MEASURED_TRUCKED;
   FUNCTION MPM_CORR
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2(4000) ;
   BEGIN

         ret_value := ECDP_CALC_METHOD.MPM_CORR ;
         RETURN ret_value;
   END MPM_CORR;
   FUNCTION NET_MASS
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2(4000) ;
   BEGIN

         ret_value := ECDP_CALC_METHOD.NET_MASS ;
         RETURN ret_value;
   END NET_MASS;
   FUNCTION POTENTIAL_DEFERED
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2(4000) ;
   BEGIN

         ret_value := ECDP_CALC_METHOD.POTENTIAL_DEFERED ;
         RETURN ret_value;
   END POTENTIAL_DEFERED;
   FUNCTION TANK_WELL
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2(4000) ;
   BEGIN

         ret_value := ECDP_CALC_METHOD.TANK_WELL ;
         RETURN ret_value;
   END TANK_WELL;
   FUNCTION WELL_TANK
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2(4000) ;
   BEGIN

         ret_value := ECDP_CALC_METHOD.WELL_TANK ;
         RETURN ret_value;
   END WELL_TANK;
   FUNCTION AGGR_EVENT_THEOR
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2(4000) ;
   BEGIN

         ret_value := ECDP_CALC_METHOD.AGGR_EVENT_THEOR ;
         RETURN ret_value;
   END AGGR_EVENT_THEOR;
   FUNCTION ALLOCATED
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2(4000) ;
   BEGIN

         ret_value := ECDP_CALC_METHOD.ALLOCATED ;
         RETURN ret_value;
   END ALLOCATED;
   FUNCTION CALC_METHOD
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2(4000) ;
   BEGIN

         ret_value := ECDP_CALC_METHOD.CALC_METHOD ;
         RETURN ret_value;
   END CALC_METHOD;
   FUNCTION EXTERNAL_3
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2(4000) ;
   BEGIN

         ret_value := ECDP_CALC_METHOD.EXTERNAL_3 ;
         RETURN ret_value;
   END EXTERNAL_3;
   FUNCTION EXTERNAL_4
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2(4000) ;
   BEGIN

         ret_value := ECDP_CALC_METHOD.EXTERNAL_4 ;
         RETURN ret_value;
   END EXTERNAL_4;
   FUNCTION GRS_VOL
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2(4000) ;
   BEGIN

         ret_value := ECDP_CALC_METHOD.GRS_VOL ;
         RETURN ret_value;
   END GRS_VOL;
   FUNCTION INTERPOLATED_GOR
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2(4000) ;
   BEGIN

         ret_value := ECDP_CALC_METHOD.INTERPOLATED_GOR ;
         RETURN ret_value;
   END INTERPOLATED_GOR;
   FUNCTION MEAS_SWING_WELL
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2(4000) ;
   BEGIN

         ret_value := ECDP_CALC_METHOD.MEAS_SWING_WELL ;
         RETURN ret_value;
   END MEAS_SWING_WELL;
   FUNCTION REF_GCV
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2(4000) ;
   BEGIN

         ret_value := ECDP_CALC_METHOD.REF_GCV ;
         RETURN ret_value;
   END REF_GCV;
   FUNCTION RUNTIME_RATE
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2(4000) ;
   BEGIN

         ret_value := ECDP_CALC_METHOD.RUNTIME_RATE ;
         RETURN ret_value;
   END RUNTIME_RATE;
   FUNCTION SAMPLE_ANALYSIS_MTH
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2(4000) ;
   BEGIN

         ret_value := ECDP_CALC_METHOD.SAMPLE_ANALYSIS_MTH ;
         RETURN ret_value;
   END SAMPLE_ANALYSIS_MTH;
   FUNCTION SAMPLE_ANALYSIS_SPOT
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2(4000) ;
   BEGIN

         ret_value := ECDP_CALC_METHOD.SAMPLE_ANALYSIS_SPOT ;
         RETURN ret_value;
   END SAMPLE_ANALYSIS_SPOT;
   FUNCTION SUM_FROM_DAILY_ALLOCATED
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2(4000) ;
   BEGIN

         ret_value := ECDP_CALC_METHOD.SUM_FROM_DAILY_ALLOCATED ;
         RETURN ret_value;
   END SUM_FROM_DAILY_ALLOCATED;
   FUNCTION TOTALIZER
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2(4000) ;
   BEGIN

         ret_value := ECDP_CALC_METHOD.TOTALIZER ;
         RETURN ret_value;
   END TOTALIZER;
   FUNCTION VFM
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2(4000) ;
   BEGIN

         ret_value := ECDP_CALC_METHOD.VFM ;
         RETURN ret_value;
   END VFM;
   FUNCTION VFM_NET
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2(4000) ;
   BEGIN

         ret_value := ECDP_CALC_METHOD.VFM_NET ;
         RETURN ret_value;
   END VFM_NET;
   FUNCTION WATER_GWR
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2(4000) ;
   BEGIN

         ret_value := ECDP_CALC_METHOD.WATER_GWR ;
         RETURN ret_value;
   END WATER_GWR;
   FUNCTION WELL
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2(4000) ;
   BEGIN

         ret_value := ECDP_CALC_METHOD.WELL ;
         RETURN ret_value;
   END WELL;
   FUNCTION WET_GAS_MEASURED_DWF
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2(4000) ;
   BEGIN

         ret_value := ECDP_CALC_METHOD.WET_GAS_MEASURED_DWF ;
         RETURN ret_value;
   END WET_GAS_MEASURED_DWF;
   FUNCTION ZERO
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2(4000) ;
   BEGIN

         ret_value := ECDP_CALC_METHOD.ZERO ;
         RETURN ret_value;
   END ZERO;

END RPDP_CALC_METHOD;

/
--GRANT EXECUTE ON ECKERNEL_WST.RPDP_CALC_METHOD TO REPORT_ROLE_XXX;



 -- FINISH PKG_GEN_PKGS.sf_get_functions at:05/07/2019 11.52.21 AM


