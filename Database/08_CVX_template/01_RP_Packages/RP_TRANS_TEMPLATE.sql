
 -- START PKG_GEN_PKGS.sf_get_functions at:05/07/2019 05.29.06 AM


CREATE or REPLACE PACKAGE RP_TRANS_TEMPLATE
IS

   FUNCTION MINIMUM_SAMPLES(
      P_TEMPLATE_NO IN NUMBER)
      RETURN NUMBER;
   FUNCTION SOURCE_INTERVAL(
      P_TEMPLATE_NO IN NUMBER)
      RETURN NUMBER;
   FUNCTION TARGET_INTERVAL(
      P_TEMPLATE_NO IN NUMBER)
      RETURN NUMBER;
   FUNCTION TEMPLATE_CODE(
      P_TEMPLATE_NO IN NUMBER)
      RETURN VARCHAR2;
   FUNCTION USE_DAYTIME(
      P_TEMPLATE_NO IN NUMBER)
      RETURN VARCHAR2;
   FUNCTION APPROVAL_BY(
      P_TEMPLATE_NO IN NUMBER)
      RETURN VARCHAR2;
   FUNCTION APPROVAL_STATE(
      P_TEMPLATE_NO IN NUMBER)
      RETURN VARCHAR2;
   FUNCTION DATA_TYPE(
      P_TEMPLATE_NO IN NUMBER)
      RETURN VARCHAR2;
   FUNCTION SOURCE_DATATYPE(
      P_TEMPLATE_NO IN NUMBER)
      RETURN VARCHAR2;
   FUNCTION ERROR_INTERVALL(
      P_TEMPLATE_NO IN NUMBER)
      RETURN NUMBER;
   FUNCTION OVERWRITE_USER(
      P_TEMPLATE_NO IN NUMBER)
      RETURN VARCHAR2;
   FUNCTION ACTIVE(
      P_TEMPLATE_NO IN NUMBER)
      RETURN VARCHAR2;
   FUNCTION OVERWRITE_STATUS(
      P_TEMPLATE_NO IN NUMBER)
      RETURN VARCHAR2;
   FUNCTION SHIFT_TIME_TO_PERIOD_ST(
      P_TEMPLATE_NO IN NUMBER)
      RETURN VARCHAR2;
   FUNCTION SOURCE_FUNCTION(
      P_TEMPLATE_NO IN NUMBER)
      RETURN VARCHAR2;
   FUNCTION TARGET_FUNCTION(
      P_TEMPLATE_NO IN NUMBER)
      RETURN VARCHAR2;
   FUNCTION TARGET_HIGH_BOUNDARY(
      P_TEMPLATE_NO IN NUMBER)
      RETURN NUMBER;
   FUNCTION TARGET_WHERE(
      P_TEMPLATE_NO IN NUMBER)
      RETURN VARCHAR2;
   FUNCTION USE_SUMMERTIME(
      P_TEMPLATE_NO IN NUMBER)
      RETURN VARCHAR2;
   FUNCTION PARAMETER_FUNCTION(
      P_TEMPLATE_NO IN NUMBER)
      RETURN VARCHAR2;
   FUNCTION PROD_DAY_START(
      P_TEMPLATE_NO IN NUMBER)
      RETURN NUMBER;
   FUNCTION RECORD_STATUS(
      P_TEMPLATE_NO IN NUMBER)
      RETURN VARCHAR2;
   FUNCTION REV_TEXT_VALUE(
      P_TEMPLATE_NO IN NUMBER)
      RETURN VARCHAR2;
   FUNCTION SOURCE_DELAY(
      P_TEMPLATE_NO IN NUMBER)
      RETURN NUMBER;
   FUNCTION TARGET_SUMMERTIME(
      P_TEMPLATE_NO IN NUMBER)
      RETURN VARCHAR2;
   FUNCTION TARGET_TIME_CORRECTION(
      P_TEMPLATE_NO IN NUMBER)
      RETURN NUMBER;
   FUNCTION TARGET_TRUNCATE(
      P_TEMPLATE_NO IN NUMBER)
      RETURN VARCHAR2;
   FUNCTION APPROVAL_DATE(
      P_TEMPLATE_NO IN NUMBER)
      RETURN DATE;
   FUNCTION DESCRIPTION(
      P_TEMPLATE_NO IN NUMBER)
      RETURN VARCHAR2;
      TYPE REC_ROW_BY_PK IS RECORD (
         TEMPLATE_NO NUMBER ,
         TEMPLATE_CODE VARCHAR2 (32) ,
         SOURCE_DATATYPE VARCHAR2 (32) ,
         SOURCE_FUNCTION VARCHAR2 (100) ,
         SOURCE_INTERVAL NUMBER ,
         SOURCE_DELAY NUMBER ,
         ERROR_INTERVALL NUMBER ,
         DATA_TYPE VARCHAR2 (32) ,
         PARAMETER_FUNCTION VARCHAR2 (100) ,
         MINIMUM_SAMPLES NUMBER ,
         TARGET_INTERVAL NUMBER ,
         TARGET_FUNCTION VARCHAR2 (200) ,
         TARGET_DATATYPE VARCHAR2 (32) ,
         TARGET_DATETIME VARCHAR2 (30) ,
         TARGET_WHERE VARCHAR2 (2000) ,
         USE_DAYTIME VARCHAR2 (1) ,
         USE_SUMMERTIME VARCHAR2 (1) ,
         TARGET_SUMMERTIME VARCHAR2 (100) ,
         TARGET_SUMMERTIME_TRUE VARCHAR2 (30) ,
         TARGET_SUMMERTIME_FALSE VARCHAR2 (30) ,
         TARGET_TIME_CORRECTION NUMBER ,
         TARGET_LOW_BOUNDARY NUMBER ,
         TARGET_HIGH_BOUNDARY NUMBER ,
         TARGET_TRUNCATE VARCHAR2 (30) ,
         OVERWRITE_USER VARCHAR2 (1) ,
         OVERWRITE_STATUS VARCHAR2 (1) ,
         PROD_DAY_START NUMBER ,
         SHIFT_TIME_TO_PERIOD_ST VARCHAR2 (30) ,
         DESCRIPTION VARCHAR2 (240) ,
         RECORD_STATUS VARCHAR2 (1) ,
         CREATED_BY VARCHAR2 (30) ,
         CREATED_DATE  DATE ,
         LAST_UPDATED_BY VARCHAR2 (30) ,
         LAST_UPDATED_DATE  DATE ,
         REV_NO NUMBER ,
         REV_TEXT VARCHAR2 (2000) ,
         APPROVAL_STATE VARCHAR2 (1) ,
         APPROVAL_BY VARCHAR2 (30) ,
         APPROVAL_DATE  DATE ,
         REC_ID VARCHAR2 (32) ,
         ACTIVE VARCHAR2 (1) ,
         REV_TEXT_VALUE VARCHAR2 (240)  );
   FUNCTION ROW_BY_PK(
      P_TEMPLATE_NO IN NUMBER)
      RETURN REC_ROW_BY_PK;
   FUNCTION TARGET_DATETIME(
      P_TEMPLATE_NO IN NUMBER)
      RETURN VARCHAR2;
   FUNCTION TARGET_SUMMERTIME_TRUE(
      P_TEMPLATE_NO IN NUMBER)
      RETURN VARCHAR2;
   FUNCTION REC_ID(
      P_TEMPLATE_NO IN NUMBER)
      RETURN VARCHAR2;
   FUNCTION TARGET_LOW_BOUNDARY(
      P_TEMPLATE_NO IN NUMBER)
      RETURN NUMBER;
   FUNCTION TARGET_DATATYPE(
      P_TEMPLATE_NO IN NUMBER)
      RETURN VARCHAR2;
   FUNCTION TARGET_SUMMERTIME_FALSE(
      P_TEMPLATE_NO IN NUMBER)
      RETURN VARCHAR2;

END RP_TRANS_TEMPLATE;

/



CREATE or REPLACE PACKAGE BODY RP_TRANS_TEMPLATE
IS

   FUNCTION MINIMUM_SAMPLES(
      P_TEMPLATE_NO IN NUMBER)
      RETURN NUMBER
   IS
      ret_value   NUMBER ;
   BEGIN
      ret_value := EC_TRANS_TEMPLATE.MINIMUM_SAMPLES      (
         P_TEMPLATE_NO );
         RETURN ret_value;
   END MINIMUM_SAMPLES;
   FUNCTION SOURCE_INTERVAL(
      P_TEMPLATE_NO IN NUMBER)
      RETURN NUMBER
   IS
      ret_value   NUMBER ;
   BEGIN
      ret_value := EC_TRANS_TEMPLATE.SOURCE_INTERVAL      (
         P_TEMPLATE_NO );
         RETURN ret_value;
   END SOURCE_INTERVAL;
   FUNCTION TARGET_INTERVAL(
      P_TEMPLATE_NO IN NUMBER)
      RETURN NUMBER
   IS
      ret_value   NUMBER ;
   BEGIN
      ret_value := EC_TRANS_TEMPLATE.TARGET_INTERVAL      (
         P_TEMPLATE_NO );
         RETURN ret_value;
   END TARGET_INTERVAL;
   FUNCTION TEMPLATE_CODE(
      P_TEMPLATE_NO IN NUMBER)
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2 (32) ;
   BEGIN
      ret_value := EC_TRANS_TEMPLATE.TEMPLATE_CODE      (
         P_TEMPLATE_NO );
         RETURN ret_value;
   END TEMPLATE_CODE;
   FUNCTION USE_DAYTIME(
      P_TEMPLATE_NO IN NUMBER)
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2 (1) ;
   BEGIN
      ret_value := EC_TRANS_TEMPLATE.USE_DAYTIME      (
         P_TEMPLATE_NO );
         RETURN ret_value;
   END USE_DAYTIME;
   FUNCTION APPROVAL_BY(
      P_TEMPLATE_NO IN NUMBER)
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2 (30) ;
   BEGIN
      ret_value := EC_TRANS_TEMPLATE.APPROVAL_BY      (
         P_TEMPLATE_NO );
         RETURN ret_value;
   END APPROVAL_BY;
   FUNCTION APPROVAL_STATE(
      P_TEMPLATE_NO IN NUMBER)
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2 (1) ;
   BEGIN
      ret_value := EC_TRANS_TEMPLATE.APPROVAL_STATE      (
         P_TEMPLATE_NO );
         RETURN ret_value;
   END APPROVAL_STATE;
   FUNCTION DATA_TYPE(
      P_TEMPLATE_NO IN NUMBER)
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2 (32) ;
   BEGIN
      ret_value := EC_TRANS_TEMPLATE.DATA_TYPE      (
         P_TEMPLATE_NO );
         RETURN ret_value;
   END DATA_TYPE;
   FUNCTION SOURCE_DATATYPE(
      P_TEMPLATE_NO IN NUMBER)
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2 (32) ;
   BEGIN
      ret_value := EC_TRANS_TEMPLATE.SOURCE_DATATYPE      (
         P_TEMPLATE_NO );
         RETURN ret_value;
   END SOURCE_DATATYPE;
   FUNCTION ERROR_INTERVALL(
      P_TEMPLATE_NO IN NUMBER)
      RETURN NUMBER
   IS
      ret_value   NUMBER ;
   BEGIN
      ret_value := EC_TRANS_TEMPLATE.ERROR_INTERVALL      (
         P_TEMPLATE_NO );
         RETURN ret_value;
   END ERROR_INTERVALL;
   FUNCTION OVERWRITE_USER(
      P_TEMPLATE_NO IN NUMBER)
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2 (1) ;
   BEGIN
      ret_value := EC_TRANS_TEMPLATE.OVERWRITE_USER      (
         P_TEMPLATE_NO );
         RETURN ret_value;
   END OVERWRITE_USER;
   FUNCTION ACTIVE(
      P_TEMPLATE_NO IN NUMBER)
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2 (1) ;
   BEGIN
      ret_value := EC_TRANS_TEMPLATE.ACTIVE      (
         P_TEMPLATE_NO );
         RETURN ret_value;
   END ACTIVE;
   FUNCTION OVERWRITE_STATUS(
      P_TEMPLATE_NO IN NUMBER)
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2 (1) ;
   BEGIN
      ret_value := EC_TRANS_TEMPLATE.OVERWRITE_STATUS      (
         P_TEMPLATE_NO );
         RETURN ret_value;
   END OVERWRITE_STATUS;
   FUNCTION SHIFT_TIME_TO_PERIOD_ST(
      P_TEMPLATE_NO IN NUMBER)
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2 (30) ;
   BEGIN
      ret_value := EC_TRANS_TEMPLATE.SHIFT_TIME_TO_PERIOD_ST      (
         P_TEMPLATE_NO );
         RETURN ret_value;
   END SHIFT_TIME_TO_PERIOD_ST;
   FUNCTION SOURCE_FUNCTION(
      P_TEMPLATE_NO IN NUMBER)
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2 (100) ;
   BEGIN
      ret_value := EC_TRANS_TEMPLATE.SOURCE_FUNCTION      (
         P_TEMPLATE_NO );
         RETURN ret_value;
   END SOURCE_FUNCTION;
   FUNCTION TARGET_FUNCTION(
      P_TEMPLATE_NO IN NUMBER)
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2 (200) ;
   BEGIN
      ret_value := EC_TRANS_TEMPLATE.TARGET_FUNCTION      (
         P_TEMPLATE_NO );
         RETURN ret_value;
   END TARGET_FUNCTION;
   FUNCTION TARGET_HIGH_BOUNDARY(
      P_TEMPLATE_NO IN NUMBER)
      RETURN NUMBER
   IS
      ret_value   NUMBER ;
   BEGIN
      ret_value := EC_TRANS_TEMPLATE.TARGET_HIGH_BOUNDARY      (
         P_TEMPLATE_NO );
         RETURN ret_value;
   END TARGET_HIGH_BOUNDARY;
   FUNCTION TARGET_WHERE(
      P_TEMPLATE_NO IN NUMBER)
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2 (2000) ;
   BEGIN
      ret_value := EC_TRANS_TEMPLATE.TARGET_WHERE      (
         P_TEMPLATE_NO );
         RETURN ret_value;
   END TARGET_WHERE;
   FUNCTION USE_SUMMERTIME(
      P_TEMPLATE_NO IN NUMBER)
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2 (1) ;
   BEGIN
      ret_value := EC_TRANS_TEMPLATE.USE_SUMMERTIME      (
         P_TEMPLATE_NO );
         RETURN ret_value;
   END USE_SUMMERTIME;
   FUNCTION PARAMETER_FUNCTION(
      P_TEMPLATE_NO IN NUMBER)
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2 (100) ;
   BEGIN
      ret_value := EC_TRANS_TEMPLATE.PARAMETER_FUNCTION      (
         P_TEMPLATE_NO );
         RETURN ret_value;
   END PARAMETER_FUNCTION;
   FUNCTION PROD_DAY_START(
      P_TEMPLATE_NO IN NUMBER)
      RETURN NUMBER
   IS
      ret_value   NUMBER ;
   BEGIN
      ret_value := EC_TRANS_TEMPLATE.PROD_DAY_START      (
         P_TEMPLATE_NO );
         RETURN ret_value;
   END PROD_DAY_START;
   FUNCTION RECORD_STATUS(
      P_TEMPLATE_NO IN NUMBER)
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2 (1) ;
   BEGIN
      ret_value := EC_TRANS_TEMPLATE.RECORD_STATUS      (
         P_TEMPLATE_NO );
         RETURN ret_value;
   END RECORD_STATUS;
   FUNCTION REV_TEXT_VALUE(
      P_TEMPLATE_NO IN NUMBER)
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2 (240) ;
   BEGIN
      ret_value := EC_TRANS_TEMPLATE.REV_TEXT_VALUE      (
         P_TEMPLATE_NO );
         RETURN ret_value;
   END REV_TEXT_VALUE;
   FUNCTION SOURCE_DELAY(
      P_TEMPLATE_NO IN NUMBER)
      RETURN NUMBER
   IS
      ret_value   NUMBER ;
   BEGIN
      ret_value := EC_TRANS_TEMPLATE.SOURCE_DELAY      (
         P_TEMPLATE_NO );
         RETURN ret_value;
   END SOURCE_DELAY;
   FUNCTION TARGET_SUMMERTIME(
      P_TEMPLATE_NO IN NUMBER)
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2 (100) ;
   BEGIN
      ret_value := EC_TRANS_TEMPLATE.TARGET_SUMMERTIME      (
         P_TEMPLATE_NO );
         RETURN ret_value;
   END TARGET_SUMMERTIME;
   FUNCTION TARGET_TIME_CORRECTION(
      P_TEMPLATE_NO IN NUMBER)
      RETURN NUMBER
   IS
      ret_value   NUMBER ;
   BEGIN
      ret_value := EC_TRANS_TEMPLATE.TARGET_TIME_CORRECTION      (
         P_TEMPLATE_NO );
         RETURN ret_value;
   END TARGET_TIME_CORRECTION;
   FUNCTION TARGET_TRUNCATE(
      P_TEMPLATE_NO IN NUMBER)
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2 (30) ;
   BEGIN
      ret_value := EC_TRANS_TEMPLATE.TARGET_TRUNCATE      (
         P_TEMPLATE_NO );
         RETURN ret_value;
   END TARGET_TRUNCATE;
   FUNCTION APPROVAL_DATE(
      P_TEMPLATE_NO IN NUMBER)
      RETURN DATE
   IS
      ret_value    DATE ;
   BEGIN
      ret_value := EC_TRANS_TEMPLATE.APPROVAL_DATE      (
         P_TEMPLATE_NO );
         RETURN ret_value;
   END APPROVAL_DATE;
   FUNCTION DESCRIPTION(
      P_TEMPLATE_NO IN NUMBER)
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2 (240) ;
   BEGIN
      ret_value := EC_TRANS_TEMPLATE.DESCRIPTION      (
         P_TEMPLATE_NO );
         RETURN ret_value;
   END DESCRIPTION;
   FUNCTION ROW_BY_PK(
      P_TEMPLATE_NO IN NUMBER)
      RETURN REC_ROW_BY_PK
   IS
      ret_value    REC_ROW_BY_PK ;
   BEGIN
      ret_value := EC_TRANS_TEMPLATE.ROW_BY_PK      (
         P_TEMPLATE_NO );
         RETURN ret_value;
   END ROW_BY_PK;
   FUNCTION TARGET_DATETIME(
      P_TEMPLATE_NO IN NUMBER)
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2 (30) ;
   BEGIN
      ret_value := EC_TRANS_TEMPLATE.TARGET_DATETIME      (
         P_TEMPLATE_NO );
         RETURN ret_value;
   END TARGET_DATETIME;
   FUNCTION TARGET_SUMMERTIME_TRUE(
      P_TEMPLATE_NO IN NUMBER)
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2 (30) ;
   BEGIN
      ret_value := EC_TRANS_TEMPLATE.TARGET_SUMMERTIME_TRUE      (
         P_TEMPLATE_NO );
         RETURN ret_value;
   END TARGET_SUMMERTIME_TRUE;
   FUNCTION REC_ID(
      P_TEMPLATE_NO IN NUMBER)
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2 (32) ;
   BEGIN
      ret_value := EC_TRANS_TEMPLATE.REC_ID      (
         P_TEMPLATE_NO );
         RETURN ret_value;
   END REC_ID;
   FUNCTION TARGET_LOW_BOUNDARY(
      P_TEMPLATE_NO IN NUMBER)
      RETURN NUMBER
   IS
      ret_value   NUMBER ;
   BEGIN
      ret_value := EC_TRANS_TEMPLATE.TARGET_LOW_BOUNDARY      (
         P_TEMPLATE_NO );
         RETURN ret_value;
   END TARGET_LOW_BOUNDARY;
   FUNCTION TARGET_DATATYPE(
      P_TEMPLATE_NO IN NUMBER)
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2 (32) ;
   BEGIN
      ret_value := EC_TRANS_TEMPLATE.TARGET_DATATYPE      (
         P_TEMPLATE_NO );
         RETURN ret_value;
   END TARGET_DATATYPE;
   FUNCTION TARGET_SUMMERTIME_FALSE(
      P_TEMPLATE_NO IN NUMBER)
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2 (30) ;
   BEGIN
      ret_value := EC_TRANS_TEMPLATE.TARGET_SUMMERTIME_FALSE      (
         P_TEMPLATE_NO );
         RETURN ret_value;
   END TARGET_SUMMERTIME_FALSE;

END RP_TRANS_TEMPLATE;

/
--GRANT EXECUTE ON ECKERNEL_WST.RP_TRANS_TEMPLATE TO REPORT_ROLE_XXX;



 -- FINISH PKG_GEN_PKGS.sf_get_functions at:05/07/2019 05.29.14 AM


