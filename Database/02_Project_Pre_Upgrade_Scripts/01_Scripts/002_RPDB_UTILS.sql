

CREATE or REPLACE PACKAGE RPDB_UTILS
IS

   FUNCTION CONDITIONNVL(
      P_CONDITION IN BOOLEAN,
      P1 IN VARCHAR2,
      P2 IN VARCHAR2)
      RETURN VARCHAR2;
   FUNCTION EXISTSTABLECOLUMN(
      P_TABLE_NAME IN VARCHAR2,
      P_COLUMN_NAME IN VARCHAR2)
      RETURN BOOLEAN;
   FUNCTION CONDITIONNVL(
      P_CONDITION IN BOOLEAN,
      P1 IN NUMBER,
      P2 IN NUMBER)
      RETURN NUMBER;
   FUNCTION TRUNCTEXT(
      P_TEXT IN VARCHAR2,
      P_MAX_LENGTH IN NUMBER)
      RETURN VARCHAR2;
   FUNCTION COLUMNLENGTH(
      P_TABLE_NAME IN VARCHAR2,
      P_COLUMN_NAME IN VARCHAR2)
      RETURN NUMBER;
   FUNCTION GETDATATYPE(
      P_OBJECT_NAME IN VARCHAR2,
      P_COLUMN_NAME IN VARCHAR2)
      RETURN VARCHAR2;
   FUNCTION CONDITIONNVL(
      P_CONDITION IN BOOLEAN,
      P1 IN DATE,
      P2 IN DATE)
      RETURN DATE;
   FUNCTION COUNTKEYCOLUMNCONSTRAINTS(
      P_TABLE_NAME IN VARCHAR2,
      P_COLUMN_NAME IN VARCHAR2)
      RETURN NUMBER;

END RPDB_UTILS;

/



CREATE or REPLACE PACKAGE BODY RPDB_UTILS
IS

   FUNCTION CONDITIONNVL(
      P_CONDITION IN BOOLEAN,
      P1 IN VARCHAR2,
      P2 IN VARCHAR2)
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2(4000) ;
   BEGIN
      ret_value := ECDB_UTILS.CONDITIONNVL      (
         P_CONDITION,
         P1,
         P2 );
         RETURN ret_value;
   END CONDITIONNVL;
   FUNCTION EXISTSTABLECOLUMN(
      P_TABLE_NAME IN VARCHAR2,
      P_COLUMN_NAME IN VARCHAR2)
      RETURN BOOLEAN
   IS
      ret_value    BOOLEAN ;
   BEGIN
      ret_value := ECDB_UTILS.EXISTSTABLECOLUMN      (
         P_TABLE_NAME,
         P_COLUMN_NAME );
         RETURN ret_value;
   END EXISTSTABLECOLUMN;
   FUNCTION CONDITIONNVL(
      P_CONDITION IN BOOLEAN,
      P1 IN NUMBER,
      P2 IN NUMBER)
      RETURN NUMBER
   IS
      ret_value   NUMBER ;
   BEGIN
      ret_value := ECDB_UTILS.CONDITIONNVL      (
         P_CONDITION,
         P1,
         P2 );
         RETURN ret_value;
   END CONDITIONNVL;
   FUNCTION TRUNCTEXT(
      P_TEXT IN VARCHAR2,
      P_MAX_LENGTH IN NUMBER)
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2(4000) ;
   BEGIN
      ret_value := ECDB_UTILS.TRUNCTEXT      (
         P_TEXT,
         P_MAX_LENGTH );
         RETURN ret_value;
   END TRUNCTEXT;
   FUNCTION COLUMNLENGTH(
      P_TABLE_NAME IN VARCHAR2,
      P_COLUMN_NAME IN VARCHAR2)
      RETURN NUMBER
   IS
      ret_value   NUMBER ;
   BEGIN
      ret_value := ECDB_UTILS.COLUMNLENGTH      (
         P_TABLE_NAME,
         P_COLUMN_NAME );
         RETURN ret_value;
   END COLUMNLENGTH;
   FUNCTION GETDATATYPE(
      P_OBJECT_NAME IN VARCHAR2,
      P_COLUMN_NAME IN VARCHAR2)
      RETURN VARCHAR2
   IS
      ret_value   VARCHAR2(4000) ;
   BEGIN
      ret_value := ECDB_UTILS.GETDATATYPE      (
         P_OBJECT_NAME,
         P_COLUMN_NAME );
         RETURN ret_value;
   END GETDATATYPE;
   FUNCTION CONDITIONNVL(
      P_CONDITION IN BOOLEAN,
      P1 IN DATE,
      P2 IN DATE)
      RETURN DATE
   IS
      ret_value    DATE ;
   BEGIN
      ret_value := ECDB_UTILS.CONDITIONNVL      (
         P_CONDITION,
         P1,
         P2 );
         RETURN ret_value;
   END CONDITIONNVL;
   FUNCTION COUNTKEYCOLUMNCONSTRAINTS(
      P_TABLE_NAME IN VARCHAR2,
      P_COLUMN_NAME IN VARCHAR2)
      RETURN NUMBER
   IS
      ret_value   NUMBER ;
   BEGIN
      ret_value := ECDB_UTILS.COUNTKEYCOLUMNCONSTRAINTS      (
         P_TABLE_NAME,
         P_COLUMN_NAME );
         RETURN ret_value;
   END COUNTKEYCOLUMNCONSTRAINTS;

END RPDB_UTILS;

/
