"ACTIVE_RESULT_DEVICE";"DELETING";"AFTER";"200";"EcDp_Performance_Test.aiSyncPwelResultFromTdev(n_RESULT_NO,NULL,n_LAST_UPDATED_BY);";"EC_PROD";
"ACTIVE_RESULT_DEVICE";"INSERTING";"AFTER";"100";"EcDp_Performance_Test.aiSyncPwelResultFromTdev(n_RESULT_NO,n_OBJECT_ID,n_CREATED_BY);";"EC_PROD";
"ACTIVE_RESULT_WELL";"DELETING";"BEFORE";"900";"EcDp_Performance_Test.removeWbiTestResult(o_OBJECT_ID,o_RESULT_NO);";"EC_PROD";
"ACTIVE_RESULT_WELL";"INSERTING";"AFTER";"800";"EcDp_Performance_Test.setWbiTestResult(n_OBJECT_ID,ec_ptst_result.daytime(n_RESULT_NO),n_RESULT_NO,'DIACS',n_CREATED_BY);";"EC_PROD";
"ACTIVE_RESULT_WELL";"INSERTING";"AFTER";"920";"EcDp_Performance_Test.aiSyncPwelResultFromPwel(n_RESULT_NO,n_OBJECT_ID,n_CREATED_BY);";"EC_PROD";
"ACTIVE_RESULT_WELL";"INSERTING OR UPDATING";"AFTER";"910";"EcDp_Performance_Test.auiSetProductionDay(n_OBJECT_ID, NULL, n_RESULT_NO,nvl(n_LAST_UPDATED_BY,n_CREATED_BY));";"EC_PROD";
"BALANCE";"INSERTING";"AFTER";"100";"IF (n_code IS NULL) THEN ue_RevenueCodes.UpdateCodeForClass(n_object_id, n_daytime, 'BALANCE'); END IF;";"EC_REVN";
"BANK_ACCOUNT";"INSERTING";"AFTER";"1000";"IF (:NEW.customer_id IS NULL AND :NEW.vendor_id IS NULL) AND (:NEW.customer_code IS NULL AND :NEW.vendor_code IS NULL) THEN RAISE_APPLICATION_ERROR(-20000,'Either customer or vendor must be specified'); END IF;";"EC_REVN";
"BANK_ACCOUNT";"UPDATING";"AFTER";"1010";"IF (:NEW.customer_id IS NULL AND :NEW.vendor_id IS NULL) THEN RAISE_APPLICATION_ERROR(-20000,'Either customer or vendor must be specified'); END IF;";"EC_REVN";
"CALC_RULE";"INSERTING OR UPDATING";"BEFORE";"3000";"FOR ci IN 1..vt.COUNT LOOP vt(ci).OBJECT_CODE:= n_code;END LOOP;";"EC_PROD";
"CARGO_INFO";"UPDATING";"AFTER";"100";"EcBp_Cargo_Transport.auCargoTransport(n_cargo_no, :old.status, n_status, nvl(n_last_updated_by, n_created_by));";"EC_TRAN";
"CARGO_INFO";"UPDATING";"AFTER";"200";"ue_replicate_cargovalues.updatecargoname(:old.cargo_name, n_cargo_name, n_last_updated_by);";"EC_TRAN";
"CARGO_INFO";"UPDATING";"AFTER";"300";"ue_replicate_cargovalues.updateCarrier(n_cargo_no,:old.carrier_id, n_carrier_id, n_last_updated_by);";"EC_TRAN";
"CARGO_INFO";"UPDATING";"AFTER";"400";"EcBp_Cargo_Transport.copyBwdNominatedCarrier(n_CARGO_NO,n_CARRIER_ID,n_LAST_UPDATED_BY);";"EC_TRAN";
"CARGO_LOAD_INSTRUCTION";"UPDATING";"AFTER";"100";"EcBp_Cargo_Transport.auCargoTransport(n_cargo_no, :old.status, n_status, nvl(n_last_updated_by, n_created_by));";"EC_TRAN";
"CARGO_LOAD_INSTRUCTION";"UPDATING";"AFTER";"200";"ue_replicate_cargovalues.updateLoadInstr(n_cargo_no, :old.planned_buoy, n_planned_buoy, :old.voyage_no, n_voyage_no, n_last_updated_by);";"EC_TRAN";
"CARGO_LOAD_INSTRUCTION";"UPDATING";"AFTER";"300";"ue_replicate_cargovalues.updatecarrier(n_cargo_no,:old.carrier_id, n_carrier_id, n_last_updated_by);";"EC_TRAN";
"CARGO_NOM_DETAIL";"UPDATING";"AFTER";"100";"EcBp_Cargo_Transport.auCargoTransport(n_cargo_no, :old.status, n_status, nvl(n_last_updated_by, n_created_by));";"EC_TRAN";
"CARGO_NOM_DETAIL";"UPDATING";"AFTER";"200";"ue_replicate_cargovalues.updateCarrier(n_cargo_no, :old.carrier_id, n_carrier_id, n_last_updated_by);";"EC_TRAN";
"CARGO_PRICE_LIST";"INSERTING";"AFTER";"20";"EcDp_Cargo_Price.InsNewPriceElementSet(n_PARCEL_KEY, n_OBJECT_ID ,n_PRICE_CONCEPT_CODE, n_PRICE_ELEMENT_CODE, n_DAYTIME, n_CREATED_BY);";"EC_SALE";
"CARGO_PRICE_LIST";"INSERTING";"BEFORE";"100";"n_PRICE_CONCEPT_CODE := ec_product_price.price_concept_code(n_OBJECT_ID);";"EC_SALE";
"CARGO_PRICE_LIST";"INSERTING OR UPDATING";"BEFORE";"10";"n_price_element_code := ecdp_sales_contract_price.GetAnyPriceElement(n_price_concept_code,n_object_id,n_daytime);";"EC_SALE";
"CARGO_STATUS";"UPDATING";"AFTER";"100";"EcBp_Cargo_Transport.auCargoTransport(n_cargo_no, :old.status, n_status, nvl(n_last_updated_by, n_created_by));";"EC_TRAN";
"CARGO_STOR_BATCH";"DELETING";"BEFORE";"200";"EcDp_Cargo_Batch.deleteBatch(n_CARGO_BATCH_NO);";"EC_TRAN";
"CARGO_STOR_BATCH";"INSERTING";"AFTER";"100";"EcDp_Cargo_Batch.instansiate(n_CARGO_BATCH_NO, 'LOAD', n_created_by);";"EC_TRAN";
"CARGO_STR_BTH_ULD";"DELETING";"BEFORE";"200";"EcDp_Cargo_Batch.deleteBatch(n_CARGO_BATCH_NO);";"EC_TRAN";
"CARGO_STR_BTH_ULD";"INSERTING";"AFTER";"100";"EcDp_Cargo_Batch.instansiate(n_CARGO_BATCH_NO, 'UNLOAD', n_created_by);";"EC_TRAN";
"CHEMICAL_INJECTION";"INSERTING OR UPDATING";"BEFORE";"100";"ecdp_chemical_product.biuSetEndDate(n_ASSET_OBJ_ID, n_DAYTIME, n_END_DATE);";"EC_PROD";
"CHEM_TANK_PRODUCT";"INSERTING";"BEFORE";"100";"ecdp_chemical_tank.biuSetEndDate(n_OBJECT_ID, n_DAYTIME, n_DAYTIME, n_END_DATE, n_CHEM_PRODUCT_ID);";"EC_PROD";
"CHEM_TANK_PRODUCT";"UPDATING";"BEFORE";"110";"ecdp_chemical_tank.biuSetEndDate(n_OBJECT_ID, o_DAYTIME, n_DAYTIME, n_END_DATE, n_CHEM_PRODUCT_ID);";"EC_PROD";
"CHILLER";"UPDATING";"AFTER";"3000";"ecdp_equipment_event.updateEventStatus(n_OBJECT_ID, n_DAYTIME, 'CHILLER');";"EC_PROD";
"CNTR_DAY_NOM";"UPDATING";"BEFORE";"1000";"EcDp_contract_Nomination.validateDailyNominationQty(n_OBJECT_ID, n_DAYTIME, n_NOMINATED_QTY);";"EC_TRAN";
"CNTR_DERIVED_PRICE_SETUP";"INSERTING OR UPDATING";"BEFORE";"100";"IF (n_PRICE_CONCEPT_CODE = n_SRC_PRICE_CONCEPT_CODE AND n_PRICE_ELEMENT_CODE = n_SRC_PRICE_ELEMENT_CODE) THEN Raise_Application_Error(-20103,'Can not have same source and target price concept/element'); END IF;";"EC_REVN";
"CNTR_GENERAL_PRICE_SETUP";"INSERTING";"BEFORE";"70";"ecdp_price.ValidateDuplicate(n_object_id,n_daytime,n_end_date,ec_product_price.price_concept_code(n_price_object_id),ec_product_price.product_id(n_price_object_id),ec_product_price.object_code(n_price_object_id));";"EC_REVN";
"CNTR_SUB_DAY_DEL";"UPDATING";"AFTER";"1000";"EcDp_contract_Delivery.aggregateSubDailyToDaily(n_OBJECT_ID, n_DELIVERY_POINT_ID, n_PRODUCTION_DAY, nvl(n_last_updated_by, n_created_by));";"EC_TRAN";
"CNTR_SUB_DAY_NOM";"UPDATING";"AFTER";"100";"EcDp_contract_Delivery.aggregateSubDailyToDaily(n_OBJECT_ID, n_DELIVERY_POINT_ID, n_PRODUCTION_DAY, nvl(n_last_updated_by, n_created_by));";"EC_TRAN";
"CNTR_TEMPLATE_ATTRIBUTE";"DELETING";"BEFORE";"100";"EcBp_Contract_Template.validateDeleteAttribute(n_TEMPLATE_CODE, n_ATTRIBUTE_NAME);";"EC_TRAN";
"CNTR_TEMPLATE_ATTRIBUTE";"UPDATING OR INSERTING";"BEFORE";"200";"IF n_dimension_type is not null and n_time_span <> 'DAY' THEN Raise_Application_Error(-20528, 'It is only possible to register a Dimension Type if the Time Span is Day.'); END IF;";"EC_TRAN";
"CNTR_TEMPLATE_ATTRIBUTE";"UPDATING OR INSERTING";"BEFORE";"300";"IF n_dimension_type is not null and n_attribute_type = 'USER_EXIT' THEN Raise_Application_Error(-20527, 'It is not possible to have User Exit as Attribute Type for attribute with Dimension Type.'); END IF;";"EC_TRAN";
"CO2_REMOVAL_UNIT";"UPDATING";"AFTER";"3000";"ecdp_equipment_event.updateEventStatus(n_OBJECT_ID, n_DAYTIME, 'CO2_REMOVAL_UNIT');";"EC_PROD";
"COLLECTION_POINT_CONN_1";"DELETING";"BEFORE";"500";"EcBp_Objects_Group_Conn.validateDeleteObjectGrp(n_OBJECT_ID, n_START_DATE, n_GROUP_TYPE);";"EC_PROD";
"COLLECTION_POINT_CONN_1";"UPDATING";"AFTER";"700";"EcBp_Objects_Group_Conn.updateChildEndDate(n_OBJECT_ID, n_GROUP_TYPE, n_START_DATE, n_END_DATE);";"EC_PROD";
"COLLECTION_POINT_CONN_1";"UPDATING";"BEFORE";"600";"EcBp_Objects_Group_Conn.verifyObjectGrp(n_OBJECT_ID, n_START_DATE, n_GROUP_TYPE, n_END_DATE);";"EC_PROD";
"COLLECTION_POINT_CONN_2";"INSERTING";"BEFORE";"100";"n_PARENT_GROUP_TYPE:='COLLECTION_POINT';";"EC_PROD";
"COLLECTION_POINT_CONN_2";"INSERTING OR UPDATING";"BEFORE";"200";"EcBp_Objects_Group_Conn.verifyObjectGrpConn(n_OBJECT_ID, n_PARENT_START_DATE, n_PARENT_GROUP_TYPE, n_START_DATE, n_END_DATE);";"EC_PROD";
"COLLECTION_POINT_CONN_2";"INSERTING OR UPDATING";"BEFORE";"300";"EcBp_Objects_Group_Conn.checkIfEventOverlaps(n_OBJECT_ID, n_PARENT_START_DATE, n_PARENT_GROUP_TYPE,n_OBJECT_NAME, n_START_DATE, n_END_DATE);";"EC_PROD";
"COMPRESSOR";"UPDATING";"AFTER";"3000";"ecdp_equipment_event.updateEventStatus(n_OBJECT_ID, n_DAYTIME, 'COMPRESSOR');";"EC_PROD";
"CONDENSATE_SURGE_DRUM";"UPDATING";"AFTER";"3000";"ecdp_equipment_event.updateEventStatus(n_OBJECT_ID, n_DAYTIME, 'CONDENSATE_SURGE_DRUM');";"EC_PROD";
"CONST_STD_CV_IDEAL_MASS";"INSERTING";"BEFORE";"1200";"IF n_METHOD  is null THEN n_METHOD := 'MASS'; END IF;";"EC_PROD";
"CONST_STD_CV_IDEAL_MOL";"INSERTING";"BEFORE";"1200";"IF n_METHOD  is null THEN n_METHOD := 'MOL'; END IF;";"EC_PROD";
"CONTRACT";"INSERTING";"AFTER";"100";"Ecdp_Contract_Setup.CreDefaultCustomerVendor(n_object_id, n_daytime, n_last_updated_by);";"EC_REVN";
"CONTRACT";"INSERTING";"BEFORE";"300";"IF :NEW.FINANCIAL_CODE='FRAME' AND :NEW.PROCESSABLE_CODE='Y' THEN RAISE_APPLICATION_ERROR('-20000', 'The processable code must be set to N when financial code is FRAME'); END IF;";"EC_REVN";
"CONTRACT";"INSERTING OR UPDATING";"AFTER";"400";"ecdp_contract_setup.ValidateContractArea(n_object_id,n_daytime);";"EC_REVN";
"CONTRACT";"UPDATING";"AFTER";"200";"ecdp_contract_setup.updFinancialCode(n_object_id,n_daytime, :new.financial_code);";"EC_REVN";
"CONTRACT_CUST_PARTIES";"INSERTING";"BEFORE";"2000";"ecdp_contract_setup.validateNumberOfShareParties(1, n_OBJECT_ID, 'CUSTOMER');";"EC_REVN";
"CONTRACT_DOC";"INSERTING OR UPDATING";"AFTER";"350";"Ecdp_Contract_Setup.updatePriceIndex(n_OBJECT_ID, n_DAYTIME, :NEW.INT_TYPE_ID);";"EC_REVN";
"CONTRACT_PARTIES";"INSERTING";"AFTER";"700";"IF n_end_date IS NULL THEN EcBp_Contract_Parties.updateNewShareEndDate(n_object_id, n_party_role, n_daytime); END IF;";"EC_TRAN";
"CONTRACT_PRICE_LIST";"INSERTING";"AFTER";"20";"EcDp_Sales_Contract_Price.InsNewPriceElementSet(n_OBJECT_ID ,n_PRICE_CONCEPT_CODE, n_PRICE_ELEMENT_CODE, n_DAYTIME, n_CREATED_BY);";"EC_SALE";
"CONTRACT_PRICE_LIST";"INSERTING";"BEFORE";"10";"n_price_element_code := ecdp_sales_contract_price.GetAnyPriceElement(n_price_concept_code,n_object_id,n_daytime);";"EC_SALE";
"CONTRACT_SHIPPER_PAIR";"DELETING";"BEFORE";"800";"ecdp_contract_shipper_pair.validateDelete(n_object_id, n_delivery_point_id, n_downstream_shipper_id, n_daytime);";"EC_TRAN";
"CONTRACT_TEXT_ITEM";"INSERTING";"BEFORE";"100";"EcDp_System_Key.assignNextNumber('CONTRACT_TEXT_ITEM', n_code);";"EC_REVN";
"CONTRACT_VEND_PARTIES";"INSERTING";"BEFORE";"2000";"ecdp_contract_setup.validateNumberOfShareParties(1, n_OBJECT_ID, 'VENDOR');";"EC_REVN";
"CONT_PAY_TRACKING_ITEM";"DELETING";"BEFORE";"130";"IF n_IS_SYSTEM_GENERATED = 'Y' THEN raise_application_error(-20000, 'A system generated record could not be deleted.'); END IF;";"EC_REVN";
"CONT_PAY_TRACKING_ITEM";"INSERTING";"BEFORE";"120";"EcDp_System_Key.assignNextNumber('CONT_PAY_TRACKING_ITEM', n_item_no);";"EC_REVN";
"CO_GEN_UNIT";"UPDATING";"AFTER";"3000";"ecdp_equipment_event.updateEventStatus(n_OBJECT_ID, n_DAYTIME, 'CO_GEN_UNIT');";"EC_PROD";
"CTRL_SAFETY_SYSTEM";"UPDATING";"AFTER";"3000";"ecdp_equipment_event.updateEventStatus(n_OBJECT_ID, n_DAYTIME, 'CTRL_SAFETY_SYSTEM');";"EC_PROD";
"DEFER_EVENT_CORR_ACTION";"INSERTING";"BEFORE";"3000";"ecbp_deferment_event.verifyactions(n_event_no,n_daytime,n_end_date,n_action);";"EC_PROD";
"DEFER_EVENT_CORR_ACTION";"UPDATING";"AFTER";"3100";"ecbp_deferment_event.verifyactions(n_event_no,n_daytime,n_end_date,n_action);";"EC_PROD";
"DEFER_LOW_AFF_WELL_LONG";"DELETING";"BEFORE";"3200";"ecdp_deferment_event.deleteCalcData(o_wde_no);";"EC_PROD";
"DEFER_LOW_AFF_WELL_LONG";"INSERTING";"BEFORE";"3000";"ecbp_deferment_event.checkIfAffectedWellsOverlap(n_event_no,n_object_id, n_daytime, n_end_date);";"EC_PROD";
"DEFER_LOW_AFF_WELL_LONG";"INSERTING OR UPDATING";"AFTER";"3500";"ecbp_deferment_event.compareLowAndPotentialRate(n_event_no,n_daytime,n_object_id);";"EC_PROD";
"DEFER_LOW_AFF_WELL_LONG";"INSERTING OR UPDATING";"AFTER";"3600";"ecdp_deferment_event.setParentEndDate(n_event_no);";"EC_PROD";
"DEFER_LOW_AFF_WELL_LONG";"INSERTING OR UPDATING";"BEFORE";"3400";"IF (ecdp_well.isWellOpen(n_OBJECT_ID,n_DAYTIME) = 'N') THEN Raise_Application_Error('-20000', 'Well Active Status is not open, not allowed to perform operation.'); ELSIF (ecdp_well.checkClosedWellWithinPeriod(n_OBJECT_ID,n_DAYTIME, NVL(n_END_DATE, to_date('2100-01-01','yyyy-mm-dd'))) = 'Y') THEN Raise_Application_Error('-20000', 'Well Active Status is not open, not allowed to perform operation.'); END IF;";"EC_PROD";
"DEFER_LOW_AFF_WELL_LONG";"UPDATING";"AFTER";"3100";"ecbp_deferment_event.checkIfAffectedWellsOverlap(n_event_no,n_object_id, n_daytime, n_end_date);";"EC_PROD";
"DEFER_LOW_AFF_WELL_LONG";"UPDATING";"BEFORE";"3300";"ecdp_deferment_event.deleteCalcDataOutsideTimeSpan(n_wde_no,n_object_id,n_daytime, n_end_date,:OLD.daytime, :OLD.end_date);";"EC_PROD";
"DEFER_LOW_AFF_WELL_SHORT";"DELETING";"BEFORE";"3200";"ecdp_deferment_event.deleteCalcData(o_wde_no);";"EC_PROD";
"DEFER_LOW_AFF_WELL_SHORT";"INSERTING";"BEFORE";"3000";"ecbp_deferment_event.checkIfAffectedWellsOverlap(n_event_no,n_object_id, n_daytime, n_end_date);";"EC_PROD";
"DEFER_LOW_AFF_WELL_SHORT";"INSERTING OR UPDATING";"AFTER";"3500";"ecbp_deferment_event.compareLowAndPotentialRate(n_event_no,n_daytime,n_object_id);";"EC_PROD";
"DEFER_LOW_AFF_WELL_SHORT";"INSERTING OR UPDATING";"AFTER";"3600";"ecdp_deferment_event.setParentEndDate(n_event_no); ";"EC_PROD";
"DEFER_LOW_AFF_WELL_SHORT";"INSERTING OR UPDATING";"BEFORE";"3400";"IF (ecdp_well.isWellOpen(n_OBJECT_ID,n_DAYTIME) = 'N') THEN Raise_Application_Error('-20000', 'Well Active Status is not open, not allowed to perform operation.'); ELSIF (ecdp_well.checkClosedWellWithinPeriod(n_OBJECT_ID,n_DAYTIME, NVL(n_END_DATE, to_date('2100-01-01','yyyy-mm-dd'))) = 'Y') THEN Raise_Application_Error('-20000', 'Well Active Status is not open, not allowed to perform operation.'); END IF;";"EC_PROD";
"DEFER_LOW_AFF_WELL_SHORT";"UPDATING";"AFTER";"3100";"ecbp_deferment_event.checkIfAffectedWellsOverlap(n_event_no,n_object_id, n_daytime, n_end_date);";"EC_PROD";
"DEFER_LOW_AFF_WELL_SHORT";"UPDATING";"BEFORE";"3300";"ecdp_deferment_event.deleteCalcDataOutsideTimeSpan(n_wde_no,n_object_id,n_daytime, n_end_date,:OLD.daytime, :OLD.end_date);";"EC_PROD";
"DEFER_LOW_EVENT_LONG";"INSERTING";"AFTER";"3200";"ecdp_deferment_event.insertAffectedWells(n_event_no);";"EC_PROD";
"DEFER_LOW_EVENT_LONG";"INSERTING OR UPDATING";"AFTER";"3300";"ecdp_deferment_event.updateStartDateForWellDefermnt(n_event_no, n_daytime, :old.daytime); ecdp_deferment_event.updateEndDateForWellDeferment(n_event_no, n_end_date, :old.end_date);";"EC_PROD";
"DEFER_LOW_EVENT_LONG";"INSERTING OR UPDATING";"BEFORE";"3100";"IF (n_ASSET_TYPE = 'WELL' AND ecdp_well.isWellOpen(n_ASSET_ID,n_DAYTIME) = 'N') THEN Raise_Application_Error('-20000', 'Well Active Status is not open, not allowed to perform operation.'); ELSIF (n_ASSET_TYPE = 'WELL' AND ecdp_well.checkClosedWellWithinPeriod(n_ASSET_ID,n_DAYTIME, NVL(n_END_DATE, to_date('2100-01-01','yyyy-mm-dd'))) = 'Y') THEN Raise_Application_Error('-20000', 'Well Active Status is not open, not allowed to perform operation.'); END IF;";"EC_PROD";
"DEFER_LOW_EVENT_SHORT";"INSERTING";"AFTER";"3200";"ecdp_deferment_event.insertAffectedWells(n_event_no);";"EC_PROD";
"DEFER_LOW_EVENT_SHORT";"INSERTING OR UPDATING";"AFTER";"3300";"ecdp_deferment_event.updateStartDateForWellDefermnt(n_event_no, n_daytime, :old.daytime); ecdp_deferment_event.updateEndDateForWellDeferment(n_event_no, n_end_date, :old.end_date);";"EC_PROD";
"DEFER_LOW_EVENT_SHORT";"INSERTING OR UPDATING";"BEFORE";"3100";"IF (n_ASSET_TYPE = 'WELL' AND ecdp_well.isWellOpen(n_ASSET_ID,n_DAYTIME) = 'N') THEN Raise_Application_Error('-20000', 'Well Active Status is not open, not allowed to perform operation.'); ELSIF (n_ASSET_TYPE = 'WELL' AND ecdp_well.checkClosedWellWithinPeriod(n_ASSET_ID,n_DAYTIME, NVL(n_END_DATE, to_date('2100-01-01','yyyy-mm-dd'))) = 'Y') THEN Raise_Application_Error('-20000', 'Well Active Status is not open, not allowed to perform operation.'); END IF;";"EC_PROD";
"DEFER_LOW_OFF";"INSERTING OR UPDATING";"AFTER";"3300";"ecdp_deferment_event.updateEndDateForWellDeferment(n_event_no, n_end_date, :old.end_date);";"EC_PROD";
"DEFER_OFF_AFF_WELL_LONG";"DELETING";"BEFORE";"3200";"ecdp_deferment_event.deleteCalcData(o_wde_no);";"EC_PROD";
"DEFER_OFF_AFF_WELL_LONG";"INSERTING";"BEFORE";"3000";"ecbp_deferment_event.checkIfAffectedWellsOverlap(n_event_no,n_object_id, n_daytime, n_end_date);";"EC_PROD";
"DEFER_OFF_AFF_WELL_LONG";"INSERTING OR UPDATING";"AFTER";"3400";"ecdp_deferment_event.setParentEndDate(n_event_no); ";"EC_PROD";
"DEFER_OFF_AFF_WELL_LONG";"INSERTING OR UPDATING";"BEFORE";"100";"IF (ecdp_well.isWellOpen(n_OBJECT_ID,n_DAYTIME) = 'N') THEN Raise_Application_Error('-20000', 'Well Active Status is not open, not allowed to perform operation.'); ELSIF (ecdp_well.checkClosedWellWithinPeriod(n_OBJECT_ID,n_DAYTIME, NVL(n_END_DATE, to_date('2100-01-01','yyyy-mm-dd'))) = 'Y') THEN Raise_Application_Error('-20000', 'Well Active Status is not open, not allowed to perform operation.'); END IF;";"EC_PROD";
"DEFER_OFF_AFF_WELL_LONG";"UPDATING";"AFTER";"3100";"ecbp_deferment_event.checkIfAffectedWellsOverlap(n_event_no,n_object_id, n_daytime, n_end_date);";"EC_PROD";
"DEFER_OFF_AFF_WELL_LONG";"UPDATING";"BEFORE";"3300";"ecdp_deferment_event.deleteCalcDataOutsideTimeSpan(n_wde_no,n_object_id,n_daytime, n_end_date,:OLD.daytime, :OLD.end_date);";"EC_PROD";
"DEFER_OFF_AFF_WELL_SHORT";"DELETING";"BEFORE";"3200";"ecdp_deferment_event.deleteCalcData(o_wde_no);";"EC_PROD";
"DEFER_OFF_AFF_WELL_SHORT";"INSERTING";"BEFORE";"3000";"ecbp_deferment_event.checkIfAffectedWellsOverlap(n_event_no,n_object_id, n_daytime, n_end_date);";"EC_PROD";
"DEFER_OFF_AFF_WELL_SHORT";"INSERTING OR UPDATING";"AFTER";"3500";"ecdp_deferment_event.setParentEndDate(n_event_no);";"EC_PROD";
"DEFER_OFF_AFF_WELL_SHORT";"INSERTING OR UPDATING";"BEFORE";"3400";"IF (ecdp_well.isWellOpen(n_OBJECT_ID,n_DAYTIME) = 'N') THEN Raise_Application_Error('-20000', 'Well Active Status is not open, not allowed to perform operation.'); ELSIF (ecdp_well.checkClosedWellWithinPeriod(n_OBJECT_ID,n_DAYTIME, NVL(n_END_DATE, to_date('2100-01-01','yyyy-mm-dd'))) = 'Y') THEN Raise_Application_Error('-20000', 'Well Active Status is not open, not allowed to perform operation.'); END IF;";"EC_PROD";
"DEFER_OFF_AFF_WELL_SHORT";"UPDATING";"AFTER";"3100";"ecbp_deferment_event.checkIfAffectedWellsOverlap(n_event_no,n_object_id, n_daytime, n_end_date);";"EC_PROD";
"DEFER_OFF_AFF_WELL_SHORT";"UPDATING";"BEFORE";"3300";"ecdp_deferment_event.deleteCalcDataOutsideTimeSpan(n_wde_no,n_object_id,n_daytime, n_end_date,:OLD.daytime, :OLD.end_date);";"EC_PROD";
"DEFER_OFF_EVENT_LONG";"INSERTING";"AFTER";"3200";"ecdp_deferment_event.insertAffectedWells(n_event_no);";"EC_PROD";
"DEFER_OFF_EVENT_LONG";"INSERTING OR UPDATING";"AFTER";"3300";"ecdp_deferment_event.updateStartDateForWellDefermnt(n_event_no, n_daytime, :old.daytime); ecdp_deferment_event.updateEndDateForWellDeferment(n_event_no, n_end_date, :old.end_date);";"EC_PROD";
"DEFER_OFF_EVENT_LONG";"INSERTING OR UPDATING";"BEFORE";"3100";"IF (n_ASSET_TYPE = 'WELL' AND ecdp_well.isWellOpen(n_ASSET_ID,n_DAYTIME) = 'N') THEN Raise_Application_Error('-20000', 'Well Active Status is not open, not allowed to perform operation.'); ELSIF (n_ASSET_TYPE = 'WELL' AND ecdp_well.checkClosedWellWithinPeriod(n_ASSET_ID,n_DAYTIME, NVL(n_END_DATE, to_date('2100-01-01','yyyy-mm-dd'))) = 'Y') THEN Raise_Application_Error('-20000', 'Well Active Status is not open, not allowed to perform operation.'); END IF;";"EC_PROD";
"DEFER_OFF_EVENT_SHORT";"INSERTING";"AFTER";"3200";"ecdp_deferment_event.insertAffectedWells(n_event_no);";"EC_PROD";
"DEFER_OFF_EVENT_SHORT";"INSERTING OR UPDATING";"AFTER";"3300";"ecdp_deferment_event.updateStartDateForWellDefermnt(n_event_no, n_daytime, :old.daytime); ecdp_deferment_event.updateEndDateForWellDeferment(n_event_no, n_end_date, :old.end_date);";"EC_PROD";
"DEFER_OFF_EVENT_SHORT";"INSERTING OR UPDATING";"BEFORE";"3100";"IF (n_ASSET_TYPE = 'WELL' AND ecdp_well.isWellOpen(n_ASSET_ID,n_DAYTIME) = 'N') THEN Raise_Application_Error('-20000', 'Well Active Status is not open, not allowed to perform operation.'); ELSIF (n_ASSET_TYPE = 'WELL' AND ecdp_well.checkClosedWellWithinPeriod(n_ASSET_ID,n_DAYTIME, NVL(n_END_DATE, to_date('2100-01-01','yyyy-mm-dd'))) = 'Y') THEN Raise_Application_Error('-20000', 'Well Active Status is not open, not allowed to perform operation.'); END IF;";"EC_PROD";
"DEF_DAY_DEFERMENT_EVENT";"DELETING";"BEFORE";"2500";"EcBp_Defer_Master_Event.verifyDelDefermentEvent(n_DEFERMENT_EVENT_NO);";"EC_PROD";
"DEF_DAY_DEFERMENT_EVENT";"INSERTING";"AFTER";"2400";"EcDp_Defer_Master_Event.createSummaryRecords(n_DEFER_LEVEL_OBJECT_ID,n_DEFERMENT_EVENT_NO);";"EC_PROD";
"DEF_DAY_DEFERMENT_EVENT";"INSERTING";"AFTER";"2600";"EcBp_Deferment_Event.loadSummaryEvents(n_DEFERMENT_EVENT_NO);";"EC_PROD";
"DEF_DAY_DEFERMENT_EVENT";"INSERTING OR UPDATING";"BEFORE";"2300";"EcBp_Defer_Master_Event.verifyDefermentEvent(n_DEFERMENT_EVENT_NO,n_INCIDENT_NO, n_DAYTIME,n_END_DATE);";"EC_PROD";
"DEF_DAY_DEFERMENT_EVENT";"UPDATING";"AFTER";"2700";"IF (:OLD.END_DATE < n_END_DATE) THEN EcBp_Deferment_Event.loadSummaryEvents(n_DEFERMENT_EVENT_NO, :OLD.END_DATE); END IF;";"EC_PROD";
"DEF_DAY_MASTER_EVENT";"DELETING";"BEFORE";"2300";"EcBp_Defer_Master_Event.verifyDelMasterDefermentEvent(n_INCIDENT_NO);";"EC_PROD";
"DEF_DAY_MASTER_EVENT";"UPDATING";"BEFORE";"2200";"EcBp_Defer_Master_Event.verifyMasterDefermentEvent(n_INCIDENT_NO, n_END_DATE);";"EC_PROD";
"DEF_DAY_SUMMARY_EVENT";"UPDATING";"AFTER";"1800";"EcDp_Defer_Summary.updateDefermentEvent(n_DEFERMENT_EVENT_NO, n_DAYTIME);";"EC_PROD";
"DEHYDRATOR";"UPDATING";"AFTER";"3000";"ecdp_equipment_event.updateEventStatus(n_OBJECT_ID, n_DAYTIME, 'DEHYDRATOR');";"EC_PROD";
"DEMURRAGE";"INSERTING";"BEFORE";"100";"n_LIFTING_EVENT := 'LOAD';";"EC_TRAN";
"DEMURRAGE_UNLOAD";"INSERTING";"BEFORE";"100";"n_LIFTING_EVENT := 'UNLOAD';";"EC_TRAN";
"DISPATCHING_COL_MAPPING";"INSERTING";"AFTER";"100";"EcBp_Dispatching_Mapping.setColMappingEndDate(n_object_id, n_bf_class_name, n_daytime, n_attribute_name, n_stream_id, n_table_name);";"EC_SALE";
"DISPATCHING_ROW_MAPPING";"DELETING";"BEFORE";"100";"EcBp_Dispatching_Mapping.validateDelete(n_object_id, n_bf_class_name);";"EC_SALE";
"DISPATCHING_ROW_MAPPING";"INSERTING";"AFTER";"100";"EcBp_Dispatching_Mapping.setRowMappingEndDate(n_object_id, n_bf_class_name, n_daytime);";"EC_SALE";
"DOC_DATE_TERM";"INSERTING OR UPDATING";"BEFORE";"100";"ecdp_calendar.validateOffset(:NEW.offset, :NEW.doc_date_term_method);";"EC_REVN";
"DOC_GEN_LOG";"INSERTING";"BEFORE";"1000";"EcDp_System_Key.assignNextNumber('DOC_GEN_LOG', n_log_item_no);";"EC_REVN";
"DOC_RECEIVED_TERM";"INSERTING OR UPDATING";"BEFORE";"100";"ecdp_calendar.validateOffset(:NEW.offset, :NEW.doc_rec_term_method);";"EC_REVN";
"DOC_SEQUENCE";"INSERTING ";"AFTER";"100";"ecdp_doc_sequence.InsNewDocSeqNumber(n_object_id, n_object_start_date); ";"EC_REVN";
"DOC_SEQUENCE";"UPDATING";"AFTER";"200";"ecdp_doc_sequence.updDocSeq(:NEW.code, :OLD.code, :NEW.starting_point, :OLD.starting_point); ";"EC_REVN";
"DOC_SEQUENCE";"UPDATING";"AFTER";"300";"ecdp_doc_sequence.resetDocSeqNumber(n_object_id, :NEW.reset_date); ";"EC_REVN";
"DOC_SEQUENCE";"UPDATING";"BEFORE";"400";"ecdp_doc_sequence.delDocSeq(n_object_id, n_object_start_date, n_object_end_date); ";"EC_REVN";
"EMULSIFIER";"UPDATING";"AFTER";"3000";"ecdp_equipment_event.updateEventStatus(n_OBJECT_ID, n_DAYTIME, 'EMULSIFIER');";"EC_PROD";
"EQPM_EVENT";"DELETING";"BEFORE";"1200";"ecdp_equipment_event.deleteEventStatus(n_object_id,n_daytime);";"EC_PROD";
"EQPM_EVENT";"INSERTING";"AFTER";"1100";"ecdp_equipment_event.insertEventStatus(n_object_id,n_daytime,nvl(n_last_updated_by, n_created_by));";"EC_PROD";
"EQPM_OFF";"DELETING";"BEFORE";"500";"EcBp_Well_Eqpm_Deferment.checkIfChildEventExists(n_OBJECT_ID, n_DAYTIME);";"EC_PROD";
"EQPM_OFF";"INSERTING";"BEFORE";"100";"n_DOWNTIME_CATEG:='EQPM_OFF';";"EC_PROD";
"EQPM_OFF";"INSERTING";"BEFORE";"200";"IF n_DOWNTIME_TYPE  = 'EQPM_DT' THEN n_DOWNTIME_CLASS_TYPE := 'SINGLE';  ELSE  n_DOWNTIME_CLASS_TYPE := 'GROUP'; END IF;";"EC_PROD";
"EQPM_OFF";"INSERTING OR UPDATING";"AFTER";"700";"EcDp_Well_Eqpm_Deferment.updateReasonCodeForChildEvent(n_object_id, NULL,n_daytime, n_end_date,  nvl(n_last_updated_by, n_created_by),nvl(n_last_updated_date, n_created_date));";"EC_PROD";
"EQPM_OFF";"INSERTING OR UPDATING";"AFTER";"1000";"IF n_DAYTIME > SYSDATE+1 OR n_END_DATE > SYSDATE+1 THEN Raise_Application_Error('-20610', 'Start Date or End Date should not exceed more than one day of system date.');  END IF;";"EC_PROD";
"EQPM_OFF";"INSERTING OR UPDATING";"BEFORE";"600";"EcBp_Well_Eqpm_Deferment.checkIfEventOverlaps(n_OBJECT_ID, n_DAYTIME, n_END_DATE, n_DOWNTIME_CATEG);";"EC_PROD";
"EQPM_OFF";"UPDATING";"AFTER";"400";"IF nvl(:OLD.END_DATE, to_date('1 JAN 1900')) <> nvl(:NEW.END_DATE, to_date('1 JAN 1900')) then EcDp_Well_Eqpm_Deferment.updateEndDateForChildEvent(n_OBJECT_ID, n_DAYTIME, n_END_DATE, :OLD.END_DATE, nvl(n_last_updated_by, n_created_by), nvl(n_last_updated_date, n_created_date));end if;";"EC_PROD";
"EQPM_OFF_CHILD";"INSERTING";"BEFORE";"100";"n_DOWNTIME_CATEG:='EQPM_OFF';";"EC_PROD";
"EQPM_OFF_CHILD";"INSERTING";"BEFORE";"200";"n_DOWNTIME_CLASS_TYPE:='GROUP_CHILD';";"EC_PROD";
"EQPM_OFF_CHILD";"INSERTING";"BEFORE";"400";"n_DOWNTIME_TYPE:='EQPM_DT';";"EC_PROD";
"EQPM_OFF_CHILD";"INSERTING";"BEFORE";"700";"EcBp_Well_Eqpm_Deferment.checkValidChildPeriod(n_DAYTIME, n_PARENT_OBJECT_ID,  n_PARENT_DAYTIME);";"EC_PROD";
"EQPM_OFF_CHILD";"INSERTING";"BEFORE";"1100";"IF n_Object_Type is null THEN n_Object_Type := ecdp_objects.GetObjClassName(n_Object_ID); END IF; ";"EC_PROD";
"EQPM_OFF_CHILD";"INSERTING OR UPDATING";"AFTER";"900";"EcDp_Well_Eqpm_Deferment.updateReasonCodeForChildEvent(n_parent_object_id, n_object_id, n_parent_daytime, n_end_date,  nvl(n_last_updated_by, n_created_by),nvl(n_last_updated_date, n_created_date));";"EC_PROD";
"EQPM_OFF_CHILD";"INSERTING OR UPDATING";"AFTER";"1000";"IF n_END_DATE > ec_well_equip_downtime.end_date(ec_well_equip_downtime.parent_object_id(n_object_id,n_daytime),n_daytime) THEN Raise_Application_Error('-20611', 'End Date must be equal to or less than End Date of the parent records.');  END IF;";"EC_PROD";
"EQPM_OFF_CHILD";"INSERTING OR UPDATING";"BEFORE";"600";"EcBp_Well_Eqpm_Deferment.checkIfEventOverlaps(n_OBJECT_ID, n_DAYTIME, n_END_DATE, n_DOWNTIME_CATEG);";"EC_PROD";
"EQUIPMENT_OTHER";"UPDATING";"AFTER";"3000";"ecdp_equipment_event.updateEventStatus(n_OBJECT_ID, n_DAYTIME, 'EQUIPMENT_OTHER');";"EC_PROD";
"EXCHANGE_RATE";"INSERTING";"BEFORE";"60";"IF ec_prosty_codes.alt_code(n_time_scope, 'FX_TYPE') = 'MONTHLY' THEN n_daytime := trunc(n_daytime, 'MONTH'); END IF;";"EC_SALE";
"EXCHANGE_RATE";"INSERTING OR UPDATING";"AFTER";"80";"EcBp_Currency.validateInsert(n_DAYTIME,n_OBJECT_ID,n_TO_CURRENCY_ID, n_time_scope, n_FOREX_SOURCE_ID);";"EC_SALE";
"EXCHANGE_RATE";"INSERTING OR UPDATING";"BEFORE";"70";"EcBp_Currency.validateMonthlyRate(n_DAYTIME, n_time_scope);";"EC_SALE";
"FCST_CNTR_ANALYSIS";"DELETING";"BEFORE";"200";"ecdp_forecast.deleteComp(o_analysis_no);";"EC_TRAN";
"FCST_CNTR_ANALYSIS";"INSERTING";"AFTER";"100";"ecdp_forecast.generateComp(n_contract_id, NULL, n_daytime, n_period_no, n_series);";"EC_TRAN";
"FCST_CNTR_DP_ANALYSIS";"DELETING";"BEFORE";"200";"ecdp_forecast.deleteComp(o_analysis_no);";"EC_TRAN";
"FCST_CNTR_DP_ANALYSIS";"INSERTING";"AFTER";"100";"ecdp_forecast.generateComp(n_contract_id, n_delivery_point_id, n_daytime, n_period_no, n_series);";"EC_TRAN";
"FCST_DP_ANALYSIS";"DELETING";"BEFORE";"200";"ecdp_forecast.deleteComp(o_analysis_no);";"EC_TRAN";
"FCST_DP_ANALYSIS";"INSERTING";"AFTER";"100";"ecdp_forecast.generateComp(NULL, n_delivery_point_id, n_daytime, n_period_no, n_series);";"EC_TRAN";
"FCST_GPURCH_MEMBER";"DELETING";"BEFORE";"1200";"delete from fcst_yr_status where object_id=n_OBJECT_ID and member_no=n_MEMBER_NO; delete from fcst_mth_status where object_id=n_OBJECT_ID and member_no=n_MEMBER_NO; ";"EC_REVN";
"FCST_GPURCH_MEMBER";"INSERTING";"BEFORE";"1100";"EcDp_System_Key.assignNextNumber('FCST_MEMBER', n_member_no);";"EC_REVN";
"FCST_GSALES_MEMBER";"DELETING";"BEFORE";"2000";"delete from fcst_yr_status where object_id=n_OBJECT_ID and member_no=n_MEMBER_NO; delete from fcst_mth_status where object_id=n_OBJECT_ID and member_no=n_MEMBER_NO; ";"EC_REVN";
"FCST_GSALES_MEMBER";"INSERTING";"BEFORE";"1700";"EcDp_Revn_Forecast.validateFcstMember(n_object_id,  n_product_id,  n_stream_item_id, :OLD.stream_item_id, n_product_collection_type, 'INSERT'); EcDp_System_Key.assignNextNumber('FCST_MEMBER', n_member_no);";"EC_REVN";
"FCST_GSALES_MEMBER";"INSERTING OR UPDATING";"AFTER";"1900";"update fcst_member set field_id = ec_stream_item_version.field_id(n_STREAM_ITEM_ID,ec_forecast_version.plan_date(n_OBJECT_ID, ec_forecast.start_date(n_OBJECT_ID), '<='),'<=') where stream_item_id = n_STREAM_ITEM_ID;";"EC_REVN";
"FCST_GSALES_MEMBER";"UPDATING";"BEFORE";"1800";"EcDp_Revn_Forecast.validateFcstMember(n_object_id,  n_product_id,  n_stream_item_id, :OLD.stream_item_id, n_product_collection_type, 'UPDATE');";"EC_REVN";
"FCST_LIQUID_MEMBER";"DELETING";"BEFORE";"1900";"delete from fcst_yr_status where object_id=n_OBJECT_ID and member_no=n_MEMBER_NO; delete from fcst_mth_status where object_id=n_OBJECT_ID and member_no=n_MEMBER_NO; ";"EC_REVN";
"FCST_LIQUID_MEMBER";"INSERTING";"BEFORE";"1600";"EcDp_Revn_Forecast.validateFcstMember(n_object_id,  n_product_id,  n_stream_item_id, :OLD.stream_item_id, n_product_collection_type, 'INSERT'); EcDp_System_Key.assignNextNumber('FCST_MEMBER', n_member_no);";"EC_REVN";
"FCST_LIQUID_MEMBER";"INSERTING OR UPDATING";"AFTER";"1800";"update fcst_member set field_id = ec_stream_item_version.field_id(n_STREAM_ITEM_ID,ec_forecast_version.plan_date(n_OBJECT_ID, ec_forecast.start_date(n_OBJECT_ID), '<='),'<=') where stream_item_id = n_STREAM_ITEM_ID;";"EC_REVN";
"FCST_LIQUID_MEMBER";"UPDATING";"BEFORE";"1700";"EcDp_Revn_Forecast.validateFcstMember(n_object_id,  n_product_id,  n_stream_item_id, :OLD.stream_item_id, n_product_collection_type, 'UPDATE');";"EC_REVN";
"FCST_QTY_MEMBER";"DELETING";"BEFORE";"1400";"delete from fcst_mth_status where object_id=n_OBJECT_ID and member_no=n_MEMBER_NO;";"EC_REVN";
"FCST_QTY_MEMBER";"DELETING";"BEFORE";"1500";"delete from fcst_yr_status where object_id=n_OBJECT_ID and member_no=n_MEMBER_NO;";"EC_REVN";
"FCST_QTY_MEMBER";"INSERTING";"BEFORE";"1100";"EcDp_System_Key.assignNextNumber('FCST_MEMBER', n_member_no);";"EC_REVN";
"FCST_QTY_MEMBER";"INSERTING";"BEFORE";"1200";"EcDp_Stream_Item.checkForecastCaseStim(n_OBJECT_ID, n_PRODUCT_ID, n_STREAM_ITEM_ID, n_PRODUCT_CONTEXT);";"EC_REVN";
"FCST_QTY_MEMBER";"INSERTING OR UPDATING";"AFTER";"1300";"update fcst_member set field_id = ec_stream_item_version.field_id(n_STREAM_ITEM_ID,ec_forecast_version.plan_date(n_OBJECT_ID, ec_forecast.start_date(n_OBJECT_ID), '<='),'<=') where stream_item_id = n_STREAM_ITEM_ID;";"EC_REVN";
"FCST_QTY_PRODUCT_SETUP";"INSERTING OR UPDATING";"BEFORE";"1900";"EcDp_Stream_Item.checkForecastCaseAdjStim(n_OBJECT_ID, n_PRODUCT_ID, n_PRODUCT_CONTEXT, n_CPY_ADJ_STREAM_ITEM_ID);";"EC_REVN";
"FCST_QTY_PRODUCT_SETUP";"INSERTING OR UPDATING";"BEFORE";"2000";"EcDp_Stream_Item.checkForecastCaseAdjStim(n_OBJECT_ID, n_PRODUCT_ID, n_PRODUCT_CONTEXT, n_FULL_ADJ_STREAM_ITEM_ID);";"EC_REVN";
"FCST_QTY_PRODUCT_SETUP";"INSERTING OR UPDATING";"BEFORE";"2100";"EcDp_Stream_Item.checkUniqueQtyFcstCase(n_OBJECT_ID, n_SORT_ORDER);";"EC_REVN";
"FCST_REVN_PRODUCT_SETUP";"DELETING";"BEFORE";"2100";"EcDp_Revn_Forecast.delCascadeFcstMember(o_object_id, o_product_id, o_product_collection_type);";"EC_REVN";
"FCST_REVN_PRODUCT_SETUP";"INSERTING";"AFTER";"2000";"EcDp_Revn_Forecast.populateFcstMember(n_object_id, n_product_id, n_product_collection_type, n_commercial_adj_type, n_swap_adj_type);";"EC_REVN";
"FCST_REVN_PRODUCT_SETUP";"UPDATING";"AFTER";"2200";"EcDp_Revn_Forecast.updateFcstProductSetup(n_object_id, n_product_collection_type, n_product_id, n_commercial_adj_type, n_swap_adj_type, :OLD.product_id, :OLD.commercial_adj_type, :OLD.swap_adj_type);";"EC_REVN";
"FLOWLINE_TEST_DEF";"DELETING";"BEFORE";"800";"EcDp_Performance_Test.removeGraphDefParameters(n_OBJECT_ID,n_TEST_NO);";"EC_PROD";
"FLOWLINE_TEST_DEF";"INSERTING";"AFTER";"700";"EcDp_Performance_Test.createGraphDefParameters(n_OBJECT_ID,n_TEST_NO,n_CREATED_BY);";"EC_PROD";
"FLWL_FORM_ION_ANALYSIS";"INSERTING";"BEFORE";"200";"n_PRODUCTION_DAY := Ecdp_Productionday.getProductionDay(n_OBJECT_CLASS_NAME,n_OBJECT_ID,n_DAYTIME);";"EC_PROD";
"FLWL_FORM_ION_ANALYSIS";"INSERTING OR UPDATING";"BEFORE";"100";"n_object_class_name := 'FLOWLINE';";"EC_PROD";
"FLWL_INJ_ION_ANALYSIS";"INSERTING";"BEFORE";"200";"n_PRODUCTION_DAY := Ecdp_Productionday.getProductionDay(n_OBJECT_CLASS_NAME,n_OBJECT_ID,n_DAYTIME);";"EC_PROD";
"FLWL_INJ_ION_ANALYSIS";"INSERTING OR UPDATING";"BEFORE";"100";"n_object_class_name := 'FLOWLINE';";"EC_PROD";
"FLWL_PROD_ION_ANALYSIS";"INSERTING";"BEFORE";"200";"n_PRODUCTION_DAY := Ecdp_Productionday.getProductionDay(n_OBJECT_CLASS_NAME,n_OBJECT_ID,n_DAYTIME);";"EC_PROD";
"FLWL_PROD_ION_ANALYSIS";"INSERTING OR UPDATING";"BEFORE";"100";"n_object_class_name := 'FLOWLINE';";"EC_PROD";
"FORECAST";"INSERTING OR UPDATING";"AFTER";"200";"ecdp_revn_forecast.setValidPlanDate(n_object_id,n_daytime);";"EC_REVN";
"FORECAST";"INSERTING OR UPDATING";"BEFORE";"100";"ecdp_revn_forecast.validateFcstObj(n_object_id, n_object_start_date, o_object_start_date, :NEW.populate_method, :NEW.plan_date, :NEW.forecast_scope, :NEW.official_ind, n_functional_area_code, :NEW.forecast_id); ";"EC_REVN";
"FOREX_SOURCE_SETUP";"INSERTING";"BEFORE";"100";"IF ec_prosty_codes.alt_code(n_time_scope, 'FX_TYPE') = 'MONTHLY' THEN n_daytime := trunc(n_daytime, 'MONTH'); END IF;";"EC_REVN";
"GAS_EQPM_SUB_DAY_RESTR";"INSERTING OR UPDATING";"BEFORE";"10";"n_summer_time := ecdp_date_time.get_summertime_flag(n_daytime,n_summer_time);";"EC_PROD";
"GAS_PROC_EQPM";"UPDATING";"AFTER";"3000";"ecdp_equipment_event.updateEventStatus(n_OBJECT_ID, n_DAYTIME, 'GAS_PROC_EQPM');";"EC_PROD";
"GAS_SUB_DAY_EXP_AND_FUEL";"INSERTING OR UPDATING";"AFTER";"800";"EcBp_Contract_Dispatching.aggregateSubDaily('GAS_DAY_EXP_AND_FUEL',ecbp_dispatching_mapping.getColumnValueByName(n_OBJECT_ID,n_FIELD_ID,'SUB_DAILY','GAS_DAY_EXP_AND_FUEL','ATTRIBUTE_NAME'),n_FIELD_ID,n_OBJECT_ID,n_PRODUCTION_DAY,nvl(n_last_updated_by, n_created_by));";"EC_SALE";
"GAS_SUB_DAY_EXP_AND_FUEL";"INSERTING OR UPDATING";"BEFORE";"900";"n_DATA_CLASS_NAME:='GAS_SUB_DAY_EXP_AND_FUEL';";"EC_SALE";
"GAS_SUB_DAY_NGL_EXPORT";"INSERTING OR UPDATING";"AFTER";"900";"EcBp_Contract_Dispatching.aggregateSubDaily('GAS_DAY_NGL_EXPORT',ecbp_dispatching_mapping.getColumnValueByName(n_OBJECT_ID,n_FIELD_ID,'SUB_DAILY','GAS_DAY_NGL_EXPORT','ATTRIBUTE_NAME'),n_FIELD_ID,n_OBJECT_ID,n_PRODUCTION_DAY,nvl(n_last_updated_by, n_created_by));";"EC_SALE";
"GAS_SUB_DAY_NGL_EXPORT";"INSERTING OR UPDATING";"BEFORE";"1000";"n_DATA_CLASS_NAME:='GAS_SUB_DAY_NGL_EXPORT';";"EC_SALE";
"GENERATOR";"UPDATING";"AFTER";"3000";"ecdp_equipment_event.updateEventStatus(n_OBJECT_ID, n_DAYTIME, 'GENERATOR');";"EC_PROD";
"HH_DATA_CLASS";"DELETING";"BEFORE";"600";"EcDp_Handheld.setConfigUpdated(n_OBJ_SOURCE_NO, EcDp_Date_Time.getCurrentSysdate());";"EC_FRMW";
"HH_DATA_CLASS";"INSERTING";"AFTER";"500";"EcDp_Handheld.populateObjectAttribute(n_OBJ_SOURCE_NO, n_CLASS_NAME, n_OBJECT_ID, n_CREATED_BY);EcDp_Handheld.setConfigUpdated(n_OBJ_SOURCE_NO,EcDp_Date_Time.getCurrentSysdate());";"EC_FRMW";
"HH_OBJECT_ATTRIBUTE";"DELETING";"BEFORE";"1000";"EcDp_Handheld.setConfigUpdated(n_OBJ_SOURCE_NO,EcDp_Date_Time.getCurrentSysdate());";"EC_FRMW";
"HH_OBJECT_ATTRIBUTE";"INSERTING";"AFTER";"1100";"EcDp_Handheld.setConfigUpdated(n_OBJ_SOURCE_NO,EcDp_Date_Time.getCurrentSysdate());";"EC_FRMW";
"HH_OBJECT_SOURCE";"INSERTING";"AFTER";"100";"Ecdp_handheld.populateRefAttribute(n_OBJ_SOURCE_NO,n_OBJECT_CLASS,n_OBJECT_ID,n_CREATED_BY);";"EC_FRMW";
"HH_OBJ_ATTR_VALUES";"DELETING";"BEFORE";"200";"EcDp_Handheld.setConfigUpdated(n_OBJ_SOURCE_NO,EcDp_Date_Time.getCurrentSysdate());";"EC_FRMW";
"HH_OBJ_ATTR_VALUES";"INSERTING";"AFTER";"300";"EcDp_Handheld.setConfigUpdated(n_OBJ_SOURCE_NO,EcDp_Date_Time.getCurrentSysdate());";"EC_FRMW";
"HH_REFERENCE_VALUE";"DELETING";"BEFORE";"200";"EcDp_Handheld.setConfigUpdated(n_OBJ_SOURCE_NO,EcDp_Date_Time.getCurrentSysdate());";"EC_FRMW";
"HH_REFERENCE_VALUE";"INSERTING";"AFTER";"300";"EcDp_Handheld.setConfigUpdated(n_OBJ_SOURCE_NO,EcDp_Date_Time.getCurrentSysdate());";"EC_FRMW";
"IFAC_SALES_QTY";"INSERTING";"BEFORE";"100";"n_ALLOC_NO := ecdp_inbound_interface.GetNextPeriodAllocNo(:NEW.CONTRACT_CODE, :NEW.PRODUCT, :NEW.DELIVERY_POINT, :NEW.PROFIT_CENTER, :NEW.PRICE_CONCEPT_CODE, :NEW.DAYTIME);";"EC_REVN";
"IFLW_DAY_STATUS_GAS";"INSERTING";"BEFORE";"10";"n_INJ_TYPE := 'GI';";"EC_PROD";
"IFLW_DAY_STATUS_WATER";"INSERTING";"BEFORE";"10";"n_INJ_TYPE := 'WI';";"EC_PROD";
"INCINERATORS";"UPDATING";"AFTER";"3000";"ecdp_equipment_event.updateEventStatus(n_OBJECT_ID, n_DAYTIME, 'INCINERATORS');";"EC_PROD";
"INVENTORY";"INSERTING OR UPDATING";"BEFORE";"200";"ecdp_inventory.validateInventoryObj(n_ul_pricing_currency_co,n_ul_booking_currency_co,n_ul_memo_currency_co,n_ol_pricing_currency_co,n_ol_booking_currency_co,n_ol_memo_currency_co,:new.phy_stock_li_code,:new.physical_stock_ind,n_daytime);";"EC_REVN";
"INVENTORY";"UPDATING";"BEFORE";"210";"ecdp_inventory.deleteinventory(n_object_id,o_object_start_date,n_object_start_date,o_object_end_date,n_object_end_date);";"EC_REVN";
"INVENTORY_PRICE_LIST";"INSERTING";"AFTER";"20";"EcDp_Sales_Contract_Price.InsNewPriceElementSet(n_OBJECT_ID ,n_PRICE_CONCEPT_CODE, n_PRICE_ELEMENT_CODE, n_DAYTIME, n_CREATED_BY);";"EC_REVN";
"INVENTORY_PRICE_LIST";"INSERTING";"BEFORE";"10";"n_price_element_code := ecdp_sales_contract_price.GetAnyPriceElement(n_price_concept_code,n_object_id,n_daytime);";"EC_REVN";
"INV_AVG_PS_RATE_CALC";"UPDATING";"AFTER";"100";"ecdp_inventory.processInventory(n_object_id,n_daytime,n_last_updated_by);";"EC_REVN";
"IWEL_DAY_STATUS_AIR";"INSERTING";"BEFORE";"10";"n_INJ_TYPE := 'AI';";"EC_PROD";
"IWEL_DAY_STATUS_GAS";"INSERTING";"BEFORE";"10";"n_INJ_TYPE := 'GI';";"EC_PROD";
"IWEL_DAY_STATUS_STEAM";"INSERTING";"BEFORE";"10";"n_INJ_TYPE := 'SI';";"EC_PROD";
"IWEL_DAY_STATUS_WATER";"INSERTING";"BEFORE";"10";"n_INJ_TYPE := 'WI';";"EC_PROD";
"IWEL_EVENT_GAS";"DELETING";"BEFORE";"400";"EcDp_Well_Event.deleteEventDetail(n_OBJECT_ID, n_DAYTIME, n_EVENT_TYPE);";"EC_PROD";
"IWEL_EVENT_GAS";"INSERTING";"AFTER";"200";"EcDp_Well_Event.insertEventDetail(n_OBJECT_ID, n_DAYTIME, n_EVENT_TYPE, n_RATE_CALC_METHOD, nvl(n_last_updated_by, n_created_by),'INSERTING');";"EC_PROD";
"IWEL_EVENT_GAS";"INSERTING";"AFTER";"500";"EcDp_Well_Event.updateRateSource(n_OBJECT_ID, n_DAYTIME, n_EVENT_TYPE, :OLD.GAS_INJ_RATE ,n_GAS_INJ_RATE, n_LAST_UPDATED_BY, 'INSERTING' );";"EC_PROD";
"IWEL_EVENT_GAS";"INSERTING";"BEFORE";"100";"IF (n_RATE_CALC_METHOD is null) then n_RATE_CALC_METHOD := EcDp_Well_Event.getLastRateCalcMethod(n_OBJECT_ID, n_DAYTIME,n_EVENT_TYPE); END IF;";"EC_PROD";
"IWEL_EVENT_GAS";"INSERTING";"BEFORE";"800";"IF EcDp_Well.IsWellPhaseActiveStatus(n_OBJECT_ID, 'GI','OPEN', n_DAYTIME)  = 'N' THEN Raise_Application_Error('-20545', 'Cannot save. Well active status is not OPEN.');  END IF;";"EC_PROD";
"IWEL_EVENT_GAS";"INSERTING OR UPDATING";"BEFORE";"700";"IF n_STATUS IS NULL THEN n_STATUS := 'NEW'; END IF;";"EC_PROD";
"IWEL_EVENT_GAS";"UPDATING";"AFTER";"300";"EcDp_Well_Event.insertEventDetail(n_OBJECT_ID, n_DAYTIME, n_EVENT_TYPE, n_RATE_CALC_METHOD, nvl(n_last_updated_by, n_created_by),'UPDATING');";"EC_PROD";
"IWEL_EVENT_GAS";"UPDATING";"AFTER";"600";"EcDp_Well_Event.updateRateSource(n_OBJECT_ID, n_DAYTIME, n_EVENT_TYPE, :OLD.GAS_INJ_RATE ,n_GAS_INJ_RATE, n_LAST_UPDATED_BY, 'UPDATING' );";"EC_PROD";
"IWEL_EVENT_GAS_TOTALIZER";"INSERTING OR UPDATING";"BEFORE";"100";"EcDp_Well_Event.validateTotalizerMax(n_OBJECT_ID,n_DAYTIME,n_OPENING_OVERRIDE,n_CLOSING_READING);";"EC_PROD";
"IWEL_EVENT_STEAM";"DELETING";"BEFORE";"400";"EcDp_Well_Event.deleteEventDetail(n_OBJECT_ID, n_DAYTIME, n_EVENT_TYPE);";"EC_PROD";
"IWEL_EVENT_STEAM";"INSERTING";"AFTER";"200";"EcDp_Well_Event.insertEventDetail(n_OBJECT_ID, n_DAYTIME, n_EVENT_TYPE, n_RATE_CALC_METHOD, nvl(n_last_updated_by, n_created_by),'INSERTING');";"EC_PROD";
"IWEL_EVENT_STEAM";"INSERTING";"AFTER";"500";"EcDp_Well_Event.updateRateSource(n_OBJECT_ID, n_DAYTIME, n_EVENT_TYPE, :OLD.STEAM_INJ_RATE ,n_STEAM_INJ_RATE, n_LAST_UPDATED_BY, 'INSERTING' );";"EC_PROD";
"IWEL_EVENT_STEAM";"INSERTING";"BEFORE";"100";"IF (n_RATE_CALC_METHOD is null) then n_RATE_CALC_METHOD := EcDp_Well_Event.getLastRateCalcMethod(n_OBJECT_ID, n_DAYTIME,n_EVENT_TYPE); END IF;";"EC_PROD";
"IWEL_EVENT_STEAM";"INSERTING";"BEFORE";"800";"IF EcDp_Well.IsWellPhaseActiveStatus(n_OBJECT_ID, 'SI','OPEN', n_DAYTIME)  = 'N' THEN Raise_Application_Error('-20545', 'Cannot save. Well active status is not OPEN.');  END IF;";"EC_PROD";
"IWEL_EVENT_STEAM";"INSERTING OR UPDATING";"BEFORE";"700";"IF n_STATUS IS NULL THEN n_STATUS := 'NEW'; END IF;";"EC_PROD";
"IWEL_EVENT_STEAM";"UPDATING";"AFTER";"300";"EcDp_Well_Event.insertEventDetail(n_OBJECT_ID, n_DAYTIME, n_EVENT_TYPE, n_RATE_CALC_METHOD, nvl(n_last_updated_by, n_created_by),'UPDATING');";"EC_PROD";
"IWEL_EVENT_STEAM";"UPDATING";"AFTER";"600";"EcDp_Well_Event.updateRateSource(n_OBJECT_ID, n_DAYTIME, n_EVENT_TYPE, :OLD.STEAM_INJ_RATE ,n_STEAM_INJ_RATE, n_LAST_UPDATED_BY, 'UPDATING' );";"EC_PROD";
"IWEL_EVENT_STM_TOTALIZER";"INSERTING OR UPDATING";"BEFORE";"100";"EcDp_Well_Event.validateTotalizerMax(n_OBJECT_ID,n_DAYTIME,n_OPENING_OVERRIDE,n_CLOSING_READING);";"EC_PROD";
"IWEL_EVENT_WATER";"DELETING";"BEFORE";"400";"EcDp_Well_Event.deleteEventDetail(n_OBJECT_ID, n_DAYTIME, n_EVENT_TYPE);";"EC_PROD";
"IWEL_EVENT_WATER";"INSERTING";"AFTER";"200";"EcDp_Well_Event.insertEventDetail(n_OBJECT_ID, n_DAYTIME, n_EVENT_TYPE, n_RATE_CALC_METHOD, nvl(n_last_updated_by, n_created_by),'INSERTING');";"EC_PROD";
"IWEL_EVENT_WATER";"INSERTING";"AFTER";"500";"EcDp_Well_Event.updateRateSource(n_OBJECT_ID, n_DAYTIME, n_EVENT_TYPE, :OLD.WATER_INJ_RATE ,n_WATER_INJ_RATE, n_LAST_UPDATED_BY, 'INSERTING' );";"EC_PROD";
"IWEL_EVENT_WATER";"INSERTING";"BEFORE";"100";"IF (n_RATE_CALC_METHOD is null) then n_RATE_CALC_METHOD := EcDp_Well_Event.getLastRateCalcMethod(n_OBJECT_ID, n_DAYTIME,n_EVENT_TYPE); END IF;";"EC_PROD";
"IWEL_EVENT_WATER";"INSERTING";"BEFORE";"800";"IF EcDp_Well.IsWellPhaseActiveStatus(n_OBJECT_ID, 'WI','OPEN', n_DAYTIME)  = 'N' THEN Raise_Application_Error('-20545', 'Cannot save. Well active status is not OPEN.');  END IF; ";"EC_PROD";
"IWEL_EVENT_WATER";"INSERTING OR UPDATING";"BEFORE";"700";"IF n_STATUS IS NULL THEN n_STATUS := 'NEW'; END IF;";"EC_PROD";
"IWEL_EVENT_WATER";"UPDATING";"AFTER";"300";"EcDp_Well_Event.insertEventDetail(n_OBJECT_ID, n_DAYTIME, n_EVENT_TYPE, n_RATE_CALC_METHOD, nvl(n_last_updated_by, n_created_by),'UPDATING');";"EC_PROD";
"IWEL_EVENT_WATER";"UPDATING";"AFTER";"600";"EcDp_Well_Event.updateRateSource(n_OBJECT_ID, n_DAYTIME, n_EVENT_TYPE, :OLD.WATER_INJ_RATE ,n_WATER_INJ_RATE, n_LAST_UPDATED_BY, 'UPDATING' );";"EC_PROD";
"IWEL_EVENT_WAT_TOTALIZER";"INSERTING OR UPDATING";"BEFORE";"100";"EcDp_Well_Event.validateTotalizerMax(n_OBJECT_ID,n_DAYTIME,n_OPENING_OVERRIDE,n_CLOSING_READING);";"EC_PROD";
"IWEL_PERIOD_STATUS";"DELETING";"BEFORE";"600";"EcDp_Well.DelAllowInjWellClosedLT(n_OBJECT_ID, n_DAYTIME, n_SUMMER_TIME, n_WELL_STATUS, n_INJ_TYPE);";"EC_PROD";
"IWEL_PERIOD_STATUS";"DELETING";"BEFORE";"800";"IF EcDp_Well.getWellType(n_OBJECT_ID, n_DAYTIME) in ('WG','WSI','GPI') THEN EcDp_Well.deleteOtherSide(n_OBJECT_ID, n_DAYTIME, n_INJ_TYPE); END IF;";"EC_PROD";
"IWEL_PERIOD_STATUS";"INSERTING";"BEFORE";"300";"EcDp_Well.IUAllowInjWellClosedLT(n_OBJECT_ID, n_DAYTIME, n_SUMMER_TIME, n_WELL_STATUS, n_INJ_TYPE);";"EC_PROD";
"IWEL_PERIOD_STATUS";"INSERTING";"BEFORE";"500";"EcDp_Well.AllowInjWellClosedLT(n_OBJECT_ID, n_DAYTIME, n_SUMMER_TIME, n_WELL_STATUS, n_INJ_TYPE);";"EC_PROD";
"IWEL_PERIOD_STATUS";"INSERTING OR UPDATING";"BEFORE";"700";"IF EcDp_Well.getWellType(n_OBJECT_ID, n_DAYTIME) in ('WG','WSI','GPI') AND EcDp_System.getDependentCode('ACTIVE_WELL_STATUS', 'WELL_STATUS', :NEW.well_status) = 'OPEN' THEN EcDp_Well.checkOtherSide(n_OBJECT_ID, n_DAYTIME, n_INJ_TYPE); END IF;";"EC_PROD";
"IWEL_PERIOD_STATUS";"UPDATING";"BEFORE";"400";"IF (:OLD.RECORD_STATUS = n_RECORD_STATUS) THEN EcDp_Well.IUAllowInjWellClosedLT(n_OBJECT_ID, n_DAYTIME, n_SUMMER_TIME, n_WELL_STATUS, n_INJ_TYPE); END IF;";"EC_PROD";
"IWEL_TOTALIZER_GAS";"INSERTING OR UPDATING";"BEFORE";"50";"EcDp_Well_Event.validateTotalizerMax(n_OBJECT_ID,n_DAYTIME,n_OPENING_READING,n_CLOSING_READING);";"EC_PROD";
"IWEL_TOTALIZER_WAT";"INSERTING OR UPDATING";"BEFORE";"100";"EcDp_Well_Event.validateTotalizerMax(n_OBJECT_ID,n_DAYTIME,n_OPENING_READING,n_CLOSING_READING);";"EC_PROD";
"LIFTING_ACCOUNT";"INSERTING OR UPDATING";"BEFORE";"100";"EcBp_Lifting_Account.validateAccount(n_object_id, n_storage_id, n_company_id, n_profit_centre_id);";"EC_TRAN";
"LIFTING_ACC_MTH_INIT";"INSERTING";"BEFORE";"100";"EcBp_Lift_Acc_Balance.valInsertInitBalance(n_object_id);";"EC_TRAN";
"LIFTING_ACC_MTH_INIT";"UPDATING";"BEFORE";"200";"EcBp_Lift_Acc_Balance.valUpdateInitBalance(n_object_id, n_daytime);";"EC_TRAN";
"LIFTING_ACTIVITY";"INSERTING OR UPDATING";"AFTER";"200";"EcBp_Cargo_Activity.activityBOLmapping( n_cargo_no, n_activity_code, n_run_no);";"EC_TRAN";
"LIFTING_DOC_RECEIVER";"DELETING";"BEFORE";"600";"DELETE FROM TV_LIFT_DOC_INSTRUCTION WHERE PARCEL_NO=N_PARCEL_NO AND COMPANY_CONTACT_ID=N_RECEIVER_ID;";"EC_TRAN";
"LIFTING_DOC_RECEIVER";"INSERTING";"AFTER";"600";"ecdp_cargo_document.instInstructionReceiver(n_parcel_no, n_receiver_id);";"EC_TRAN";
"LIFTING_DOC_SET";"DELETING";"BEFORE";"100";"DELETE FROM TV_LIFT_DOC_INSTRUCTION WHERE PARCEL_NO=N_PARCEL_NO AND DOC_CODE=o_DOC_CODE;";"EC_TRAN";
"LIFTING_DOC_SET";"INSERTING";"AFTER";"100";"ecdp_cargo_document.instInstructionDoc(n_parcel_no, n_doc_code);";"EC_TRAN";
"LIFT_ACC_DOC_SET";"DELETING";"BEFORE";"100";"DELETE FROM DV_LIFT_ACC_DOC_INSTR_TEMP WHERE OBJECT_ID=N_OBJECT_ID AND TEMPLATE_CODE=N_TEMPLATE_CODE AND doc_code = o_doc_code;";"EC_TRAN";
"LIFT_ACC_DOC_SET";"INSERTING";"AFTER";"100";"EcDp_Cargo_Document.instLAInstructionDoc(n_object_id, n_template_code, n_doc_code);";"EC_TRAN";
"LIFT_ACC_DOC_TEMPLATE";"DELETING";"BEFORE";"100";"delete lift_acc_doc_set where object_id = n_object_id and template_code = n_template_code;";"EC_TRAN";
"LIFT_ACC_DOC_TEMPLATE";"INSERTING OR UPDATING";"AFTER";"100";"EcDp_Cargo_Document.updateDocSet(n_object_id, n_template_code, :OLD.cargo_doc_template_code, n_cargo_doc_template_code);";"EC_TRAN";
"LIFT_ACC_RECEIVER_TEMP";"DELETING";"BEFORE";"100";"DELETE FROM DV_LIFT_ACC_DOC_INSTR_TEMP WHERE OBJECT_ID=N_OBJECT_ID AND TEMPLATE_CODE=N_TEMPLATE_CODE AND COMPANY_CONTACT_ID=N_RECEIVER_ID;";"EC_TRAN";
"LIFT_ACC_RECEIVER_TEMP";"INSERTING";"AFTER";"100";"EcDp_Cargo_Document.instLAInstructionReceiver(n_object_id, n_template_code, n_receiver_id);";"EC_TRAN";
"LINE_ITEM_TEMPLATE";"UPDATING";"AFTER";"500";"ecdp_line_item.updLITName(n_object_id,n_daytime,n_last_updated_by);";"EC_REVN";
"MERCURY_REMOVAL_UNIT";"UPDATING";"AFTER";"3000";"ecdp_equipment_event.updateEventStatus(n_OBJECT_ID, n_DAYTIME, 'MERCURY_REMOVAL_UNIT');";"EC_PROD";
"MSG_TCTR_SHIPPER_PAIR";"DELETING";"BEFORE";"200";"EcDp_Contract_Shipper.deleteShipper(n_object_id, n_EXIT_DELIVERY_POINT_ID, n_downstream_shipper_id, n_daytime);";"EC_TRAN";
"MSG_TCTR_SHIPPER_PAIR";"INSERTING";"AFTER";"100";"EcDp_Contract_Shipper.generateNomHours(n_object_id, n_downstream_shipper_id, n_EXIT_DELIVERY_POINT_ID, n_daytime, n_created_by);";"EC_TRAN";
"OBJECT_GROUP";"DELETING";"BEFORE";"500";"EcBp_Objects_Group_Conn.validateDeleteObjectGrp(n_OBJECT_ID, n_START_DATE, n_GROUP_TYPE);";"EC_PROD";
"OBJECT_GROUP";"UPDATING";"AFTER";"700";"EcBp_Objects_Group_Conn.updateChildEndDate(n_OBJECT_ID, n_GROUP_TYPE, n_START_DATE, n_END_DATE);";"EC_PROD";
"OBJECT_GROUP";"UPDATING";"BEFORE";"600";"EcBp_Objects_Group_Conn.verifyObjectGrp(n_OBJECT_ID, n_START_DATE, n_GROUP_TYPE, n_END_DATE);";"EC_PROD";
"OBJECT_GROUP_CONN";"INSERTING OR UPDATING";"BEFORE";"600";"EcBp_Objects_Group_Conn.verifyObjectGrpConn(n_OBJECT_ID, n_PARENT_START_DATE, n_PARENT_GROUP_TYPE, n_START_DATE, n_END_DATE);";"EC_PROD";
"OBJECT_GROUP_CONN";"INSERTING OR UPDATING";"BEFORE";"700";"EcBp_Objects_Group_Conn.checkIfEventOverlaps(n_OBJECT_ID, n_PARENT_START_DATE, n_PARENT_GROUP_TYPE,n_OBJECT_NAME, n_START_DATE, n_END_DATE);";"EC_PROD";
"PAYMENT_SCHEME";"UPDATING";"BEFORE";"10";"ecdp_payment_scheme.DelObj(n_object_id,n_object_end_date);";"EC_REVN";
"PAYMENT_SCHEME_ITEM";"INSERTING";"BEFORE";"10";"EcDp_System_Key.assignNextNumber('PAYMENT_SCHEME_ITEM',n_item_no);";"EC_REVN";
"PAYMENT_TERM";"INSERTING OR UPDATING";"BEFORE";"100";"ecdp_calendar.validateOffset(:NEW.day_value, :NEW.payment_term_method);";"EC_REVN";
"PERF_INTERVAL_SPLIT";"INSERTING";"AFTER";"1300";"EcDp_Objects_Split.SetInsertSplitEndDate(n_OBJECT_ID,n_DAYTIME,'PERF_INTERVAL_SPLIT' );";"EC_PROD";
"PERIOD_GAS_STRM_DATA";"INSERTING OR UPDATING";"BEFORE";"100";"EcBp_Stream_Event.validatePeriod(n_OBJECT_ID, n_DAYTIME, n_END_DATE);";"EC_PROD";
"PERIOD_GAS_STRM_DATA_AGA";"INSERTING OR UPDATING";"BEFORE";"100";"EcBp_Stream_Event.validatePeriod(n_OBJECT_ID, n_DAYTIME, n_END_DATE);";"EC_PROD";
"PIPE_PIGGING_EVENT";"INSERTING OR UPDATING";"BEFORE";"100";"n_PRODUCTION_DAY := Ecdp_Productionday.getProductionDay('PIPELINE',n_OBJECT_ID,n_DAYTIME);";"EC_PROD";
"PIPE_SUB_DAY_PC_STATUS";"INSERTING OR UPDATING";"BEFORE";"10";"n_summer_time := ecdp_date_time.get_summertime_flag(n_daytime,n_summer_time);";"EC_PROD";
"POWER_DISTRIBUTION_EQPM";"UPDATING";"AFTER";"3000";"ecdp_equipment_event.updateEventStatus(n_OBJECT_ID, n_DAYTIME, 'POWER_DISTRIBUTION_EQPM');";"EC_PROD";
"PRICE_LIST_ALLOC";"DELETING";"BEFORE";"100";"ecbp_price_value.validateDelete(n_OBJECT_ID,n_PRICE_CONCEPT_CODE,n_PRICE_ELEMENT_CODE,n_daytime);";"EC_SALE";
"PRICE_LIST_ALLOC";"INSERTING";"BEFORE";"200";"n_PRICE_CONCEPT_CODE := ec_product_price.price_concept_code(n_OBJECT_ID);";"EC_SALE";
"PRICE_OBJECT";"INSERTING OR UPDATING";"BEFORE";"100";"ecdp_price.ValidateDuplicate(n_contract_id,n_daytime,n_object_end_date,n_price_concept_code,n_product_id,n_code);";"EC_REVN";
"PRICE_OBJECT";"UPDATING";"BEFORE";"110";"ecdp_price.ValidateInUse(n_object_id,n_price_concept_code,n_product_id,n_daytime);";"EC_REVN";
"PRODUCT_NODE_ITEM";"INSERTING";"AFTER";"100";"IF (n_code IS NULL) THEN ue_RevenueCodes.UpdateCodeForClass(n_object_id, n_daytime, 'PRODUCT_NODE_ITEM'); END IF;";"EC_REVN";
"PRODUCT_PRICE_LIST";"DELETING";"BEFORE";"100";"ecbp_price_value.validateDelete(n_OBJECT_ID,n_PRICE_CONCEPT_CODE,n_PRICE_ELEMENT_CODE,n_DAYTIME);";"EC_SALE";
"PRODUCT_PRICE_LIST";"INSERTING";"AFTER";"120";"EcDp_Sales_Contract_Price.InsNewPriceElementSet(n_OBJECT_ID ,n_PRICE_CONCEPT_CODE, n_PRICE_ELEMENT_CODE, n_DAYTIME, n_CREATED_BY);";"EC_SALE";
"PRODUCT_PRICE_LIST";"INSERTING";"BEFORE";"110";"n_price_concept_code := ec_product_price.price_concept_code(n_object_id);n_price_element_code := ecdp_sales_contract_price.GetAnyPriceElement(n_price_concept_code,n_object_id,n_daytime);";"EC_SALE";
"PROD_AREA_FORECAST";"INSERTING";"BEFORE";"3000";"n_FORECAST_TYPE:=ec_prod_forecast.forecast_type(n_FCST_SCEN_NO);n_SCENARIO:=ec_prod_forecast.scenario(n_FCST_SCEN_NO);n_EFFECTIVE_DAYTIME:=ec_prod_forecast.daytime(n_FCST_SCEN_NO);";"EC_PROD";
"PROD_FCTY1_FORECAST";"INSERTING";"BEFORE";"3000";"n_FORECAST_TYPE:=ec_prod_forecast.forecast_type(n_FCST_SCEN_NO);n_SCENARIO:=ec_prod_forecast.scenario(n_FCST_SCEN_NO);n_EFFECTIVE_DAYTIME:=ec_prod_forecast.daytime(n_FCST_SCEN_NO);IF n_CLASS_NAME IS NULL THEN n_CLASS_NAME:='PROD_FCTY1_FORECAST';END IF;";"EC_PROD";
"PROD_FCTY2_FORECAST";"INSERTING";"BEFORE";"3000";"n_FORECAST_TYPE:=ec_prod_forecast.forecast_type(n_FCST_SCEN_NO);n_SCENARIO:=ec_prod_forecast.scenario(n_FCST_SCEN_NO);n_EFFECTIVE_DAYTIME:=ec_prod_forecast.daytime(n_FCST_SCEN_NO);IF n_CLASS_NAME IS NULL THEN n_CLASS_NAME:='PROD_FCTY2_FORECAST';END IF;";"EC_PROD";
"PROD_FIELD_FORECAST";"INSERTING";"BEFORE";"3000";"n_FORECAST_TYPE:=ec_prod_forecast.forecast_type(n_FCST_SCEN_NO);n_SCENARIO:=ec_prod_forecast.scenario(n_FCST_SCEN_NO);n_EFFECTIVE_DAYTIME:=ec_prod_forecast.daytime(n_FCST_SCEN_NO);";"EC_PROD";
"PROD_PRODUNIT_FORECAST";"INSERTING";"BEFORE";"3000";"n_FORECAST_TYPE:=ec_prod_forecast.forecast_type(n_FCST_SCEN_NO);n_SCENARIO:=ec_prod_forecast.scenario(n_FCST_SCEN_NO);n_EFFECTIVE_DAYTIME:=ec_prod_forecast.daytime(n_FCST_SCEN_NO);";"EC_PROD";
"PROD_STORAGE_FORECAST";"INSERTING";"BEFORE";"3000";"n_FORECAST_TYPE:=ec_prod_forecast.forecast_type(n_FCST_SCEN_NO);n_SCENARIO:=ec_prod_forecast.scenario(n_FCST_SCEN_NO);n_EFFECTIVE_DAYTIME:=ec_prod_forecast.daytime(n_FCST_SCEN_NO);";"EC_PROD";
"PROD_STREAM_FORECAST";"INSERTING";"BEFORE";"3000";"n_FORECAST_TYPE:=ec_prod_forecast.forecast_type(n_FCST_SCEN_NO);n_SCENARIO:=ec_prod_forecast.scenario(n_FCST_SCEN_NO);n_EFFECTIVE_DAYTIME:=ec_prod_forecast.daytime(n_FCST_SCEN_NO);";"EC_PROD";
"PROD_SUB_AREA_FORECAST";"INSERTING";"BEFORE";"3000";"n_FORECAST_TYPE:=ec_prod_forecast.forecast_type(n_FCST_SCEN_NO);n_SCENARIO:=ec_prod_forecast.scenario(n_FCST_SCEN_NO);n_EFFECTIVE_DAYTIME:=ec_prod_forecast.daytime(n_FCST_SCEN_NO);";"EC_PROD";
"PROD_SUB_FIELD_FORECAST";"INSERTING";"BEFORE";"3000";"n_FORECAST_TYPE:=ec_prod_forecast.forecast_type(n_FCST_SCEN_NO);n_SCENARIO:=ec_prod_forecast.scenario(n_FCST_SCEN_NO);n_EFFECTIVE_DAYTIME:=ec_prod_forecast.daytime(n_FCST_SCEN_NO);";"EC_PROD";
"PROD_SUB_PRODUNIT_FCST";"INSERTING";"BEFORE";"3000";"n_FORECAST_TYPE:=ec_prod_forecast.forecast_type(n_FCST_SCEN_NO);n_SCENARIO:=ec_prod_forecast.scenario(n_FCST_SCEN_NO);n_EFFECTIVE_DAYTIME:=ec_prod_forecast.daytime(n_FCST_SCEN_NO);";"EC_PROD";
"PROD_TEST_RESULT";"DELETING";"AFTER";"800";"ecdp_performance_test.delPwelResultData(n_RESULT_NO);";"EC_PROD";
"PROD_TEST_RESULT";"INSERTING OR UPDATING";"BEFORE";"300";"EcDp_Performance_Test.validateTestDate(n_DAYTIME);";"EC_PROD";
"PROD_TEST_RESULT";"INSERTING OR UPDATING";"BEFORE";"350";"IF n_STATUS IS NULL THEN n_STATUS:='NEW'; END IF;";"EC_PROD";
"PROD_TEST_RESULT";"UPDATING";"AFTER";"400";"IF :OLD.daytime != n_daytime THEN ecdp_performance_test.auiSyncPwelResult(n_RESULT_NO, 'DAYTIME', n_DAYTIME, n_VALID_FROM_DATE, n_STATUS, n_USE_CALC, n_END_DATE, n_DURATION, n_LAST_UPDATED_BY); END IF;";"EC_PROD";
"PROD_TEST_RESULT";"UPDATING";"AFTER";"500";"IF NVL(:OLD.valid_from_date,TO_DATE('01-JAN-1900', 'DD-MON-YYYY')) != NVL(n_valid_from_date,TO_DATE('01-JAN-1900', 'DD-MON-YYYY')) THEN ecdp_performance_test.auiSyncPwelResult(n_RESULT_NO, 'VALID_FROM_DATE', n_DAYTIME, n_VALID_FROM_DATE, n_STATUS, n_USE_CALC,n_END_DATE, n_DURATION, n_LAST_UPDATED_BY); END IF;";"EC_PROD";
"PROD_TEST_RESULT";"UPDATING";"AFTER";"600";"IF NVL(:OLD.status,'EMPTY') != NVL(n_status,'EMPTY') THEN ecdp_performance_test.auiSyncPwelResult(n_RESULT_NO, 'STATUS', n_DAYTIME, n_VALID_FROM_DATE, n_STATUS, n_USE_CALC,n_END_DATE, n_DURATION, n_LAST_UPDATED_BY); END IF;";"EC_PROD";
"PROD_TEST_RESULT";"UPDATING";"AFTER";"700";"IF NVL(:OLD.use_calc,'EMPTY') != NVL(n_use_calc,'EMPTY') THEN ecdp_performance_test.auiSyncPwelResult(n_RESULT_NO, 'USE_CALC', n_DAYTIME, n_VALID_FROM_DATE, n_STATUS, n_USE_CALC,n_END_DATE, n_DURATION, n_LAST_UPDATED_BY); END IF;";"EC_PROD";
"PROD_TEST_RESULT";"UPDATING";"AFTER";"900";"IF NVL(:OLD.end_date,TO_DATE('01-JAN-1900', 'DD-MON-YYYY')) != NVL(n_end_date,TO_DATE('01-JAN-1900', 'DD-MON-YYYY')) THEN ecdp_performance_test.auiSyncPwelResult(n_RESULT_NO, 'END_DATE', n_DAYTIME, n_VALID_FROM_DATE, n_STATUS, n_USE_CALC,n_END_DATE, n_DURATION, n_LAST_UPDATED_BY); END IF;";"EC_PROD";
"PROD_TEST_RESULT";"UPDATING";"AFTER";"1000";"IF NVL(:OLD.duration,-1) != NVL(n_duration,-1) THEN ecdp_performance_test.auiSyncPwelResult(n_RESULT_NO, 'DURATION', n_DAYTIME, n_VALID_FROM_DATE, n_STATUS, n_USE_CALC,n_END_DATE, n_DURATION, n_LAST_UPDATED_BY); END IF;";"EC_PROD";
"PROD_TEST_RESULT";"UPDATING";"AFTER";"1100";"IF NVL(:OLD.record_status,-1) != NVL(n_record_status,-1) THEN ecdp_performance_test.auiUpdateRecordStatus(n_RESULT_NO, n_RECORD_STATUS, n_LAST_UPDATED_BY); END IF;";"EC_PROD";
"PROD_TEST_RESULT_SINGLE";"UPDATING";"AFTER";"100";"IF NVL(:OLD.record_status,-1) != NVL(n_record_status,-1) THEN ecdp_performance_test.auiUpdateRecordStatus(n_RESULT_NO, n_RECORD_STATUS, n_LAST_UPDATED_BY); END IF;";"EC_PROD";
"PROD_WELL_FORECAST";"INSERTING";"BEFORE";"3000";"n_FORECAST_TYPE:=ec_prod_forecast.forecast_type(n_FCST_SCEN_NO);n_SCENARIO:=ec_prod_forecast.scenario(n_FCST_SCEN_NO);n_EFFECTIVE_DAYTIME:=ec_prod_forecast.daytime(n_FCST_SCEN_NO);";"EC_PROD";
"PUMP";"UPDATING";"AFTER";"3000";"ecdp_equipment_event.updateEventStatus(n_OBJECT_ID, n_DAYTIME, 'PUMP');";"EC_PROD";
"PWEL_PERIOD_STATUS";"DELETING";"BEFORE";"600";"EcDp_Well.DelAllowWellClosedLT(n_OBJECT_ID, n_DAYTIME, n_SUMMER_TIME, n_WELL_STATUS);";"EC_PROD";
"PWEL_PERIOD_STATUS";"INSERTING";"BEFORE";"300";"EcDp_Well.IUAllowWellClosedLT(n_OBJECT_ID, n_DAYTIME, n_SUMMER_TIME, n_WELL_STATUS);";"EC_PROD";
"PWEL_PERIOD_STATUS";"INSERTING";"BEFORE";"500";"EcDp_Well.AllowWellClosedLT(n_OBJECT_ID, n_DAYTIME, n_SUMMER_TIME, n_WELL_STATUS);";"EC_PROD";
"PWEL_PERIOD_STATUS";"UPDATING";"BEFORE";"400";"IF (:OLD.RECORD_STATUS = n_RECORD_STATUS) THEN EcDp_Well.IUAllowWellClosedLT(n_OBJECT_ID, n_DAYTIME, n_SUMMER_TIME, n_WELL_STATUS); END IF;";"EC_PROD";
"PWEL_RESULT";"DELETING";"AFTER";"700";"Ecdp_performance_test.auidelEqpmResult(n_TEST_DEVICE_ID,n_RESULT_NO);";"EC_PROD";
"PWEL_RESULT";"DELETING";"AFTER";"1000";"Ecdp_performance_test.delPtstResultData(n_RESULT_NO);";"EC_PROD";
"PWEL_RESULT";"INSERTING";"AFTER";"800";"Ecdp_performance_test.auisetPwelResult(n_RESULT_NO, n_CREATED_BY);";"EC_PROD";
"PWEL_RESULT";"INSERTING";"AFTER";"900";"Ecdp_performance_test.auiSyncEqpmResult(n_TEST_DEVICE_ID,n_RESULT_NO,n_DAYTIME,n_CREATED_BY);";"EC_PROD";
"PWEL_RESULT";"INSERTING";"AFTER";"1400";"EcBp_TestDevice.updEQPMResultValues(n_TEST_DEVICE_ID, n_RESULT_NO, n_DAYTIME);";"EC_PROD";
"PWEL_RESULT";"INSERTING";"BEFORE";"250";"n_PRIMARY_IND:=Nvl(n_PRIMARY_IND,'Y');IF n_RESULT_NO IS NULL THEN EcDp_System_Key.assignNextNumber('PTST_RESULT', n_RESULT_NO); END IF;ecdp_performance_test.auiSyncPtstResult(n_RESULT_NO, 'SYNC', n_DAYTIME, n_VALID_FROM_DATE, n_STATUS, n_USE_CALC_IND, n_END_DATE, n_DURATION, n_CREATED_BY);";"EC_PROD";
"PWEL_RESULT";"INSERTING";"BEFORE";"360";"IF ec_pwel_period_status.active_well_status(n_OBJECT_ID,n_DAYTIME,'EVENT','<=') = 'CLOSED_LT' THEN RAISE_APPLICATION_ERROR(-20555,'Unable to create production test result for well that is closed long term.'); END IF;";"EC_PROD";
"PWEL_RESULT";"INSERTING";"BEFORE";"1500";"IF n_TEST_DEVICE_ID IS NULL THEN n_TEST_DEVICE_ID := ec_well_version.test_device_id(n_OBJECT_ID, n_DAYTIME, '<='); END IF;";"EC_PROD";
"PWEL_RESULT";"INSERTING OR UPDATING";"AFTER";"100";"EcDp_Performance_Test.auiSetProductionDay(n_OBJECT_ID, n_DAYTIME, n_RESULT_NO, nvl(n_LAST_UPDATED_BY, n_CREATED_BY));";"EC_PROD";
"PWEL_RESULT";"INSERTING OR UPDATING";"AFTER";"1300";"EcBp_TestDevice.updateRateSource(n_OBJECT_ID ,n_RESULT_NO, n_LAST_UPDATED_BY);";"EC_PROD";
"PWEL_RESULT";"INSERTING OR UPDATING";"BEFORE";"200";"IF n_STATUS IS NULL THEN n_STATUS:='NEW'; END IF;";"EC_PROD";
"PWEL_RESULT";"INSERTING OR UPDATING";"BEFORE";"350";"IF EcDp_Objects.getOBjStartDate(n_OBJECT_ID) > n_VALID_FROM_DATE THEN RAISE_APPLICATION_ERROR(-20554,'Valid From Daytime is less than owner objects start date.'); END IF;";"EC_PROD";
"PWEL_RESULT";"UPDATING";"AFTER";"300";"IF :OLD.daytime != n_daytime THEN ecdp_performance_test.auiSyncPtstResult(n_RESULT_NO, 'DAYTIME', n_DAYTIME, n_VALID_FROM_DATE, n_STATUS, n_USE_CALC_IND, n_END_DATE, n_DURATION, n_LAST_UPDATED_BY); END IF;";"EC_PROD";
"PWEL_RESULT";"UPDATING";"AFTER";"400";"IF NVL(:OLD.valid_from_date,TO_DATE('01-JAN-1900', 'DD-MON-YYYY')) != NVL(n_valid_from_date,TO_DATE('01-JAN-1900', 'DD-MON-YYYY')) THEN ecdp_performance_test.auiSyncPtstResult(n_RESULT_NO, 'VALID_FROM_DATE', n_DAYTIME, n_VALID_FROM_DATE, n_STATUS, n_USE_CALC_IND, n_END_DATE, n_DURATION, n_LAST_UPDATED_BY); END IF;";"EC_PROD";
"PWEL_RESULT";"UPDATING";"AFTER";"500";"IF NVL(:OLD.status,'EMPTY') != NVL(n_status,'EMPTY') THEN ecdp_performance_test.auiSyncPtstResult(n_RESULT_NO, 'STATUS', n_DAYTIME, n_VALID_FROM_DATE, n_STATUS, n_USE_CALC_IND, n_END_DATE, n_DURATION, n_LAST_UPDATED_BY); END IF;";"EC_PROD";
"PWEL_RESULT";"UPDATING";"AFTER";"600";"IF NVL(:OLD.use_calc_ind,'EMPTY') != NVL(n_use_calc_ind,'EMPTY') THEN ecdp_performance_test.auiSyncPtstResult(n_RESULT_NO, 'USE_CALC', n_DAYTIME, n_VALID_FROM_DATE, n_STATUS, n_USE_CALC_IND, n_END_DATE, n_DURATION, n_LAST_UPDATED_BY); END IF;";"EC_PROD";
"PWEL_RESULT";"UPDATING";"AFTER";"1100";"IF NVL(:OLD.end_date,TO_DATE('01-JAN-1900', 'DD-MON-YYYY')) != NVL(n_end_date,TO_DATE('01-JAN-1900', 'DD-MON-YYYY')) THEN ecdp_performance_test.auiSyncPtstResult(n_RESULT_NO, 'END_DATE', n_DAYTIME, n_VALID_FROM_DATE, n_STATUS, n_USE_CALC_IND, n_END_DATE, n_DURATION, n_LAST_UPDATED_BY); END IF;";"EC_PROD";
"PWEL_RESULT";"UPDATING";"AFTER";"1200";"IF NVL(:OLD.duration,-1) != NVL(n_duration,-1) THEN ecdp_performance_test.auiSyncPtstResult(n_RESULT_NO, 'DURATION', n_DAYTIME, n_VALID_FROM_DATE, n_STATUS, n_USE_CALC_IND, n_END_DATE, n_DURATION, n_LAST_UPDATED_BY); END IF;";"EC_PROD";
"PWEL_RESULT_1";"INSERTING";"AFTER";"200";"EcDp_Performance_Test.aiSyncPwelResultFromPwel(n_RESULT_NO,n_OBJECT_ID,n_CREATED_BY);";"EC_PROD";
"PWEL_RESULT_1";"INSERTING OR UPDATING";"AFTER";"100";"EcDp_Performance_Test.auiSetProductionDay(n_OBJECT_ID, n_DAYTIME, n_RESULT_NO, nvl(n_LAST_UPDATED_BY, n_CREATED_BY));";"EC_PROD";
"PWEL_RESULT_2";"INSERTING";"AFTER";"200";"EcDp_Performance_Test.aiSyncPwelResultFromPwel(n_RESULT_NO,n_OBJECT_ID,n_CREATED_BY);";"EC_PROD";
"PWEL_RESULT_2";"INSERTING OR UPDATING";"AFTER";"100";"EcDp_Performance_Test.auiSetProductionDay(n_OBJECT_ID, n_DAYTIME, n_RESULT_NO, nvl(n_LAST_UPDATED_BY, n_CREATED_BY));";"EC_PROD";
"PWEL_RESULT_3";"INSERTING";"AFTER";"200";"EcDp_Performance_Test.aiSyncPwelResultFromPwel(n_RESULT_NO,n_OBJECT_ID,n_CREATED_BY);";"EC_PROD";
"PWEL_RESULT_3";"INSERTING OR UPDATING";"AFTER";"100";"EcDp_Performance_Test.auiSetProductionDay(n_OBJECT_ID, n_DAYTIME, n_RESULT_NO, nvl(n_LAST_UPDATED_BY, n_CREATED_BY));";"EC_PROD";
"PWEL_TOTALIZER_GAS";"INSERTING OR UPDATING";"BEFORE";"100";"EcDp_Well_Event.validateTotalizerMax(n_OBJECT_ID,n_DAYTIME,n_OPENING_READING,n_CLOSING_READING);";"EC_PROD";
"REBOILER";"UPDATING";"AFTER";"3000";"ecdp_equipment_event.updateEventStatus(n_OBJECT_ID, n_DAYTIME, 'REBOILER');";"EC_PROD";
"RECIPIENT";"INSERTING";"AFTER";"2000";"ecbp_messaging.copyDeliveryMethod(n_OBJECT_ID, n_MESSAGE_NO,n_CREATED_DATE);";"EC_FRMW";
"REPORT_DEFINITION";"DELETING";"BEFORE";"3000";"EcBp_Report.deleteReportDefParam(o_TEMPLATE_CODE ,o_REPORT_DEFINITION_NO);";"EC_FRMW";
"REPORT_DEFINITION";"INSERTING";"AFTER";"3100";"EcBp_Report.insertReportDefParam(n_TEMPLATE_CODE ,n_REPORT_DEFINITION_NO);";"EC_FRMW";
"REPORT_RUNABLE";"DELETING";"BEFORE";"3100";"EcBp_Report.deleteReportRunnableParams(o_REPORT_RUNABLE_NO);";"EC_FRMW";
"REPORT_RUNABLE";"INSERTING";"AFTER";"3000";"EcBp_Report.insertReportRunnableParams(n_REPORT_RUNABLE_NO ,n_REP_GROUP_CODE, n_created_by);";"EC_FRMW";
"REPORT_TEMPLATE";"DELETING";"BEFORE";"3100";"EcBp_Report.deleteReportSystemParams(n_TEMPLATE_CODE ,'REPORT_SYSTEM_PARAM');";"EC_FRMW";
"REPORT_TEMPLATE";"INSERTING";"AFTER";"3000";"EcBp_Report.createReportSystemParams(n_TEMPLATE_CODE ,n_REPORT_SYSTEM_CODE);";"EC_FRMW";
"REPORT_TEMPLATE_PARAM";"DELETING";"AFTER";"3200";"EcBp_Report.deleteReportParam(n_TEMPLATE_CODE,n_PARAMETER_NAME);";"EC_FRMW";
"REPORT_TEMPLATE_PARAM";"INSERTING";"AFTER";"3000";"EcBp_Report.copyReportParam(n_TEMPLATE_CODE, n_PARAMETER_NAME, n_PARAMETER_TYPE, n_PARAMETER_SUB_TYPE );";"EC_FRMW";
"REPORT_TEMPLATE_PARAM";"UPDATING";"AFTER";"3100";"EcBp_Report.updateReportParam(n_TEMPLATE_CODE,n_PARAMETER_NAME, o_PARAMETER_NAME, n_PARAMETER_TYPE, n_PARAMETER_SUB_TYPE );";"EC_FRMW";
"REVERSE_OSMOSIS_UNIT";"UPDATING";"AFTER";"3000";"ecdp_equipment_event.updateEventStatus(n_OBJECT_ID, n_DAYTIME, 'REVERSE_OSMOSIS_UNIT');";"EC_PROD";
"SCTR_ACC_DAY_CPY_STATUS";"INSERTING";"BEFORE";"100";"n_time_span := 'DAY';";"EC_SALE";
"SCTR_ACC_DAY_EVENT";"INSERTING";"BEFORE";"1000";"n_time_span:='DAY';";"EC_SALE";
"SCTR_ACC_DAY_EVENT";"INSERTING OR UPDATING";"AFTER";"1200";"ecbp_contract_account_event.setRecordStatus(n_OBJECT_ID, n_ACCOUNT_CODE, n_EVENT_TYPE, n_DAYTIME, nvl(n_last_updated_by, n_created_by));";"EC_SALE";
"SCTR_ACC_DAY_EVENT";"INSERTING OR UPDATING";"BEFORE";"1100";"ecbp_contract_account_event.validateQty(n_OBJECT_ID, n_ACCOUNT_CODE, n_EVENT_TYPE, n_QTY);";"EC_SALE";
"SCTR_ACC_DAY_PC_CPY";"INSERTING";"BEFORE";"100";"n_time_span := 'DAY';";"EC_SALE";
"SCTR_ACC_DAY_PC_STATUS";"INSERTING";"AFTER";"100";"EcBp_Replicate_Sale_Qty.insertSalesQty(n_object_id, n_account_code, n_profit_centre_id, n_time_span, n_daytime, n_vol_qty, n_mass_qty, n_energy_qty, n_created_by);";"EC_SALE";
"SCTR_ACC_DAY_PC_STATUS";"INSERTING";"BEFORE";"100";"n_time_span := 'DAY';";"EC_SALE";
"SCTR_ACC_DAY_PC_STATUS";"UPDATING";"AFTER";"100";"EcBp_Replicate_Sale_Qty.insertSalesQty(n_object_id, n_account_code, n_profit_centre_id, n_time_span, n_daytime, n_vol_qty, n_mass_qty, n_energy_qty, n_created_by);";"EC_SALE";
"SCTR_ACC_DAY_STATUS";"INSERTING";"AFTER";"100";"EcBp_Replicate_Sale_Qty.insertSalesQty(n_object_id, n_account_code, NULL, n_time_span, n_daytime, n_vol_qty, n_mass_qty, n_energy_qty, n_created_by);";"EC_SALE";
"SCTR_ACC_DAY_STATUS";"INSERTING";"BEFORE";"100";"n_time_span := 'DAY';";"EC_SALE";
"SCTR_ACC_DAY_STATUS";"UPDATING";"AFTER";"100";"EcBp_Replicate_Sale_Qty.insertSalesQty(n_object_id, n_account_code, NULL, n_time_span, n_daytime, n_vol_qty, n_mass_qty, n_energy_qty, n_created_by);";"EC_SALE";
"SCTR_ACC_MTH_CPY_STATUS";"INSERTING";"BEFORE";"100";"n_time_span := 'MTH';";"EC_SALE";
"SCTR_ACC_MTH_EVENT";"INSERTING";"BEFORE";"1000";"n_time_span:='MTH';";"EC_SALE";
"SCTR_ACC_MTH_EVENT";"INSERTING OR UPDATING";"AFTER";"1200";"ecbp_contract_account_event.setRecordStatus(n_OBJECT_ID, n_ACCOUNT_CODE, n_EVENT_TYPE, n_DAYTIME, nvl(n_last_updated_by, n_created_by));";"EC_SALE";
"SCTR_ACC_MTH_EVENT";"INSERTING OR UPDATING";"BEFORE";"1100";"ecbp_contract_account_event.validateQty(n_OBJECT_ID, n_ACCOUNT_CODE, n_EVENT_TYPE, n_QTY);";"EC_SALE";
"SCTR_ACC_MTH_PC_CPY";"INSERTING";"BEFORE";"100";"n_time_span := 'MTH';";"EC_SALE";
"SCTR_ACC_MTH_PC_STATUS";"INSERTING";"AFTER";"100";"EcBp_Replicate_Sale_Qty.insertSalesQty(n_object_id, n_account_code, n_profit_centre_id, n_time_span, n_daytime, n_vol_qty, n_mass_qty, n_energy_qty, n_created_by);";"EC_SALE";
"SCTR_ACC_MTH_PC_STATUS";"INSERTING";"BEFORE";"100";"n_time_span := 'MTH';";"EC_SALE";
"SCTR_ACC_MTH_PC_STATUS";"UPDATING";"AFTER";"100";"EcBp_Replicate_Sale_Qty.insertSalesQty(n_object_id, n_account_code, n_profit_centre_id, n_time_span, n_daytime, n_vol_qty, n_mass_qty, n_energy_qty, n_created_by);";"EC_SALE";
"SCTR_ACC_MTH_STATUS";"INSERTING";"AFTER";"100";"EcBp_Replicate_Sale_Qty.insertSalesQty(n_object_id, n_account_code, NULL, n_time_span, n_daytime, n_vol_qty, n_mass_qty, n_energy_qty, n_created_by);";"EC_SALE";
"SCTR_ACC_MTH_STATUS";"INSERTING";"BEFORE";"100";"n_time_span := 'MTH';";"EC_SALE";
"SCTR_ACC_MTH_STATUS";"UPDATING";"AFTER";"100";"EcBp_Replicate_Sale_Qty.insertSalesQty(n_object_id, n_account_code, NULL, n_time_span, n_daytime, n_vol_qty, n_mass_qty, n_energy_qty, n_created_by);";"EC_SALE";
"SCTR_ACC_YR_CPY_STATUS";"INSERTING";"BEFORE";"100";"n_time_span := 'YR';";"EC_SALE";
"SCTR_ACC_YR_EVENT";"INSERTING";"BEFORE";"1000";"n_time_span:='YR';";"EC_SALE";
"SCTR_ACC_YR_EVENT";"INSERTING OR UPDATING";"AFTER";"1200";"ecbp_contract_account_event.setRecordStatus(n_OBJECT_ID, n_ACCOUNT_CODE, n_EVENT_TYPE, n_DAYTIME, nvl(n_last_updated_by, n_created_by));";"EC_SALE";
"SCTR_ACC_YR_EVENT";"INSERTING OR UPDATING";"BEFORE";"1100";"ecbp_contract_account_event.validateQty(n_OBJECT_ID, n_ACCOUNT_CODE, n_EVENT_TYPE, n_QTY);";"EC_SALE";
"SCTR_ACC_YR_PC_CPY";"INSERTING";"BEFORE";"100";"n_time_span := 'YR';";"EC_SALE";
"SCTR_ACC_YR_PC_STATUS";"INSERTING";"AFTER";"100";"EcBp_Replicate_Sale_Qty.insertSalesQty(n_object_id, n_account_code, n_profit_centre_id, n_time_span, n_daytime, n_vol_qty, n_mass_qty, n_energy_qty, n_created_by);";"EC_SALE";
"SCTR_ACC_YR_PC_STATUS";"INSERTING";"BEFORE";"100";"n_time_span := 'YR';";"EC_SALE";
"SCTR_ACC_YR_PC_STATUS";"UPDATING";"AFTER";"100";"EcBp_Replicate_Sale_Qty.insertSalesQty(n_object_id, n_account_code, n_profit_centre_id, n_time_span, n_daytime, n_vol_qty, n_mass_qty, n_energy_qty, n_created_by);";"EC_SALE";
"SCTR_ACC_YR_STATUS";"INSERTING";"AFTER";"100";"EcBp_Replicate_Sale_Qty.insertSalesQty(n_object_id, n_account_code, NULL, n_time_span, n_daytime, n_vol_qty, n_mass_qty, n_energy_qty, n_created_by);";"EC_SALE";
"SCTR_ACC_YR_STATUS";"INSERTING";"BEFORE";"100";"n_time_span := 'YR';";"EC_SALE";
"SCTR_ACC_YR_STATUS";"UPDATING";"AFTER";"100";"EcBp_Replicate_Sale_Qty.insertSalesQty(n_object_id, n_account_code, NULL, n_time_span, n_daytime, n_vol_qty, n_mass_qty, n_energy_qty, n_created_by);";"EC_SALE";
"SCTR_DAY_NOM";"UPDATING";"BEFORE";"1000";"EcDp_contract_Nomination.validateDailyNominationQty(n_OBJECT_ID, n_DAYTIME, n_NOMINATED_QTY);";"EC_SALE";
"SCTR_DAY_NOM_OVERVIEW";"UPDATING";"BEFORE";"100";"EcDp_contract_Nomination.validateDailyNominationQty(n_OBJECT_ID,n_DAYTIME,n_NOMINATED_QTY);";"EC_SALE";
"SCTR_DELIVERY_EVENT";"INSERTING OR UPDATING";"BEFORE";"1000";"EcBp_Contract_Delivery_Event.validateContractPeriod(n_OBJECT_ID, n_DAYTIME, n_END_DATE);";"EC_SALE";
"SCTR_MTH_ADJUSTMENT";"INSERTING OR UPDATING";"AFTER";"1000";"EcBp_Contract_Mth_Adjustment.validateAdjustment(n_COMPANY_ID, n_OBJECT_ID, n_DAYTIME);";"EC_SALE";
"SCTR_PRICE_ELEMENT";"DELETING";"BEFORE";"100";"Ecdp_Contract_Cargo.checkContractRelations(n_OBJECT_ID, n_ELEMENT_CODE);";"EC_SALE";
"SCTR_SUB_DAY_DEL";"UPDATING";"AFTER";"1000";"EcDp_contract_Delivery.aggregateSubDailyToDaily(n_OBJECT_ID, n_DELIVERY_POINT_ID, n_PRODUCTION_DAY, nvl(n_last_updated_by, n_created_by));";"EC_SALE";
"SCTR_SUB_DAY_FCST";"UPDATING";"AFTER";"1000";"EcDp_contract_Forecast.aggregateSubDailyToDaily(n_OBJECT_ID, n_DELIVERY_POINT_ID, n_PRODUCTION_DAY,nvl(n_last_updated_by, n_created_by));";"EC_SALE";
"SO2_SCRUBBER";"UPDATING";"AFTER";"3000";"ecdp_equipment_event.updateEventStatus(n_OBJECT_ID, n_DAYTIME, 'SO2_SCRUBBER');";"EC_PROD";
"SPLITIGATOR";"UPDATING";"AFTER";"3000";"ecdp_equipment_event.updateEventStatus(n_OBJECT_ID, n_DAYTIME, 'SPLITIGATOR');";"EC_PROD";
"SPLIT_KEY";"INSERTING";"AFTER";"100";"IF (n_code IS NULL) THEN ue_RevenueCodes.UpdateCodeForClass(n_object_id, n_daytime, 'SPLIT_KEY'); END IF;";"EC_REVN";
"STABILIZER";"UPDATING";"AFTER";"3000";"ecdp_equipment_event.updateEventStatus(n_OBJECT_ID, n_DAYTIME, 'STABILIZER');";"EC_PROD";
"STEAM_GENERATOR";"UPDATING";"AFTER";"3000";"ecdp_equipment_event.updateEventStatus(n_OBJECT_ID, n_DAYTIME, 'STEAM_GENERATOR');";"EC_PROD";
"STIM_MTH_CARGO_VAL_INS";"UPDATING";"AFTER";"600";"EcDp_Document_Gen.SetNewCargoRecordAllocNo(n_object_id, n_contract_id, n_cargo_name, n_Parcel_Name, n_Qty_Type, n_Price_Concept_Code, n_field_id, n_daytime, n_connection_no, n_Manual_Insert_Ind, n_Alloc_No_Set_Ind);";"EC_REVN";
"STIM_MTH_CARGO_VAL_INS";"UPDATING";"BEFORE";"500";"IF (n_doc_date IS NULL) THEN n_doc_date := Ecdp_Document_Gen_Util.GetCargoDocDate(n_contract_id, n_cargo_name, n_qty_type, n_alloc_no, n_daytime, n_doc_setup_id); END IF;";"EC_REVN";
"STIM_MTH_CONT_VAL_INS";"INSERTING OR UPDATING";"BEFORE";"100";"n_DAYTIME := TRUNC(n_DAYTIME,'mm');";"EC_REVN";
"STORAGE_LIFTING";"UPDATING";"AFTER";"100";"ue_Replicate_CargoValues.updateLiftingQty(n_PARCEL_NO, :OLD.load_value, n_load_value, null, null, 'BOL', n_PRODUCT_MEAS_NO, n_last_updated_by);";"EC_TRAN";
"STORAGE_LIFTING_UNLOAD";"UPDATING";"AFTER";"100";"ue_Replicate_CargoValues.updateLiftingQty(n_PARCEL_NO, :OLD.unload_value, n_UNLOAD_VALUE, null, null, 'UNLOAD', n_PRODUCT_MEAS_NO, n_last_updated_by);";"EC_TRAN";
"STORAGE_LIFT_NOMINATION";"DELETING";"BEFORE";"100";"ecbp_storage_lift_nomination.bdStorageLiftNomination(n_parcel_no);";"EC_TRAN";
"STORAGE_LIFT_NOMINATION";"INSERTING";"AFTER";"200";"ecbp_storage_lift_nomination.aiStorageLiftNomination(n_parcel_no, n_nom_date, n_NOM_DATE_RANGE, n_REQ_DATE, n_REQ_DATE_RANGE, n_REQ_GRS_VOL, n_REQ_TOLERANCE_TYPE, n_nom_grs_vol, nvl(n_last_updated_by, n_created_by));";"EC_TRAN";
"STORAGE_LIFT_NOMINATION";"UPDATING";"AFTER";"300";"ue_Replicate_CargoValues.updateLiftingQty(n_PARCEL_NO, :OLD.REQ_GRS_VOL, n_REQ_GRS_VOL, :OLD.REQ_DATE, n_REQ_DATE, 'REQUESTED', null, n_last_updated_by);";"EC_TRAN";
"STORAGE_LIFT_NOMINATION";"UPDATING";"AFTER";"400";"ue_Replicate_CargoValues.updateLiftingQty(n_PARCEL_NO, :OLD.NOM_GRS_VOL, n_NOM_GRS_VOL, :OLD.NOM_DATE, n_NOM_DATE, 'NOMINATED', null, n_last_updated_by);";"EC_TRAN";
"STORAGE_LIFT_NOM_ALLOC";"INSERTING";"AFTER";"200";"EcBP_Storage_Lift_Nomination.insertFromLiftProg(n_parcel_no, n_nom_qty, n_daytime, n_created_by);";"EC_TRAN";
"STORAGE_LIFT_NOM_ALLOC";"INSERTING";"BEFORE";"100";"EcDp_System_Key.assignNextNumber('STORAGE_LIFT_NOMINATION', n_PARCEL_NO);";"EC_TRAN";
"STORAGE_LIFT_NOM_BLMR";"UPDATING";"AFTER";"100";"ue_replicate_cargovalues.updatebldate(n_parcel_no, :old.bl_date, n_bl_date, n_last_updated_by);";"EC_TRAN";
"STORAGE_LIFT_NOM_DETAIL";"UPDATING";"AFTER";"200";"ue_replicate_cargovalues.updateDetails(n_parcel_no, :old.consignor_id, n_consignor_id, :old.consignee_id, n_consignee_id, :old.incoterm, n_incoterm, :old.contract_id, n_contract_id, :old.port_id, n_port_id, n_last_updated_by);";"EC_TRAN";
"STORAGE_LIFT_NOM_DETAIL";"UPDATING";"BEFORE";"100";"ecbp_storage_lift_nomination.validateLiftingIndicator(:OLD.LIFTING_CODE, n_LIFTING_CODE);";"EC_TRAN";
"STORAGE_LIFT_NOM_INFO";"UPDATING";"AFTER";"300";"ue_Replicate_CargoValues.updateLiftingQty(n_PARCEL_NO, :OLD.NOM_GRS_VOL, n_NOM_GRS_VOL, :OLD.NOM_DATE, n_NOM_DATE, 'NOMINATED', null, n_last_updated_by);";"EC_TRAN";
"STORAGE_LIFT_NOM_INFO";"UPDATING";"BEFORE";"200";"ecbp_storage_lift_nomination.validateLiftingIndicator(:OLD.LIFTING_CODE, n_LIFTING_CODE);";"EC_TRAN";
"STORAGE_LIFT_NOM_UNLOAD";"UPDATING";"AFTER";"100";"ue_replicate_cargovalues.updateUnloadDate(n_parcel_no, :old.unload_date, n_unload_date, n_last_updated_by);";"EC_TRAN";
"STORAGE_LOAD_INSTRUCTION";"UPDATING";"AFTER";"200";"ue_Replicate_CargoValues.updateLiftingQty(n_PARCEL_NO, :OLD.SCHEDULED_GRS_VOL, n_SCHEDULED_GRS_VOL, :OLD.NOM_DATE, n_NOM_DATE, 'SCHEDULED', null, n_last_updated_by);";"EC_TRAN";
"STORAGE_LOAD_INSTRUCTION";"UPDATING";"BEFORE";"100";"ecbp_storage_lift_nomination.validateLiftingIndicator(:OLD.LIFTING_CODE, n_LIFTING_CODE);";"EC_TRAN";
"STORAGE_OFFICIAL_RECEIPT";"INSERTING";"AFTER";"100";"EcDp_Storage_Receipt.aggrOfficial(n_object_id, n_daytime, n_receipt_type, NULL, n_grs_vol, n_created_by);ecdp_storage_receipt.calcLiftAccOfficial(n_object_id, n_profit_centre_id, n_company_id,n_daytime, n_receipt_type, NULL, n_grs_vol, n_created_by);";"EC_TRAN";
"STORAGE_OFFICIAL_RECEIPT";"UPDATING";"AFTER";"100";"EcDp_Storage_Receipt.aggrOfficial(n_object_id, n_daytime, n_receipt_type, :old.grs_vol, n_grs_vol, n_last_updated_by);ecdp_storage_receipt.calcLiftAccOfficial(n_object_id, n_profit_centre_id, n_company_id, n_daytime, n_receipt_type, :old.grs_vol, n_grs_vol, n_last_updated_by);";"EC_TRAN";
"STOR_DAY_EXPORT_STATUS";"INSERTING";"BEFORE";"100";"n_TIME_SPAN := 'DAY';";"EC_TRAN";
"STOR_DAY_PC_LIFT_ALLOC";"INSERTING OR UPDATING";"AFTER";"100";"ue_Replicate_CargoValues.insertAlloc(n_parcel_no, n_profit_centre_id, n_qty, nvl(n_last_updated_by, n_created_by));";"EC_TRAN";
"STOR_DAY_PLAN_RECEIPT";"INSERTING";"AFTER";"100";"EcDp_Storage_Forecast.aggrForecast(n_object_id, n_daytime, n_created_by); ecdp_storage_forecast.aiuStorPcForecast(n_object_id, n_profit_centre_id, n_daytime, NULL, n_grs_vol, n_created_by);";"EC_TRAN";
"STOR_DAY_PLAN_RECEIPT";"UPDATING";"AFTER";"100";"EcDp_Storage_Forecast.aggrForecast(n_object_id, n_daytime, n_last_updated_by); ecdp_storage_forecast.aiuStorPcForecast(n_object_id, n_profit_centre_id, n_daytime, :old.grs_vol, n_grs_vol, n_last_updated_by);";"EC_TRAN";
"STOR_MTH_EXPORT_STATUS";"INSERTING";"BEFORE";"100";"n_TIME_SPAN := 'MTH';";"EC_TRAN";
"STREAM";"INSERTING";"AFTER";"100";"IF (n_code IS NULL) THEN ue_RevenueCodes.UpdateCodeForClass(n_object_id, n_daytime, 'STREAM'); END IF;";"EC_REVN";
"STREAM";"INSERTING OR UPDATING";"AFTER";"200";"IF (:NEW.stream_type = 'I') THEN ecdp_revn_stream.SetStreamName(n_object_id, n_daytime); END IF;";"EC_REVN";
"STREAM";"INSERTING OR UPDATING";"BEFORE";"100";"EcDp_Stream.validateAnalysisReference(:NEW.OBJECT_ID, :NEW.REF_ANALYSIS_STREAM_ID, n_DAYTIME);";"EC_PROD";
"STREAM_ITEM";"INSERTING";"AFTER";"100";"IF (n_code IS NULL) THEN ue_RevenueCodes.UpdateCodeForClass(n_object_id, n_daytime, 'STREAM_ITEM'); END IF;";"EC_REVN";
"STREAM_ITEM_COLLECTION";"INSERTING";"AFTER";"100";"IF (n_code IS NULL) THEN ue_RevenueCodes.UpdateCodeForClass(n_object_id, n_daytime, 'STREAM_ITEM_COLLECTION'); END IF;";"EC_REVN";
"STRM_COMPANY_SPLIT";"INSERTING OR UPDATING";"BEFORE";"10";"EcBp_Stream_Event.setStrmFactorEndDate(n_OBJECT_ID, n_DAYTIME, n_END_DATE, n_COMPANY_ID);";"EC_PROD";
"STRM_COMPANY_SWAP";"DELETING";"BEFORE";"200";"EcBp_Stream_Event.swap_delete(n_SWAP_NO);";"EC_PROD";
"STRM_COMPANY_SWAP";"INSERTING OR UPDATING";"BEFORE";"100";"EcBp_Stream_Event.setStrmSwapEndDate(n_OBJECT_ID, n_COMPANY_ID, n_DAYTIME, n_END_DATE);";"EC_PROD";
"STRM_DAY_NR_EQPM";"DELETING";"BEFORE";"700";"ecdp_stream_ventflare.delEqpmWellChildEvent(n_OBJECT_ID, n_CLASS_NAME, n_DAYTIME, n_EQPM_ID,n_START_DAYTIME);";"EC_PROD";
"STRM_DAY_NR_EQPM";"INSERTING";"AFTER";"500";"ecdp_stream_VentFlare.createChildEvent(n_OBJECT_ID, n_CLASS_NAME, n_DAYTIME, n_EQPM_ID,n_START_DAYTIME,n_END_DAYTIME ,nvl(n_last_updated_by, n_created_by)); ";"EC_PROD";
"STRM_DAY_NR_EQPM";"INSERTING";"AFTER";"600";"ecdp_stream_ventFlare.insertWell(n_OBJECT_ID, n_CLASS_NAME, n_DAYTIME, n_EQPM_ID,n_START_DAYTIME,n_END_DAYTIME ,nvl(n_last_updated_by, n_created_by));";"EC_PROD";
"STRM_DAY_NR_EQPM";"INSERTING";"BEFORE";"300";" IF n_DAYTIME <> ecdp_productionday.getproductionday(null,n_EQPM_ID,n_START_DAYTIME) THEN  Raise_Application_Error(-20104,'The Start Daytime entered is outside production day boundaries.' );  END IF;";"EC_PROD";
"STRM_DAY_NR_EQPM";"INSERTING OR UPDATING";"BEFORE";"100";" IF n_START_DAYTIME > nvl(n_END_DAYTIME,n_START_DAYTIME) THEN  Raise_Application_Error(-20104,'END_DAYTIME cannot be before START_DAYTIME: '||n_START_DAYTIME); END IF; ";"EC_PROD";
"STRM_DAY_NR_EQPM";"INSERTING OR UPDATING";"BEFORE";"400";"IF n_END_DAYTIME IS NOT NULL AND :OLD.END_DAYTIME <> n_END_DAYTIME THEN IF n_DAYTIME <> ecdp_productionday.getproductionday(null,n_EQPM_ID,n_END_DAYTIME) THEN  Raise_Application_Error(-20104,'The End Daytime entered is outside production day boundaries.' );  END IF; END IF;";"EC_PROD";
"STRM_DAY_NR_EQPM";"UPDATING";"AFTER";"200";"EcDp_Stream_VentFlare.updateEndDateForChildEvent(n_OBJECT_ID, n_CLASS_NAME, n_DAYTIME, n_EQPM_ID,n_START_DAYTIME,n_END_DAYTIME ,nvl(n_last_updated_by, n_created_by)); ";"EC_PROD";
"STRM_DAY_NR_EQPM_WELL";"INSERTING";"AFTER";"100";"ecdp_stream_VentFlare.createEqpmWellChildEvent(n_OBJECT_ID, n_CLASS_NAME, n_DAYTIME, n_EQPM_ID,n_WELL_ID,n_START_DAYTIME,nvl(n_last_updated_by, n_created_by)); ";"EC_PROD";
"STRM_DAY_NR_OTHER";"INSERTING";"AFTER";"500";"ecdp_stream_VentFlare.createChildEvent(n_OBJECT_ID, n_CLASS_NAME, n_DAYTIME, n_ASSET_ID,n_START_DAYTIME,n_END_DAYTIME ,nvl(n_last_updated_by, n_created_by)); ";"EC_PROD";
"STRM_DAY_NR_OTHER";"INSERTING";"BEFORE";"300";" IF n_DAYTIME <> ecdp_productionday.getproductionday(null,n_ASSET_ID,n_START_DAYTIME) THEN  Raise_Application_Error(-20104,'The Start Daytime entered is outside production day boundaries.' );  END IF;";"EC_PROD";
"STRM_DAY_NR_OTHER";"INSERTING OR UPDATING";"BEFORE";"100";" IF n_START_DAYTIME > nvl(n_END_DAYTIME,n_START_DAYTIME) THEN  Raise_Application_Error(-20104,'END_DAYTIME cannot be before START_DAYTIME: '||n_START_DAYTIME); END IF; ";"EC_PROD";
"STRM_DAY_NR_OTHER";"INSERTING OR UPDATING";"BEFORE";"400";"IF n_END_DAYTIME IS NOT NULL AND :OLD.END_DAYTIME <> n_END_DAYTIME THEN IF n_DAYTIME <> ecdp_productionday.getproductionday(null,n_ASSET_ID,n_END_DAYTIME) THEN  Raise_Application_Error(-20104,'The End Daytime entered is outside production day boundaries.' );  END IF; END IF;";"EC_PROD";
"STRM_DAY_NR_OTHER";"UPDATING";"AFTER";"200";"EcDp_Stream_VentFlare.updateEndDateForChildEvent(n_OBJECT_ID, n_CLASS_NAME, n_DAYTIME, n_ASSET_ID,n_START_DAYTIME,n_END_DAYTIME ,nvl(n_last_updated_by, n_created_by)); ";"EC_PROD";
"STRM_DAY_NR_WELL";"INSERTING";"AFTER";"500";"ecdp_stream_VentFlare.createChildEvent(n_OBJECT_ID, n_CLASS_NAME, n_DAYTIME, n_WELL_ID,n_START_DAYTIME,n_END_DAYTIME ,nvl(n_last_updated_by, n_created_by)); ";"EC_PROD";
"STRM_DAY_NR_WELL";"INSERTING";"BEFORE";"300";" IF n_DAYTIME <> ecdp_productionday.getproductionday(null,n_WELL_ID,n_START_DAYTIME) THEN  Raise_Application_Error(-20104,'The Start Daytime entered is outside production day boundaries.' );  END IF;";"EC_PROD";
"STRM_DAY_NR_WELL";"INSERTING OR UPDATING";"BEFORE";"100";" IF n_START_DAYTIME > nvl(n_END_DAYTIME,n_START_DAYTIME) THEN  Raise_Application_Error(-20104,'END_DAYTIME cannot be before START_DAYTIME: '||n_START_DAYTIME); END IF; ";"EC_PROD";
"STRM_DAY_NR_WELL";"INSERTING OR UPDATING";"BEFORE";"400";"IF n_END_DAYTIME IS NOT NULL AND :OLD.END_DAYTIME <> n_END_DAYTIME THEN IF n_DAYTIME <> ecdp_productionday.getproductionday('WELL',n_WELL_ID,n_END_DAYTIME) THEN  Raise_Application_Error(-20104,'The End Daytime entered is outside production day boundaries.' );  END IF; END IF;";"EC_PROD";
"STRM_DAY_NR_WELL";"UPDATING";"AFTER";"200";"EcDp_Stream_VentFlare.updateEndDateForChildEvent(n_OBJECT_ID, n_CLASS_NAME, n_DAYTIME, n_WELL_ID,n_START_DAYTIME,n_END_DAYTIME ,nvl(n_last_updated_by, n_created_by)); ";"EC_PROD";
"STRM_DAY_PC_CPY_CE_REAS";"INSERTING OR UPDATING";"BEFORE";"100";"EcBp_Strm_Ownership.validateReassignment(n_NET_MASS, n_WT_FRAC);";"EC_PROD";
"STRM_DAY_PC_CPY_CPY_REAS";"INSERTING OR UPDATING";"BEFORE";"100";"EcBp_Strm_Ownership.validateReassignment(n_NET_MASS, n_WT_FRAC);";"EC_PROD";
"STRM_DAY_VENTFLARE";"UPDATING";"AFTER";"100";"If n_GRS_VOL <> :OLD.GRS_VOL THEN EcDp_Stream_VentFlare.updateSource(n_OBJECT_ID,n_DAYTIME,n_LAST_UPDATED_BY,n_GRS_VOL); END IF;";"EC_PROD";
"STRM_DPT_CONVERSION";"INSERTING OR UPDATING OR DELETING";"BEFORE";"100";"EcDp_Stream_DPT_Value.copyToNewDaytime(n_object_id, n_daytime, n_density, n_press, n_temp);";"EC_PROD";
"STRM_GAS_ANALYSIS";"INSERTING";"BEFORE";"200";"n_PRODUCTION_DAY := Ecdp_Productionday.getProductionDay(n_OBJECT_CLASS_NAME,n_OBJECT_ID,n_DAYTIME);";"EC_PROD";
"STRM_GAS_ANALYSIS";"INSERTING OR UPDATING";"BEFORE";"100";"n_object_class_name := 'STREAM';n_phase := ec_strm_version.stream_phase(n_OBJECT_ID,n_DAYTIME,'<=');";"EC_PROD";
"STRM_GAS_ANALYSIS_EVENT";"DELETING";"BEFORE";"3200";"ecdp_fluid_analysis.delCompSetForPeriodAnalysis(n_OBJECT_ID,n_SAMPLING_METHOD,n_ANALYSIS_TYPE,n_DAYTIME);";"EC_PROD";
"STRM_GAS_TOTALIZER";"INSERTING";"BEFORE";"200";"IF n_END_DATE IS NULL THEN n_END_DATE:=n_DAYTIME + 1; END IF;";"EC_PROD";
"STRM_GAS_TOTALIZER";"INSERTING OR UPDATING";"BEFORE";"100";"EcBp_Stream_Event.validateTotalizerMax(n_OBJECT_ID,n_DAYTIME,n_OPENING_READING_OVRWRITE,n_CLOSING_READING);";"EC_PROD";
"STRM_LIQ_TOTALIZER";"INSERTING";"BEFORE";"200";"IF n_END_DATE IS NULL THEN n_END_DATE:=n_DAYTIME + 1; END IF;";"EC_PROD";
"STRM_LIQ_TOTALIZER";"INSERTING OR UPDATING";"BEFORE";"100";"EcBp_Stream_Event.validateTotalizerMax(n_OBJECT_ID,n_DAYTIME,n_OPENING_READING_OVRWRITE,n_CLOSING_READING);";"EC_PROD";
"STRM_LNG_ANALYSIS";"INSERTING";"BEFORE";"200";"n_PRODUCTION_DAY := Ecdp_Productionday.getProductionDay(n_OBJECT_CLASS_NAME,n_OBJECT_ID,n_DAYTIME);";"EC_PROD";
"STRM_LNG_ANALYSIS";"INSERTING OR UPDATING";"BEFORE";"100";"n_object_class_name := 'STREAM';n_phase := ec_strm_version.stream_phase(n_OBJECT_ID,n_DAYTIME,'<=');";"EC_PROD";
"STRM_OIL_ANALYSIS";"INSERTING";"BEFORE";"200";"n_PRODUCTION_DAY := Ecdp_Productionday.getProductionDay(n_OBJECT_CLASS_NAME,n_OBJECT_ID,n_DAYTIME);n_PHASE := ec_strm_version.stream_phase(n_OBJECT_ID, n_DAYTIME, '<=');";"EC_PROD";
"STRM_OIL_ANALYSIS";"INSERTING OR UPDATING";"BEFORE";"100";"n_object_class_name := 'STREAM';n_phase := ec_strm_version.stream_phase(n_OBJECT_ID,n_DAYTIME,'<=');";"EC_PROD";
"STRM_OIL_BATCH_EVENT";"INSERTING";"BEFORE";"100";"IF n_END_DATE IS NULL THEN n_END_DATE:=n_DAYTIME + 1; END IF;";"EC_PROD";
"STRM_OIL_EXPORT_EVENT";"INSERTING OR UPDATING";"AFTER";"3000";"update strm_event set grs_mass = (grs_closing_mass-grs_opening_mass), last_updated_by = n_last_updated_by where object_id = n_OBJECT_ID and daytime = n_DAYTIME and grs_mass is null and event_type = 'STRM_OIL_EXPORT_EVENT';";"EC_PROD";
"STRM_PC_SPLIT";"INSERTING";"AFTER";"700";"EcDp_Objects_Split.SetInsertSplitEndDate(n_OBJECT_ID,n_DAYTIME,'STRM_PC_SPLIT' );";"EC_PROD";
"STRM_PT_CONVERSION";"INSERTING OR UPDATING OR DELETING";"BEFORE";"100";"EcDp_Stream_PT_Value.copyToNewDaytime(n_object_id, n_daytime, n_press, n_temp);";"EC_PROD";
"STRM_SAMPLE_ANALYSIS";"INSERTING";"BEFORE";"200";"n_PRODUCTION_DAY := Ecdp_Productionday.getProductionDay(n_OBJECT_CLASS_NAME,n_OBJECT_ID,n_DAYTIME);n_PHASE := ec_strm_version.stream_phase(n_OBJECT_ID, n_DAYTIME, '<=');";"EC_PROD";
"STRM_SAMPLE_ANALYSIS";"INSERTING OR UPDATING";"BEFORE";"100";"n_object_class_name := 'STREAM';";"EC_PROD";
"STRM_TBP_ANALYSIS";"INSERTING";"BEFORE";"200";"n_PRODUCTION_DAY := Ecdp_Productionday.getProductionDay(n_OBJECT_CLASS_NAME,n_OBJECT_ID,n_DAYTIME);";"EC_PROD";
"STRM_TBP_ANALYSIS";"INSERTING OR UPDATING";"BEFORE";"100";"n_object_class_name := 'STREAM';";"EC_PROD";
"STRM_TRUCK_UNLOAD_MASS";"INSERTING";"BEFORE";"3300";"n_NET_VOL := n_GRS_MASS * (1-n_BS_W_WT)/n_STD_DENSITY;";"EC_PROD";
"STRM_TRUCK_UNLOAD_MASS";"INSERTING";"BEFORE";"3400";"n_WATER_VOL := n_GRS_MASS * n_BS_W_WT/ecdp_system.getWaterDensity(nvl(n_RUN_TEMP,n_OBS_TEMP),n_daytime);";"EC_PROD";
"STRM_TRUCK_UNLOAD_MASS";"INSERTING OR UPDATING";"BEFORE";"3000";"n_GRS_MASS := EcBp_Stream_TruckTicket.getCalcGrsMass(n_OBJECT_ID,n_START_METER_READING,n_END_METER_READING,n_DAYTIME);";"EC_PROD";
"STRM_TRUCK_UNLOAD_MASS";"UPDATING";"BEFORE";"3100";"n_NET_VOL := n_GRS_MASS * (1-n_BS_W_WT)/n_STD_DENSITY;";"EC_PROD";
"STRM_TRUCK_UNLOAD_MASS";"UPDATING";"BEFORE";"3200";"n_WATER_VOL := n_GRS_MASS * n_BS_W_WT/ecdp_system.getWaterDensity(nvl(n_RUN_TEMP,n_OBS_TEMP),n_daytime);";"EC_PROD";
"STRM_TRUCK_UNLOAD_VOL";"INSERTING";"BEFORE";"3200";"n_NET_VOL:=n_GRS_VOL*(1-n_BS_W)*n_VCF;";"EC_PROD";
"STRM_TRUCK_UNLOAD_VOL";"INSERTING";"BEFORE";"3300";"n_WATER_VOL:=n_GRS_VOL * n_BS_W;";"EC_PROD";
"STRM_TRUCK_UNLOAD_VOL";"UPDATING";"BEFORE";"3000";"n_NET_VOL:=n_GRS_VOL*(1-n_BS_W)*n_VCF;";"EC_PROD";
"STRM_TRUCK_UNLOAD_VOL";"UPDATING";"BEFORE";"3100";"n_WATER_VOL:=n_GRS_VOL * n_BS_W;";"EC_PROD";
"STRM_WATER_TOTALIZER";"INSERTING ";"BEFORE";"200";"IF n_END_DATE IS NULL THEN n_END_DATE:=n_DAYTIME + 1; END IF;";"EC_PROD";
"STRM_WATER_TOTALIZER";"INSERTING OR UPDATING";"BEFORE";"160";"EcBp_Stream_Event.validateTotalizerMax(n_OBJECT_ID,n_DAYTIME,n_OPENING_READING_OVRWRITE,n_CLOSING_READING);";"EC_PROD";
"STRM_WELL_CONN";"INSERTING OR UPDATING";"BEFORE";"1400";"EcBp_Stream_Well_Conn.checkIfEventOverlaps(n_OBJECT_ID, n_DAYTIME, n_WELL_OBJECT_ID, n_END_DATE);";"EC_PROD";
"TANK_DAY_DIP_STATUS";"INSERTING OR UPDATING";"BEFORE";"100";"IF n_MEASUREMENT_EVENT_TYPE IS NULL THEN n_MEASUREMENT_EVENT_TYPE := 'DAY_CLOSING'; END IF;";"EC_PROD";
"TANK_DAY_INV_MASS";"INSERTING OR UPDATING";"BEFORE";"100";"IF n_MEASUREMENT_EVENT_TYPE IS NULL THEN n_MEASUREMENT_EVENT_TYPE := 'DAY_CLOSING'; END IF;";"EC_PROD";
"TANK_DAY_INV_OIL";"INSERTING OR UPDATING";"BEFORE";"100";"IF n_MEASUREMENT_EVENT_TYPE IS NULL THEN n_MEASUREMENT_EVENT_TYPE := 'DAY_CLOSING'; END IF;";"EC_PROD";
"TANK_DAY_INV_SINGLE_DIP";"INSERTING OR UPDATING";"BEFORE";"100";"IF n_MEASUREMENT_EVENT_TYPE IS NULL THEN n_MEASUREMENT_EVENT_TYPE := 'DAY_CLOSING'; END IF;";"EC_PROD";
"TANK_MTH_INV_OIL";"INSERTING OR UPDATING";"BEFORE";"100";"IF n_MEASUREMENT_EVENT_TYPE IS NULL THEN n_MEASUREMENT_EVENT_TYPE := 'DAY_CLOSING'; END IF;";"EC_PROD";
"TANK_OIL_BATCH_EXP";"INSERTING OR UPDATING";"AFTER";"1100";"EcDp_Tank_Measurement.SetDefaultExportTank(n_OBJECT_ID, n_DAYTIME);";"EC_PROD";
"TANK_STRAPPING";"DELETING";"AFTER";"300";"EcDp_Tank_Strapping.SetPrevEndDate(o_OBJECT_ID, NULL, o_DAYTIME, 'DELETE');";"EC_PROD";
"TANK_STRAPPING";"INSERTING";"AFTER";"100";"EcDp_Tank_Strapping.SetPrevEndDate(n_OBJECT_ID, n_DAYTIME, NULL, 'INSERT');";"EC_PROD";
"TANK_STRAPPING";"UPDATING";"AFTER";"200";"EcDp_Tank_Strapping.SetPrevEndDate(n_OBJECT_ID, n_DAYTIME, o_DAYTIME, 'UPDATE');";"EC_PROD";
"TANK_USAGE";"INSERTING OR UPDATING";"BEFORE";"3000";"EcBp_Tank_Usage.validatePeriod(n_OBJECT_ID, n_TANK_ID, n_END_DATE);";"EC_PROD";
"TASK_PROCESS";"INSERTING OR UPDATING OR DELETING";"BEFORE";"100";"IF nvl(n_CODE,'X') IN ('APPROVAL', 'CP_ERROR', 'CP_WARNING')  OR   nvl(:OLD.CODE,'X') IN ('APPROVAL', 'CP_ERROR', 'CP_WARNING')  THEN  Raise_Application_Error(-20122,'Operation on system processes not allowed');  END IF;";"EC_FRMW";
"TCTR_SUB_DAY_DP_IN_NOM";"UPDATING OR INSERTING";"AFTER";"100";"ecdp_contract_nomination.aggrNomSubDailyToDaily( n_object_id, n_entry_delivery_point_id, n_PRODUCTION_DAY,nvl(n_last_updated_by,n_created_by));ecdp_contract_nomination.aggrReqSubDailyToDaily( n_object_id, n_entry_delivery_point_id, n_PRODUCTION_DAY, nvl(n_last_updated_by, n_created_by));ecdp_contract_nomination.aggrAdjSubDailyToDaily( n_object_id, n_entry_delivery_point_id, n_PRODUCTION_DAY, nvl(n_last_updated_by, n_created_by));ecdp_contract_nomination.aggrSentSubDailyToDaily( n_object_id, n_entry_delivery_point_id, n_PRODUCTION_DAY, nvl(n_last_updated_by, n_created_by));";"EC_TRAN";
"TCTR_SUB_DAY_DP_IN_NOM";"UPDATING OR INSERTING";"BEFORE";"100";"n_adjusted_qty := nvl(n_requested_qty, 0) + nvl(n_adjustment_qty, 0);";"EC_TRAN";
"TCTR_SUB_DAY_DP_OUT_NOM";"UPDATING OR INSERTING";"AFTER";"100";"ecdp_contract_nomination.aggrNomSubDailyToDaily( n_object_id, n_exit_delivery_point_id, n_PRODUCTION_DAY,nvl(n_last_updated_by,n_created_by));ecdp_contract_nomination.aggrReqSubDailyToDaily( n_object_id, n_exit_delivery_point_id, n_PRODUCTION_DAY, nvl(n_last_updated_by, n_created_by));ecdp_contract_nomination.aggrAdjSubDailyToDaily( n_object_id, n_exit_delivery_point_id, n_PRODUCTION_DAY, nvl(n_last_updated_by, n_created_by));ecdp_contract_nomination.aggrSentSubDailyToDaily( n_object_id, n_exit_delivery_point_id, n_PRODUCTION_DAY, nvl(n_last_updated_by, n_created_by));";"EC_TRAN";
"TDEV_RESULT_1";"INSERTING";"AFTER";"100";"EcDp_Performance_Test.aiSyncPwelResultFromTdev(n_RESULT_NO,n_OBJECT_ID,n_CREATED_BY);";"EC_PROD";
"TDEV_RESULT_2";"INSERTING";"AFTER";"100";"EcDp_Performance_Test.aiSyncPwelResultFromTdev(n_RESULT_NO,n_OBJECT_ID,n_CREATED_BY);";"EC_PROD";
"TDEV_RESULT_3";"INSERTING";"AFTER";"100";"EcDp_Performance_Test.aiSyncPwelResultFromTdev(n_RESULT_NO,n_OBJECT_ID,n_CREATED_BY);";"EC_PROD";
"TEST_DEVICE";"UPDATING";"AFTER";"3000";"ecdp_equipment_event.updateEventStatus(n_OBJECT_ID, n_DAYTIME, 'TEST_DEVICE');";"EC_PROD";
"TEST_DEVICE_TEST_DEF";"DELETING";"BEFORE";"2000";"EcDp_Performance_Test.removeGraphDefParameters(n_OBJECT_ID,n_TEST_NO);";"EC_PROD";
"TEST_DEVICE_TEST_DEF";"INSERTING";"AFTER";"1000";"EcDp_Performance_Test.createGraphDefParameters(n_OBJECT_ID,n_TEST_NO,n_CREATED_BY);";"EC_PROD";
"TEST_RESULT_TREND";"INSERTING OR UPDATING";"AFTER";"100";"IF UPDATING('TREND_RESET_IND') AND nvl(n_TREND_RESET_IND,'N')='N' THEN DELETE FROM trend_curve WHERE daytime = ec_ptst_result.daytime(n_RESULT_NO) AND object_id = n_OBJECT_ID; END IF;";"EC_PROD";
"TEST_TREND_CURVE";"INSERTING";"BEFORE";"300";"EcDp_System_Key.assignNextNumber('TREND_CURVE', n_TREND_SEGMENT_NO);";"EC_PROD";
"TEST_TREND_CURVE";"INSERTING OR UPDATING";"BEFORE";"100";"n_C0_UNIT:=ecdp_unit.GetUnitLabel(ecdp_unit.GetViewUnitFromLogical(ec_class_attr_presentation.uom_code('TEST_RESULT_TREND',n_TREND_PARAMETER)));";"EC_PROD";
"TEST_TREND_CURVE";"INSERTING OR UPDATING";"BEFORE";"200";"IF n_TREND_METHOD = 'EXP' THEN n_C1_UNIT:='%/d'; ELSE n_C1_UNIT:=replace(n_C0_UNIT,'/d','')||'/d'; END IF;";"EC_PROD";
"TRANSACTION_TEMPLATE";"INSERTING";"AFTER";"100";"EcDp_Transaction.InsTransTemplSplitKey(n_object_id, n_daytime, n_last_updated_by);";"EC_REVN";
"TRANSACTION_TEMPLATE";"UPDATING";"AFTER";"110";"EcDp_Transaction.UpdTransTemplSplitKey(n_object_id, n_daytime, n_last_updated_by);";"EC_REVN";
"T_BASIS_OBJECT_PARTITION";"INSERTING OR UPDATING";"AFTER";"200";"EcDp_Objects_Partition.validatePartition(n_T_BASIS_ACCESS_ID, n_ATTRIBUTE_NAME);";"EC_FRMW";
"T_BASIS_OBJECT_PARTITION";"INSERTING OR UPDATING";"BEFORE";"100";"IF (n_OPERATOR = 'ALL' and n_ATTRIBUTE_TEXT is not null) THEN Raise_Application_Error(-20000,'Cannot have ojbect(s) when operator is ALL'); END IF;";"EC_FRMW";
"UTILITY_EQPM";"UPDATING";"AFTER";"3000";"ecdp_equipment_event.updateEventStatus(n_OBJECT_ID, n_DAYTIME, 'UTILITY_EQPM');";"EC_PROD";
"VAT_CODE";"INSERTING OR UPDATING";"AFTER";"100";"ecdp_transaction.updVATCode(n_object_id,n_daytime,n_last_updated_by);";"EC_REVN";
"WATER_TREATMENT_UNIT";"UPDATING";"AFTER";"3000";"ecdp_equipment_event.updateEventStatus(n_OBJECT_ID, n_DAYTIME, 'WATER_TREATMENT_UNIT');";"EC_PROD";
"WELL";"UPDATING";"BEFORE";"3000";"ecdp_well.updatDateOnConnectedObjects(n_object_start_date,n_object_end_date, n_object_id);";"EC_PROD";
"WELL_BORE_INTERVAL_SPLIT";"INSERTING";"AFTER";"1300";"EcDp_Objects_Split.SetInsertSplitEndDate(n_OBJECT_ID,n_DAYTIME,'WELL_BORE_INTERVAL_SPLIT' );";"EC_PROD";
"WELL_BORE_SPLIT_FACTOR";"INSERTING";"AFTER";"1200";"EcDp_Objects_Split.SetInsertSplitEndDate(n_OBJECT_ID,n_DAYTIME,'WELL_BORE_SPLIT_FACTOR' );";"EC_PROD";
"WELL_EQPM_LOW";"DELETING";"BEFORE";"500";"EcBp_Well_Eqpm_Deferment.deleteChildEvent(n_OBJECT_ID, n_DAYTIME);";"EC_PROD";
"WELL_EQPM_LOW";"INSERTING";"BEFORE";"100";"n_DOWNTIME_CATEG:='WELL_LOW';";"EC_PROD";
"WELL_EQPM_LOW";"INSERTING";"BEFORE";"200";"IF n_DOWNTIME_TYPE  = 'WELL_DT' THEN n_DOWNTIME_CLASS_TYPE := 'SINGLE';  ELSE  n_DOWNTIME_CLASS_TYPE := 'GROUP'; END IF;";"EC_PROD";
"WELL_EQPM_LOW";"INSERTING";"BEFORE";"800";"IF n_DOWNTIME_TYPE = 'WELL_DT' THEN IF ecdp_well.IsWellActiveStatus(n_OBJECT_ID, 'OPEN', n_DAYTIME)  = 'N' THEN Raise_Application_Error('-20545', 'Could not insert - Well Active Status is not OPEN.'); ELSIF ecdp_well.checkClosedWellWithinPeriod(n_OBJECT_ID, n_DAYTIME, nvl(n_END_DATE,to_date('2100-01-01','yyyy-mm-dd'))) = 'Y' THEN Raise_Application_Error('-20545', 'Could not insert - Well Active Status is not OPEN.');  END IF; END IF;";"EC_PROD";
"WELL_EQPM_LOW";"INSERTING OR UPDATING";"AFTER";"400";"IF nvl(:OLD.END_DATE, to_date('1 JAN 1900')) <> nvl(:NEW.END_DATE, to_date('1 JAN 1900')) then EcDp_Well_Eqpm_Deferment.updateEndDateForChildEvent(n_OBJECT_ID,  n_DAYTIME, n_END_DATE, :OLD.END_DATE , nvl(n_last_updated_by, n_created_by),nvl(n_last_updated_date, n_created_date));end if;";"EC_PROD";
"WELL_EQPM_LOW";"INSERTING OR UPDATING";"AFTER";"900";"if (nvl(n_reason_code_1,'NULL') <>  nvl(:old.reason_code_1,'NULL') or nvl(n_reason_code_2,'NULL')<>  nvl(:old.reason_code_2,'NULL') or nvl(n_reason_code_3,'NULL')<>  nvl(:old.reason_code_3,'NULL') or nvl(n_reason_code_4,'NULL')<>  nvl(:old.reason_code_4,'NULL')) then EcDp_Well_Eqpm_Deferment.updateReasonCodeForChildEvent(n_object_id,NULL,  n_daytime, n_end_date,  nvl(n_last_updated_by, n_created_by),nvl(n_last_updated_date, n_created_date));end if;";"EC_PROD";
"WELL_EQPM_LOW";"INSERTING OR UPDATING";"AFTER";"1100";"IF n_DAYTIME > SYSDATE+1 OR n_END_DATE > SYSDATE+1 THEN Raise_Application_Error('-20610', 'Start Date or End Date should not exceed more than one day of system date.');  END IF;";"EC_PROD";
"WELL_EQPM_LOW";"INSERTING OR UPDATING";"AFTER";"1200";"EcDp_Well_Eqpm_Deferment.setLossRate(n_OBJECT_ID,n_DAYTIME, n_PARENT_OBJECT_ID, n_PARENT_DAYTIME, nvl(n_last_updated_by, n_created_by));";"EC_PROD";
"WELL_EQPM_LOW";"UPDATING";"BEFORE";"1000";"IF :OLD.END_DATE <> :NEW.END_DATE AND n_DOWNTIME_TYPE = 'WELL_DT' THEN IF ecdp_well.checkClosedWellWithinPeriod(n_OBJECT_ID, n_DAYTIME, nvl(n_END_DATE,to_date('2100-01-01','yyyy-mm-dd'))) = 'Y' THEN Raise_Application_Error('-20609', 'Could not update - Well Active Status is not OPEN for the whole period.'); END IF; END IF;";"EC_PROD";
"WELL_EQPM_LOW_CHILD";"INSERTING";"BEFORE";"100";"n_DOWNTIME_CATEG:='WELL_LOW';";"EC_PROD";
"WELL_EQPM_LOW_CHILD";"INSERTING";"BEFORE";"200";"n_DOWNTIME_CLASS_TYPE:='GROUP_CHILD';";"EC_PROD";
"WELL_EQPM_LOW_CHILD";"INSERTING";"BEFORE";"300";"n_OBJECT_TYPE:='WELL';";"EC_PROD";
"WELL_EQPM_LOW_CHILD";"INSERTING";"BEFORE";"400";"n_DOWNTIME_TYPE:='WELL_DT';";"EC_PROD";
"WELL_EQPM_LOW_CHILD";"INSERTING";"BEFORE";"700";"EcBp_Well_Eqpm_Deferment.checkValidChildPeriod(n_DAYTIME, n_PARENT_OBJECT_ID,  n_PARENT_DAYTIME);";"EC_PROD";
"WELL_EQPM_LOW_CHILD";"INSERTING";"BEFORE";"800";"IF n_DOWNTIME_TYPE = 'WELL_DT' THEN IF ecdp_well.IsWellActiveStatus(n_OBJECT_ID, 'OPEN', n_DAYTIME)  = 'N' THEN Raise_Application_Error('-20545', 'Could not insert - Well Active Status is not OPEN.'); ELSIF ecdp_well.checkClosedWellWithinPeriod(n_OBJECT_ID, n_DAYTIME, nvl(n_END_DATE,to_date('2100-01-01','yyyy-mm-dd'))) = 'Y' THEN Raise_Application_Error('-20545', 'Could not insert - Well Active Status is not OPEN.'); END IF; END IF;";"EC_PROD";
"WELL_EQPM_LOW_CHILD";"INSERTING OR UPDATING";"AFTER";"1000";"EcDp_Well_Eqpm_Deferment.updateReasonCodeForChildEvent(n_parent_object_id, n_OBJECT_ID, n_parent_daytime, n_end_date,  nvl(n_last_updated_by, n_created_by),nvl(n_last_updated_date, n_created_date));";"EC_PROD";
"WELL_EQPM_LOW_CHILD";"INSERTING OR UPDATING";"AFTER";"1200";"IF n_END_DATE > ec_well_equip_downtime.end_date(n_parent_object_id,n_parent_daytime) THEN Raise_Application_Error('-20611', 'End Date must be equal to or less than End Date of the parent records.');  END IF;";"EC_PROD";
"WELL_EQPM_LOW_CHILD";"INSERTING OR UPDATING";"AFTER";"1300";"EcDp_Well_Eqpm_Deferment.setLossRate(n_OBJECT_ID,n_DAYTIME, n_PARENT_OBJECT_ID, n_PARENT_DAYTIME, nvl(n_last_updated_by, n_created_by));";"EC_PROD";
"WELL_EQPM_LOW_CHILD";"UPDATING";"BEFORE";"1100";"IF :OLD.END_DATE <> :NEW.END_DATE AND n_DOWNTIME_TYPE = 'WELL_DT' THEN IF ecdp_well.checkClosedWellWithinPeriod(n_OBJECT_ID, n_DAYTIME, nvl(n_END_DATE,to_date('2100-01-01','yyyy-mm-dd'))) = 'Y' THEN Raise_Application_Error('-20609', 'Could not update - Well Active Status is not OPEN for the whole period.'); END IF; END IF;";"EC_PROD";
"WELL_EQPM_MASTER_EVENT";"INSERTING";"BEFORE";"10";"n_event_id := EcDp_Well_EQPM_Master_Event.genEventID(n_event_type, n_daytime);";"EC_PROD";
"WELL_EQPM_MASTER_EVENT";"UPDATING('EVENT_TYPE')";"BEFORE";"20";"n_event_id := EcDp_Well_EQPM_Master_Event.genEventID(n_event_type, n_daytime);";"EC_PROD";
"WELL_EQPM_OFF";"DELETING";"BEFORE";"500";"EcBp_Well_Eqpm_Deferment.deleteChildEvent(n_OBJECT_ID, n_DAYTIME);";"EC_PROD";
"WELL_EQPM_OFF";"INSERTING";"BEFORE";"100";"n_DOWNTIME_CATEG:='WELL_OFF';";"EC_PROD";
"WELL_EQPM_OFF";"INSERTING";"BEFORE";"200";"IF n_DOWNTIME_TYPE  = 'WELL_DT' THEN n_DOWNTIME_CLASS_TYPE := 'SINGLE';  ELSE  n_DOWNTIME_CLASS_TYPE := 'GROUP'; END IF;";"EC_PROD";
"WELL_EQPM_OFF";"INSERTING";"BEFORE";"800";"IF n_DOWNTIME_TYPE = 'WELL_DT' THEN  IF ecdp_well.IsWellActiveStatus(n_OBJECT_ID, 'OPEN', n_DAYTIME)  = 'N' THEN   Raise_Application_Error('-20545', 'Could not insert - Well Active Status is not OPEN.'); ELSIF ecdp_well.checkClosedWellWithinPeriod(n_OBJECT_ID, n_DAYTIME, nvl(n_END_DATE,to_date('2100-01-01','yyyy-mm-dd'))) = 'Y' THEN  Raise_Application_Error('-20545', 'Could not insert - Well Active Status is not OPEN.'); END IF; END IF;";"EC_PROD";
"WELL_EQPM_OFF";"INSERTING OR UPDATING";"AFTER";"900";"if (nvl(n_reason_code_1,'NULL') <>  nvl(:old.reason_code_1,'NULL') or nvl(n_reason_code_2,'NULL')<>  nvl(:old.reason_code_2,'NULL') or nvl(n_reason_code_3,'NULL')<>  nvl(:old.reason_code_3,'NULL') or nvl(n_reason_code_4,'NULL')<>  nvl(:old.reason_code_4,'NULL')) then EcDp_Well_Eqpm_Deferment.updateReasonCodeForChildEvent(n_object_id, null, n_daytime, n_end_date,  nvl(n_last_updated_by, n_created_by), nvl(n_last_updated_date, n_created_date));end if;";"EC_PROD";
"WELL_EQPM_OFF";"INSERTING OR UPDATING";"AFTER";"1100";"IF n_DAYTIME > SYSDATE+1 OR n_END_DATE > SYSDATE+1 THEN Raise_Application_Error('-20610', 'Start Date or End Date should not exceed more than one day of system date.');  END IF;";"EC_PROD";
"WELL_EQPM_OFF";"INSERTING OR UPDATING";"AFTER";"1200";"EcDp_Well_Eqpm_Deferment.setLossRate(n_OBJECT_ID,n_DAYTIME, n_PARENT_OBJECT_ID, n_PARENT_DAYTIME, nvl(n_last_updated_by, n_created_by));";"EC_PROD";
"WELL_EQPM_OFF";"INSERTING OR UPDATING";"BEFORE";"600";"IF n_downtime_class_type <> 'GROUP' THEN EcBp_Well_Eqpm_Deferment.checkIfEventOverlaps(n_OBJECT_ID, n_DAYTIME, n_END_DATE, n_DOWNTIME_CATEG); END IF;";"EC_PROD";
"WELL_EQPM_OFF";"UPDATING";"AFTER";"400";"IF nvl(:OLD.END_DATE, to_date('1 JAN 1900')) <> nvl(:NEW.END_DATE, to_date('1 JAN 1900')) then EcDp_Well_Eqpm_Deferment.updateEndDateForChildEvent(n_OBJECT_ID, n_DAYTIME, n_END_DATE, :OLD.END_DATE , nvl(n_last_updated_by, n_created_by), nvl(n_last_updated_date, n_created_date));end if;";"EC_PROD";
"WELL_EQPM_OFF";"UPDATING";"BEFORE";"1000";"IF :OLD.END_DATE <> :NEW.END_DATE AND n_DOWNTIME_TYPE = 'WELL_DT' THEN IF ecdp_well.checkClosedWellWithinPeriod(n_OBJECT_ID, n_DAYTIME, nvl(n_END_DATE,to_date('2100-01-01','yyyy-mm-dd'))) = 'Y' THEN Raise_Application_Error('-20609', 'Could not update - Well Active Status is not OPEN for the whole period.'); END IF; END IF;";"EC_PROD";
"WELL_EQPM_OFF_BY_WELL";"INSERTING";"BEFORE";"100";"n_DOWNTIME_CATEG:='WELL_OFF';";"EC_PROD";
"WELL_EQPM_OFF_BY_WELL";"INSERTING";"BEFORE";"200";"IF n_DOWNTIME_TYPE  = 'WELL_DT' THEN n_DOWNTIME_CLASS_TYPE := 'SINGLE';  ELSE  n_DOWNTIME_CLASS_TYPE := 'GROUP'; END IF;";"EC_PROD";
"WELL_EQPM_OFF_BY_WELL";"INSERTING";"BEFORE";"800";"IF n_DOWNTIME_TYPE = 'WELL_DT' THEN IF ecdp_well.IsWellActiveStatus(n_OBJECT_ID, 'OPEN', n_DAYTIME)  = 'N' THEN Raise_Application_Error('-20545', 'Could not insert - Well Active Status is not OPEN.'); ELSIF ecdp_well.checkClosedWellWithinPeriod(n_OBJECT_ID, n_DAYTIME, nvl(n_END_DATE,to_date('2100-01-01','yyyy-mm-dd'))) = 'Y' THEN Raise_Application_Error('-20545', 'Could not insert - Well Active Status is not OPEN.'); END IF; END IF;";"EC_PROD";
"WELL_EQPM_OFF_BY_WELL";"INSERTING OR UPDATING";"AFTER";"1000";"EcDp_Well_Eqpm_Deferment.setLossRate(n_OBJECT_ID,n_DAYTIME, n_PARENT_OBJECT_ID, n_PARENT_DAYTIME, nvl(n_last_updated_by, n_created_by));";"EC_PROD";
"WELL_EQPM_OFF_BY_WELL";"INSERTING OR UPDATING";"BEFORE";"600";"IF n_downtime_class_type <> 'GROUP' THEN EcBp_Well_Eqpm_Deferment.checkIfEventOverlaps(n_OBJECT_ID, n_DAYTIME, n_END_DATE, n_DOWNTIME_CATEG); END IF;";"EC_PROD";
"WELL_EQPM_OFF_BY_WELL";"UPDATING";"BEFORE";"900";"IF :OLD.END_DATE <> :NEW.END_DATE AND n_DOWNTIME_TYPE = 'WELL_DT' THEN IF ecdp_well.checkClosedWellWithinPeriod(n_OBJECT_ID, n_DAYTIME, nvl(n_END_DATE,to_date('2100-01-01','yyyy-mm-dd'))) = 'Y' THEN Raise_Application_Error('-20609', 'Could not update - Well Active Status is not OPEN for the whole period.'); END IF; END IF;";"EC_PROD";
"WELL_EQPM_OFF_CHILD";"INSERTING";"BEFORE";"100";"n_DOWNTIME_CATEG:='WELL_OFF';";"EC_PROD";
"WELL_EQPM_OFF_CHILD";"INSERTING";"BEFORE";"200";"n_DOWNTIME_CLASS_TYPE:='GROUP_CHILD';";"EC_PROD";
"WELL_EQPM_OFF_CHILD";"INSERTING";"BEFORE";"300";"n_OBJECT_TYPE:='WELL';";"EC_PROD";
"WELL_EQPM_OFF_CHILD";"INSERTING";"BEFORE";"400";"n_DOWNTIME_TYPE:='WELL_DT';";"EC_PROD";
"WELL_EQPM_OFF_CHILD";"INSERTING";"BEFORE";"700";"EcBp_Well_Eqpm_Deferment.checkValidChildPeriod(n_DAYTIME, n_PARENT_OBJECT_ID,  n_PARENT_DAYTIME);";"EC_PROD";
"WELL_EQPM_OFF_CHILD";"INSERTING";"BEFORE";"800";"IF n_DOWNTIME_TYPE = 'WELL_DT' THEN IF ecdp_well.IsWellActiveStatus(n_OBJECT_ID, 'OPEN', n_DAYTIME)  = 'N' THEN Raise_Application_Error('-20545', 'Could not insert - Well Active Status is not OPEN.'); ELSIF ecdp_well.checkClosedWellWithinPeriod(n_OBJECT_ID, n_DAYTIME, nvl(n_END_DATE,to_date('2100-01-01','yyyy-mm-dd'))) = 'Y' THEN  Raise_Application_Error('-20545', 'Could not insert - Well Active Status is not OPEN.'); END IF; END IF;";"EC_PROD";
"WELL_EQPM_OFF_CHILD";"INSERTING OR UPDATING";"AFTER";"1000";"EcDp_Well_Eqpm_Deferment.updateReasonCodeForChildEvent(n_parent_object_id, n_OBJECT_ID, n_parent_daytime, n_end_date,  nvl(n_last_updated_by, n_created_by), nvl(n_last_updated_date, n_created_date));";"EC_PROD";
"WELL_EQPM_OFF_CHILD";"INSERTING OR UPDATING";"AFTER";"1200";"IF n_END_DATE > ec_well_equip_downtime.end_date(n_parent_object_id,n_parent_daytime) THEN Raise_Application_Error('-20611', 'End Date must be equal to or less than End Date of the parent records.');  END IF;";"EC_PROD";
"WELL_EQPM_OFF_CHILD";"INSERTING OR UPDATING";"AFTER";"1300";"EcDp_Well_Eqpm_Deferment.setLossRate(n_OBJECT_ID,n_DAYTIME, n_PARENT_OBJECT_ID, n_PARENT_DAYTIME, nvl(n_last_updated_by, n_created_by));";"EC_PROD";
"WELL_EQPM_OFF_CHILD";"INSERTING OR UPDATING";"BEFORE";"600";"EcBp_Well_Eqpm_Deferment.checkIfEventOverlaps(n_OBJECT_ID, n_DAYTIME, n_END_DATE, n_DOWNTIME_CATEG);";"EC_PROD";
"WELL_EQPM_OFF_CHILD";"UPDATING";"BEFORE";"1100";"IF :OLD.END_DATE <> :NEW.END_DATE AND n_DOWNTIME_TYPE = 'WELL_DT' THEN IF ecdp_well.checkClosedWellWithinPeriod(n_OBJECT_ID, n_DAYTIME, nvl(n_END_DATE,to_date('2100-01-01','yyyy-mm-dd'))) = 'Y' THEN Raise_Application_Error('-20609', 'Could not update - Well Active Status is not OPEN for the whole period.'); END IF; END IF;";"EC_PROD";
"WELL_FORM_ION_ANALYSIS";"INSERTING";"BEFORE";"200";"n_PRODUCTION_DAY := Ecdp_Productionday.getProductionDay(n_OBJECT_CLASS_NAME,n_OBJECT_ID,n_DAYTIME);";"EC_PROD";
"WELL_FORM_ION_ANALYSIS";"INSERTING OR UPDATING";"BEFORE";"100";"n_object_class_name := 'WELL';";"EC_PROD";
"WELL_GAS_ANALYSIS";"INSERTING";"BEFORE";"200";"n_PRODUCTION_DAY := Ecdp_Productionday.getProductionDay(n_OBJECT_CLASS_NAME,n_OBJECT_ID,n_DAYTIME);";"EC_PROD";
"WELL_GAS_ANALYSIS";"INSERTING OR UPDATING";"BEFORE";"100";"n_object_class_name := 'WELL';";"EC_PROD";
"WELL_GAS_INJ_ANALYSIS";"INSERTING";"BEFORE";"200";"n_PRODUCTION_DAY := Ecdp_Productionday.getProductionDay(n_OBJECT_CLASS_NAME,n_OBJECT_ID,n_DAYTIME);";"EC_PROD";
"WELL_GAS_INJ_ANALYSIS";"INSERTING OR UPDATING";"BEFORE";"100";"n_object_class_name := 'WELL';";"EC_PROD";
"WELL_INJ_ION_ANALYSIS";"INSERTING";"BEFORE";"200";"n_PRODUCTION_DAY := Ecdp_Productionday.getProductionDay(n_OBJECT_CLASS_NAME,n_OBJECT_ID,n_DAYTIME);";"EC_PROD";
"WELL_INJ_ION_ANALYSIS";"INSERTING OR UPDATING";"BEFORE";"100";"n_object_class_name := 'WELL';";"EC_PROD";
"WELL_OIL_ANALYSIS";"INSERTING";"BEFORE";"200";"n_PRODUCTION_DAY := Ecdp_Productionday.getProductionDay(n_OBJECT_CLASS_NAME,n_OBJECT_ID,n_DAYTIME);";"EC_PROD";
"WELL_OIL_ANALYSIS";"INSERTING OR UPDATING";"BEFORE";"100";"n_object_class_name := 'WELL';";"EC_PROD";
"WELL_PROD_ION_ANALYSIS";"INSERTING";"BEFORE";"200";"n_PRODUCTION_DAY := Ecdp_Productionday.getProductionDay(n_OBJECT_CLASS_NAME,n_OBJECT_ID,n_DAYTIME);";"EC_PROD";
"WELL_PROD_ION_ANALYSIS";"INSERTING OR UPDATING";"BEFORE";"100";"n_object_class_name := 'WELL';";"EC_PROD";
"WELL_SAMPLE_ANALYSIS";"INSERTING";"BEFORE";"200";"n_PRODUCTION_DAY := Ecdp_Productionday.getProductionDay(n_OBJECT_CLASS_NAME,n_OBJECT_ID,n_DAYTIME);";"EC_PROD";
"WELL_SAMPLE_ANALYSIS";"INSERTING OR UPDATING";"BEFORE";"100";"n_object_class_name := 'WELL';";"EC_PROD";
"WELL_TEST_DEF";"DELETING";"BEFORE";"800";"EcDp_Performance_Test.removeWbiTestDefine(o_OBJECT_ID,o_TEST_NO);";"EC_PROD";
"WELL_TEST_DEF";"DELETING";"BEFORE";"2000";"EcDp_Performance_Test.removeGraphDefParameters(n_OBJECT_ID,n_TEST_NO);";"EC_PROD";
"WELL_TEST_DEF";"INSERTING";"AFTER";"700";"EcDp_Performance_Test.setWbiTestDefine(n_OBJECT_ID,ec_ptst_definition.daytime(n_TEST_NO),n_TEST_NO,'DIACS',n_CREATED_BY);";"EC_PROD";
"WELL_TEST_DEF";"INSERTING";"AFTER";"1000";"EcDp_Performance_Test.createGraphDefParameters(n_OBJECT_ID,n_TEST_NO,n_CREATED_BY);";"EC_PROD";
Elapsed: 00:00:02.56
