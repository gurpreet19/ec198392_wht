"ACTIVE_RESULT_DEVICE";"DELETING";"AFTER";"200";"EcDp_Performance_Test.aiSyncPwelResultFromTdev(n_RESULT_NO,NULL,n_LAST_UPDATED_BY);";"EC_PROD";
"ACTIVE_RESULT_DEVICE";"INSERTING";"AFTER";"100";"EcDp_Performance_Test.aiSyncPwelResultFromTdev(n_RESULT_NO,n_OBJECT_ID,n_CREATED_BY);";"EC_PROD";
"ACTIVE_RESULT_WELL";"DELETING";"BEFORE";"900";"EcDp_Performance_Test.removeWbiTestResult(o_OBJECT_ID,o_RESULT_NO);";"EC_PROD";
"ACTIVE_RESULT_WELL";"INSERTING";"AFTER";"800";"EcDp_Performance_Test.setWbiTestResult(n_OBJECT_ID,ec_ptst_result.daytime(n_RESULT_NO),n_RESULT_NO,'DIACS',n_CREATED_BY);";"EC_PROD";
"ACTIVE_RESULT_WELL";"INSERTING";"AFTER";"920";"EcDp_Performance_Test.aiSyncPwelResultFromPwel(n_RESULT_NO,n_OBJECT_ID,n_CREATED_BY);";"EC_PROD";
"ACTIVE_RESULT_WELL";"INSERTING OR UPDATING";"AFTER";"910";"EcDp_Performance_Test.auiSetProductionDay(n_OBJECT_ID, NULL, n_RESULT_NO,nvl(n_LAST_UPDATED_BY,n_CREATED_BY));";"EC_PROD";
"ALLOC_JOB_STATUS_PROCESS";"INSERTING OR UPDATING";"BEFORE";"100";"EcBp_Alloc_Job_Status_Process.checkIfEventOverlaps(n_ALLOC_NETWORK_ID, n_JOB_ID, n_PROCESS_ID, n_DAYTIME, n_END_DATE);";"EC_PROD";
"ALLOC_NETWORK_LIST";"INSERTING OR UPDATING";"BEFORE";"100";"EcDp_Alloc_Network_List.validateOverlappingPeriod(n_OBJECT_ID,n_DAYTIME,n_END_DATE,n_ELEMENT_ID);";"EC_PROD";
"BALANCE";"INSERTING";"AFTER";"100";"IF (n_code IS NULL) THEN ue_RevenueCodes.UpdateCodeForClass(n_object_id, n_daytime, 'BALANCE'); END IF;";"EC_REVN";
"BANK_ACCOUNT";"INSERTING";"AFTER";"1000";"IF (:NEW.customer_id IS NULL AND :NEW.vendor_id IS NULL) AND (:NEW.customer_code IS NULL AND :NEW.vendor_code IS NULL) THEN RAISE_APPLICATION_ERROR(-20000,'Either customer or vendor must be specified'); END IF;";"EC_REVN";
"BANK_ACCOUNT";"UPDATING";"AFTER";"1010";"IF (:NEW.customer_id IS NULL AND :NEW.vendor_id IS NULL) THEN RAISE_APPLICATION_ERROR(-20000,'Either customer or vendor must be specified'); END IF;";"EC_REVN";
"BLEND_CONTENT";"INSERTING";"AFTER";"700";"EcDp_Objects_Split.SetInsertSplitEndDate(n_OBJECT_ID,n_DAYTIME,'BLEND_CONTENT' );";"EC_PROD";
"CALC_DB_OBJECT_TYPE";"DELETING";"BEFORE";"1000";"Ecdp_Calc_Mapping.deleteObjectTypeAttributes(:old.object_id,:old.object_type_code);";"EC_FRMW";
"CALC_DB_OBJECT_TYPE";"DELETING";"BEFORE";"1100";"Ecdp_Calc_Mapping.deleteObjectTypeFilters(:old.object_id,:old.object_type_code);";"EC_FRMW";
"CALC_OBJECT_ATTRIBUTE";"DELETING";"BEFORE";"1000";"Ecdp_Calc_Mapping.deleteObjectTypeAttrDBMapping(:old.object_id,:old.object_type_code,:old.name);";"EC_FRMW";
"CALC_PRICE_BATCH_LOG";"INSERTING";"BEFORE";"100";"n_class_name := 'CALC_PRICE_BATCH_LOG';";"EC_SALE";
"CALC_PROCESS_ELEMENT";"INSERTING OR UPDATING";"BEFORE";"100";"    IF :NEW.CREATE_CALC_ID IS NOT NULL AND :NEW.CREATE_CALC_TYPE IS NOT NULL THEN EcDp_Calculation.implementProcessElement(vt(vt.LAST).name, vt(vt.LAST).daytime, vt(vt.LAST).end_date, n_calculation_id, :NEW.CREATE_CALC_ID, :NEW.CREATE_CALC_TYPE, :NEW.CREATE_CALC_COPY_ID, :NEW.CREATE_CALC_COPY_DAYTIME); vt(vt.LAST).implementing_calc_id := :NEW.CREATE_CALC_ID; lb_update_version_table := TRUE; lb_update_version_not_dt := TRUE; END IF;";"EC_FRMW";
"CALC_PROCESS_ELEMENT";"UPDATING";"AFTER";"200";"EcDp_Calculation.syncNameAndComments(:NEW.IMPLEMENTING_CALC_ID, :NEW.DAYTIME, :NEW.NAME, :NEW.COMMENTS);";"EC_FRMW";
"CALC_RULE";"INSERTING OR UPDATING";"BEFORE";"3000";"FOR ci IN 1..vt.COUNT LOOP vt(ci).OBJECT_CODE:= n_code;END LOOP;";"EC_PROD";
"CALC_SALE_CNTR_BATCH_LOG";"INSERTING";"BEFORE";"100";"n_class_name := 'CALC_SALE_CNTR_BATCH_LOG';";"EC_SALE";
"CALC_SET";"DELETING";"BEFORE";"100";"EcDp_Calculation.deleteCalcSetImpl(:OLD.OBJECT_ID, :OLD.DAYTIME, :OLD.CALC_SET_NAME);";"EC_FRMW";
"CALC_VARIABLE";"DELETING";"BEFORE";"500";"Ecdp_Calc_Mapping.deleteVarMappings(:old.object_id,:old.calc_var_signature);";"EC_FRMW";
"CALC_VARIABLE";"INSERTING";"BEFORE";"100";"Ecdp_Calc_Mapping.validateVarMapping(n_DIM1_OBJECT_TYPE_CODE,n_DIM2_OBJECT_TYPE_CODE,n_DIM3_OBJECT_TYPE_CODE,n_DIM4_OBJECT_TYPE_CODE,n_DIM5_OBJECT_TYPE_CODE);";"EC_FRMW";
"CALC_VARIABLE";"INSERTING";"BEFORE";"300";"n_ACTIVE_IND := NVL(n_ACTIVE_IND, 'Y');";"EC_FRMW";
"CALC_VARIABLE";"INSERTING";"BEFORE";"400";"n_CALC_VAR_DATA_TYPE := NVL(n_CALC_VAR_DATA_TYPE, 'NUMBER');";"EC_FRMW";
"CALC_VARIABLE";"INSERTING OR UPDATING";"BEFORE";"200";"n_CALC_VAR_SIGNATURE := EcDp_Calc_Mapping.GetVariableSignature(n_NAME, n_DIM1_OBJECT_TYPE_CODE, n_DIM2_OBJECT_TYPE_CODE, n_DIM3_OBJECT_TYPE_CODE, n_DIM4_OBJECT_TYPE_CODE, n_DIM5_OBJECT_TYPE_CODE);";"EC_FRMW";
"CALC_VARIABLE_LOCAL";"INSERTING OR UPDATING";"BEFORE";"100";"n_CALC_VAR_SIGNATURE := EcDp_Calc_Mapping.GetVariableSignature(n_NAME, n_DIM1_OBJECT_TYPE_CODE, n_DIM2_OBJECT_TYPE_CODE, n_DIM3_OBJECT_TYPE_CODE, n_DIM4_OBJECT_TYPE_CODE, n_DIM5_OBJECT_TYPE_CODE);";"EC_FRMW";
"CALC_VAR_KEY_RD_MAPPING";"INSERTING OR UPDATING";"BEFORE";"10";"IF n_CALC_DIM_MAPPING_CODE = 'DIMENSION' and n_DIM_NO is null and n_MAPPING_DETAIL is not null and TRANSLATE(n_MAPPING_DETAIL,'0123456789',' ') is null THEN n_DIM_NO := n_MAPPING_DETAIL;END IF;";"EC_FRMW";
"CALC_VAR_KEY_WR_MAPPING";"INSERTING OR UPDATING";"BEFORE";"10";"IF n_CALC_DIM_MAPPING_CODE = 'DIMENSION' and n_DIM_NO is null and n_MAPPING_DETAIL is not null and TRANSLATE(n_MAPPING_DETAIL,'0123456789',' ') is null THEN n_DIM_NO := n_MAPPING_DETAIL;END IF;";"EC_FRMW";
"CALC_VAR_READ_MAPPING";"DELETING";"BEFORE";"1100";"Ecdp_Calc_Mapping.deleteVarKeyDBMappingRead(:old.object_id,:old.calc_var_signature,:old.calc_dataset,:old.cls_name_mapping);";"EC_FRMW";
"CALC_VAR_WRITE_MAPPING";"DELETING";"BEFORE";"1100";"Ecdp_Calc_Mapping.deleteVarKeyDBMappingWrite(:old.object_id,:old.calc_var_signature,:old.calc_dataset,:old.cls_name_mapping);";"EC_FRMW";
"CAPACITY_BID";"DELETING";"BEFORE";"500";"ECDp_capacity_release.deleteBid(n_BID_NO);";"EC_TRAN";
"CAPACITY_BID";"INSERTING";"AFTER";"200";"ue_capacity_release.genBidName(n_BID_NO);";"EC_TRAN";
"CAPACITY_BID";"INSERTING";"AFTER";"300";"EcDp_capacity_release.instantiateBidForm(n_BID_NO);";"EC_TRAN";
"CAPACITY_BID";"INSERTING";"BEFORE";"100";"n_BID_STATUS:='PRV';";"EC_TRAN";
"CAPACITY_BID";"UPDATING";"BEFORE";"400";"EcDp_capacity_release.validateBidUpdate(n_BID_NO);";"EC_TRAN";
"CAPACITY_BID_DAY_CAP";"INSERTING OR UPDATING";"BEFORE";"100";"ue_Capacity_Release.validateCapBidRange(n_BID_NO, n_DAYTIME);";"EC_TRAN";
"CAPACITY_BID_LOCATION";"INSERTING OR UPDATING";"BEFORE";"100";"ecdp_capacity_release.validateBidUpdate(n_bid_no);";"EC_TRAN";
"CAPACITY_BID_OTHER";"UPDATING";"BEFORE";"100";"EcDp_capacity_release.validateBidUpdate(n_BID_NO);";"EC_TRAN";
"CAPACITY_BID_RATE";"UPDATING";"BEFORE";"100";"EcDp_capacity_release.validateBidUpdate(n_BID_NO);";"EC_TRAN";
"CAPACITY_BID_TERMS";"UPDATING";"BEFORE";"100";"EcDp_capacity_release.validateBidUpdate(n_BID_NO);";"EC_TRAN";
"CAPACITY_RECALL";"INSERTING OR UPDATING";"BEFORE";"100";"n_daytime := n_RECALL_START_DATE;";"EC_TRAN";
"CAPACITY_RELEASE";"DELETING";"BEFORE";"500";"ecdp_capacity_release.deleteRelease(n_release_no);";"EC_TRAN";
"CAPACITY_RELEASE";"INSERTING";"AFTER";"200";"IF n_RELEASE_NAME IS NULL THEN ue_capacity_release.generateReleaseName(n_RELEASE_NO); END IF;";"EC_TRAN";
"CAPACITY_RELEASE";"INSERTING";"AFTER";"300";"ecdp_capacity_release.instantiateReleaseForm(n_RELEASE_NO);";"EC_TRAN";
"CAPACITY_RELEASE";"INSERTING";"BEFORE";"100";"N_RELEASE_STATUS := 'PRV';";"EC_TRAN";
"CAPACITY_RELEASE";"UPDATING";"BEFORE";"400";"ecdp_capacity_release.validateReleaseUpdate(n_RELEASE_NO);";"EC_TRAN";
"CAPACITY_REL_LOCATION";"INSERTING OR UPDATING";"BEFORE";"100";"ecdp_capacity_release.validateReleaseUpdate(n_release_no);";"EC_TRAN";
"CAPACITY_REL_LOC_EVENT";"INSERTING";"BEFORE";"100";"IF n_AD_HOC IS NOT NULL AND n_REQUEST_ID IS NULL THEN n_REQUEST_ID:=ue_Capacity_Release.generateRequestId; END IF;";"EC_TRAN";
"CAPACITY_REL_LOC_EVENT";"INSERTING OR UPDATING";"BEFORE";"200";"ue_Capacity_Release.validateLocEventDateRange(n_RELEASE_NO, n_START_DATE, n_END_DATE);";"EC_TRAN";
"CAPACITY_REL_OTHER";"UPDATING";"BEFORE";"100";"ecdp_capacity_release.validateReleaseUpdate(n_release_no);";"EC_TRAN";
"CAPACITY_REL_PREARRANGE";"UPDATING";"BEFORE";"100";"ecdp_capacity_release.validateReleaseUpdate(n_release_no);";"EC_TRAN";
"CAPACITY_REL_RATE";"UPDATING";"BEFORE";"100";"ecdp_capacity_release.validateReleaseUpdate(n_release_no);";"EC_TRAN";
"CAPACITY_REL_RECALL";"UPDATING";"BEFORE";"100";"EcDp_capacity_release.validateReleaseUpdate(n_RELEASE_NO);";"EC_TRAN";
"CAPACITY_REL_TERMS";"UPDATING";"BEFORE";"100";"ecdp_capacity_release.validateReleaseUpdate(n_RELEASE_NO);";"EC_TRAN";
"CARGO_ANALYSIS";"INSERTING";"AFTER";"100";"Ecbp_Cargo_Status.insertCargoAnalysisItems(n_cargo_no, nvl(n_last_updated_by,n_created_by),n_product_id,n_lifting_event);";"EC_TRAN";
"CARGO_ANALYSIS_UNLOAD";"INSERTING";"AFTER";"100";"Ecbp_Cargo_Status.insertCargoAnalysisItems(n_cargo_no, nvl(n_last_updated_by,n_created_by),n_product_id,n_lifting_event);";"EC_TRAN";
"CARGO_FCST_STATUS";"UPDATING";"AFTER";"100";"EcBp_Cargo_Fcst_Transport.auCargoTransport(n_cargo_no, :old.status, n_status);";"EC_TRAN";
"CARGO_INFO";"UPDATING";"AFTER";"100";"EcBp_Cargo_Transport.auCargoTransport(n_cargo_no, :old.status, n_status, nvl(n_last_updated_by, n_created_by));";"EC_TRAN";
"CARGO_INFO";"UPDATING";"AFTER";"200";"ue_replicate_cargovalues.updatecargoname(:old.cargo_name, n_cargo_name, n_last_updated_by);";"EC_TRAN";
"CARGO_INFO";"UPDATING";"AFTER";"300";"ue_replicate_cargovalues.updateCarrier(n_cargo_no,:old.carrier_id, n_carrier_id, n_last_updated_by);";"EC_TRAN";
"CARGO_INFO";"UPDATING";"AFTER";"400";"EcBp_Cargo_Transport.copyBwdNominatedCarrier(n_CARGO_NO,n_CARRIER_ID,n_LAST_UPDATED_BY);";"EC_TRAN";
"CARGO_INFO";"UPDATING";"BEFORE";"500";"IF UPDATING('CARRIER_ID') AND n_laytime IS NULL and n_carrier_id IS NOT NULL THEN n_laytime := EcBp_Cargo_Transport.getCarrierLaytime(n_carrier_id, n_cargo_no); END IF;";"EC_TRAN";
"CARGO_INFO_LIGHT";"INSERTING";"AFTER";"500";"EcBP_Storage_Lift_Nomination.insertCargo(n_cargo_no, n_est_departure, n_fcty_class_1);";"EC_TRAN";
"CARGO_INFO_LIGHT";"INSERTING";"BEFORE";"300";"N_CARGO_NAME:=nvl(n_cargo_name,ue_cargo_numbering.getCargoName(n_cargo_no, n_cargo_no,n_est_departure));";"EC_TRAN";
"CARGO_INFO_LIGHT";"INSERTING OR UPDATING";"BEFORE";"200";"N_CARGO_STATUS := EcBp_Storage_Lift_Nomination.insertReadyForHabour(N_CARGO_STATUS);";"EC_TRAN";
"CARGO_INFO_LIGHT";"UPDATING";"AFTER";"100";"EcBp_Cargo_Transport.auCargoTransport(n_cargo_no, :old.cargo_status, n_cargo_status, nvl(n_last_updated_by, n_created_by));";"EC_TRAN";
"CARGO_INFO_LIGHT";"UPDATING";"AFTER";"400";"EcBp_Cargo_Status.validate(n_cargo_no,:old.cargo_status,n_cargo_status);";"EC_TRAN";
"CARGO_LOAD_INSTRUCTION";"UPDATING";"AFTER";"100";"EcBp_Cargo_Transport.auCargoTransport(n_cargo_no, :old.status, n_status, nvl(n_last_updated_by, n_created_by));";"EC_TRAN";
"CARGO_LOAD_INSTRUCTION";"UPDATING";"AFTER";"200";"ue_replicate_cargovalues.updateLoadInstr(n_cargo_no, :old.berth_id, n_berth_id, :old.voyage_no, n_voyage_no, n_last_updated_by);";"EC_TRAN";
"CARGO_LOAD_INSTRUCTION";"UPDATING";"AFTER";"300";"ue_replicate_cargovalues.updatecarrier(n_cargo_no,:old.carrier_id, n_carrier_id, n_last_updated_by);";"EC_TRAN";
"CARGO_LOAD_INSTRUCTION";"UPDATING";"AFTER";"400";"EcBp_Cargo_Transport.copyBwdNominatedCarrier(n_cargo_no,n_carrier_id,n_last_updated_by);";"EC_TRAN";
"CARGO_LOAD_INSTRUCTION";"UPDATING";"BEFORE";"500";"IF UPDATING('CARRIER_ID') AND n_laytime IS NULL and n_carrier_id IS NOT NULL THEN n_laytime := EcBp_Cargo_Transport.getCarrierLaytime(n_carrier_id, n_cargo_no); END IF;";"EC_TRAN";
"CARGO_NOM_DETAIL";"UPDATING";"AFTER";"100";"EcBp_Cargo_Transport.auCargoTransport(n_cargo_no, :old.status, n_status, nvl(n_last_updated_by, n_created_by));";"EC_TRAN";
"CARGO_NOM_DETAIL";"UPDATING";"AFTER";"200";"ue_replicate_cargovalues.updateCarrier(n_cargo_no, :old.carrier_id, n_carrier_id, n_last_updated_by);";"EC_TRAN";
"CARGO_NOM_DETAIL";"UPDATING";"AFTER";"300";"EcBp_Cargo_Transport.copyBwdNominatedCarrier(n_cargo_no,n_carrier_id,n_last_updated_by);";"EC_TRAN";
"CARGO_NOM_DETAIL";"UPDATING";"BEFORE";"400";"IF UPDATING('CARRIER_ID') AND n_laytime IS NULL and n_carrier_id IS NOT NULL THEN n_laytime := EcBp_Cargo_Transport.getCarrierLaytime(n_carrier_id, n_cargo_no); END IF;";"EC_TRAN";
"CARGO_PRICE_DS_LIST";"INSERTING";"BEFORE";"100";"n_PRICE_CONCEPT_CODE := ec_product_price.price_concept_code(n_OBJECT_ID);";"EC_SALE";
"CARGO_PRICE_LIST";"INSERTING";"AFTER";"20";"EcDp_Cargo_Price.InsNewPriceElementSet(n_PARCEL_KEY, n_OBJECT_ID ,n_PRICE_CONCEPT_CODE, n_PRICE_ELEMENT_CODE, n_DAYTIME, n_CREATED_BY);";"EC_SALE";
"CARGO_PRICE_LIST";"INSERTING";"BEFORE";"100";"n_PRICE_CONCEPT_CODE := ec_product_price.price_concept_code(n_OBJECT_ID);";"EC_SALE";
"CARGO_PRICE_LIST";"INSERTING OR UPDATING";"BEFORE";"110";"n_price_element_code := ecdp_sales_contract_price.GetAnyPriceElement(n_price_concept_code,n_object_id,n_daytime);";"EC_SALE";
"CARGO_PROTEST";"INSERTING";"AFTER";"100";"UE_LETTER_PROTEST.create_protest_list(N_CARGO_NO,N_PROTEST_CODE);";"EC_TRAN";
"CARGO_STATUS";"UPDATING";"AFTER";"100";"EcBp_Cargo_Transport.auCargoTransport(n_cargo_no, :old.status, n_status, nvl(n_last_updated_by, n_created_by));";"EC_TRAN";
"CARGO_STOR_BATCH";"DELETING";"BEFORE";"200";"EcDp_Cargo_Batch.deleteBatch(n_CARGO_BATCH_NO);";"EC_TRAN";
"CARGO_STOR_BATCH";"INSERTING";"AFTER";"100";"EcDp_Cargo_Batch.instansiate(n_CARGO_BATCH_NO, 'LOAD', n_created_by);";"EC_TRAN";
"CARGO_STR_BTH_ULD";"DELETING";"BEFORE";"200";"EcDp_Cargo_Batch.deleteBatch(n_CARGO_BATCH_NO);";"EC_TRAN";
"CARGO_STR_BTH_ULD";"INSERTING";"AFTER";"100";"EcDp_Cargo_Batch.instansiate(n_CARGO_BATCH_NO, 'UNLOAD', n_created_by);";"EC_TRAN";
"CARRIER_INSPECTION";"INSERTING OR UPDATING";"BEFORE";"100";"IF n_OBJECT_ID IS NULL THEN Raise_Application_Error(-20337,'Carrier must be assigned to cargo.'); END IF;";"EC_TRAN";
"CARRIER_TANK";"DELETING";"BEFORE";"200";"ue_carrier_cooldown.deleteCarrierTank(n_OBJECT_ID, n_TANK_NO);";"EC_TRAN";
"CARRIER_TANK";"INSERTING";"AFTER";"100";"ue_carrier_cooldown.initializetemp(n_OBJECT_ID, n_TANK_NO);";"EC_TRAN";
"CHEM_TANK_PRODUCT";"INSERTING";"BEFORE";"100";"ecdp_chemical_tank.biuSetEndDate(n_OBJECT_ID, n_DAYTIME, n_DAYTIME, n_END_DATE, n_CHEM_PRODUCT_ID);";"EC_PROD";
"CHEM_TANK_PRODUCT";"UPDATING";"BEFORE";"110";"ecdp_chemical_tank.biuSetEndDate(n_OBJECT_ID, o_DAYTIME, n_DAYTIME, n_END_DATE, n_CHEM_PRODUCT_ID);";"EC_PROD";
"CHILLER";"UPDATING";"AFTER";"3000";"ecdp_equipment_event.updateEventStatus(n_OBJECT_ID, n_DAYTIME, 'CHILLER');";"EC_PROD";
"CHOKE_MODEL_LIP";"INSERTING";"AFTER";"100";"EcDp_Choke_Model_LIP.insertYearlyProdGain(n_LIP_OPP_ID, n_OBJECT_ID, n_DAYTIME);";"EC_PROD";
"CHOKE_MODEL_MPP";"INSERTING";"BEFORE";"100";"n_CLASS_NAME:='CHOKE_MODEL_MPP';";"EC_PROD";
"CLASS_ATTR_PRES_CONFIG";"INSERTING OR UPDATING";"BEFORE";"100";"if n_PRES_ATTRIBUTE_NAME='VIEW_HIDDEN' and n_PRES_ATTRIBUTE_VALUE<>'true' then Raise_Application_Error(-20000,'Viewhidden cannot be set to false');END IF;";"EC_FRMW";
"CNTR_CAPACITY_DAY_TRANS";"INSERTING";"BEFORE";"100";"EcDp_System_Key.assignNextNumber('CNTR_CAPACITY_DAY_TRANS', n_TRANSACTION_SEQ);";"EC_TRAN";
"CNTR_CAPACITY_DAY_TRANS";"INSERTING";"BEFORE";"200";"n_TRANSACTION_TYPE := nvl(n_TRANSACTION_TYPE, 'LINEFLEX');";"EC_TRAN";
"CNTR_CAPACITY_DAY_TRANS";"INSERTING";"BEFORE";"300";"n_REQUEST_STATUS := nvl(n_REQUEST_STATUS, 'REQ');";"EC_TRAN";
"CNTR_CAP_LOC_CONNECTION";"INSERTING OR UPDATING";"BEFORE";"100";"EcDp_Contract_Capacity.checkConnOverlaps(n_object_id, n_location_id, n_daytime, n_end_date, n_nomination_type);";"EC_TRAN";
"CNTR_DAY_INV_CNTR_SWAP";"INSERTING";"AFTER";"200";"EcDp_Contract_Inventory.addSwapTransactions(n_swap_seq, 'CNTR_DAY_INV_CNTR_SWAP', n_object_id,n_daytime, n_receiver_object_id, n_swap_qty);";"EC_TRAN";
"CNTR_DAY_INV_CNTR_SWAP";"INSERTING";"BEFORE";"100";"n_SWAP_STATUS := nvl(n_SWAP_STATUS, 'APPROVED');";"EC_TRAN";
"CNTR_DAY_INV_LOC_SWAP";"INSERTING";"AFTER";"300";"EcDp_Contract_Inventory.addSwapTransactions(n_swap_seq, 'CNTR_DAY_INV_LOC_SWAP', n_object_id,n_daytime, n_receiver_object_id, n_swap_qty);";"EC_TRAN";
"CNTR_DAY_INV_LOC_SWAP";"INSERTING";"BEFORE";"200";"n_SWAP_STATUS := nvl(n_SWAP_STATUS, 'APPROVED');";"EC_TRAN";
"CNTR_DAY_INV_SWAP";"INSERTING";"AFTER";"200";"EcDp_Contract_Inventory.addSwapTransactions(n_swap_seq, 'CNTR_DAY_INV_SWAP', n_object_id,n_daytime, n_receiver_object_id, n_swap_qty);";"EC_TRAN";
"CNTR_DAY_INV_SWAP";"INSERTING";"BEFORE";"100";"n_SWAP_STATUS := nvl(n_SWAP_STATUS, 'APPROVED');";"EC_TRAN";
"CNTR_DAY_LOC_INVENTORY";"INSERTING";"BEFORE";"100";"n_STATUS := nvl(n_STATUS, 'PROVISIONAL');";"EC_TRAN";
"CNTR_DAY_LOC_INV_TRANS";"DELETING";"AFTER";"300";"EcDp_Contract_Inventory.aggregateDeletedDebitTrans(n_object_id,n_daytime, n_debit_qty, n_credit_qty, :old.debit_qty, :old.credit_qty);";"EC_TRAN";
"CNTR_DAY_LOC_INV_TRANS";"DELETING";"AFTER";"400";"EcDp_Contract_Inventory.aggregateDeletedCreditTrans(n_object_id,n_daytime, n_debit_qty, n_credit_qty, :old.debit_qty, :old.credit_qty);";"EC_TRAN";
"CNTR_DAY_LOC_INV_TRANS";"INSERTING";"BEFORE";"500";"EcDp_Contract_Inventory.checkOperBalTrans(n_object_id,n_daytime, n_transaction_type);";"EC_TRAN";
"CNTR_DAY_LOC_INV_TRANS";"INSERTING OR UPDATING";"AFTER";"100";"EcDp_Contract_Inventory.aggregateDebitTransactions(n_object_id,n_daytime, n_debit_qty, n_credit_qty, :old.debit_qty, :old.credit_qty);";"EC_TRAN";
"CNTR_DAY_LOC_INV_TRANS";"INSERTING OR UPDATING";"AFTER";"200";"EcDp_Contract_Inventory.aggregateCreditTransactions(n_object_id,n_daytime, n_debit_qty, n_credit_qty, :old.debit_qty, :old.credit_qty);";"EC_TRAN";
"CNTR_DAY_NOM";"UPDATING";"BEFORE";"1000";"EcDp_contract_Nomination.validateDailyNominationQty(n_OBJECT_ID, n_DAYTIME, n_NOMINATED_QTY);";"EC_TRAN";
"CNTR_DERIVED_PRICE_SETUP";"INSERTING OR UPDATING";"AFTER";"200";"EcDp_Contract_setup.updateFactorAdjustedPriceAll(n_OBJECT_ID ,n_PRICE_CONCEPT_CODE, n_PRICE_ELEMENT_CODE, n_DAYTIME, n_END_DATE, n_CREATED_BY);";"EC_REVN";
"CNTR_DERIVED_PRICE_SETUP";"INSERTING OR UPDATING";"BEFORE";"100";"IF (n_PRICE_CONCEPT_CODE = n_SRC_PRICE_CONCEPT_CODE AND n_PRICE_ELEMENT_CODE = n_SRC_PRICE_ELEMENT_CODE) THEN Raise_Application_Error(-20000,'Can not have same source and target price concept/element'); END IF;";"EC_REVN";
"CNTR_GENERAL_PRICE_SETUP";"INSERTING OR UPDATING";"BEFORE";"80";"ecdp_price.EndDateCheck(n_object_id,n_end_date,n_daytime);";"EC_REVN";
"CNTR_INV_DAY_OPER_MATRIX";"UPDATING";"BEFORE";"100";"ecdp_contract_inventory.checkTransSign(n_debit_qty, n_credit_qty);";"EC_TRAN";
"CNTR_LIFT_ACC_CONN";"INSERTING";"BEFORE";"100";"EcBp_Lifting_Account.checkIfConnectionOverlaps(n_OBJECT_ID, n_LIFT_ACC_ID, n_DAYTIME, n_END_DATE);";"EC_TRAN";
"CNTR_LIFT_ACC_CONN";"UPDATING";"AFTER";"200";"EcBp_Lifting_Account.checkIfConnectionOverlaps(n_OBJECT_ID, n_LIFT_ACC_ID, n_DAYTIME, n_END_DATE);";"EC_TRAN";
"CNTR_LOC_INVENTORY_ATTR";"INSERTING";"BEFORE";"100";"n_INVENTORY_TYPE := nvl(n_INVENTORY_TYPE, ec_contract_inventory.inventory_type(n_object_id));";"EC_TRAN";
"CNTR_PRICE_SUB_DAY_LIST";"INSERTING";"AFTER";"200";"EcDp_Sales_Contract_Price.InsNewPriceElementSet(n_OBJECT_ID ,n_PRICE_CONCEPT_CODE, n_PRICE_ELEMENT_CODE, n_DAYTIME, n_CREATED_BY);";"EC_SALE";
"CNTR_PRICE_SUB_DAY_LIST";"INSERTING";"BEFORE";"100";"n_price_element_code:= NVL(n_price_element_code,ecdp_sales_contract_price.GetAnySubPriceElement(n_price_concept_code,n_object_id,n_daytime));";"EC_SALE";
"CNTR_SUB_DAY_DEL";"UPDATING";"AFTER";"1000";"EcDp_contract_Delivery.aggregateSubDailyToDaily(n_OBJECT_ID, n_DELIVERY_POINT_ID, n_PRODUCTION_DAY, nvl(n_last_updated_by, n_created_by));";"EC_TRAN";
"CNTR_SUB_DAY_NOM";"UPDATING";"AFTER";"100";"EcDp_contract_Delivery.aggregateSubDailyToDaily(n_OBJECT_ID, n_DELIVERY_POINT_ID, n_PRODUCTION_DAY, nvl(n_last_updated_by, n_created_by));";"EC_TRAN";
"CNTR_TEMPLATE_ATTRIBUTE";"DELETING";"BEFORE";"100";"EcBp_Contract_Template.validateDeleteAttribute(n_TEMPLATE_CODE, n_ATTRIBUTE_NAME);";"EC_TRAN";
"CNTR_TEMPLATE_ATTRIBUTE";"UPDATING OR INSERTING";"BEFORE";"200";"IF n_dimension_type is not null and n_time_span <> 'DAY' THEN Raise_Application_Error(-20557, 'It is only possible to register a Dimension Type if the Time Span is Day.'); END IF;";"EC_TRAN";
"CO_GEN_UNIT";"UPDATING";"AFTER";"3000";"ecdp_equipment_event.updateEventStatus(n_OBJECT_ID, n_DAYTIME, 'CO_GEN_UNIT');";"EC_PROD";
"COLLECTION_POINT_CONN_1";"DELETING";"BEFORE";"500";"EcBp_Objects_Group_Conn.validateDeleteObjectGrp(n_OBJECT_ID, n_START_DATE, n_GROUP_TYPE);";"EC_PROD";
"COLLECTION_POINT_CONN_1";"UPDATING";"AFTER";"700";"EcBp_Objects_Group_Conn.updateChildEndDate(n_OBJECT_ID, n_GROUP_TYPE, n_START_DATE, n_END_DATE);";"EC_PROD";
"COLLECTION_POINT_CONN_1";"UPDATING";"BEFORE";"600";"EcBp_Objects_Group_Conn.verifyObjectGrp(n_OBJECT_ID, n_START_DATE, n_GROUP_TYPE, n_END_DATE);";"EC_PROD";
"COLLECTION_POINT_CONN_2";"INSERTING";"BEFORE";"100";"n_PARENT_GROUP_TYPE:='COLLECTION_POINT';";"EC_PROD";
"COLLECTION_POINT_CONN_2";"INSERTING OR UPDATING";"BEFORE";"200";"EcBp_Objects_Group_Conn.verifyObjectGrpConn(n_OBJECT_ID, n_PARENT_START_DATE, n_PARENT_GROUP_TYPE, n_START_DATE, n_END_DATE);";"EC_PROD";
"COLLECTION_POINT_CONN_2";"INSERTING OR UPDATING";"BEFORE";"300";"EcBp_Objects_Group_Conn.checkIfEventOverlaps(n_OBJECT_ID, n_PARENT_START_DATE, n_PARENT_GROUP_TYPE,n_OBJECT_NAME, n_START_DATE, n_END_DATE);";"EC_PROD";
"COMPANY";"INSERTING";"AFTER";"20";"BEGIN ECDP_FIN_PERIOD.instantiatePeriodForCompany(ecdp_context.getAppUser, :NEW.OBJECT_ID); EXCEPTION WHEN OTHERS THEN NULL; END;";"EC_REVN";
"COMPANY";"UPDATING";"AFTER";"10";"IF UPDATING('SYSTEM_COMPANY_IND') THEN BEGIN ECDP_FIN_PERIOD.instantiatePeriodForCompany(ecdp_context.getAppUser, :NEW.OBJECT_ID); EXCEPTION WHEN OTHERS THEN NULL; END; END IF;";"EC_REVN";
"COMPANY_DOC_SET";"DELETING";"BEFORE";"100";"DELETE FROM DV_COMPANY_DOC_INSTR_TEMP WHERE OBJECT_ID=N_OBJECT_ID AND TEMPLATE_CODE=N_TEMPLATE_CODE AND doc_code = o_doc_code;";"EC_TRAN";
"COMPANY_DOC_SET";"INSERTING";"AFTER";"100";"EcDp_Cargo_Document.instCPYInstructionDoc(n_object_id, n_template_code, n_doc_code);";"EC_TRAN";
"COMPANY_DOC_TEMPLATE";"DELETING";"BEFORE";"100";"delete COMPANY_DOC_SET where object_id = n_object_id and template_code = n_template_code;";"EC_TRAN";
"COMPANY_DOC_TEMPLATE";"INSERTING OR UPDATING";"AFTER";"100";"EcDp_Cargo_Document.updateCPYDocSet(n_object_id, n_template_code, :OLD.cargo_doc_template_code, n_cargo_doc_template_code);";"EC_TRAN";
"COMPANY_RECEIVER_TEMP";"DELETING";"BEFORE";"100";"DELETE FROM DV_COMPANY_DOC_INSTR_TEMP WHERE OBJECT_ID=N_OBJECT_ID AND TEMPLATE_CODE=N_TEMPLATE_CODE AND COMPANY_CONTACT_ID=N_RECEIVER_ID;";"EC_TRAN";
"COMPANY_RECEIVER_TEMP";"INSERTING";"AFTER";"100";"EcDp_Cargo_Document.instCPYInstructionReceiver(n_object_id, n_template_code, n_receiver_id);";"EC_TRAN";
"COMPRESSOR";"UPDATING";"AFTER";"3000";"ecdp_equipment_event.updateEventStatus(n_OBJECT_ID, n_DAYTIME, 'COMPRESSOR');";"EC_PROD";
"CONDENSATE_SURGE_DRUM";"UPDATING";"AFTER";"3000";"ecdp_equipment_event.updateEventStatus(n_OBJECT_ID, n_DAYTIME, 'CONDENSATE_SURGE_DRUM');";"EC_PROD";
"CONFIG_VARIABLE";"INSERTING OR UPDATING";"AFTER";"1";"if nvl(:new.calc_var_signature,'x') != nvl(:old.calc_var_signature,'x') then ecdp_trans_inventory.createVarDim(n_object_id,n_daytime,:new.object_start_date,:new.object_end_date,:new.end_date,:new.calc_context_id,:new.calc_var_signature); end if;";"EC_REVN";
"CONST_STD_CV_IDEAL_MASS";"INSERTING";"BEFORE";"1200";"IF n_METHOD  is null THEN n_METHOD := 'MASS'; END IF;";"EC_PROD";
"CONST_STD_CV_IDEAL_MOL";"INSERTING";"BEFORE";"1200";"IF n_METHOD  is null THEN n_METHOD := 'MOL'; END IF;";"EC_PROD";
"CONT_DOCUMENT_VENDOR";"INSERTING OR UPDATING";"AFTER";"1600";"ecdp_contract_setup.syncContractOwnerDocPayment(n_document_key,n_vendor_id);";"EC_REVN";
"CONT_ERP_DOCUMENT";"INSERTING";"AFTER";"500";"EcDp_Document_Gen.UpdateManualERPDoc(n_document_key);";"EC_REVN";
"CONT_ERP_DOCUMENT";"INSERTING";"BEFORE";"100";"n_document_key := EcDp_Document.GetNextDocumentKey(n_object_id, n_daytime);";"EC_REVN";
"CONT_ERP_DOCUMENT";"INSERTING";"BEFORE";"200";"n_ext_document_key := n_document_key;";"EC_REVN";
"CONT_ERP_DOCUMENT";"INSERTING";"BEFORE";"300";"n_financial_code := ec_contract_version.financial_code(n_object_id, n_daytime, '<='); n_document_level_code := 'OPEN';";"EC_REVN";
"CONT_ERP_DOCUMENT";"INSERTING";"BEFORE";"400";"n_preceding_document_key :=  ecdp_document_gen_util.GetERPPrecedingDocKey(n_object_id,n_production_period);";"EC_REVN";
"CONT_ERP_DOCUMENT";"INSERTING OR UPDATING";"AFTER";"800";"ecdp_document_gen.ReverseERPDocumentPostings(n_document_key,nvl(n_last_updated_by,n_created_by));";"EC_REVN";
"CONT_ERP_DOCUMENT";"UPDATING";"AFTER";"600";"IF n_user_action_code IS NOT NULL THEN ecdp_document_gen.executeUserAction(n_document_key, n_user_action_code); END IF;";"EC_REVN";
"CONT_ERP_DOCUMENT";"UPDATING";"AFTER";"700";"n_system_action_code := ecdp_document_gen_util.GetERPDocumentRecActionCode(n_document_key);";"EC_REVN";
"CONT_ERP_POSTINGS";"INSERTING";"BEFORE";"100";"n_erp_rec_key := 'ERK:' || Ecdp_System_Key.assignNextNumber('CONT_ERP_POSTING');";"EC_REVN";
"CONT_ERP_POSTINGS";"UPDATING";"AFTER";"200";"n_object_code := EcDP_Document_Gen_util.GetERPDocumentRecActionCode(n_document_key);UPDATE cont_document SET system_action_code = n_object_code WHERE document_key = n_document_key;";"EC_REVN";
"CONT_JOURNAL_DOC";"INSERTING";"BEFORE";"10";"n_object_id := ecdp_objects.GetObjIDFromCode('CONTRACT', n_object_code);";"EC_REVN";
"CONT_JOURNAL_DOC";"INSERTING";"BEFORE";"20";"n_document_key := ecdp_document.GetNextDocumentKey(n_object_id, n_daytime);";"EC_REVN";
"CONT_JOURNAL_DOC";"INSERTING";"BEFORE";"30";"n_document_type := 'COST_DATASET';";"EC_REVN";
"CONT_JOURNAL_DOC";"INSERTING";"BEFORE";"40";"n_preceding_document_key := ecdp_rr_revn_mapping.GetPrecedingDocNumber(n_dataset, n_period, n_object_id, n_document_type);";"EC_REVN";
"CONT_JOURNAL_DOC";"INSERTING";"BEFORE";"50";"n_daytime := n_period;";"EC_REVN";
"CONT_JOURNAL_DOC";"UPDATING";"AFTER";"60";"IF NVL(n_dataset, '&%&') <> NVL(:OLD.DATASET, '&%&') THEN ecdp_rr_revn_mapping.AlignJournalEntryDataset(n_document_key); END IF;";"EC_REVN";
"CONT_JOURNAL_DOC";"UPDATING";"BEFORE";"60";"IF NVL(n_dataset, '&%&') <> NVL(:OLD.DATASET, '&%&') OR NVL(n_period, TO_DATE('19000101', 'YYYYMMDD')) <> NVL(:OLD.PERIOD, TO_DATE('19000101', 'YYYYMMDD')) OR NVL(n_object_id, '&%&') <> NVL(:OLD.OBJECT_ID, '&%&') OR NVL(n_document_type, '&%&') <> NVL(:OLD.DOCUMENT_TYPE, '&%&') THEN n_preceding_document_key := ecdp_rr_revn_mapping.GetPrecedingDocNumber(n_dataset, n_period, n_object_id, n_document_type); END IF;";"EC_REVN";
"CONT_JOURNAL_ENTRY";"INSERTING";"BEFORE";"10";"n_document_type := 'COST_DATASET';";"EC_REVN";
"CONT_JOURNAL_ENTRY";"INSERTING";"BEFORE";"20";"n_manual_ind := 'Y';";"EC_REVN";
"CONT_JOURNAL_ENTRY";"INSERTING";"BEFORE";"30";"n_daytime := n_period;";"EC_REVN";
"CONT_JS_REPORT";"UPDATING OR INSERTING";"BEFORE";"10";"n_document_key := ecdp_rr_revn_summary.GetLastAppSummaryDoc(n_object_id, n_summary_setup_id, n_period);";"EC_REVN";
"CONT_LINE_ITEM";"INSERTING";"BEFORE";"10";"    if  n_DAYTIME IS NULL and n_LINE_ITEM_BASED_TYPE = 'FREE_UNIT_PRICE_OBJECT' AND n_price_object_id is null then         raise_application_error(-20001,'Price Object is required for Free Unit Price Object line items');      end if;";"EC_REVN";
"CONT_MAPPING_DOC";"DELETING";"BEFORE";"1000";"delete cont_journal_entry where document_key = o_document_key;";"EC_REVN";
"CONT_PAY_TRACKING_ITEM";"DELETING";"BEFORE";"130";"IF n_IS_SYSTEM_GENERATED = 'Y' THEN raise_application_error(-20000, 'A system generated record could not be deleted.'); END IF;";"EC_REVN";
"CONT_PAY_TRACKING_ITEM";"INSERTING";"BEFORE";"120";"EcDp_System_Key.assignNextNumber('CONT_PAY_TRACKING_ITEM', n_item_no);";"EC_REVN";
"CONTRACT";"INSERTING";"AFTER";"100";"Ecdp_Contract_Setup.CreDefaultCustomerVendor(n_object_id, n_daytime, n_last_updated_by);";"EC_REVN";
"CONTRACT";"INSERTING";"BEFORE";"300";"IF :NEW.FINANCIAL_CODE='FRAME' AND :NEW.PROCESSABLE_CODE='Y' THEN RAISE_APPLICATION_ERROR('-20000', 'The processable code must be set to N when financial code is FRAME'); END IF;";"EC_REVN";
"CONTRACT";"INSERTING OR UPDATING";"AFTER";"400";"ecdp_contract_setup.ValidateContractArea(n_object_id,n_daytime);";"EC_REVN";
"CONTRACT";"UPDATING";"AFTER";"200";"ecdp_contract_setup.updFinancialCode(n_object_id,n_daytime, :new.financial_code);";"EC_REVN";
"CONTRACT_ATTRIBUTE";"INSERTING OR UPDATING";"BEFORE";"100";"EcDp_Contract_Attribute.validateContractAttributeDate(n_object_id, n_attribute_name, n_daytime);";"EC_TRAN";
"CONTRACT_CUST_PARTIES";"INSERTING";"BEFORE";"2000";"ecdp_contract_setup.validateNumberOfShareParties(n_OBJECT_ID, 'CUSTOMER');";"EC_REVN";
"CONTRACT_DOC";"INSERTING OR UPDATING";"AFTER";"100";"Ecdp_Contract_Setup.updatePriceIndex(n_OBJECT_ID, n_DAYTIME, :NEW.INT_TYPE_ID);";"EC_REVN";
"CONTRACT_DOC";"INSERTING OR UPDATING";"AFTER";"200";"ecdp_contract_setup.syncContractOwnerPayment(n_object_id,'VENDOR',n_daytime,'CONTRACT_DOC');";"EC_REVN";
"CONTRACT_DOC";"INSERTING OR UPDATING";"AFTER";"300";"ecdp_transaction.updTransTemplForexSetup(n_object_id,n_daytime,:new.last_updated_by,:new.memo_currency_id,:new.booking_currency_id);";"EC_REVN";
"CONTRACT_DOC";"INSERTING OR UPDATING";"BEFORE";"50";"EcDp_Contract_Setup.ValidateNewDocSetup(n_contract_id, n_daytime, :New.doc_concept_code);";"EC_REVN";
"CONTRACT_DOC";"UPDATING";"AFTER";"400";"IF :new.erp_document_ind = 'Y' THEN EcDp_document.ValidateContractDocForERP(n_object_id, n_daytime); END IF;";"EC_REVN";
"CONTRACT_PARTIES";"DELETING";"AFTER";"100";"EcBp_Contract_Parties.updateDelShareEndDate(n_object_id, n_party_role, n_daytime);";"EC_TRAN";
"CONTRACT_PRICE_LIST";"INSERTING";"AFTER";"20";"EcDp_Sales_Contract_Price.InsNewPriceElementSet(n_OBJECT_ID ,n_PRICE_CONCEPT_CODE, n_PRICE_ELEMENT_CODE, n_DAYTIME, n_CREATED_BY);";"EC_SALE";
"CONTRACT_PRICE_LIST";"INSERTING";"BEFORE";"10";"n_price_element_code := ecdp_sales_contract_price.GetAnyPriceElement(n_price_concept_code,n_object_id,n_daytime);";"EC_SALE";
"CONTRACT_SHIPPER_PAIR";"DELETING";"BEFORE";"800";"ecdp_contract_shipper_pair.validateDelete(n_object_id, n_delivery_point_id, n_downstream_shipper_id, n_daytime);";"EC_TRAN";
"CONTRACT_TEXT_ITEM";"INSERTING";"BEFORE";"100";"EcDp_System_Key.assignNextNumber('CONTRACT_TEXT_ITEM', n_code);";"EC_REVN";
"CONTRACT_VEND_PARTIES";"INSERTING";"AFTER";"1000";"ecdp_contract_setup.UpdateDocumentVendor(n_OBJECT_ID);";"EC_REVN";
"CONTRACT_VEND_PARTIES";"INSERTING";"BEFORE";"2000";"ecdp_contract_setup.validateNumberOfShareParties(n_OBJECT_ID, 'VENDOR');";"EC_REVN";
"CONTRACT_VEND_PARTIES";"UPDATING";"AFTER";"2000";"ecdp_contract_setup.UpdateDocumentVendor(n_OBJECT_ID);";"EC_REVN";
"CONT_SUM_DOC";"INSERTING";"BEFORE";"10";"n_object_id := ecdp_objects.GetObjIDFromCode('CONTRACT', n_object_code);";"EC_REVN";
"CONT_SUM_DOC";"INSERTING";"BEFORE";"20";"n_document_key := ecdp_document.GetNextDocumentKey(n_object_id, n_daytime);";"EC_REVN";
"CONT_SUM_DOC";"INSERTING";"BEFORE";"30";"n_document_type := 'COST_DATASET';";"EC_REVN";
"CONT_SUM_DOC";"INSERTING";"BEFORE";"40";"n_preceding_document_key := ecdp_rr_revn_mapping.GetPrecedingDocNumber(n_dataset, n_period, n_object_id, n_document_type);";"EC_REVN";
"CONT_SUM_DOC";"INSERTING";"BEFORE";"50";"n_daytime := n_period;";"EC_REVN";
"CONT_SUM_DOC";"UPDATING";"AFTER";"60";"IF NVL(n_dataset, '&%&') <> NVL(:OLD.DATASET, '&%&') THEN ecdp_rr_revn_mapping.AlignJournalEntryDataset(n_document_key); END IF;";"EC_REVN";
"CONT_SUM_DOC";"UPDATING";"BEFORE";"60";"IF NVL(n_dataset, '&%&') <> NVL(:OLD.DATASET, '&%&') OR NVL(n_period, TO_DATE('19000101', 'YYYYMMDD')) <> NVL(:OLD.PERIOD, TO_DATE('19000101', 'YYYYMMDD')) OR NVL(n_object_id, '&%&') <> NVL(:OLD.OBJECT_ID, '&%&') OR NVL(n_document_type, '&%&') <> NVL(:OLD.DOCUMENT_TYPE, '&%&') THEN n_preceding_document_key := ecdp_rr_revn_mapping.GetPrecedingDocNumber(n_dataset, n_period, n_object_id, n_document_type); END IF;";"EC_REVN";
"CONT_SUMMARY_DOC";"DELETING";"BEFORE";"100";"ecdp_rr_revn_summary.DeleteSummary(:old.document_key);";"EC_REVN";
"CONT_TRANSACTION";"INSERTING";"BEFORE";"600";"IF  ecdp_document.isDocumentEditable(n_DOCUMENT_KEY) = 'N'  THEN RAISE_APPLICATION_ERROR(-20603,'Cannot add transactions to a booked document'); END IF;";"EC_REVN";
"CONT_TRANSACTION";"UPDATING";"AFTER";"100";"IF UPDATING('PRICE_OBJECT_ID') THEN EcDp_Transaction.UpdPriceObject(n_TRANSACTION_KEY,n_last_updated_by); END IF;";"EC_REVN";
"CONT_TRANSACTION";"UPDATING";"BEFORE";"110";"IF NOT UPDATING('ORIGIN_COUNTRY_ID') AND (UPDATING('DELIVERY_POINT_ID') OR UPDATING('LOADING_PORT_ID')) THEN n_ORIGIN_COUNTRY_ID := EcDp_Transaction.GetOriginCountryForTrans(n_object_id, n_transaction_key, n_transaction_scope, n_delivery_point_id, n_loading_port_id, nvl(n_transaction_date, n_daytime)); END IF;";"EC_REVN";
"CONT_TRANSACTION";"UPDATING";"BEFORE";"120";"IF NOT UPDATING('COUNTRY_ID') AND (UPDATING('DELIVERY_POINT_ID') OR UPDATING('DISCHARGE_PORT_ID')) THEN n_COUNTRY_ID := EcDp_Transaction.GetDestinationCountryForTrans(n_object_id, n_transaction_key, n_transaction_scope, n_delivery_point_id, n_discharge_port_id, nvl(n_transaction_date, n_daytime)); END IF;";"EC_REVN";
"CONT_TRANSACTION_QTY";"INSERTING OR UPDATING";"AFTER";"5000";"ecdp_transaction.UpdPercentageLineItem(n_TRANSACTION_KEY,nvl(n_last_updated_by,n_created_by));";"EC_REVN";
"COST_MAPPING";"INSERTING OR UPDATING";"AFTER";"100";"ecdp_rr_revn_mapping.SetCostMappingAccountID(:new.object_id,:new.daytime);";"EC_REVN";
"COST_MAPPING";"INSERTING OR UPDATING";"AFTER";"200";"ecdp_rr_revn_mapping.SetCostMappingWBSID(:new.object_id,:new.daytime);";"EC_REVN";
"COST_MAPPING";"UPDATING";"AFTER";"130";"IF UPDATING('DAYTIME') THEN EcDp_RR_Revn_Mapping.InitNewCostMappingSource(n_last_updated_by, :new.object_id, :new.daytime); END IF;";"EC_REVN";
"COST_MAPPING_SRC_SETUP";"INSERTING OR UPDATING";"BEFORE";"100";"if n_operator in ('IS_NULL','IS_NOT_NULL') then n_src_code := n_operator; end if;";"EC_REVN";
"CO2_REMOVAL_UNIT";"UPDATING";"AFTER";"3000";"ecdp_equipment_event.updateEventStatus(n_OBJECT_ID, n_DAYTIME, 'CO2_REMOVAL_UNIT');";"EC_PROD";
"CTRL_SAFETY_SYSTEM";"UPDATING";"AFTER";"3000";"ecdp_equipment_event.updateEventStatus(n_OBJECT_ID, n_DAYTIME, 'CTRL_SAFETY_SYSTEM');";"EC_PROD";
"DEF_DAILY_CORR_ACTION";"INSERTING";"BEFORE";"3000";"ecbp_defer_master_event.VerifyActionsDefDaily(n_event_no,n_daytime,n_end_date,n_action);";"EC_PROD";
"DEF_DAILY_CORR_ACTION";"UPDATING";"AFTER";"3100";"ecbp_defer_master_event.VerifyActionsDefDaily(n_event_no,n_daytime,n_end_date,n_action);";"EC_PROD";
"DEF_DAY_DEFERMENT_EVENT";"DELETING";"BEFORE";"2500";"EcBp_Defer_Master_Event.verifyDelDefermentEvent(n_DEFERMENT_EVENT_NO);";"EC_PROD";
"DEF_DAY_DEFERMENT_EVENT";"INSERTING";"AFTER";"2400";"EcDp_Defer_Master_Event.createSummaryRecords(n_DEFER_LEVEL_OBJECT_ID,n_DEFERMENT_EVENT_NO);";"EC_PROD";
"DEF_DAY_DEFERMENT_EVENT";"INSERTING";"AFTER";"2600";"EcBp_Deferment_Event.loadSummaryEvents(n_DEFERMENT_EVENT_NO);";"EC_PROD";
"DEF_DAY_DEFERMENT_EVENT";"INSERTING OR UPDATING";"BEFORE";"2300";"EcBp_Defer_Master_Event.verifyDefermentEvent(n_DEFERMENT_EVENT_NO,n_INCIDENT_NO, n_DAYTIME,n_END_DATE);";"EC_PROD";
"DEF_DAY_DEFERMENT_EVENT";"UPDATING";"AFTER";"2700";"IF (:OLD.END_DATE < n_END_DATE) THEN EcBp_Deferment_Event.loadSummaryEvents(n_DEFERMENT_EVENT_NO, :OLD.END_DATE); END IF;";"EC_PROD";
"DEF_DAY_MASTER_EVENT";"DELETING";"BEFORE";"2300";"EcBp_Defer_Master_Event.verifyDelMasterDefermentEvent(n_INCIDENT_NO);";"EC_PROD";
"DEF_DAY_MASTER_EVENT";"UPDATING";"BEFORE";"2200";"EcBp_Defer_Master_Event.verifyMasterDefermentEvent(n_INCIDENT_NO, n_END_DATE);";"EC_PROD";
"DEF_DAY_SUMMARY_EVENT";"UPDATING";"AFTER";"1800";"EcDp_Defer_Summary.updateDefermentEvent(n_DEFERMENT_EVENT_NO, n_DAYTIME);";"EC_PROD";
"DEFER_EVENT_CORR_ACTION";"INSERTING";"BEFORE";"3000";"ecbp_deferment_event.verifyactions(n_event_no,n_daytime,n_end_date,n_action);";"EC_PROD";
"DEFER_EVENT_CORR_ACTION";"UPDATING";"AFTER";"3100";"ecbp_deferment_event.verifyactions(n_event_no,n_daytime,n_end_date,n_action);";"EC_PROD";
"DEFER_LOSS_FCTY_EVENT";"DELETING";"BEFORE";"400";"EcDp_Defer_Loss_Accounting.deleteChildEvent(n_EVENT_NO);";"EC_PROD";
"DEFER_LOSS_FCTY_EVENT";"INSERTING";"BEFORE";"100";"n_CLASS_NAME:='DEFER_LOSS_FCTY_EVENT';";"EC_PROD";
"DEFER_LOSS_FCTY_EVENT";"INSERTING OR UPDATING";"AFTER";"200";"IF (INSERTING OR UPDATING('DAYTIME')) OR (INSERTING OR UPDATING('END_DATE'))  THEN EcDp_Defer_Loss_Accounting.populateFctyStreamRecord(n_EVENT_NO,n_DAYTIME, n_END_DATE); END IF;";"EC_PROD";
"DEFER_LOSS_FCTY_EVENT";"UPDATING";"AFTER";"300";"IF  (:OLD.DAYTIME <> n_DAYTIME) OR (:OLD.END_DATE <> n_END_DATE)  THEN EcDp_Defer_Loss_Accounting.deleteStream(n_EVENT_NO, n_DAYTIME, n_END_DATE); END IF;";"EC_PROD";
"DEFER_LOSS_FIELD_EVENT";"DELETING";"BEFORE";"400";"EcDp_Defer_Loss_Accounting.deleteChildEvent(n_EVENT_NO);";"EC_PROD";
"DEFER_LOSS_FIELD_EVENT";"INSERTING";"BEFORE";"100";"n_CLASS_NAME:='DEFER_LOSS_FIELD_EVENT';";"EC_PROD";
"DEFER_LOSS_FIELD_EVENT";"INSERTING OR UPDATING";"AFTER";"200";"IF (INSERTING OR UPDATING('DAYTIME')) OR (INSERTING OR UPDATING('END_DATE'))  THEN EcDp_Defer_Loss_Accounting.populateFldStreamRecord(n_EVENT_NO,n_DAYTIME, n_END_DATE); END IF;";"EC_PROD";
"DEFER_LOSS_FIELD_EVENT";"UPDATING";"AFTER";"300";"IF (:OLD.DAYTIME <> n_DAYTIME) OR (:OLD.END_DATE <> n_END_DATE)  THEN EcDp_Defer_Loss_Accounting.deleteStream(n_EVENT_NO, n_DAYTIME, n_END_DATE); END IF;";"EC_PROD";
"DEFER_LOSS_STRM_EVENT";"UPDATING";"AFTER";"100";"IF  (:OLD.NET_VOL <> n_NET_VOL ) OR  (:OLD.NET_MASS <> n_NET_MASS ) THEN EcDp_Defer_Loss_Accounting.updateRate(n_EVENT_NO,n_OBJECT_ID, n_DAYTIME, nvl(n_last_updated_by, n_created_by)); END IF;";"EC_PROD";
"DEFER_LOW_AFF_WELL_LONG";"DELETING";"BEFORE";"3200";"ecdp_deferment_event.deleteCalcData(o_wde_no);";"EC_PROD";
"DEFER_LOW_AFF_WELL_LONG";"INSERTING";"BEFORE";"3000";"ecbp_deferment_event.checkIfAffectedWellsOverlap(n_event_no,n_object_id, n_daytime, n_end_date);";"EC_PROD";
"DEFER_LOW_AFF_WELL_LONG";"INSERTING OR UPDATING";"AFTER";"3500";"ecbp_deferment_event.compareLowAndPotentialRate(n_event_no,n_daytime,n_object_id);";"EC_PROD";
"DEFER_LOW_AFF_WELL_LONG";"INSERTING OR UPDATING";"AFTER";"3600";"ecdp_deferment_event.setParentEndDate(n_EVENT_NO);";"EC_PROD";
"DEFER_LOW_AFF_WELL_LONG";"INSERTING OR UPDATING";"BEFORE";"3400";"IF(ecdp_well.isWellOpen(n_OBJECT_ID,n_DAYTIME) = 'N') THEN Raise_Application_Error('-20000', 'Well Active Status is not open, not allowed to perform operation.'); ELSIF (ecdp_well.checkClosedWellWithinPeriod(n_OBJECT_ID,n_DAYTIME, NVL(n_END_DATE, to_date('2100-01-01','yyyy-mm-dd'))) = 'Y') THEN Raise_Application_Error('-20000', 'Well Active Status is not open, not allowed to perform operation.'); END IF;";"EC_PROD";
"DEFER_LOW_AFF_WELL_LONG";"UPDATING";"AFTER";"3100";"ecbp_deferment_event.checkIfAffectedWellsOverlap(n_event_no,n_object_id, n_daytime, n_end_date);";"EC_PROD";
"DEFER_LOW_AFF_WELL_LONG";"UPDATING";"BEFORE";"3300";"ecdp_deferment_event.deleteCalcDataOutsideTimeSpan(n_wde_no,n_object_id,n_daytime, n_end_date,:OLD.daytime, :OLD.end_date);";"EC_PROD";
"DEFER_LOW_AFF_WELL_SHORT";"DELETING";"BEFORE";"3200";"ecdp_deferment_event.deleteCalcData(o_wde_no);";"EC_PROD";
"DEFER_LOW_AFF_WELL_SHORT";"INSERTING";"BEFORE";"3000";"ecbp_deferment_event.checkIfAffectedWellsOverlap(n_event_no,n_object_id, n_daytime, n_end_date);";"EC_PROD";
"DEFER_LOW_AFF_WELL_SHORT";"INSERTING OR UPDATING";"AFTER";"3500";"ecbp_deferment_event.compareLowAndPotentialRate(n_event_no,n_daytime,n_object_id);";"EC_PROD";
"DEFER_LOW_AFF_WELL_SHORT";"INSERTING OR UPDATING";"AFTER";"3600";"ecdp_deferment_event.setParentEndDate(n_EVENT_NO);";"EC_PROD";
"DEFER_LOW_AFF_WELL_SHORT";"INSERTING OR UPDATING";"BEFORE";"3400";"IF (ecdp_well.isWellOpen(n_OBJECT_ID,n_DAYTIME) = 'N') THEN Raise_Application_Error('-20000', 'Well Active Status is not open, not allowed to perform operation.'); ELSIF (ecdp_well.checkClosedWellWithinPeriod(n_OBJECT_ID,n_DAYTIME, NVL(n_END_DATE, to_date('2100-01-01','yyyy-mm-dd'))) = 'Y') THEN Raise_Application_Error('-20000', 'Well Active Status is not open, not allowed to perform operation.'); END IF;";"EC_PROD";
"DEFER_LOW_AFF_WELL_SHORT";"UPDATING";"AFTER";"3100";"ecbp_deferment_event.checkIfAffectedWellsOverlap(n_event_no,n_object_id, n_daytime, n_end_date);";"EC_PROD";
"DEFER_LOW_AFF_WELL_SHORT";"UPDATING";"BEFORE";"3300";"ecdp_deferment_event.deleteCalcDataOutsideTimeSpan(n_wde_no,n_object_id,n_daytime, n_end_date,:OLD.daytime, :OLD.end_date);";"EC_PROD";
"DEFER_LOW_EVENT_LONG";"DELETING";"BEFORE";"3400";"ecdp_deferment_event.deleteChildEvent(n_event_no);";"EC_PROD";
"DEFER_LOW_EVENT_LONG";"INSERTING";"AFTER";"3200";"ecdp_deferment_event.insertAffectedWells(n_event_no);";"EC_PROD";
"DEFER_LOW_EVENT_LONG";"INSERTING OR UPDATING";"AFTER";"3300";"IF (:OLD.daytime != n_daytime OR (:OLD.end_date is null or n_end_date is null or (:OLD.end_date is not null and :OLD.end_date != n_end_date))) THEN ecdp_deferment_event.updateDateForWellDefermnt(n_event_no, n_daytime, n_end_date, :old.daytime, :old.end_date); END IF;";"EC_PROD";
"DEFER_LOW_EVENT_LONG";"INSERTING OR UPDATING";"BEFORE";"100";"IF (n_ASSET_TYPE = 'WELL' AND ecdp_well.isWellOpen(n_ASSET_ID,n_DAYTIME) = 'N') THEN Raise_Application_Error('-20000', 'Well Active Status is not open, not allowed to perform operation.'); ELSIF (n_ASSET_TYPE = 'WELL' AND ecdp_well.checkClosedWellWithinPeriod(n_ASSET_ID,n_DAYTIME, NVL(n_END_DATE, to_date('2100-01-01','yyyy-mm-dd'))) = 'Y') THEN Raise_Application_Error('-20000', 'Well Active Status is not open, not allowed to perform operation.'); END IF;";"EC_PROD";
"DEFER_LOW_EVENT_SHORT";"DELETING";"BEFORE";"3400";"ecdp_deferment_event.deleteChildEvent(n_event_no);";"EC_PROD";
"DEFER_LOW_EVENT_SHORT";"INSERTING";"AFTER";"3200";"ecdp_deferment_event.insertAffectedWells(n_event_no);";"EC_PROD";
"DEFER_LOW_EVENT_SHORT";"INSERTING OR UPDATING";"AFTER";"3300";"IF (:OLD.daytime != n_daytime OR (:OLD.end_date is null or n_end_date is null or (:OLD.end_date is not null and :OLD.end_date != n_end_date))) THEN ecdp_deferment_event.updateDateForWellDefermnt(n_event_no, n_daytime, n_end_date, :old.daytime, :old.end_date); END IF;";"EC_PROD";
"DEFER_LOW_EVENT_SHORT";"INSERTING OR UPDATING";"BEFORE";"3100";"IF (n_ASSET_TYPE = 'WELL' AND ecdp_well.isWellOpen(n_ASSET_ID,n_DAYTIME) = 'N') THEN Raise_Application_Error('-20000', 'Well Active Status is not open, not allowed to perform operation.'); ELSIF (n_ASSET_TYPE = 'WELL' AND ecdp_well.checkClosedWellWithinPeriod(n_ASSET_ID,n_DAYTIME, NVL(n_END_DATE, to_date('2100-01-01','yyyy-mm-dd'))) = 'Y') THEN Raise_Application_Error('-20000', 'Well Active Status is not open, not allowed to perform operation.'); END IF;";"EC_PROD";
"DEFER_LOW_OFF";"INSERTING OR UPDATING";"AFTER";"3300";"ecdp_deferment_event.updateEndDateForWellDeferment(n_event_no, n_end_date, :old.end_date);";"EC_PROD";
"DEFER_OFF_AFF_WELL_LONG";"DELETING";"BEFORE";"3200";"ecdp_deferment_event.deleteCalcData(o_wde_no);";"EC_PROD";
"DEFER_OFF_AFF_WELL_LONG";"INSERTING";"BEFORE";"3000";"ecbp_deferment_event.checkIfAffectedWellsOverlap(n_event_no,n_object_id, n_daytime, n_end_date);";"EC_PROD";
"DEFER_OFF_AFF_WELL_LONG";"INSERTING OR UPDATING";"AFTER";"3400";"ecdp_deferment_event.setParentEndDate(n_EVENT_NO);";"EC_PROD";
"DEFER_OFF_AFF_WELL_LONG";"INSERTING OR UPDATING";"BEFORE";"100";"IF(ecdp_well.isWellOpen(n_OBJECT_ID,n_DAYTIME) = 'N') THEN Raise_Application_Error('-20000', 'Well Active Status is not open, not allowed to perform operation.'); ELSIF (ecdp_well.checkClosedWellWithinPeriod(n_OBJECT_ID,n_DAYTIME, NVL(n_END_DATE, to_date('2100-01-01','yyyy-mm-dd'))) = 'Y') THEN Raise_Application_Error('-20000', 'Well Active Status is not open, not allowed to perform operation.'); END IF;";"EC_PROD";
"DEFER_OFF_AFF_WELL_LONG";"UPDATING";"AFTER";"3100";"ecbp_deferment_event.checkIfAffectedWellsOverlap(n_event_no,n_object_id, n_daytime, n_end_date);";"EC_PROD";
"DEFER_OFF_AFF_WELL_LONG";"UPDATING";"BEFORE";"3300";"ecdp_deferment_event.deleteCalcDataOutsideTimeSpan(n_wde_no,n_object_id,n_daytime, n_end_date,:OLD.daytime, :OLD.end_date);";"EC_PROD";
"DEFER_OFF_AFF_WELL_SHORT";"DELETING";"BEFORE";"3200";"ecdp_deferment_event.deleteCalcData(o_wde_no);";"EC_PROD";
"DEFER_OFF_AFF_WELL_SHORT";"INSERTING";"BEFORE";"3000";"ecbp_deferment_event.checkIfAffectedWellsOverlap(n_event_no,n_object_id, n_daytime, n_end_date);";"EC_PROD";
"DEFER_OFF_AFF_WELL_SHORT";"INSERTING OR UPDATING";"AFTER";"3500";"ecdp_deferment_event.setParentEndDate(n_EVENT_NO);";"EC_PROD";
"DEFER_OFF_AFF_WELL_SHORT";"INSERTING OR UPDATING";"BEFORE";"3400";"IF (ecdp_well.isWellOpen(n_OBJECT_ID,n_DAYTIME) = 'N') THEN Raise_Application_Error('-20000', 'Well Active Status is not open, not allowed to perform operation.'); ELSIF (ecdp_well.checkClosedWellWithinPeriod(n_OBJECT_ID,n_DAYTIME, NVL(n_END_DATE, to_date('2100-01-01','yyyy-mm-dd'))) = 'Y')THEN Raise_Application_Error('-20000', 'Well Active Status is not open, not allowed to perform operation.'); END IF;";"EC_PROD";
"DEFER_OFF_AFF_WELL_SHORT";"UPDATING";"AFTER";"3100";"ecbp_deferment_event.checkIfAffectedWellsOverlap(n_event_no,n_object_id, n_daytime, n_end_date);";"EC_PROD";
"DEFER_OFF_AFF_WELL_SHORT";"UPDATING";"BEFORE";"3300";"ecdp_deferment_event.deleteCalcDataOutsideTimeSpan(n_wde_no,n_object_id,n_daytime, n_end_date,:OLD.daytime, :OLD.end_date);";"EC_PROD";
"DEFER_OFF_EVENT_LONG";"DELETING";"BEFORE";"3500";"ecdp_deferment_event.deleteChildEvent(n_event_no);";"EC_PROD";
"DEFER_OFF_EVENT_LONG";"INSERTING";"AFTER";"3200";"ecdp_deferment_event.insertAffectedWells(n_event_no);";"EC_PROD";
"DEFER_OFF_EVENT_LONG";"INSERTING OR UPDATING";"AFTER";"3300";"IF (:OLD.daytime != n_daytime OR (:OLD.end_date is null or n_end_date is null or (:OLD.end_date is not null and :OLD.end_date != n_end_date))) THEN ecdp_deferment_event.updateDateForWellDefermnt(n_event_no, n_daytime, n_end_date, :old.daytime, :old.end_date); END IF;";"EC_PROD";
"DEFER_OFF_EVENT_LONG";"INSERTING OR UPDATING";"BEFORE";"3400";"IF (n_ASSET_TYPE = 'WELL' AND ecdp_well.isWellOpen(n_ASSET_ID,n_DAYTIME) = 'N') THEN Raise_Application_Error('-20000', 'Well Active Status is not open, not allowed to perform operation.'); ELSIF (n_ASSET_TYPE = 'WELL' AND ecdp_well.checkClosedWellWithinPeriod(n_ASSET_ID,n_DAYTIME, NVL(n_END_DATE, to_date('2100-01-01','yyyy-mm-dd'))) = 'Y') THEN Raise_Application_Error('-20000', 'Well Active Status is not open, not allowed to perform operation.'); END IF;";"EC_PROD";
"DEFER_OFF_EVENT_SHORT";"DELETING";"BEFORE";"3500";"ecdp_deferment_event.deleteChildEvent(n_event_no);";"EC_PROD";
"DEFER_OFF_EVENT_SHORT";"INSERTING";"AFTER";"3200";"ecdp_deferment_event.insertAffectedWells(n_event_no);";"EC_PROD";
"DEFER_OFF_EVENT_SHORT";"INSERTING OR UPDATING";"AFTER";"3300";"IF (:OLD.daytime != n_daytime OR (:OLD.end_date is null or n_end_date is null or (:OLD.end_date is not null and :OLD.end_date != n_end_date))) THEN ecdp_deferment_event.updateDateForWellDefermnt(n_event_no, n_daytime, n_end_date, :old.daytime, :old.end_date); END IF;";"EC_PROD";
"DEFER_OFF_EVENT_SHORT";"INSERTING OR UPDATING";"BEFORE";"3400";"IF (n_ASSET_TYPE = 'WELL' AND ecdp_well.isWellOpen(n_ASSET_ID,n_DAYTIME) = 'N') THEN Raise_Application_Error('-20000', 'Well Active Status is not open, not allowed to perform operation.'); ELSIF (n_ASSET_TYPE = 'WELL' AND ecdp_well.checkClosedWellWithinPeriod(n_ASSET_ID,n_DAYTIME, NVL(n_END_DATE, to_date('2100-01-01','yyyy-mm-dd'))) = 'Y') THEN Raise_Application_Error('-20000', 'Well Active Status is not open, not allowed to perform operation.'); END IF;";"EC_PROD";
"DEF_GROUP_WELL_CONN";"INSERTING OR UPDATING";"AFTER";"2000";"EcBp_Deferment_Grp_Well_Conn.checkIfEventOverlaps(n_OBJECT_ID, n_WELL_ID, n_DAYTIME, n_END_DATE);";"EC_PROD";
"DEF_GROUP_WELL_CONN";"INSERTING OR UPDATING";"BEFORE";"1000";"EcBp_Deferment_Grp_Well_Conn.checkDateWithinObjects(n_OBJECT_ID, n_WELL_ID, n_DAYTIME, n_END_DATE);";"EC_PROD";
"DEHYDRATOR";"UPDATING";"AFTER";"3000";"ecdp_equipment_event.updateEventStatus(n_OBJECT_ID, n_DAYTIME, 'DEHYDRATOR');";"EC_PROD";
"DELIVERY_STREAM";"INSERTING OR UPDATING";"BEFORE";"100";"IF n_ENTRY_DELPNT_ID IS NULL AND n_EXIT_DELPNT_ID IS NULL THEN Raise_Application_Error(-20577,'Entry Delivery Point or Exit Delivery Point is empty. Please insert either one.'); END IF;";"EC_TRAN";
"DEMURRAGE";"INSERTING";"BEFORE";"100";"n_LIFTING_EVENT := 'LOAD';";"EC_TRAN";
"DEMURRAGE_UNLOAD";"INSERTING";"BEFORE";"100";"n_LIFTING_EVENT := 'UNLOAD';";"EC_TRAN";
"DISPATCHING_COL_MAPPING";"INSERTING";"AFTER";"100";"EcBp_Dispatching_Mapping.setColMappingEndDate(n_object_id, n_bf_class_name, n_daytime, n_attribute_name, n_stream_id, n_table_name);";"EC_SALE";
"DISPATCHING_ROW_MAPPING";"DELETING";"BEFORE";"100";"EcBp_Dispatching_Mapping.validateDelete(n_object_id, n_bf_class_name, n_daytime, n_end_date);";"EC_SALE";
"DISPATCHING_ROW_MAPPING";"INSERTING";"AFTER";"100";"EcBp_Dispatching_Mapping.setRowMappingEndDate(n_object_id, n_bf_class_name, n_daytime);";"EC_SALE";
"DISPOSITIONS";"DELETING";"BEFORE";"1200";"ecdp_tank_measurement.delSealLocation(n_OBJECT_ID, n_DAYTIME);";"EC_PROD";
"DOC_DATE_TERM";"INSERTING OR UPDATING";"BEFORE";"100";"ecdp_calendar.validateOffset(:NEW.offset, :NEW.doc_date_term_method);";"EC_REVN";
"DOC_RECEIVED_TERM";"INSERTING OR UPDATING";"BEFORE";"100";"ecdp_calendar.validateOffset(:NEW.offset, :NEW.doc_rec_term_method);";"EC_REVN";
"DOC_SEQUENCE";"INSERTING ";"AFTER";"100";"ecdp_doc_sequence.InsNewDocSeqNumber(n_object_id, n_object_start_date); ";"EC_REVN";
"DOC_SEQUENCE";"UPDATING";"AFTER";"200";"ecdp_doc_sequence.updDocSeq(:NEW.code, :OLD.code, :NEW.starting_point, :OLD.starting_point); ";"EC_REVN";
"DOC_SEQUENCE";"UPDATING";"BEFORE";"300";"ecdp_doc_sequence.delDocSeq(n_object_id, n_object_start_date, n_object_end_date); ";"EC_REVN";
"EMULSIFIER";"UPDATING";"AFTER";"3000";"ecdp_equipment_event.updateEventStatus(n_OBJECT_ID, n_DAYTIME, 'EMULSIFIER');";"EC_PROD";
"ENGINE";"UPDATING";"AFTER";"3000";"ecdp_equipment_event.updateEventStatus(n_OBJECT_ID, n_DAYTIME, 'ENGINE');";"EC_PROD";
"EQPM_EVENT";"DELETING";"BEFORE";"1200";"ecdp_equipment_event.deleteEventStatus(n_object_id,n_daytime);";"EC_PROD";
"EQPM_EVENT";"INSERTING";"AFTER";"1100";"ecdp_equipment_event.insertEventStatus(n_object_id,n_daytime,nvl(n_last_updated_by, n_created_by));";"EC_PROD";
"EQPM_EVENT_CP";"DELETING";"BEFORE";"1200";"ecdp_equipment_event.deleteEventStatus(n_object_id,n_daytime);";"EC_PROD";
"EQPM_EVENT_CP";"INSERTING";"AFTER";"1100";"ecdp_equipment_event.insertEventStatus(n_object_id,n_daytime,nvl(n_last_updated_by, n_created_by));";"EC_PROD";
"EQPM_OFF";"DELETING";"BEFORE";"500";"EcBp_Well_Eqpm_Deferment.deleteChildEvent(n_EVENT_NO);";"EC_PROD";
"EQPM_OFF";"INSERTING";"BEFORE";"100";"n_DOWNTIME_CATEG:='EQPM_OFF';";"EC_PROD";
"EQPM_OFF";"INSERTING";"BEFORE";"200";"IF n_DOWNTIME_TYPE  = 'EQPM_DT' THEN n_DOWNTIME_CLASS_TYPE := 'SINGLE';  ELSE  n_DOWNTIME_CLASS_TYPE := 'GROUP'; END IF;";"EC_PROD";
"EQPM_OFF";"INSERTING OR UPDATING";"AFTER";"700";"EcDp_Well_Eqpm_Deferment.updateReasonCodeForChildEvent(n_event_no, nvl(n_last_updated_by, n_created_by), nvl(n_last_updated_date, n_created_date));";"EC_PROD";
"EQPM_OFF";"INSERTING OR UPDATING";"AFTER";"1000";"IF n_DAYTIME > SYSDATE+1 OR n_END_DATE > SYSDATE+1 THEN Raise_Application_Error('-20630', 'Start Date or End Date should not exceed more than one day of system date.');  END IF;";"EC_PROD";
"EQPM_OFF";"INSERTING OR UPDATING";"BEFORE";"600";"EcBp_Well_Eqpm_Deferment.checkIfEventOverlaps(n_OBJECT_ID, n_DAYTIME, n_END_DATE, n_DOWNTIME_CATEG, n_EVENT_NO);";"EC_PROD";
"EQPM_OFF";"UPDATING";"AFTER";"400";"if (nvl(n_END_DATE, to_date('01-01-1900', 'DD-MM-YYYY'))<>  nvl(:old.END_DATE, to_date('01-01-1900', 'DD-MM-YYYY'))) then EcDp_Well_Eqpm_Deferment.updateEndDateForChildEvent(n_EVENT_NO, :OLD.END_DATE , nvl(n_last_updated_by, n_created_by), nvl(n_last_updated_date, n_created_date)); end if;";"EC_PROD";
"EQPM_OFF";"UPDATING";"AFTER";"450";"EcDp_Well_Eqpm_Deferment.updateStartDateForChildEvent(n_EVENT_NO, n_DAYTIME , nvl(n_last_updated_by, n_created_by), nvl(n_last_updated_date, n_created_date)); ";"EC_PROD";
"EQPM_OFF";"UPDATING";"BEFORE";"460";"EcBp_Well_Eqpm_Deferment.checkChildEndDate(n_EVENT_NO,n_DAYTIME);";"EC_PROD";
"EQPM_OFF_CHILD";"INSERTING";"BEFORE";"100";"n_DOWNTIME_CATEG:='EQPM_OFF';";"EC_PROD";
"EQPM_OFF_CHILD";"INSERTING";"BEFORE";"200";"n_DOWNTIME_CLASS_TYPE:='GROUP_CHILD';";"EC_PROD";
"EQPM_OFF_CHILD";"INSERTING";"BEFORE";"400";"n_DOWNTIME_TYPE:='EQPM_DT';";"EC_PROD";
"EQPM_OFF_CHILD";"INSERTING";"BEFORE";"1100";"IF n_Object_Type is null THEN n_Object_Type := ecdp_objects.GetObjClassName(n_Object_ID); END IF; ";"EC_PROD";
"EQPM_OFF_CHILD";"INSERTING OR UPDATING";"AFTER";"900";"EcDp_Well_Eqpm_Deferment.updateReasonCodeForChildEvent(n_parent_event_no,  nvl(n_last_updated_by, n_created_by),  nvl(n_last_updated_date, n_created_date));";"EC_PROD";
"EQPM_OFF_CHILD";"INSERTING OR UPDATING";"AFTER";"1000";"IF n_END_DATE > ec_well_equip_downtime.end_date(n_parent_event_no) THEN Raise_Application_Error('-20629', 'End Date must be equal to or less than End Date of the parent records.');  END IF;";"EC_PROD";
"EQPM_OFF_CHILD";"INSERTING OR UPDATING";"BEFORE";"600";"EcBp_Well_Eqpm_Deferment.checkIfEventOverlaps(n_OBJECT_ID, n_DAYTIME, n_END_DATE, n_DOWNTIME_CATEG, n_EVENT_NO);";"EC_PROD";
"EQPM_OFF_CHILD";"INSERTING OR UPDATING";"BEFORE";"700";"EcBp_Well_Eqpm_Deferment.checkValidChildPeriod(n_PARENT_EVENT_NO, n_DAYTIME );";"EC_PROD";
"EQUIPMENT_OTHER";"UPDATING";"AFTER";"3000";"ecdp_equipment_event.updateEventStatus(n_OBJECT_ID, n_DAYTIME, 'EQUIPMENT_OTHER');";"EC_PROD";
"EXCHANGE_RATE";"INSERTING";"BEFORE";"60";"IF ec_prosty_codes.alt_code(n_time_scope, 'FX_TYPE') = 'MONTHLY' THEN n_daytime := trunc(n_daytime, 'MONTH'); END IF;";"EC_SALE";
"EXCHANGE_RATE";"INSERTING OR UPDATING";"AFTER";"80";"EcBp_Currency.validateInsert(n_DAYTIME,n_OBJECT_ID,n_TO_CURRENCY_ID, n_time_scope, n_FOREX_SOURCE_ID);";"EC_SALE";
"EXCHANGE_RATE";"INSERTING OR UPDATING";"BEFORE";"70";"EcBp_Currency.validateMonthlyRate(n_DAYTIME, n_time_scope);";"EC_SALE";
"FCST_CARGO_INFO";"UPDATING";"AFTER";"100";"EcBp_Cargo_Fcst_Transport.copyBwdNominatedCarrier(n_CARGO_NO,n_CARRIER_ID, n_FORECAST_ID, n_LAST_UPDATED_BY);";"EC_TRAN";
"FCST_CARGO_INFO";"UPDATING";"BEFORE";"200";"IF UPDATING('CARRIER_ID') AND n_laytime IS NULL and n_carrier_id IS NOT NULL THEN n_laytime := EcBp_Cargo_Fcst_Transport.getCarrierLaytime(n_CARRIER_ID, n_CARGO_NO,n_FORECAST_ID); END IF;";"EC_TRAN";
"FCST_CNTR_ANALYSIS";"DELETING";"BEFORE";"200";"ecdp_forecast.deleteComp(o_analysis_no);";"EC_TRAN";
"FCST_CNTR_ANALYSIS";"INSERTING";"AFTER";"100";"ecdp_forecast.generateComp(n_object_id, n_daytime, n_forecast_id, n_series);";"EC_TRAN";
"FCST_CNTR_DP_ANALYSIS";"DELETING";"BEFORE";"200";"ecdp_forecast.deleteComp(o_analysis_no);";"EC_TRAN";
"FCST_CNTR_DP_ANALYSIS";"INSERTING";"AFTER";"100";"ecdp_forecast.generateComp(n_object_id, n_daytime, n_forecast_id, n_series);";"EC_TRAN";
"FCST_CNTR_PRICE_LIST";"INSERTING";"AFTER";"20";"EcDp_Forecast_Price.InsNewPriceElementSet(n_FORECAST_ID, n_OBJECT_ID ,n_PRICE_CONCEPT_CODE, n_PRICE_ELEMENT_CODE, n_DAYTIME);";"EC_SALE";
"FCST_CNTR_PRICE_LIST";"INSERTING";"BEFORE";"10";"n_price_element_code := ecdp_sales_contract_price.GetAnyPriceElement(n_price_concept_code,n_object_id,n_daytime);";"EC_SALE";
"FCST_DP_ANALYSIS";"DELETING";"BEFORE";"200";"ecdp_forecast.deleteComp(n_analysis_no);";"EC_TRAN";
"FCST_DP_ANALYSIS";"INSERTING";"AFTER";"100";"ecdp_forecast.generateComp(n_object_id, n_daytime, n_forecast_id, n_series);";"EC_TRAN";
"FCST_GPURCH_MEMBER";"DELETING";"BEFORE";"1200";"delete from fcst_yr_status where object_id=n_OBJECT_ID and member_no=n_MEMBER_NO; delete from fcst_mth_status where object_id=n_OBJECT_ID and member_no=n_MEMBER_NO; ";"EC_REVN";
"FCST_GPURCH_MEMBER";"INSERTING";"BEFORE";"1100";"EcDp_System_Key.assignNextNumber('FCST_MEMBER', n_member_no);";"EC_REVN";
"FCST_GSALES_MEMBER";"DELETING";"BEFORE";"2000";"delete from fcst_yr_status where object_id=n_OBJECT_ID and member_no=n_MEMBER_NO; delete from fcst_mth_status where object_id=n_OBJECT_ID and member_no=n_MEMBER_NO; ";"EC_REVN";
"FCST_GSALES_MEMBER";"INSERTING";"BEFORE";"1700";"EcDp_Revn_Forecast.validateFcstMember(n_object_id,  n_product_id,  n_stream_item_id, :OLD.stream_item_id, n_product_collection_type, 'INSERT'); EcDp_System_Key.assignNextNumber('FCST_MEMBER', n_member_no);";"EC_REVN";
"FCST_GSALES_MEMBER";"INSERTING OR UPDATING";"AFTER";"1900";"update fcst_member set field_id = ec_stream_item_version.field_id(n_STREAM_ITEM_ID,ec_forecast_version.plan_date(n_OBJECT_ID, ec_forecast.start_date(n_OBJECT_ID), '<='),'<=') where stream_item_id = n_STREAM_ITEM_ID;";"EC_REVN";
"FCST_GSALES_MEMBER";"UPDATING";"BEFORE";"1800";"EcDp_Revn_Forecast.validateFcstMember(n_object_id,  n_product_id,  n_stream_item_id, :OLD.stream_item_id, n_product_collection_type, 'UPDATE');";"EC_REVN";
"FCST_LFT_ACC_SUB_DAY_DEL";"INSERTING OR UPDATING";"AFTER";"100";"IF NVL(:OLD.FORECAST_QTY,-1) != NVL(n_FORECAST_QTY,-1) THEN EcDp_Lift_Acc_Forecast.aggregateFcstSubDay(n_forecast_id, n_object_id, nvl(n_production_day, EcDp_ProductionDay.getProductionDay('STORAGE', ec_lifting_account.storage_id(n_object_id), n_daytime, n_summer_time)) ); END IF;";"EC_TRAN";
"FCST_LFT_ACC_SUB_DAY_DEL";"INSERTING OR UPDATING";"AFTER";"200";"IF NVL(:OLD.FORECAST_QTY2,-1) != NVL(n_FORECAST_QTY2,-1) THEN EcDp_Lift_Acc_Forecast.aggregateFcstSubDay(n_forecast_id, n_object_id, nvl(n_production_day, EcDp_ProductionDay.getProductionDay('STORAGE', ec_lifting_account.storage_id(n_object_id), n_daytime, n_summer_time)), 1 ); END IF;";"EC_TRAN";
"FCST_LFT_ACC_SUB_DAY_DEL";"INSERTING OR UPDATING";"AFTER";"300";"IF NVL(:OLD.FORECAST_QTY3,-1) != NVL(n_FORECAST_QTY3,-1) THEN EcDp_Lift_Acc_Forecast.aggregateFcstSubDay(n_forecast_id, n_object_id, nvl(n_production_day, EcDp_ProductionDay.getProductionDay('STORAGE', ec_lifting_account.storage_id(n_object_id), n_daytime, n_summer_time)), 2 ); END IF;";"EC_TRAN";
"FCST_LIFT_ACC_ADJ";"INSERTING OR UPDATING";"AFTER";"100";"EcDp_Lift_Acc_Forecast.populateSubDailyValueAdj(n_object_id, n_daytime, n_forecast_id);";"EC_TRAN";
"FCST_LIFT_ACC_ADJ_SINGLE";"INSERTING OR UPDATING";"AFTER";"100";"EcDp_Lift_Acc_Forecast.populateSubDailyValueSinAdj(n_object_id, n_daytime, n_forecast_id);";"EC_TRAN";
"FCST_LIQUID_MEMBER";"DELETING";"BEFORE";"1900";"delete from fcst_yr_status where object_id=n_OBJECT_ID and member_no=n_MEMBER_NO; delete from fcst_mth_status where object_id=n_OBJECT_ID and member_no=n_MEMBER_NO; ";"EC_REVN";
"FCST_LIQUID_MEMBER";"INSERTING";"BEFORE";"1600";"EcDp_Revn_Forecast.validateFcstMember(n_object_id,  n_product_id,  n_stream_item_id, :OLD.stream_item_id, n_product_collection_type, 'INSERT'); EcDp_System_Key.assignNextNumber('FCST_MEMBER', n_member_no);";"EC_REVN";
"FCST_LIQUID_MEMBER";"INSERTING OR UPDATING";"AFTER";"1800";"update fcst_member set field_id = ec_stream_item_version.field_id(n_STREAM_ITEM_ID,ec_forecast_version.plan_date(n_OBJECT_ID, ec_forecast.start_date(n_OBJECT_ID), '<='),'<=') where stream_item_id = n_STREAM_ITEM_ID;";"EC_REVN";
"FCST_LIQUID_MEMBER";"UPDATING";"BEFORE";"1700";"EcDp_Revn_Forecast.validateFcstMember(n_object_id,  n_product_id,  n_stream_item_id, :OLD.stream_item_id, n_product_collection_type, 'UPDATE');";"EC_REVN";
"FCST_NOMPNT_ANALYSIS";"DELETING";"BEFORE";"200";"ecdp_forecast.deleteComp(o_analysis_no);";"EC_TRAN";
"FCST_NOMPNT_ANALYSIS";"INSERTING";"AFTER";"100";"ecdp_forecast.generateComp(n_object_id, n_daytime, n_forecast_id, n_series);";"EC_TRAN";
"FCST_OPRES_DAY_RESTRICT";"INSERTING OR UPDATING";"BEFORE";"100";"IF n_daytime >= EC_FORECAST.END_DATE(n_forecast_id) OR n_daytime < EC_FORECAST.START_DATE(n_forecast_id) THEN RAISE_APPLICATION_ERROR(-20559,'Outside forecast range!'); END IF;";"EC_TRAN";
"FCST_OPRES_PERIOD_RESTR";"INSERTING OR UPDATING";"AFTER";"200";"Ecdp_Capacity_Restriction.updateDailyRestrictionFcst(n_OBJECT_ID, n_forecast_id, o_DAYTIME, n_DAYTIME, :OLD.END_DATE, n_END_DATE);";"EC_TRAN";
"FCST_OPRES_PERIOD_RESTR";"INSERTING OR UPDATING";"BEFORE";"100";"Ecdp_Capacity_Restriction.validateOverlappingPeriodFcst(n_OBJECT_ID, n_forecast_id, o_DAYTIME, n_DAYTIME, :OLD.END_DATE, n_END_DATE);";"EC_TRAN";
"FCST_OPRES_PERIOD_RESTR";"INSERTING OR UPDATING";"BEFORE";"300";"IF n_daytime > EC_FORECAST.END_DATE(n_forecast_id) OR n_END_DATE < EC_FORECAST.START_DATE(n_forecast_id) THEN RAISE_APPLICATION_ERROR(-20559,'Outside forecast range!'); END IF;";"EC_TRAN";
"FCST_QTY_MEMBER";"DELETING";"BEFORE";"1400";"delete from fcst_mth_status where object_id=n_OBJECT_ID and member_no=n_MEMBER_NO;";"EC_REVN";
"FCST_QTY_MEMBER";"DELETING";"BEFORE";"1500";"delete from fcst_yr_status where object_id=n_OBJECT_ID and member_no=n_MEMBER_NO;";"EC_REVN";
"FCST_QTY_MEMBER";"INSERTING";"BEFORE";"1100";"EcDp_System_Key.assignNextNumber('FCST_MEMBER', n_member_no);";"EC_REVN";
"FCST_QTY_MEMBER";"INSERTING";"BEFORE";"1200";"EcDp_Stream_Item.checkForecastCaseStim(n_OBJECT_ID, n_PRODUCT_ID, n_STREAM_ITEM_ID, n_PRODUCT_CONTEXT);";"EC_REVN";
"FCST_QTY_MEMBER";"INSERTING OR UPDATING";"AFTER";"1300";"update fcst_member set field_id = ec_stream_item_version.field_id(n_STREAM_ITEM_ID,ec_forecast_version.plan_date(n_OBJECT_ID, ec_forecast.start_date(n_OBJECT_ID), '<='),'<=') where stream_item_id = n_STREAM_ITEM_ID;";"EC_REVN";
"FCST_QTY_PRODUCT_SETUP";"INSERTING OR UPDATING";"BEFORE";"1900";"EcDp_Stream_Item.checkForecastCaseAdjStim(n_OBJECT_ID, n_PRODUCT_ID, n_PRODUCT_CONTEXT, n_CPY_ADJ_STREAM_ITEM_ID);";"EC_REVN";
"FCST_QTY_PRODUCT_SETUP";"INSERTING OR UPDATING";"BEFORE";"2000";"EcDp_Stream_Item.checkForecastCaseAdjStim(n_OBJECT_ID, n_PRODUCT_ID, n_PRODUCT_CONTEXT, n_FULL_ADJ_STREAM_ITEM_ID);";"EC_REVN";
"FCST_QTY_PRODUCT_SETUP";"INSERTING OR UPDATING";"BEFORE";"2100";"EcDp_Stream_Item.checkUniqueQtyFcstCase(n_OBJECT_ID, n_PRODUCT_ID, n_PRODUCT_CONTEXT, n_SORT_ORDER);";"EC_REVN";
"FCST_REVN_PRODUCT_SETUP";"DELETING";"BEFORE";"2100";"EcDp_Revn_Forecast.delCascadeFcstMember(o_object_id, o_product_id, o_product_collection_type);";"EC_REVN";
"FCST_REVN_PRODUCT_SETUP";"INSERTING";"AFTER";"2000";"EcDp_Revn_Forecast.populateFcstMember(n_object_id, n_product_id, n_product_collection_type, n_commercial_adj_type, n_swap_adj_type);";"EC_REVN";
"FCST_REVN_PRODUCT_SETUP";"UPDATING";"AFTER";"2200";"EcDp_Revn_Forecast.updateFcstProductSetup(n_object_id, n_product_collection_type, n_product_id, n_commercial_adj_type, n_swap_adj_type, :OLD.product_id, :OLD.commercial_adj_type, :OLD.swap_adj_type);";"EC_REVN";
"FCST_SCTR_ACC_MTH_CPY_ST";"INSERTING";"BEFORE";"100";"n_time_span := 'MTH';";"EC_SALE";
"FCST_SCTR_ACC_MTH_STATUS";"INSERTING";"AFTER";"100";"EcBp_Replicate_Sale_Qty.insertSalesQty(n_object_id, n_account_code, NULL, n_time_span, n_daytime, n_vol_qty, n_mass_qty, n_energy_qty, n_created_by);";"EC_SALE";
"FCST_SCTR_ACC_MTH_STATUS";"INSERTING";"BEFORE";"100";"n_time_span := 'MTH';";"EC_SALE";
"FCST_SCTR_ACC_MTH_STATUS";"UPDATING";"AFTER";"100";"EcBp_Replicate_Sale_Qty.insertSalesQty(n_object_id, n_account_code, NULL, n_time_span, n_daytime, n_vol_qty, n_mass_qty, n_energy_qty, n_created_by);";"EC_SALE";
"FCST_SCTR_MTH_EXPEND";"INSERTING";"BEFORE";"100";"n_COMPANY_ID := ec_cntr_expenditure_code.company_id (n_OBJECT_ID, n_CATEGORY_CODE, n_EXP_CODE, n_DAYTIME, '<=');";"EC_SALE";
"FCST_SLNL_PRD_DEL_EVT";"INSERTING";"AFTER";"100";"ue_nomination.createCntrEventPrLocationFcst(n_object_id, n_forecast_id, n_daytime, n_event_type, n_event_seq);";"EC_SALE";
"FCST_SLNP_PRD_DEL_EVT_NL";"DELETING";"BEFORE";"100";"delete FCST_NOMPNT_SUB_DAY_EVENT where DAY_EVENT_SEQ = n_event_seq and forecast_id = n_forecast_id;";"EC_SALE";
"FCST_STOR_DAY_PC_FCAST";"INSERTING";"AFTER";"100";"EcDp_Stor_Fcst_Forecast.aggrForecast(n_object_id, n_forecast_id, n_daytime); EcDp_Stor_Fcst_Forecast.aiuStorPcForecast(n_object_id, n_forecast_id, n_profit_centre_id, n_daytime, NULL, n_forecast_qty, n_created_by);";"EC_TRAN";
"FCST_STOR_DAY_PC_FCAST";"UPDATING";"AFTER";"100";"EcDp_Stor_Fcst_Forecast.aggrForecast(n_object_id, n_forecast_id, n_daytime); EcDp_Stor_Fcst_Forecast.aiuStorPcForecast(n_object_id, n_forecast_id, n_profit_centre_id, n_daytime, :old.forecast_qty, n_forecast_qty, n_last_updated_by);";"EC_TRAN";
"FCST_STOR_LIFT_NOM";"DELETING";"AFTER";"100";"EcBp_Cargo_Fcst_Transport.cleanLonesomeCargoes(n_forecast_id);";"EC_TRAN";
"FCST_STOR_LIFT_NOM";"INSERTING";"AFTER";"200";"ecbp_stor_fcst_lift_nom.aiStorageLiftNomination(n_parcel_no,n_forecast_id, n_nom_date, n_NOM_DATE_RANGE, n_REQ_DATE, n_REQ_DATE_RANGE, n_REQ_GRS_VOL, n_REQ_TOLERANCE_TYPE, n_nom_grs_vol);";"EC_TRAN";
"FCST_STOR_LIFT_NOM";"INSERTING";"BEFORE";"1100";"IF n_start_lifting_date IS NULL THEN n_start_lifting_date := nvl(n_nom_date, n_req_date); END IF;";"EC_TRAN";
"FCST_STOR_LIFT_NOM";"INSERTING OR UPDATING";"AFTER";"150";"EcBP_Stor_Fcst_Lift_Nom.aiStorageLiftNomination2(n_forecast_id, n_parcel_no, n_REQ_GRS_VOL2, n_nom_grs_vol2, nvl(n_last_updated_by, n_created_by));";"EC_TRAN";
"FCST_STOR_LIFT_NOM";"INSERTING OR UPDATING";"AFTER";"160";"EcBP_Stor_Fcst_Lift_Nom.aiStorageLiftNomination3(n_forecast_id, n_parcel_no, n_REQ_GRS_VOL3, n_nom_grs_vol3, nvl(n_last_updated_by, n_created_by));";"EC_TRAN";
"FCST_STOR_LIFT_NOM";"INSERTING OR UPDATING";"AFTER";"900";"ue_Stor_Fcst_Lift_Nom.setBalanceDelta(n_forecast_id, n_parcel_no);";"EC_TRAN";
"FCST_STOR_LIFT_NOM";"INSERTING OR UPDATING";"BEFORE";"400";"IF ((nvl(n_NOM_DATE, n_req_date) >= EC_FORECAST.END_DATE(n_forecast_id)) OR (nvl(n_NOM_DATE, n_req_date) < EC_FORECAST.START_DATE(n_forecast_id))) THEN RAISE_APPLICATION_ERROR(-20559,'Outside forecast range!'); END IF;";"EC_TRAN";
"FCST_STOR_LIFT_NOM";"INSERTING OR UPDATING";"BEFORE";"500";"if n_COOLDOWN_IND = 'Y' AND n_COOLDOWN_QTY IS NULL then n_COOLDOWN_QTY := Ec_Carrier_Version.cooldown_qty(n_carrier_id, NVL(n_nom_date, n_req_date), '<='); end if;";"EC_TRAN";
"FCST_STOR_LIFT_NOM";"INSERTING OR UPDATING";"BEFORE";"600";"if n_COOLDOWN_IND = 'N' AND n_COOLDOWN_QTY IS NOT NULL then n_COOLDOWN_QTY := NULL; end if;";"EC_TRAN";
"FCST_STOR_LIFT_NOM";"INSERTING OR UPDATING";"BEFORE";"700";"if n_PURGE_IND = 'Y' AND n_PURGE_QTY IS NULL then n_PURGE_QTY := Ec_Carrier_Version.purge_qty(n_carrier_id, NVL(n_nom_date, n_req_date), '<='); end if;";"EC_TRAN";
"FCST_STOR_LIFT_NOM";"INSERTING OR UPDATING";"BEFORE";"800";"if n_PURGE_IND = 'N' AND n_PURGE_QTY IS NOT NULL then n_PURGE_QTY := NULL; end if;";"EC_TRAN";
"FCST_STOR_LIFT_NOM";"INSERTING OR UPDATING OR DELETING";"AFTER";"1000";"ue_stor_fcst_lift_nom.calcSubDayLifting(n_forecast_id, n_parcel_no);";"EC_TRAN";
"FCST_STOR_LIFT_NOM_ALLOC";"INSERTING";"AFTER";"200";"EcBP_Stor_Fcst_Lift_Nom.insertFromLiftProg(n_parcel_no, n_FORECAST_ID, n_nom_qty, n_daytime);";"EC_TRAN";
"FCST_STOR_LIFT_NOM_ALLOC";"INSERTING";"BEFORE";"100";"EcDp_System_Key.assignNextNumber('STORAGE_LIFT_NOMINATION', n_PARCEL_NO);";"EC_TRAN";
"FCST_STOR_LIFT_NOM_ALLOC";"INSERTING OR UPDATING OR DELETING";"AFTER";"300";"ue_stor_fcst_lift_nom.calcSubDayLifting(n_forecast_id, n_parcel_no);";"EC_TRAN";
"FCST_STOR_LIFT_NOM_INFO";"INSERTING OR UPDATING";"AFTER";"300";"ue_Stor_Fcst_Lift_Nom.setBalanceDelta(n_forecast_id, n_parcel_no);";"EC_TRAN";
"FCST_STOR_LIFT_NOM_INFO";"INSERTING OR UPDATING";"BEFORE";"110";"IF ((n_NOM_DATE >= EC_FORECAST.END_DATE(n_forecast_id)) OR (n_NOM_DATE < EC_FORECAST.START_DATE(n_forecast_id))) THEN RAISE_APPLICATION_ERROR(-20559,'Outside forecast range!'); END IF;";"EC_TRAN";
"FCST_STOR_LIFT_NOM_INFO";"INSERTING OR UPDATING OR DELETING";"AFTER";"400";"ue_stor_fcst_lift_nom.calcSubDayLifting(n_forecast_id, n_parcel_no);";"EC_TRAN";
"FCST_STOR_LIFT_NOM_INFO";"UPDATING";"AFTER";"100";"EcBp_stor_fcst_lift_nom.validateLiftingIndicator(n_forecast_id,:OLD.LIFTING_CODE,n_LIFTING_CODE) ;";"EC_TRAN";
"FCST_STOR_LIFT_NOM_LA";"INSERTING";"BEFORE";"500";"IF n_start_lifting_date IS NULL THEN n_start_lifting_date := n_nom_date; END IF;";"EC_TRAN";
"FCST_STOR_LIFT_NOM_LA";"INSERTING OR UPDATING";"AFTER";"300";"ue_Stor_Fcst_Lift_Nom.setBalanceDelta(n_forecast_id, n_parcel_no);";"EC_TRAN";
"FCST_STOR_LIFT_NOM_LA";"INSERTING OR UPDATING";"BEFORE";"200";"IF ((n_NOM_DATE >= EC_FORECAST.END_DATE(n_forecast_id)) OR (n_NOM_DATE < EC_FORECAST.START_DATE(n_forecast_id))) THEN RAISE_APPLICATION_ERROR(-20559,'Outside forecast range!'); END IF;";"EC_TRAN";
"FCST_STOR_LIFT_NOM_LA";"INSERTING OR UPDATING OR DELETING";"AFTER";"400";"ue_stor_fcst_lift_nom.calcSubDayLifting(n_forecast_id, n_parcel_no);";"EC_TRAN";
"FCST_STOR_LIFT_NOM_SCHED";"INSERTING";"BEFORE";"500";"IF n_start_lifting_date IS NULL THEN n_start_lifting_date := n_nom_date; END IF;";"EC_TRAN";
"FCST_STOR_LIFT_NOM_SCHED";"INSERTING OR UPDATING";"AFTER";"300";"ue_Stor_Fcst_Lift_Nom.setBalanceDelta(n_forecast_id, n_parcel_no);";"EC_TRAN";
"FCST_STOR_LIFT_NOM_SCHED";"INSERTING OR UPDATING";"BEFORE";"200";"IF ((n_NOM_DATE >= EC_FORECAST.END_DATE(n_forecast_id)) OR (n_NOM_DATE < EC_FORECAST.START_DATE(n_forecast_id))) THEN RAISE_APPLICATION_ERROR(-20559,'Outside forecast range!'); END IF;";"EC_TRAN";
"FCST_STOR_LIFT_NOM_SCHED";"INSERTING OR UPDATING OR DELETING";"AFTER";"400";"ue_stor_fcst_lift_nom.calcSubDayLifting(n_forecast_id, n_parcel_no);";"EC_TRAN";
"FCST_STREAM_ITEM_SETUP";"INSERTING OR UPDATING";"AFTER";"1000";"IF (:NEW.calc_method='SK' OR :NEW.calc_method='FO') AND (INSERTING OR UPDATING ('STREAM_ITEM_FORMULA') OR UPDATING ('OBJECT_START_DATE') OR UPDATING ('OBJECT_END_DATE') OR UPDATING ('DAYTIME') OR UPDATING ('CALC_METHOD')) THEN EcDp_Stream_Item.populateFcstSIFormula(:NEW.object_id,:NEW.forecast_id,n_daytime,nvl(n_last_updated_by,n_created_by)); END IF;";"EC_REVN";
"FCST_TRAIN_INLET_GAS";"DELETING";"BEFORE";"300";"ue_train_storage_yield.deleteFcstChildStorage(n_OBJECT_ID,n_FORECAST_ID,n_DAYTIME);";"EC_TRAN";
"FCST_TRAIN_INLET_GAS";"INSERTING";"AFTER";"200";"ue_train_storage_yield.insertFcstStorageYieldFactor(n_OBJECT_ID,n_FORECAST_ID,n_DAYTIME);";"EC_TRAN";
"FCST_TRAIN_INLET_GAS";"INSERTING OR UPDATING";"BEFORE";"100";"ue_train_storage_yield.validateOverlappingFcstPeriod(n_OBJECT_ID,n_FORECAST_ID,n_DAYTIME,n_END_DATE);";"EC_TRAN";
"FCTY_ANALYSIS_ITEM";"INSERTING";"BEFORE";"2000";"EcBp_Facility_Analysis.checkIfPeriodOverlaps(n_ASSET_ID, n_DAYTIME, n_END_DATE, n_FCTY_OBJECT_ID, n_ANALYSIS_ITEM);";"EC_PROD";
"FCTY_ASSET_ANALYSIS";"DELETING";"BEFORE";"2600";"EcBp_Facility_Analysis.checkDelete(o_FCTY_OBJECT_ID, o_DAYTIME, o_ASSET_ID, o_ANALYSIS_ITEM);";"EC_PROD";
"FCTY_ASSET_ANALYSIS";"INSERTING";"BEFORE";"2500";"EcBp_Facility_Analysis.checkManualDaytime(n_SAMPLE_DAYTIME);";"EC_PROD";
"FCTY_EXT_LOCATION_CONN";"INSERTING";"BEFORE";"600";"EcBp_External_Location.checkIfPeriodOverlaps(n_OBJECT_ID, n_DAYTIME, n_END_DATE, n_FCTY_OBJECT_ID);";"EC_PROD";
"FCTY_PLAN_BUDGET";"INSERTING";"BEFORE";"100";"n_CLASS_NAME:='FCTY_PLAN_BUDGET';";"EC_PROD";
"FCTY_PLAN_OTHER";"INSERTING";"BEFORE";"100";"n_CLASS_NAME:='FCTY_PLAN_OTHER';";"EC_PROD";
"FCTY_PLAN_POTENTIAL";"INSERTING";"BEFORE";"100";"n_CLASS_NAME:='FCTY_PLAN_POTENTIAL';";"EC_PROD";
"FCTY_PLAN_TARGET";"INSERTING";"BEFORE";"100";"n_CLASS_NAME:='FCTY_PLAN_TARGET';";"EC_PROD";
"FIELD_PLAN_BUDGET";"INSERTING";"BEFORE";"100";"n_CLASS_NAME:='FIELD_PLAN_BUDGET';";"EC_PROD";
"FIELD_PLAN_OTHER";"INSERTING";"BEFORE";"100";"n_CLASS_NAME:='FIELD_PLAN_OTHER';";"EC_PROD";
"FIELD_PLAN_POTENTIAL";"INSERTING";"BEFORE";"100";"n_CLASS_NAME:='FIELD_PLAN_POTENTIAL';";"EC_PROD";
"FIELD_PLAN_TARGET";"INSERTING";"BEFORE";"100";"n_CLASS_NAME:='FIELD_PLAN_TARGET';";"EC_PROD";
"FIN_CARGO_DOC_SIMPLE";"UPDATING";"AFTER";"10";"IF :OLD.CONTRACT_DOC_ID IS NOT NULL AND n_CONTRACT_DOC_ID != :OLD.CONTRACT_DOC_ID AND NVL(n_USER_ACTION_CODE,'X') != 'DELETE_RECREATE' THEN RAISE_APPLICATION_ERROR(-20000, 'User Action must be ""Delete (and recreate)"" when changing Document Setup'); END IF;";"EC_REVN";
"FIN_CARGO_DOC_SIMPLE";"UPDATING";"AFTER";"20";"IF n_CONTRACT_DOC_ID != :OLD.CONTRACT_DOC_ID AND ec_contract_doc_version.doc_concept_code(n_CONTRACT_DOC_ID, n_daytime, '<=') LIKE 'DEPENDENT%'  AND n_PREC_DOC_KEY IS NULL THEN RAISE_APPLICATION_ERROR(-20000, 'When changing to a Dependent type Document Setup you must select a preceding document as well.'); END IF;";"EC_REVN";
"FIN_CARGO_DOC_SIMPLE";"UPDATING";"AFTER";"30";"IF (NVL(n_PREC_DOC_KEY,'X') != NVL(:OLD.PREC_DOC_KEY,'X')) AND (NVL(n_USER_ACTION_CODE,'X') != 'DELETE_RECREATE' OR ec_contract_doc_version.doc_concept_code(n_CONTRACT_DOC_ID, n_daytime, '<=') NOT LIKE 'DEPENDENT%') THEN RAISE_APPLICATION_ERROR(-20000, 'When changing or setting Preceding Document you will have to set User Action to ""Delete (and recreate)"" and use a Dependent type Document Setup.'); END IF;";"EC_REVN";
"FIN_CARGO_DOC_SIMPLE";"UPDATING";"AFTER";"40";"IF UPDATING ('DOCUMENT_DATE') THEN EcDp_Contract_Setup.UpdateAllDocumentDates(n_object_id,n_document_key,n_daytime,n_document_date,n_last_updated_by,5); END IF;";"EC_REVN";
"FIN_CARGO_DOC_SIMPLE";"UPDATING";"AFTER";"50";"ecdp_document_gen.ExecuteUserAction(n_document_key, n_user_action_code);";"EC_REVN";
"FIN_CARGO_DOC_TRANS";"INSERTING";"BEFORE";"560";"IF  ecdp_document.isDocumentEditable(n_DOCUMENT_KEY) = 'N' THEN RAISE_APPLICATION_ERROR(-20603,'Cannot add transactions to a booked document'); END IF;";"EC_REVN";
"FIN_CARGO_DOC_TRANS";"UPDATING";"AFTER";"100";"IF Updating('NET_QTY1') OR Updating('NET_QTY2') OR Updating('NET_QTY3') OR Updating('NET_QTY4') THEN UPDATE cont_transaction_qty ctq SET ctq.NET_QTY1 = :NEW.NET_QTY1, ctq.NET_QTY2 = :NEW.NET_QTY2, ctq.NET_QTY3 = :NEW.NET_QTY3, ctq.NET_QTY4 = :NEW.NET_QTY4 WHERE ctq.transaction_key = n_TRANSACTION_KEY; END IF;";"EC_REVN";
"FIN_CARGO_DOC_TRANS";"UPDATING";"AFTER";"200";"EcDp_Transaction.AggregateLineItemValues(n_transaction_key);";"EC_REVN";
"FIN_CARGO_DOC_TRANS";"UPDATING";"AFTER";"300";"IF NVL(:New.QTY_PRICING_VALUE,0) <> NVL(:Old.QTY_PRICING_VALUE,0) OR NVL(:New.NET_QTY1,0) <> NVL(:Old.NET_QTY1,0) THEN EcDp_Transaction.UpdateManualPriceValue(n_TRANSACTION_KEY, n_DAYTIME, :New.QTY_PRICING_VALUE); END IF;";"EC_REVN";
"FIN_CARGO_DOC_TRANS";"UPDATING";"AFTER";"400";"IF UPDATING('PRICE_OBJECT_ID') OR UPDATING('DELIVERY_POINT_ID') THEN EcDp_Transaction.UpdPriceObject(n_TRANSACTION_KEY,n_last_updated_by); END IF;";"EC_REVN";
"FIN_CARGO_DOC_TRANS";"UPDATING";"AFTER";"500";"IF UPDATING('PRECEDING_TRANS_KEY') OR NVL(n_PRECEDING_TRANS_KEY, '$NULL$') <> NVL(:OLD.PRECEDING_TRANS_KEY, '$NULL$') THEN EcDp_Transaction.UpdFromPrecedingTrans(n_PRECEDING_TRANS_KEY, n_TRANSACTION_KEY, n_last_updated_by); END IF;";"EC_REVN";
"FIN_CARGO_DOC_TRANS";"UPDATING";"BEFORE";"110";"IF NOT UPDATING('COUNTRY_ID') AND (UPDATING('DELIVERY_POINT_ID') OR UPDATING('LOADING_PORT_ID')) THEN n_ORIGIN_COUNTRY_ID := EcDp_Transaction.GetOriginCountryForTrans(n_object_id, n_transaction_key, n_transaction_scope, null, n_loading_port_id, nvl(n_transaction_date, n_daytime)); END IF;";"EC_REVN";
"FIN_CARGO_DOC_TRANS";"UPDATING";"BEFORE";"120";"IF NOT UPDATING('COUNTRY_ID') AND (UPDATING('DELIVERY_POINT_ID') OR UPDATING('DISCHARGE_PORT_ID')) THEN n_COUNTRY_ID := EcDp_Transaction.GetDestinationCountryForTrans(n_object_id, n_transaction_key, n_transaction_scope, null, n_discharge_port_id, nvl(n_transaction_date, n_daytime)); END IF;";"EC_REVN";
"FIN_CARGO_DOCUMENTS";"INSERTING";"BEFORE";"60";"IF  ecdp_document.isDocumentEditable(n_DOCUMENT_KEY) = 'N' THEN RAISE_APPLICATION_ERROR(-20603,'Cannot add transactions to a booked document'); END IF;";"EC_REVN";
"FIN_CARGO_DOCUMENTS";"UPDATING";"AFTER";"10";"IF :OLD.CONTRACT_DOC_ID IS NOT NULL AND n_CONTRACT_DOC_ID != :OLD.CONTRACT_DOC_ID AND NVL(n_USER_ACTION_CODE,'X') != 'DELETE_RECREATE' THEN RAISE_APPLICATION_ERROR(-20000, 'User Action must be ""Delete (and recreate)"" when changing Document Setup'); END IF;";"EC_REVN";
"FIN_CARGO_DOCUMENTS";"UPDATING";"AFTER";"20";"IF n_CONTRACT_DOC_ID != :OLD.CONTRACT_DOC_ID AND ec_contract_doc_version.doc_concept_code(n_CONTRACT_DOC_ID, n_daytime, '<=') LIKE 'DEPENDENT%'  AND n_PREC_DOC_KEY IS NULL THEN RAISE_APPLICATION_ERROR(-20000, 'When changing to a Dependent type Document Setup you must select a preceding document as well.'); END IF;";"EC_REVN";
"FIN_CARGO_DOCUMENTS";"UPDATING";"AFTER";"30";"IF (NVL(n_PREC_DOC_KEY,'X') != NVL(:OLD.PREC_DOC_KEY,'X')) AND (NVL(n_USER_ACTION_CODE,'X') != 'DELETE_RECREATE' OR ec_contract_doc_version.doc_concept_code(n_CONTRACT_DOC_ID, n_daytime, '<=') NOT LIKE 'DEPENDENT%') THEN RAISE_APPLICATION_ERROR(-20000, 'When changing or setting Preceding Document you will have to set User Action to ""Delete (and recreate)"" and use a Dependent type Document Setup.'); END IF;";"EC_REVN";
"FIN_CARGO_DOCUMENTS";"UPDATING";"AFTER";"40";"IF UPDATING ('DOCUMENT_DATE') THEN EcDp_Contract_Setup.UpdateAllDocumentDates(n_object_id,n_document_key,n_daytime,n_document_date,n_last_updated_by,5); END IF;";"EC_REVN";
"FIN_CARGO_DOCUMENTS";"UPDATING";"AFTER";"50";"ecdp_document_gen.ExecuteUserAction(n_document_key, n_user_action_code);";"EC_REVN";
"FIN_CARGO_TRANS_SIMPLE";"UPDATING";"AFTER";"100";"IF Updating('NET_QTY1') OR Updating('NET_QTY2') OR Updating('NET_QTY3') OR Updating('NET_QTY4') THEN UPDATE cont_transaction_qty ctq SET ctq.NET_QTY1 = :NEW.NET_QTY1, ctq.NET_QTY2 = :NEW.NET_QTY2, ctq.NET_QTY3 = :NEW.NET_QTY3, ctq.NET_QTY4 = :NEW.NET_QTY4 WHERE ctq.transaction_key = n_TRANSACTION_KEY; END IF;";"EC_REVN";
"FIN_CARGO_TRANS_SIMPLE";"UPDATING";"AFTER";"200";"EcDp_Transaction.AggregateLineItemValues(n_transaction_key);";"EC_REVN";
"FIN_CARGO_TRANS_SIMPLE";"UPDATING";"AFTER";"300";"IF NVL(:New.QTY_PRICING_VALUE,0) <> NVL(:Old.QTY_PRICING_VALUE,0) OR NVL(:New.NET_QTY1,0) <> NVL(:Old.NET_QTY1,0) THEN EcDp_Transaction.UpdateManualPriceValue(n_TRANSACTION_KEY, n_DAYTIME, :New.QTY_PRICING_VALUE); END IF;";"EC_REVN";
"FIN_CARGO_TRANS_SIMPLE";"UPDATING";"AFTER";"400";"IF UPDATING('PRICE_OBJECT_ID') OR UPDATING('DELIVERY_POINT_ID') THEN EcDp_Transaction.UpdPriceObject(n_TRANSACTION_KEY,n_last_updated_by); END IF;";"EC_REVN";
"FIN_CARGO_TRANS_SIMPLE";"UPDATING";"AFTER";"500";"IF UPDATING('PRECEDING_TRANS_KEY') OR NVL(n_PRECEDING_TRANS_KEY, '$NULL$') <> NVL(:OLD.PRECEDING_TRANS_KEY, '$NULL$') THEN EcDp_Transaction.UpdFromPrecedingTrans(n_PRECEDING_TRANS_KEY, n_TRANSACTION_KEY, n_last_updated_by); END IF;";"EC_REVN";
"FIN_CARGO_TRANS_SIMPLE";"UPDATING";"BEFORE";"110";"IF NOT UPDATING('COUNTRY_ID') AND (UPDATING('DELIVERY_POINT_ID') OR UPDATING('LOADING_PORT_ID')) THEN n_ORIGIN_COUNTRY_ID := EcDp_Transaction.GetOriginCountryForTrans(n_object_id, n_transaction_key, n_transaction_scope, null, n_loading_port_id, nvl(n_transaction_date, n_daytime)); END IF;";"EC_REVN";
"FIN_CARGO_TRANS_SIMPLE";"UPDATING";"BEFORE";"120";"IF NOT UPDATING('COUNTRY_ID') AND (UPDATING('DELIVERY_POINT_ID') OR UPDATING('DISCHARGE_PORT_ID')) THEN n_COUNTRY_ID := EcDp_Transaction.GetDestinationCountryForTrans(n_object_id, n_transaction_key, n_transaction_scope, null, n_discharge_port_id, nvl(n_transaction_date, n_daytime)); END IF;";"EC_REVN";
"FIN_PERIOD_DOC_SIMPLE";"UPDATING";"AFTER";"10";"IF :OLD.CONTRACT_DOC_ID IS NOT NULL AND n_CONTRACT_DOC_ID != :OLD.CONTRACT_DOC_ID AND NVL(n_USER_ACTION_CODE,'X') != 'DELETE_RECREATE' THEN RAISE_APPLICATION_ERROR(-20000, 'User Action must be ""Delete (and recreate)"" when changing Document Setup'); END IF;";"EC_REVN";
"FIN_PERIOD_DOC_SIMPLE";"UPDATING";"AFTER";"20";"IF n_CONTRACT_DOC_ID != :OLD.CONTRACT_DOC_ID AND ec_contract_doc_version.doc_concept_code(n_CONTRACT_DOC_ID, n_daytime, '<=') LIKE 'DEPENDENT%'  AND :new.PREC_DOC_KEY IS NULL THEN RAISE_APPLICATION_ERROR(-20000, 'When changing to a Dependent type Document Setup you must select a preceding document as well.'); END IF;";"EC_REVN";
"FIN_PERIOD_DOC_SIMPLE";"UPDATING";"AFTER";"30";"IF (NVL(:new.PREC_DOC_KEY,'X') != NVL(:OLD.PREC_DOC_KEY,'X')) AND (NVL(n_USER_ACTION_CODE,'X') != 'DELETE_RECREATE' OR ec_contract_doc_version.doc_concept_code(n_CONTRACT_DOC_ID, n_daytime, '<=') NOT LIKE 'DEPENDENT%') THEN RAISE_APPLICATION_ERROR(-20000, 'When changing or setting Preceding Document you will have to set User Action to ""Delete (and recreate)"" and use a Dependent type Document Setup.'); END IF;";"EC_REVN";
"FIN_PERIOD_DOC_SIMPLE";"UPDATING";"AFTER";"40";"IF UPDATING ('DOCUMENT_DATE') THEN EcDp_Contract_Setup.UpdateAllDocumentDates(n_object_id,n_document_key,n_daytime,n_document_date,n_last_updated_by,5); END IF;";"EC_REVN";
"FIN_PERIOD_DOC_SIMPLE";"UPDATING";"AFTER";"50";"ecdp_document_gen.ExecuteUserAction(n_document_key, n_user_action_code);";"EC_REVN";
"FIN_PERIOD_DOC_SIMPLE";"UPDATING";"AFTER";"70";"EcDp_Document_Gen.SetDocumentRecActionCode(n_DOCUMENT_KEY);";"EC_REVN";
"FIN_PERIOD_DOC_TRANS";"INSERTING";"BEFORE";"550";"IF  ecdp_document.isDocumentEditable(n_DOCUMENT_KEY) = 'N' THEN RAISE_APPLICATION_ERROR(-20603,'Cannot add transactions to a booked document'); END IF;";"EC_REVN";
"FIN_PERIOD_DOC_TRANS";"UPDATING";"AFTER";"100";"IF Updating('NET_QTY1') OR Updating('NET_QTY2') OR Updating('NET_QTY3') OR Updating('NET_QTY4') THEN UPDATE cont_transaction_qty ctq SET ctq.NET_QTY1 = :NEW.NET_QTY1, ctq.NET_QTY2 = :NEW.NET_QTY2, ctq.NET_QTY3 = :NEW.NET_QTY3, ctq.NET_QTY4 = :NEW.NET_QTY4 WHERE ctq.transaction_key = n_TRANSACTION_KEY; END IF;";"EC_REVN";
"FIN_PERIOD_DOC_TRANS";"UPDATING";"AFTER";"200";"EcDp_Transaction.AggregateLineItemValues(n_transaction_key);";"EC_REVN";
"FIN_PERIOD_DOC_TRANS";"UPDATING";"AFTER";"300";"IF NVL(:New.QTY_PRICING_VALUE,0) <> NVL(:Old.QTY_PRICING_VALUE,0) OR NVL(:New.NET_QTY1,0) <> NVL(:Old.NET_QTY1,0) THEN EcDp_Transaction.UpdateManualPriceValue(n_TRANSACTION_KEY, n_DAYTIME, :New.QTY_PRICING_VALUE); END IF;";"EC_REVN";
"FIN_PERIOD_DOC_TRANS";"UPDATING";"AFTER";"400";"IF UPDATING('PRICE_OBJECT_ID') OR UPDATING('DELIVERY_POINT_ID') THEN EcDp_Transaction.UpdPriceObject(n_TRANSACTION_KEY,n_last_updated_by); END IF;";"EC_REVN";
"FIN_PERIOD_DOC_TRANS";"UPDATING";"AFTER";"500";"IF UPDATING('PRECEDING_TRANS_KEY') OR NVL(n_PRECEDING_TRANS_KEY, '$NULL$') <> NVL(:OLD.PRECEDING_TRANS_KEY, '$NULL$') THEN EcDp_Transaction.UpdFromPrecedingTrans(n_PRECEDING_TRANS_KEY, n_TRANSACTION_KEY, n_last_updated_by); END IF;";"EC_REVN";
"FIN_PERIOD_DOC_TRANS";"UPDATING";"BEFORE";"110";"IF NOT UPDATING('COUNTRY_ID') AND (UPDATING('DELIVERY_POINT_ID') OR UPDATING('LOADING_PORT_ID')) THEN n_ORIGIN_COUNTRY_ID := EcDp_Transaction.GetOriginCountryForTrans(n_object_id, n_transaction_key, n_transaction_scope, n_delivery_point_id, n_loading_port_id, nvl(n_transaction_date, n_daytime)); END IF;";"EC_REVN";
"FIN_PERIOD_DOC_TRANS";"UPDATING";"BEFORE";"120";"IF NOT UPDATING('COUNTRY_ID') AND (UPDATING('DELIVERY_POINT_ID') OR UPDATING('DISCHARGE_PORT_ID')) THEN n_COUNTRY_ID := EcDp_Transaction.GetDestinationCountryForTrans(n_object_id, n_transaction_key, n_transaction_scope, n_delivery_point_id, n_discharge_port_id, nvl(n_transaction_date, n_daytime)); END IF;";"EC_REVN";
"FIN_PERIOD_DOCUMENTS";"INSERTING";"BEFORE";"60";"IF  ecdp_document.isDocumentEditable(n_DOCUMENT_KEY) = 'N' THEN RAISE_APPLICATION_ERROR(-20603,'Cannot add transactions to a booked document'); END IF;";"EC_REVN";
"FIN_PERIOD_DOCUMENTS";"UPDATING";"AFTER";"10";"IF :OLD.CONTRACT_DOC_ID IS NOT NULL AND n_CONTRACT_DOC_ID != :OLD.CONTRACT_DOC_ID AND NVL(n_USER_ACTION_CODE,'X') != 'DELETE_RECREATE' THEN RAISE_APPLICATION_ERROR(-20000, 'User Action must be ""Delete (and recreate)"" when changing Document Setup'); END IF;";"EC_REVN";
"FIN_PERIOD_DOCUMENTS";"UPDATING";"AFTER";"20";"IF n_CONTRACT_DOC_ID != :OLD.CONTRACT_DOC_ID AND ec_contract_doc_version.doc_concept_code(n_CONTRACT_DOC_ID, n_daytime, '<=') LIKE 'DEPENDENT%'  AND :new.PREC_DOC_KEY IS NULL THEN RAISE_APPLICATION_ERROR(-20000, 'When changing to a Dependent type Document Setup you must select a preceding document as well.'); END IF;";"EC_REVN";
"FIN_PERIOD_DOCUMENTS";"UPDATING";"AFTER";"30";"IF (NVL(:new.PREC_DOC_KEY,'X') != NVL(:OLD.PREC_DOC_KEY,'X')) AND (NVL(n_USER_ACTION_CODE,'X') != 'DELETE_RECREATE' OR ec_contract_doc_version.doc_concept_code(n_CONTRACT_DOC_ID, n_daytime, '<=') NOT LIKE 'DEPENDENT%') THEN RAISE_APPLICATION_ERROR(-20000, 'When changing or setting Preceding Document you will have to set User Action to ""Delete (and recreate)"" and use a Dependent type Document Setup.'); END IF;";"EC_REVN";
"FIN_PERIOD_DOCUMENTS";"UPDATING";"AFTER";"40";"IF UPDATING ('DOCUMENT_DATE') THEN EcDp_Contract_Setup.UpdateAllDocumentDates(n_object_id,n_document_key,n_daytime,n_document_date,n_last_updated_by,5); END IF;";"EC_REVN";
"FIN_PERIOD_DOCUMENTS";"UPDATING";"AFTER";"50";"ecdp_document_gen.ExecuteUserAction(n_document_key, n_user_action_code);";"EC_REVN";
"FIN_PERIOD_TRANS_SIMPLE";"UPDATING";"AFTER";"100";"IF Updating('NET_QTY1') OR Updating('NET_QTY2') OR Updating('NET_QTY3') OR Updating('NET_QTY4') THEN UPDATE cont_transaction_qty ctq SET ctq.NET_QTY1 = :NEW.NET_QTY1, ctq.NET_QTY2 = :NEW.NET_QTY2, ctq.NET_QTY3 = :NEW.NET_QTY3, ctq.NET_QTY4 = :NEW.NET_QTY4 WHERE ctq.transaction_key = n_TRANSACTION_KEY; END IF;";"EC_REVN";
"FIN_PERIOD_TRANS_SIMPLE";"UPDATING";"AFTER";"200";"EcDp_Transaction.AggregateLineItemValues(n_transaction_key);";"EC_REVN";
"FIN_PERIOD_TRANS_SIMPLE";"UPDATING";"AFTER";"300";"IF NVL(:New.QTY_PRICING_VALUE,0) <> NVL(:Old.QTY_PRICING_VALUE,0) OR NVL(:New.NET_QTY1,0) <> NVL(:Old.NET_QTY1,0) THEN EcDp_Transaction.UpdateManualPriceValue(n_TRANSACTION_KEY, n_DAYTIME, :New.QTY_PRICING_VALUE); END IF;";"EC_REVN";
"FIN_PERIOD_TRANS_SIMPLE";"UPDATING";"AFTER";"400";"IF UPDATING('PRICE_OBJECT_ID') OR UPDATING('DELIVERY_POINT_ID') THEN EcDp_Transaction.UpdPriceObject(n_TRANSACTION_KEY,n_last_updated_by); END IF;";"EC_REVN";
"FIN_PERIOD_TRANS_SIMPLE";"UPDATING";"AFTER";"500";"IF UPDATING('PRECEDING_TRANS_KEY') OR NVL(n_PRECEDING_TRANS_KEY, '$NULL$') <> NVL(:OLD.PRECEDING_TRANS_KEY, '$NULL$') THEN EcDp_Transaction.UpdFromPrecedingTrans(n_PRECEDING_TRANS_KEY, n_TRANSACTION_KEY, n_last_updated_by); END IF;";"EC_REVN";
"FIN_PERIOD_TRANS_SIMPLE";"UPDATING";"BEFORE";"110";"IF NOT UPDATING('COUNTRY_ID') AND (UPDATING('DELIVERY_POINT_ID') OR UPDATING('LOADING_PORT_ID')) THEN n_ORIGIN_COUNTRY_ID := EcDp_Transaction.GetOriginCountryForTrans(n_object_id, n_transaction_key, n_transaction_scope, n_delivery_point_id, n_loading_port_id, nvl(n_transaction_date, n_daytime)); END IF;";"EC_REVN";
"FIN_PERIOD_TRANS_SIMPLE";"UPDATING";"BEFORE";"120";"IF NOT UPDATING('COUNTRY_ID') AND (UPDATING('DELIVERY_POINT_ID') OR UPDATING('DISCHARGE_PORT_ID')) THEN n_COUNTRY_ID := EcDp_Transaction.GetDestinationCountryForTrans(n_object_id, n_transaction_key, n_transaction_scope, n_delivery_point_id, n_discharge_port_id, nvl(n_transaction_date, n_daytime)); END IF;";"EC_REVN";
"FIN_POSTING_SETUP";"INSERTING";"BEFORE";"100";"n_posting_setup_key := 'PSK:' || Ecdp_System_Key.assignNextNumber('POSTING_SETUP');";"EC_REVN";
"FLOWLINE_TEST_DEF";"DELETING";"BEFORE";"800";"EcDp_Performance_Test.removeGraphDefParameters(n_OBJECT_ID,n_TEST_NO);";"EC_PROD";
"FLOWLINE_TEST_DEF";"INSERTING";"AFTER";"700";"EcDp_Performance_Test.createGraphDefParameters(n_OBJECT_ID,n_TEST_NO,n_CREATED_BY);";"EC_PROD";
"FLWL_FORM_ION_ANALYSIS";"INSERTING";"BEFORE";"200";"n_PRODUCTION_DAY := Ecdp_Productionday.getProductionDay(n_OBJECT_CLASS_NAME,n_OBJECT_ID,n_DAYTIME);";"EC_PROD";
"FLWL_FORM_ION_ANALYSIS";"INSERTING OR UPDATING";"BEFORE";"100";"n_object_class_name := 'FLOWLINE';";"EC_PROD";
"FLWL_INJ_ION_ANALYSIS";"INSERTING";"BEFORE";"200";"n_PRODUCTION_DAY := Ecdp_Productionday.getProductionDay(n_OBJECT_CLASS_NAME,n_OBJECT_ID,n_DAYTIME);";"EC_PROD";
"FLWL_INJ_ION_ANALYSIS";"INSERTING OR UPDATING";"BEFORE";"100";"n_object_class_name := 'FLOWLINE';";"EC_PROD";
"FLWL_PROD_ION_ANALYSIS";"INSERTING";"BEFORE";"200";"n_PRODUCTION_DAY := Ecdp_Productionday.getProductionDay(n_OBJECT_CLASS_NAME,n_OBJECT_ID,n_DAYTIME);";"EC_PROD";
"FLWL_PROD_ION_ANALYSIS";"INSERTING OR UPDATING";"BEFORE";"100";"n_object_class_name := 'FLOWLINE';";"EC_PROD";
"FORECAST";"INSERTING OR UPDATING";"AFTER";"200";"ecdp_revn_forecast.setValidPlanDate(n_object_id,n_daytime);";"EC_REVN";
"FORECAST";"INSERTING OR UPDATING";"AFTER";"300";"ecdp_revn_forecast.SetObjectEndDate(n_object_id,n_object_start_date,n_functional_area_code,n_daytime);";"EC_REVN";
"FORECAST";"INSERTING OR UPDATING";"BEFORE";"100";"ecdp_revn_forecast.validateFcstObj(n_object_id, n_object_start_date, o_object_start_date, :NEW.populate_method, :NEW.plan_date, :NEW.forecast_scope, :NEW.official_ind, n_functional_area_code, :NEW.forecast_id); ";"EC_REVN";
"FORECAST_TRAN_CP";"UPDATING";"BEFORE";"100";"EcBp_Forecast_Cargo_Planning.deleteForecastCascade(n_OBJECT_ID, n_OBJECT_START_DATE, n_OBJECT_END_DATE);";"EC_TRAN";
"FOREX_SOURCE_SETUP";"INSERTING";"BEFORE";"100";"IF ec_prosty_codes.alt_code(n_time_scope, 'FX_TYPE') = 'MONTHLY' THEN n_daytime := trunc(n_daytime, 'MONTH'); END IF;";"EC_REVN";
"FT_ST_DOCUMENT";"INSERTING";"BEFORE";"1000";"n_object_id := nvl(n_object_id, ec_contract_doc.contract_id(ec_contract_doc.object_id_by_uk(:new.contract_doc_code)));";"EC_REVN";
"FT_ST_LINE_ITEM";"INSERTING";"BEFORE";"1000";"n_object_id := ec_ft_st_document.object_id(:new.ft_st_document_no);";"EC_REVN";
"FT_ST_TRANSACTION";"INSERTING";"BEFORE";"100";"n_object_id := nvl( n_object_id,ec_FT_ST_DOCUMENT.object_id(n_ft_st_document_no));";"EC_REVN";
"FT_ST_TRANSACTION";"INSERTING";"BEFORE";"200";"n_TRANS_TEMPLATE_ID := NVL(ec_transaction_template.object_id_by_uk(n_TRANS_TEMPLATE_CO), NVL(EcDp_Staging_Document.GetTransTemplateID( ec_ft_st_document.contract_doc_id(n_ft_st_document_no), n_PRICE_CONCEPT_CODE, n_DELIVERY_POINT_ID, n_PRODUCT_ID, n_DAYTIME), NULL));";"EC_REVN";
"FT_ST_TRANSACTION";"INSERTING";"BEFORE";"300";"IF n_TRANS_TEMPLATE_ID IS NULL THEN Raise_Application_Error(-20000, 'Could not set Transaction Template Id'); END IF;";"EC_REVN";
"GAS_EQPM_SUB_DAY_RESTR";"INSERTING OR UPDATING";"BEFORE";"10";"n_summer_time := ecdp_date_time.get_summertime_flag(n_daytime,n_summer_time, EcDp_ProductionDay.findProductionDayDefinition(NULL, n_OBJECT_ID, n_DAYTIME));";"EC_PROD";
"GAS_PROC_EQPM";"UPDATING";"AFTER";"3000";"ecdp_equipment_event.updateEventStatus(n_OBJECT_ID, n_DAYTIME, 'GAS_PROC_EQPM');";"EC_PROD";
"GAS_SUB_DAY_EXP_AND_FUEL";"INSERTING OR UPDATING";"AFTER";"800";"EcBp_Contract_Dispatching.aggregateSubDaily('GAS_DAY_EXP_AND_FUEL',ecbp_dispatching_mapping.getColumnValueByName(n_OBJECT_ID,n_PARENT_OBJECT_ID,'SUB_DAILY','GAS_DAY_EXP_AND_FUEL','ATTRIBUTE_NAME',n_PRODUCTION_DAY),n_PARENT_OBJECT_ID,n_OBJECT_ID,n_PRODUCTION_DAY,nvl(n_last_updated_by, n_created_by));";"EC_SALE";
"GAS_SUB_DAY_EXP_AND_FUEL";"INSERTING OR UPDATING";"BEFORE";"900";"n_DATA_CLASS_NAME:='GAS_SUB_DAY_EXP_AND_FUEL';";"EC_SALE";
"GAS_SUB_DAY_NGL_EXPORT";"INSERTING OR UPDATING";"AFTER";"900";"EcBp_Contract_Dispatching.aggregateSubDaily('GAS_DAY_NGL_EXPORT',ecbp_dispatching_mapping.getColumnValueByName(n_OBJECT_ID,n_PARENT_OBJECT_ID,'SUB_DAILY','GAS_DAY_NGL_EXPORT','ATTRIBUTE_NAME',n_PRODUCTION_DAY),n_PARENT_OBJECT_ID,n_OBJECT_ID,n_PRODUCTION_DAY,nvl(n_last_updated_by, n_created_by));";"EC_SALE";
"GAS_SUB_DAY_NGL_EXPORT";"INSERTING OR UPDATING";"BEFORE";"1000";"n_DATA_CLASS_NAME:='GAS_SUB_DAY_NGL_EXPORT';";"EC_SALE";
"GENERATOR";"UPDATING";"AFTER";"3000";"ecdp_equipment_event.updateEventStatus(n_OBJECT_ID, n_DAYTIME, 'GENERATOR');";"EC_PROD";
"HARBOUR_DUE_ITEMS";"INSERTING OR UPDATING";"BEFORE";"100";"ue_harbour_dues.validate_harbour_dues(n_due_code, n_due_item_code, n_start_date, n_end_date);";"EC_TRAN";
"HEATER";"UPDATING";"AFTER";"3000";"ecdp_equipment_event.updateEventStatus(n_OBJECT_ID, n_DAYTIME, 'HEATER');";"EC_PROD";
"IFAC_QTY";"INSERTING";"BEFORE";"100";"IF n_alloc_no is null then n_ALLOC_NO := ecdp_inbound_interface.GetQtyAllocNo(:NEW.PRODUCT, :NEW.COMPANY, :NEW.PROFIT_CENTER, :NEW.STREAM_ITEM_CATEGORY,:NEW.DAY_MTH,:NEW.NODE,:NEW.STREAM_ITEM_CODE, :NEW.DAYTIME); END IF;";"EC_REVN";
"IFLW_DAY_STATUS_GAS";"INSERTING";"BEFORE";"10";"n_INJ_TYPE := 'GI';";"EC_PROD";
"IFLW_DAY_STATUS_WATER";"INSERTING";"BEFORE";"10";"n_INJ_TYPE := 'WI';";"EC_PROD";
"IMP_SOURCE_MAPPING";"INSERTING";"BEFORE";"10";"EcDp_System_Key.assignNextNumber('IMP_SOURCE_MAPPING_NO',n_IMP_SOURCE_MAPPING_NO);";"EC_ECDM";
"IMP_SOURCE_MAPPING";"INSERTING";"BEFORE";"30";"n_PATH_ORIGIN := NVL(n_PATH_ORIGIN, '0.0');";"EC_ECDM";
"IMP_SOURCE_MAPPING";"INSERTING OR UPDATING";"BEFORE";"20";"EcDp_Import.Validate_Mapping(n_interface_code,n_PATH_ORIGIN,n_KEY_1,n_KEY_2,n_KEY_3,n_KEY_4,n_KEY_5);";"EC_ECDM";
"IMP_SOURCE_PATH";"INSERTING";"BEFORE";"10";"EcDp_System_Key.assignNextNumber('IMP_SOURCE_PATH_NO',n_IMP_SOURCE_PATH_NO);";"EC_ECDM";
"IMP_SOURCE_XML_PATH";"INSERTING";"BEFORE";"10";"EcDp_System_Key.assignNextNumber('IMP_SOURCE_XML_PATH_NO',n_IMP_SOURCE_XML_PATH_NO);";"EC_ECDM";
"IMP_SRC_INTERFACE_FILE";"INSERTING";"BEFORE";"10";"EcDp_System_Key.assignNextNumber('FILE_NO',n_FILE_NO);";"EC_ECDM";
"IMP_STAGING";"INSERTING";"BEFORE";"10";"EcDp_System_Key.assignNextNumber('IMP_STAGING', n_IMP_STAGING_NO);";"EC_ECDM";
"IMP_VALIDATION_RULE";"INSERTING";"BEFORE";"10";"EcDp_System_Key.assignNextNumber('IMP_VALIDATION_RULE_NO',n_IMP_VALIDATION_RULE_NO);";"EC_ECDM";
"INCINERATORS";"UPDATING";"AFTER";"3000";"ecdp_equipment_event.updateEventStatus(n_OBJECT_ID, n_DAYTIME, 'INCINERATORS');";"EC_PROD";
"INV_AVG_PS_RATE_CALC";"UPDATING";"AFTER";"100";"ecdp_inventory.processInventory(n_object_id,n_daytime,n_last_updated_by);";"EC_REVN";
"INVENTORY";"INSERTING OR UPDATING";"BEFORE";"200";"ecdp_inventory.validateInventoryObj(n_ul_pricing_currency_co,n_ul_booking_currency_co,n_ul_memo_currency_co,n_ol_pricing_currency_co,n_ol_booking_currency_co,n_ol_memo_currency_co,:new.pri_ps_li_code,:new.physical_stock_ind,n_daytime);";"EC_REVN";
"INVENTORY";"UPDATING";"BEFORE";"210";"ecdp_inventory.deleteinventory(n_object_id,o_object_start_date,n_object_start_date,o_object_end_date,n_object_end_date);";"EC_REVN";
"INVENTORY_PRICE_LIST";"INSERTING";"AFTER";"20";"EcDp_Sales_Contract_Price.InsNewPriceElementSet(n_OBJECT_ID ,n_PRICE_CONCEPT_CODE, n_PRICE_ELEMENT_CODE, n_DAYTIME, n_CREATED_BY);";"EC_REVN";
"INVENTORY_PRICE_LIST";"INSERTING";"BEFORE";"10";"n_price_element_code := ecdp_sales_contract_price.GetAnyPriceElement(n_price_concept_code,n_object_id,n_daytime);";"EC_REVN";
"INV_LAYER_OL";"DELETING";"AFTER";"120";"ECDP_INVENTORY.RemoveStimMthInvHistoric(n_object_id, n_daytime, nvl(n_last_updated_by, n_created_by));";"EC_REVN";
"INV_LAYER_OL";"INSERTING";"AFTER";"100";"ECDP_INVENTORY.SetStimMthInvHistoric(n_object_id,n_daytime,  n_created_by);";"EC_REVN";
"INV_LAYER_OL";"INSERTING OR UPDATING";"BEFORE";"15";"n_closing_value := nvl(n_rate,0)*n_qty1;n_ps_closing_value := nvl(n_ps_rate,0)*n_ps_qty1;n_daytime:=TRUNC(to_date(n_code,'YYYY'),'YYYY');n_QTY1_OPENING := n_QTY1;n_QTY2_OPENING := n_QTY2;n_PS_QTY1_OPENING := n_PS_QTY1;n_PS_QTY2_OPENING := n_PS_QTY2;";"EC_REVN";
"INV_LAYER_OL";"INSERTING OR UPDATING";"BEFORE";"20";"EcDp_Inventory.verifyLayer('OVERLIFT', n_object_id, n_daytime, n_qty1, n_qty2, n_rate ,n_closing_value, 'LAYER');";"EC_REVN";
"INV_LAYER_OL";"INSERTING OR UPDATING OR DELETING";"AFTER";"10";"ECDP_INVENTORY.CheckLayerSave(n_object_id, n_daytime, 'TRUE');";"EC_REVN";
"INV_LAYER_OL";"INSERTING OR UPDATING OR DELETING";"AFTER";"200";"ECDP_INVENTORY.ProcessHistoricInventory(n_object_id, n_daytime, nvl(n_last_updated_by, n_created_by));";"EC_REVN";
"INV_LAYER_OL";"UPDATING OR DELETING";"AFTER";"110";"ECDP_INVENTORY.SetStimMthInvHistoric(n_object_id, n_daytime, n_last_updated_by);";"EC_REVN";
"INV_LAYER_UL";"DELETING";"AFTER";"120";"ECDP_INVENTORY.RemoveStimMthInvHistoric(n_object_id, n_daytime, nvl(n_last_updated_by, n_created_by));";"EC_REVN";
"INV_LAYER_UL";"INSERTING";"AFTER";"100";"ECDP_INVENTORY.SetStimMthInvHistoric(n_object_id,n_daytime,  n_created_by);";"EC_REVN";
"INV_LAYER_UL";"INSERTING OR UPDATING";"BEFORE";"15";"n_closing_value := nvl(n_rate,0)*n_qty1;n_ps_closing_value := nvl(n_ps_rate,0)*n_ps_qty1;n_daytime:=TRUNC(to_date(n_code,'YYYY'),'YYYY');n_QTY1_OPENING := n_QTY1;n_QTY2_OPENING := n_QTY2;n_PS_QTY1_OPENING := n_PS_QTY1;n_PS_QTY2_OPENING := n_PS_QTY2;";"EC_REVN";
"INV_LAYER_UL";"INSERTING OR UPDATING";"BEFORE";"20";"EcDp_Inventory.verifyLayer('UNDERLIFT', n_object_id, n_daytime, n_qty1, n_qty2, n_rate ,n_closing_value, 'LAYER');";"EC_REVN";
"INV_LAYER_UL";"INSERTING OR UPDATING OR DELETING";"AFTER";"10";"ECDP_INVENTORY.CheckLayerSave(n_object_id, n_daytime);";"EC_REVN";
"INV_LAYER_UL";"INSERTING OR UPDATING OR DELETING";"AFTER";"200";"ECDP_INVENTORY.ProcessHistoricInventory(n_object_id, n_daytime, nvl(n_last_updated_by, n_created_by));";"EC_REVN";
"INV_LAYER_UL";"UPDATING OR DELETING";"AFTER";"110";"ECDP_INVENTORY.SetStimMthInvHistoric(n_object_id, n_daytime, n_last_updated_by);";"EC_REVN";
"IWEL_DAY_PROD_ALLOC";"INSERTING";"BEFORE";"100";"n_CLASS_NAME:='IWEL_DAY_PROD_ALLOC';";"EC_PROD";
"IWEL_DAY_STATUS_AIR";"INSERTING";"BEFORE";"10";"n_INJ_TYPE := 'AI';";"EC_PROD";
"IWEL_DAY_STATUS_CO2";"INSERTING";"BEFORE";"10";"n_INJ_TYPE := 'CI';";"EC_PROD";
"IWEL_DAY_STATUS_GAS";"INSERTING";"BEFORE";"10";"n_INJ_TYPE := 'GI';";"EC_PROD";
"IWEL_DAY_STATUS_STEAM";"INSERTING";"BEFORE";"10";"n_INJ_TYPE := 'SI';";"EC_PROD";
"IWEL_DAY_STATUS_WATER";"INSERTING";"BEFORE";"10";"n_INJ_TYPE := 'WI';";"EC_PROD";
"IWEL_EVENT_GAS";"DELETING";"BEFORE";"400";"EcDp_Well_Event.deleteEventDetail(n_OBJECT_ID, n_DAYTIME, n_EVENT_TYPE);";"EC_PROD";
"IWEL_EVENT_GAS";"INSERTING";"AFTER";"200";"EcDp_Well_Event.insertEventDetail(n_OBJECT_ID, n_DAYTIME, n_EVENT_TYPE, n_RATE_CALC_METHOD, nvl(n_last_updated_by, n_created_by),'INSERTING');";"EC_PROD";
"IWEL_EVENT_GAS";"INSERTING";"BEFORE";"100";"IF (n_RATE_CALC_METHOD is null) then n_RATE_CALC_METHOD := EcDp_Well_Event.getLastRateCalcMethod(n_OBJECT_ID, n_DAYTIME,n_EVENT_TYPE); END IF;";"EC_PROD";
"IWEL_EVENT_GAS";"INSERTING";"BEFORE";"800";"IF EcDp_Well.IsWellPhaseActiveStatus(n_OBJECT_ID, 'GI','OPEN', n_DAYTIME)  = 'N' THEN Raise_Application_Error('-20545', 'Cannot save. Well active status is not OPEN.');  END IF;";"EC_PROD";
"IWEL_EVENT_GAS";"INSERTING OR UPDATING";"BEFORE";"700";"IF n_STATUS IS NULL THEN n_STATUS := 'NEW'; END IF;";"EC_PROD";
"IWEL_EVENT_GAS";"UPDATING";"AFTER";"300";"EcDp_Well_Event.insertEventDetail(n_OBJECT_ID, n_DAYTIME, n_EVENT_TYPE, n_RATE_CALC_METHOD, nvl(n_last_updated_by, n_created_by),'UPDATING');";"EC_PROD";
"IWEL_EVENT_GAS";"UPDATING";"AFTER";"600";"EcDp_Well_Event.updateRateSource(n_OBJECT_ID, n_DAYTIME, n_EVENT_TYPE, :OLD.GAS_INJ_RATE ,n_GAS_INJ_RATE,n_SUMMER_TIME, n_LAST_UPDATED_BY, 'UPDATING' );";"EC_PROD";
"IWEL_EVENT_GAS_TOTALIZER";"INSERTING OR UPDATING";"BEFORE";"100";"EcDp_Well_Event.validateTotalizerMax(n_OBJECT_ID,n_DAYTIME,n_OPENING_OVERRIDE,n_CLOSING_READING);";"EC_PROD";
"IWEL_EVENT_STEAM";"DELETING";"BEFORE";"400";"EcDp_Well_Event.deleteEventDetail(n_OBJECT_ID, n_DAYTIME, n_EVENT_TYPE);";"EC_PROD";
"IWEL_EVENT_STEAM";"INSERTING";"AFTER";"200";"EcDp_Well_Event.insertEventDetail(n_OBJECT_ID, n_DAYTIME, n_EVENT_TYPE, n_RATE_CALC_METHOD, nvl(n_last_updated_by, n_created_by),'INSERTING');";"EC_PROD";
"IWEL_EVENT_STEAM";"INSERTING";"BEFORE";"100";"IF (n_RATE_CALC_METHOD is null) then n_RATE_CALC_METHOD := EcDp_Well_Event.getLastRateCalcMethod(n_OBJECT_ID, n_DAYTIME,n_EVENT_TYPE); END IF;";"EC_PROD";
"IWEL_EVENT_STEAM";"INSERTING";"BEFORE";"800";"IF EcDp_Well.IsWellPhaseActiveStatus(n_OBJECT_ID, 'SI','OPEN', n_DAYTIME)  = 'N' THEN Raise_Application_Error('-20545', 'Cannot save. Well active status is not OPEN.');  END IF;";"EC_PROD";
"IWEL_EVENT_STEAM";"INSERTING OR UPDATING";"BEFORE";"700";"IF n_STATUS IS NULL THEN n_STATUS := 'NEW'; END IF;";"EC_PROD";
"IWEL_EVENT_STEAM";"UPDATING";"AFTER";"300";"EcDp_Well_Event.insertEventDetail(n_OBJECT_ID, n_DAYTIME, n_EVENT_TYPE, n_RATE_CALC_METHOD, nvl(n_last_updated_by, n_created_by),'UPDATING');";"EC_PROD";
"IWEL_EVENT_STEAM";"UPDATING";"AFTER";"600";"EcDp_Well_Event.updateRateSource(n_OBJECT_ID, n_DAYTIME, n_EVENT_TYPE, :OLD.STEAM_INJ_RATE ,n_STEAM_INJ_RATE,n_SUMMER_TIME, n_LAST_UPDATED_BY, 'UPDATING' );";"EC_PROD";
"IWEL_EVENT_STM_TOTALIZER";"INSERTING OR UPDATING";"BEFORE";"100";"EcDp_Well_Event.validateTotalizerMax(n_OBJECT_ID,n_DAYTIME,n_OPENING_OVERRIDE,n_CLOSING_READING);";"EC_PROD";
"IWEL_EVENT_WATER";"DELETING";"BEFORE";"400";"EcDp_Well_Event.deleteEventDetail(n_OBJECT_ID, n_DAYTIME, n_EVENT_TYPE);";"EC_PROD";
"IWEL_EVENT_WATER";"INSERTING";"AFTER";"200";"EcDp_Well_Event.insertEventDetail(n_OBJECT_ID, n_DAYTIME, n_EVENT_TYPE, n_RATE_CALC_METHOD, nvl(n_last_updated_by, n_created_by),'INSERTING');";"EC_PROD";
"IWEL_EVENT_WATER";"INSERTING";"BEFORE";"100";"IF (n_RATE_CALC_METHOD is null) then n_RATE_CALC_METHOD := EcDp_Well_Event.getLastRateCalcMethod(n_OBJECT_ID, n_DAYTIME,n_EVENT_TYPE); END IF;";"EC_PROD";
"IWEL_EVENT_WATER";"INSERTING";"BEFORE";"800";"IF EcDp_Well.IsWellPhaseActiveStatus(n_OBJECT_ID, 'WI','OPEN', n_DAYTIME)  = 'N' THEN Raise_Application_Error('-20545', 'Cannot save. Well active status is not OPEN.');  END IF;";"EC_PROD";
"IWEL_EVENT_WATER";"INSERTING OR UPDATING";"BEFORE";"700";"IF n_STATUS IS NULL THEN n_STATUS := 'NEW'; END IF;";"EC_PROD";
"IWEL_EVENT_WATER";"UPDATING";"AFTER";"300";"EcDp_Well_Event.insertEventDetail(n_OBJECT_ID, n_DAYTIME, n_EVENT_TYPE, n_RATE_CALC_METHOD, nvl(n_last_updated_by, n_created_by),'UPDATING');";"EC_PROD";
"IWEL_EVENT_WATER";"UPDATING";"AFTER";"600";"EcDp_Well_Event.updateRateSource(n_OBJECT_ID, n_DAYTIME, n_EVENT_TYPE, :OLD.WATER_INJ_RATE ,n_WATER_INJ_RATE,n_SUMMER_TIME, n_LAST_UPDATED_BY, 'UPDATING' );";"EC_PROD";
"IWEL_EVENT_WAT_TOTALIZER";"INSERTING OR UPDATING";"BEFORE";"100";"EcDp_Well_Event.validateTotalizerMax(n_OBJECT_ID,n_DAYTIME,n_OPENING_OVERRIDE,n_CLOSING_READING);";"EC_PROD";
"IWEL_MTH_CPY_ALLOC";"INSERTING";"BEFORE";"100";"n_CLASS_NAME:='IWEL_MTH_CPY_ALLOC';";"EC_PROD";
"IWEL_MTH_PROD_ALLOC";"INSERTING";"BEFORE";"100";"n_CLASS_NAME:='IWEL_MTH_PROD_ALLOC';";"EC_PROD";
"IWEL_PERIOD_STATUS";"DELETING";"BEFORE";"600";"EcDp_Well.DelAllowInjWellClosedLT(n_OBJECT_ID, n_DAYTIME, n_SUMMER_TIME, n_WELL_STATUS, n_INJ_TYPE);";"EC_PROD";
"IWEL_PERIOD_STATUS";"DELETING";"BEFORE";"800";"IF EcDp_Well.getWellType(n_OBJECT_ID, n_DAYTIME) in ('WG','WSI','GPI') THEN EcDp_Well.deleteOtherSide(n_OBJECT_ID, n_DAYTIME, n_INJ_TYPE); END IF;";"EC_PROD";
"IWEL_PERIOD_STATUS";"DELETING";"BEFORE";"1000";"EcDp_Well.chkDeferEventWhenWellClosed('DELETE', n_OBJECT_ID, n_DAYTIME, n_WELL_STATUS, n_TIME_SPAN, n_SUMMER_TIME, n_INJ_TYPE);";"EC_PROD";
"IWEL_PERIOD_STATUS";"INSERTING";"BEFORE";"300";"EcDp_Well.IUAllowInjWellClosedLT(n_OBJECT_ID, n_DAYTIME, n_SUMMER_TIME, n_WELL_STATUS, n_INJ_TYPE);";"EC_PROD";
"IWEL_PERIOD_STATUS";"INSERTING";"BEFORE";"500";"EcDp_Well.AllowInjWellClosedLT(n_OBJECT_ID, n_DAYTIME, n_SUMMER_TIME, n_WELL_STATUS, n_INJ_TYPE);";"EC_PROD";
"IWEL_PERIOD_STATUS";"INSERTING OR UPDATING";"BEFORE";"700";"IF EcDp_Well.getWellType(n_OBJECT_ID, n_DAYTIME) in ('WG','WSI','GPI') THEN EcDp_Well.checkOtherSide(n_OBJECT_ID, n_DAYTIME, n_INJ_TYPE, EcDp_System.getDependentCode('ACTIVE_WELL_STATUS', 'WELL_STATUS', :NEW.well_status)); END IF;";"EC_PROD";
"IWEL_PERIOD_STATUS";"INSERTING OR UPDATING";"BEFORE";"900";"EcDp_Well.chkDeferEventWhenWellClosed('INSERT', n_OBJECT_ID, n_DAYTIME, n_WELL_STATUS, n_TIME_SPAN, n_SUMMER_TIME, n_INJ_TYPE);";"EC_PROD";
"IWEL_PERIOD_STATUS";"UPDATING";"BEFORE";"400";"IF (:OLD.RECORD_STATUS = n_RECORD_STATUS) THEN EcDp_Well.IUAllowInjWellClosedLT(n_OBJECT_ID, n_DAYTIME, n_SUMMER_TIME, n_WELL_STATUS, n_INJ_TYPE); END IF;";"EC_PROD";
"IWEL_TOTALIZER_GAS";"INSERTING OR UPDATING";"BEFORE";"50";"EcDp_Well_Event.validateTotalizerMax(n_OBJECT_ID,n_DAYTIME,n_OPENING_READING,n_CLOSING_READING);";"EC_PROD";
"IWEL_TOTALIZER_WAT";"INSERTING OR UPDATING";"BEFORE";"100";"EcDp_Well_Event.validateTotalizerMax(n_OBJECT_ID,n_DAYTIME,n_OPENING_READING,n_CLOSING_READING);";"EC_PROD";
"LANGUAGE_SOURCE";"DELETING";"BEFORE";"10";"DELETE FROM  T_BASIS_LANGUAGE_TARGET where SOURCE_ID= o_SOURCE_ID;";"EC_FRMW";
"LIFT_ACC_DOC_SET";"DELETING";"BEFORE";"100";"DELETE FROM DV_LIFT_ACC_DOC_INSTR_TEMP WHERE OBJECT_ID=N_OBJECT_ID AND TEMPLATE_CODE=N_TEMPLATE_CODE AND doc_code = o_doc_code;";"EC_TRAN";
"LIFT_ACC_DOC_SET";"INSERTING";"AFTER";"100";"EcDp_Cargo_Document.instLAInstructionDoc(n_object_id, n_template_code, n_doc_code);";"EC_TRAN";
"LIFT_ACC_DOC_TEMPLATE";"DELETING";"BEFORE";"100";"delete lift_acc_doc_set where object_id = n_object_id and template_code = n_template_code;";"EC_TRAN";
"LIFT_ACC_DOC_TEMPLATE";"INSERTING OR UPDATING";"AFTER";"100";"EcDp_Cargo_Document.updateDocSet(n_object_id, n_template_code, :OLD.cargo_doc_template_code, n_cargo_doc_template_code);";"EC_TRAN";
"LIFT_ACCOUNT_ADJ_SINGLE";"INSERTING OR UPDATING";"AFTER";"100";"Ecbp_Lifting_account.populateSubDailyValueSinAdj(n_object_id, n_daytime);";"EC_TRAN";
"LIFT_ACCOUNT_ADJUSTMENT";"INSERTING OR UPDATING";"AFTER";"100";"Ecbp_Lifting_account.populateSubDailyValueAdj(n_object_id, n_daytime);";"EC_TRAN";
"LIFT_ACC_RECEIVER_TEMP";"DELETING";"BEFORE";"100";"DELETE FROM DV_LIFT_ACC_DOC_INSTR_TEMP WHERE OBJECT_ID=N_OBJECT_ID AND TEMPLATE_CODE=N_TEMPLATE_CODE AND COMPANY_CONTACT_ID=N_RECEIVER_ID;";"EC_TRAN";
"LIFT_ACC_RECEIVER_TEMP";"INSERTING";"AFTER";"100";"EcDp_Cargo_Document.instLAInstructionReceiver(n_object_id, n_template_code, n_receiver_id);";"EC_TRAN";
"LIFT_ACC_SUB_DAY_DEL";"INSERTING OR UPDATING";"AFTER";"100";"IF NVL(:OLD.FORECAST_QTY,-1) != NVL(n_FORECAST_QTY,-1) THEN EcDp_Lift_Acc_Forecast.aggregateSubDay(n_object_id, nvl(n_production_day, EcDp_ProductionDay.getProductionDay('STORAGE', ec_lifting_account.storage_id(n_object_id), n_daytime, n_summer_time)) ); END IF;";"EC_TRAN";
"LIFT_ACC_SUB_DAY_DEL";"INSERTING OR UPDATING";"AFTER";"200";"IF NVL(:OLD.FORECAST_QTY2,-1) != NVL(n_FORECAST_QTY2,-1) THEN EcDp_Lift_Acc_Forecast.aggregateSubDay(n_object_id, nvl(n_production_day, EcDp_ProductionDay.getProductionDay('STORAGE', ec_lifting_account.storage_id(n_object_id), n_daytime, n_summer_time)), 1 ); END IF;";"EC_TRAN";
"LIFT_ACC_SUB_DAY_DEL";"INSERTING OR UPDATING";"AFTER";"300";"IF NVL(:OLD.FORECAST_QTY3,-1) != NVL(n_FORECAST_QTY3,-1) THEN EcDp_Lift_Acc_Forecast.aggregateSubDay(n_object_id, nvl(n_production_day, EcDp_ProductionDay.getProductionDay('STORAGE', ec_lifting_account.storage_id(n_object_id), n_daytime, n_summer_time)), 2 ); END IF;";"EC_TRAN";
"LIFT_ACC_SUB_DAY_FCST";"INSERTING OR UPDATING";"AFTER";"100";"IF NVL(:OLD.FORECAST_QTY,-1) != NVL(n_FORECAST_QTY,-1) THEN EcDp_Lift_Acc_Forecast.aggregateSubDay(n_object_id, nvl(n_production_day, EcDp_ProductionDay.getProductionDay('STORAGE', ec_lifting_account.storage_id(n_object_id), n_daytime, n_summer_time)) ); END IF;";"EC_TRAN";
"LIFT_ACC_SUB_DAY_FCST";"INSERTING OR UPDATING";"AFTER";"200";"IF NVL(:OLD.FORECAST_QTY2,-1) != NVL(n_FORECAST_QTY2,-1) THEN EcDp_Lift_Acc_Forecast.aggregateSubDay(n_object_id, nvl(n_production_day, EcDp_ProductionDay.getProductionDay('STORAGE', ec_lifting_account.storage_id(n_object_id), n_daytime, n_summer_time)), 1 ); END IF;";"EC_TRAN";
"LIFT_ACC_SUB_DAY_FCST";"INSERTING OR UPDATING";"AFTER";"300";"IF NVL(:OLD.FORECAST_QTY3,-1) != NVL(n_FORECAST_QTY3,-1) THEN EcDp_Lift_Acc_Forecast.aggregateSubDay(n_object_id, nvl(n_production_day, EcDp_ProductionDay.getProductionDay('STORAGE', ec_lifting_account.storage_id(n_object_id), n_daytime, n_summer_time)), 2 ); END IF;";"EC_TRAN";
"LIFT_ACC_SUB_DAY_OFF";"INSERTING OR UPDATING";"AFTER";"100";"IF NVL(:OLD.OFFICIAL_QTY,-1) != NVL(n_OFFICIAL_QTY,-1) THEN EcDp_Lift_Acc_Official.aggregateSubDay(n_object_id, nvl(n_production_day, EcDp_ProductionDay.getProductionDay('STORAGE', ec_lifting_account.storage_id(n_object_id), n_daytime, n_summer_time)) ); END IF;";"EC_TRAN";
"LIFT_ACC_SUB_DAY_OFF";"INSERTING OR UPDATING";"AFTER";"200";"IF NVL(:OLD.OFFICIAL_QTY2,-1) != NVL(n_OFFICIAL_QTY2,-1) THEN EcDp_Lift_Acc_Official.aggregateSubDay(n_object_id, nvl(n_production_day, EcDp_ProductionDay.getProductionDay('STORAGE', ec_lifting_account.storage_id(n_object_id), n_daytime, n_summer_time)), 1 ); END IF;";"EC_TRAN";
"LIFT_ACC_SUB_DAY_OFF";"INSERTING OR UPDATING";"AFTER";"300";"IF NVL(:OLD.OFFICIAL_QTY3,-1) != NVL(n_OFFICIAL_QTY3,-1) THEN EcDp_Lift_Acc_Official.aggregateSubDay(n_object_id, nvl(n_production_day, EcDp_ProductionDay.getProductionDay('STORAGE', ec_lifting_account.storage_id(n_object_id), n_daytime, n_summer_time)), 2 ); END IF;";"EC_TRAN";
"LIFTING_ACC_MTH_INIT";"INSERTING";"BEFORE";"100";"EcBp_Lift_Acc_Balance.valInsertInitBalance(n_object_id);";"EC_TRAN";
"LIFTING_ACC_MTH_INIT";"INSERTING  OR  UPDATING";"AFTER";"300";"EcBp_Lift_Acc_Balance.openNextMonthRecord(n_object_id,n_daytime);";"EC_TRAN";
"LIFTING_ACC_MTH_INIT";"UPDATING OR DELETING";"BEFORE";"200";"EcBp_Lift_Acc_Balance.valUpdateInitBalance(n_object_id, n_daytime);";"EC_TRAN";
"LIFTING_ACCOUNT";"INSERTING OR UPDATING";"BEFORE";"100";"EcBp_Lifting_Account.validateAccount(n_object_id, n_storage_id, n_company_id, n_profit_centre_id);";"EC_TRAN";
"LIFTING_ACTIVITY";"INSERTING OR UPDATING";"AFTER";"200";"EcBp_Cargo_Activity.activityBOLmapping( n_cargo_no, n_activity_code, n_run_no);";"EC_TRAN";
"LIFTING_ACTIVITY";"INSERTING OR UPDATING OR DELETING";"AFTER";"300";"EcBp_Storage_Lift_Nomination.calcSubDayLiftingCargo(n_cargo_no);";"EC_TRAN";
"LIFTING_DOC_RECEIVER";"DELETING";"BEFORE";"600";"DELETE FROM TV_LIFT_DOC_INSTRUCTION WHERE PARCEL_NO=N_PARCEL_NO AND COMPANY_CONTACT_ID=N_RECEIVER_ID;";"EC_TRAN";
"LIFTING_DOC_RECEIVER";"INSERTING";"AFTER";"600";"ecdp_cargo_document.instInstructionReceiver(n_parcel_no, n_receiver_id);";"EC_TRAN";
"LIFTING_DOC_SET";"DELETING";"BEFORE";"100";"DELETE FROM TV_LIFT_DOC_INSTRUCTION WHERE PARCEL_NO=N_PARCEL_NO AND DOC_CODE=o_DOC_CODE;";"EC_TRAN";
"LIFTING_DOC_SET";"INSERTING";"AFTER";"100";"ecdp_cargo_document.instInstructionDoc(n_parcel_no, n_doc_code);";"EC_TRAN";
"LOG_ENTRY";"INSERTING";"BEFORE";"100";"EcDp_System_Key.assignNextNumber('LOG_ENTRY', n_LOG_ENTRY_SEQ);";"EC_FRMW";
"MAPPING_CLASS";"INSERTING";"BEFORE";"1000";"IF (n_CLASS_MAPPING_KEY IS NULL) THEN ecdp_system_key.assignNextNumber('MAPPING_CLASS', n_CLASS_MAPPING_KEY); END IF;";"EC_ECDM";
"MERCURY_REMOVAL_UNIT";"UPDATING";"AFTER";"3000";"ecdp_equipment_event.updateEventStatus(n_OBJECT_ID, n_DAYTIME, 'MERCURY_REMOVAL_UNIT');";"EC_PROD";
"MESSAGE_CONTACT";"INSERTING OR UPDATING";"BEFORE";"100";"DECLARE CC NUMBER; lv_delivery_address VARCHAR(1000); lv_delivery_method VARCHAR(32); BEGIN lv_delivery_address := vt(vt.LAST).DELIVERY_ADDRESS; lv_delivery_method := vt(vt.LAST).DELIVERY_METHOD; IF lv_delivery_address IS NOT NULL AND lv_delivery_method is NOT NULL THEN SELECT count(DELIVERY_ADDRESS) into CC from DV_MSG_DELIVERY_ADDRESS t where t.object_id = n_OBJECT_ID and t.DELIVERY_METHOD = lv_delivery_method and t.DELIVERY_ADDRESS = lv_delivery_address; IF CC = 0 THEN INSERT INTO MSG_DELIVERY_ADDRESS (OBJECT_ID, DELIVERY_METHOD, DELIVERY_ADDRESS) VALUES (n_OBJECT_ID, lv_delivery_method, lv_delivery_address); END IF; END IF; END;";"EC_FRMW";
"MESSAGE_CONTACT";"INSERTING OR UPDATING";"BEFORE";"200";"DECLARE CC NUMBER; lv_delivery_address VARCHAR(1000); lv_delivery_method VARCHAR(32); BEGIN lv_delivery_address := vt(vt.LAST).DELIVERY_ADDRESS_2; lv_delivery_method := vt(vt.LAST).DELIVERY_METHOD_2; IF lv_delivery_address IS NOT NULL AND lv_delivery_method is NOT NULL THEN SELECT count(DELIVERY_ADDRESS) into CC from DV_MSG_DELIVERY_ADDRESS t where t.object_id = n_OBJECT_ID and t.DELIVERY_METHOD = lv_delivery_method and t.DELIVERY_ADDRESS = lv_delivery_address; IF CC = 0 THEN INSERT INTO MSG_DELIVERY_ADDRESS (OBJECT_ID, DELIVERY_METHOD, DELIVERY_ADDRESS) VALUES (n_OBJECT_ID, lv_delivery_method, lv_delivery_address); END IF; END IF; END;";"EC_FRMW";
"MESSAGE_DISTR_CONN";"INSERTING OR UPDATING";"AFTER";"100";"    DECLARE CC NUMBER;  BEGIN    SELECT count(CODE) into CC from TV_DISTRIBUTION_SET where CODE=n_DISTR_SET_CODE;    IF CC = 0 THEN      INSERT INTO DISTRIBUTION_SET (DISTRIBUTION_SET_CODE, NAME, FUNCTIONAL_AREA_ID)   VALUES ( n_DISTR_SET_CODE, n_DISTR_SET_CODE, (SELECT FUNCTIONAL_AREA_ID FROM OV_MESSAGE_DEFINITION mdef, dv_message_distribution mdist  WHERE  mdist.OBJECT_CODE=mdef.CODE AND mdist.MESSAGE_DISTRIBUTION_NO=n_MESSAGE_DISTRIBUTION_NO)); END IF; END;";"EC_FRMW";
"MESSAGE_DISTRIBUTION";"DELETING";"BEFORE";"10";"DELETE FROM  MESSAGE_DISTR_CONN where MESSAGE_DISTRIBUTION_NO=o_MESSAGE_DISTRIBUTION_NO;";"EC_FRMW";
"METER";"INSERTING OR UPDATING";"BEFORE";"100";"ECDP_METER.validateMeter(vt(vt.LAST).meter_type, vt(vt.LAST).delivery_stream_id,vt(vt.LAST).delivery_point_id,vt(vt.LAST).pipeline_segment_id);";"EC_TRAN";
"METER_ALLOC_METHOD";"INSERTING OR UPDATING";"BEFORE";"700";"ue_alloc_method.validateMeterLoc(n_OBJECT_ID,n_DAYTIME,n_END_DATE);";"EC_TRAN";
"METER_ALLOC_METHOD";"INSERTING OR UPDATING";"BEFORE";"800";"ue_alloc_method.validateOverlappingPeriod(n_OBJECT_ID,n_DAYTIME,n_END_DATE, n_ALLOC_LEVEL);";"EC_TRAN";
"METER_ALLOC_METHOD_NP";"INSERTING";"BEFORE";"100";"ue_alloc_method.checkNomPoint(n_ALLOC_METHOD_SEQ);";"EC_TRAN";
"METER_ALLOC_METHOD_NP";"INSERTING";"BEFORE";"200";"ue_alloc_method.validateAllocMethod(n_ALLOC_METHOD_SEQ);";"EC_TRAN";
"METER_COMP_ANALYSIS";"INSERTING OR UPDATING";"AFTER";"100";"ecdp_meter_measurement.setMeterCompStatus(n_analysis_no,n_last_updated_by);";"EC_TRAN";
"METER_DAY_COMPOSITION";"UPDATING";"AFTER";"100";"ecdp_meter_measurement.setMeterCompStatus(n_analysis_no,n_last_updated_by);";"EC_TRAN";
"METER_DAY_MEAS_APPROVED";"DELETING";"BEFORE";"100";"IF EcDp_Meter_Measurement.getNumberOfSubDailyRecords(n_OBJECT_ID,n_DAYTIME) > 0 THEN RAISE_APPLICATION_ERROR(-20216,'Child record exists in sub daily meter measurement.'); END IF;";"EC_TRAN";
"METER_DAY_MEAS_APPROVED";"INSERTING";"BEFORE";"200";"n_CLASS_NAME := 'METER_DAY_MEAS_APPROVED'; ";"EC_TRAN";
"METER_DAY_MEAS_APPROVED";"INSERTING";"BEFORE";"300";"n_MEAS_STATUS := 'APPROVED'; ";"EC_TRAN";
"METER_DAY_MEASUREMENT";"DELETING";"BEFORE";"100";"IF EcDp_Meter_Measurement.getNumberOfSubDailyRecords(n_OBJECT_ID,n_DAYTIME) > 0 THEN RAISE_APPLICATION_ERROR(-20216,'Child record exists in sub daily meter measurement.'); END IF;";"EC_TRAN";
"METER_DAY_MEASUREMENT";"INSERTING";"BEFORE";"200";"n_CLASS_NAME := 'METER_DAY_MEASUREMENT'; ";"EC_TRAN";
"METER_DAY_MEASUREMENT";"INSERTING";"BEFORE";"300";"n_MEAS_STATUS := 'PROVISIONAL'; ";"EC_TRAN";
"METER_EVENT_FCST_QUALITY";"INSERTING";"BEFORE";"100";"n_CLASS_NAME := 'METER_EVENT_FCST_QUALITY'; ";"EC_TRAN";
"METER_MTH_COMPOSITION";"UPDATING";"AFTER";"100";"ecdp_meter_measurement.setMeterCompStatus(n_analysis_no,n_last_updated_by);";"EC_TRAN";
"METER_MTH_MEAS_APPROVED";"INSERTING";"BEFORE";"100";"n_CLASS_NAME := 'METER_MTH_MEAS_APPROVED'; ";"EC_TRAN";
"METER_MTH_MEAS_APPROVED";"INSERTING";"BEFORE";"200";"n_MEAS_STATUS := 'APPROVED';";"EC_TRAN";
"METER_MTH_MEASUREMENT";"INSERTING";"BEFORE";"100";"n_CLASS_NAME := 'METER_MTH_MEASUREMENT'; ";"EC_TRAN";
"METER_MTH_MEASUREMENT";"INSERTING";"BEFORE";"200";"n_MEAS_STATUS := 'PROVISIONAL';";"EC_TRAN";
"METER_SUB_DAY_MEAS";"INSERTING";"AFTER";"100";"EcDp_Meter_Measurement.aggregateSubDailyToDaily(n_OBJECT_ID, Ecdp_Meter.getProductionDay(n_OBJECT_ID, n_Daytime, n_summer_time), nvl(n_last_updated_by, n_created_by));";"EC_TRAN";
"METER_SUB_DAY_MEAS";"UPDATING";"AFTER";"200";"EcDp_Meter_Measurement.aggregateSubDailyToDaily(n_OBJECT_ID, n_PRODUCTION_DAY, nvl(n_last_updated_by, n_created_by));";"EC_TRAN";
"MSG_TCTR_SHIPPER_PAIR";"DELETING";"BEFORE";"200";"EcDp_Contract_Shipper.deleteShipper(n_object_id, n_EXIT_DELIVERY_POINT_ID, n_downstream_shipper_id, n_daytime);";"EC_TRAN";
"MSG_TCTR_SHIPPER_PAIR";"INSERTING";"AFTER";"100";"EcDp_Contract_Shipper.generateNomHours(n_object_id, n_downstream_shipper_id, n_EXIT_DELIVERY_POINT_ID, n_daytime, n_created_by);";"EC_TRAN";
"NOMINATION_POINT";"UPDATING('CONTRACT_ID') OR UPDATING('CONTRACT_CODE') OR UPDATING('ENTRY_LOCATION_ID') OR UPDATING('ENTRY_LOCATION_CODE') OR UPDATING('EXIT_LOCATION_ID') OR UPDATING('EXIT_LOCATION_CODE')";"BEFORE";"9150";"EcDp_NOMINATION.CheckTransportNomination(n_object_id, n_contract_id, n_entry_location_id, n_exit_location_id);";"EC_TRAN";
"NOMPNT_CONNECTION";"INSERTING OR UPDATING";"BEFORE";"600";"EcBp_Contract_Nomination.checkNomPntOverlaps(n_object_id, n_nompnt_id, n_daytime, n_end_date);";"EC_TRAN";
"NOMPNT_PC_COMPANY";"INSERTING OR UPDATING";"BEFORE";"600";"EcBp_Contract_Nomination.checkProfitCentreOverlaps(n_object_id, n_profit_centre_id, n_company_id, n_daytime, n_end_date);";"EC_SALE";
"NOMPNT_PC_CPY_PRIORITY";"INSERTING OR UPDATING";"BEFORE";"800";"EcBp_Contract_Nomination.checkProfitCentreOverlaps(n_object_id, n_profit_centre_id, n_company_id, n_daytime, n_end_date);";"EC_SALE";
"NOMPNT_PROFIT_CENTRE";"INSERTING OR UPDATING";"BEFORE";"100";"EcBp_Contract_Nomination.checkIfPcListOverlaps(n_OBJECT_ID, n_PROFIT_CENTRE_ID, n_DAYTIME, n_END_DATE);";"EC_TRAN";
"OBJECT_GROUP";"DELETING";"BEFORE";"500";"EcBp_Objects_Group_Conn.validateDeleteObjectGrp(n_OBJECT_ID, n_START_DATE, n_GROUP_TYPE);";"EC_PROD";
"OBJECT_GROUP";"INSERTING";"BEFORE";"550";"EcBp_Objects_Group_Conn.verifyObjectGrpBefore(n_OBJECT_ID, n_START_DATE, n_GROUP_TYPE, n_END_DATE);";"EC_PROD";
"OBJECT_GROUP";"UPDATING";"AFTER";"700";"EcBp_Objects_Group_Conn.updateChildEndDate(n_OBJECT_ID, n_GROUP_TYPE, n_START_DATE, n_END_DATE);";"EC_PROD";
"OBJECT_GROUP";"UPDATING";"BEFORE";"600";"EcBp_Objects_Group_Conn.verifyObjectGrp(n_OBJECT_ID, n_START_DATE, n_GROUP_TYPE, n_END_DATE);";"EC_PROD";
"OBJECT_GROUP_CONN";"INSERTING OR UPDATING";"BEFORE";"600";"EcBp_Objects_Group_Conn.verifyObjectGrpConn(n_OBJECT_ID, n_PARENT_START_DATE, n_PARENT_GROUP_TYPE, n_START_DATE, n_END_DATE);";"EC_PROD";
"OBJECT_GROUP_CONN";"INSERTING OR UPDATING";"BEFORE";"700";"EcBp_Objects_Group_Conn.checkIfEventOverlaps(n_OBJECT_ID, n_PARENT_START_DATE, n_PARENT_GROUP_TYPE,n_OBJECT_NAME, n_START_DATE, n_END_DATE);";"EC_PROD";
"OBJECT_GROUP_CONN";"UPDATING OR DELETING";"BEFORE";"800";"EcBp_Objects_Group_Conn.checkSwingWellConn(n_OBJECT_ID, n_PARENT_START_DATE, n_PARENT_GROUP_TYPE,n_OBJECT_NAME, n_START_DATE, n_END_DATE);";"EC_PROD";
"OBJECT_LIST_SETUP";"INSERTING";"BEFORE";"20";"IF :NEW.GENERIC_CLASS_NAME IS NULL THEN n_GENERIC_CLASS_NAME:=EC_OBJECT_LIST_VERSION.class_name(n_object_id,n_daytime);  END IF;";"EC_REVN";
"OBJECT_LIST_SETUP";"INSERTING OR UPDATING";"BEFORE";"10";"EcDp_Object_List.CheckInsertDuplicate(n_object_id,n_generic_object_code,n_daytime,n_end_date,n_relational_obj_code,n_rec_id);";"EC_REVN";
"OBJECT_SINGLE_TRANSFER";"INSERTING OR UPDATING";"AFTER";"100";"IF n_DAYTIME > SYSDATE+1 THEN Raise_Application_Error('-20630', 'Start Date should not exceed more than one day of system date.');  END IF;";"EC_PROD";
"OBJ_SINGLE_TRANSFER_FORM";"INSERTING OR UPDATING";"AFTER";"100";"IF n_DAYTIME > SYSDATE+1 THEN Raise_Application_Error('-20630', 'Start Date should not exceed more than one day of system date.');  END IF;";"EC_PROD";
"OBJ_SINGLE_TRANSFER_VIEW";"INSERTING OR UPDATING";"AFTER";"100";"IF n_DAYTIME > SYSDATE+1 THEN Raise_Application_Error('-20630', 'Start Date should not exceed more than one day of system date.');  END IF;";"EC_PROD";
"OPRES_PERIOD_RESTRICTION";"INSERTING OR UPDATING";"AFTER";"200";"Ecdp_Capacity_Restriction.updateDailyRestriction(n_OBJECT_ID, o_DAYTIME, n_DAYTIME, :OLD.END_DATE, n_END_DATE);";"EC_TRAN";
"OPRES_PERIOD_RESTRICTION";"INSERTING OR UPDATING";"BEFORE";"100";"Ecdp_Capacity_Restriction.validateOverlappingPeriod(n_OBJECT_ID, o_DAYTIME, n_DAYTIME, :OLD.END_DATE, n_END_DATE);";"EC_TRAN";
"PAYMENT_SCHEME";"UPDATING";"BEFORE";"10";"ecdp_payment_scheme.DelObj(n_object_id,n_object_end_date);";"EC_REVN";
"PAYMENT_SCHEME_ITEM";"INSERTING";"BEFORE";"10";"EcDp_System_Key.assignNextNumber('PAYMENT_SCHEME_ITEM',n_item_no);";"EC_REVN";
"PAYMENT_SCHEME_ITEM";"INSERTING OR UPDATING";"BEFORE";"20";"IF (n_VALUE_TYPE='MANUAL' OR n_VALUE_TYPE='VALUE') AND n_VALUE is null THEN raise_application_error(-20000,'Value cannot be null!'); END IF;";"EC_REVN";
"PAYMENT_TERM";"INSERTING OR UPDATING";"BEFORE";"100";"ecdp_calendar.validateOffset(:NEW.day_value, :NEW.payment_term_method);";"EC_REVN";
"PERF_DAY_PROD_ALLOC";"INSERTING";"BEFORE";"100";"n_CLASS_NAME:='PERF_DAY_PROD_ALLOC';";"EC_PROD";
"PERF_INTERVAL_SPLIT";"INSERTING";"AFTER";"1300";"EcDp_Well_Reservoir.setPerfIntervalShareEndDate(n_OBJECT_ID,n_DAYTIME,'PERF_INTERVAL_SPLIT' );";"EC_PROD";
"PERF_MTH_CPY_ALLOC";"INSERTING";"BEFORE";"100";"n_CLASS_NAME:='PERF_MTH_CPY_ALLOC';";"EC_PROD";
"PERF_MTH_PROD_ALLOC";"INSERTING";"BEFORE";"100";"n_CLASS_NAME:='PERF_MTH_PROD_ALLOC';";"EC_PROD";
"PERF_PERIOD_STATUS";"DELETING";"BEFORE";"600";"EcBp_Perforation.DelAllowPerfClosedLT(n_OBJECT_ID, n_DAYTIME, n_SUMMER_TIME, n_PERF_STATUS);";"EC_PROD";
"PERF_PERIOD_STATUS";"INSERTING";"BEFORE";"300";"EcBp_Perforation.IUAllowPerfClosedLT(n_OBJECT_ID, n_DAYTIME, n_SUMMER_TIME, n_PERF_STATUS);";"EC_PROD";
"PERF_PERIOD_STATUS";"INSERTING";"BEFORE";"500";"EcBp_Perforation.AllowPerfClosedLT(n_OBJECT_ID, n_DAYTIME, n_SUMMER_TIME, n_PERF_STATUS);";"EC_PROD";
"PERF_PERIOD_STATUS";"UPDATING";"BEFORE";"400";"IF (:OLD.RECORD_STATUS = n_RECORD_STATUS) THEN EcBp_Perforation.IUAllowPerfClosedLT(n_OBJECT_ID, n_DAYTIME, n_SUMMER_TIME, n_PERF_STATUS); END IF;";"EC_PROD";
"PERIOD_GAS_STRM_DATA";"INSERTING OR UPDATING";"BEFORE";"100";"EcBp_Stream_Event.validatePeriod(n_OBJECT_ID, n_DAYTIME, n_END_DATE);";"EC_PROD";
"PERIOD_GAS_STRM_DATA_AGA";"INSERTING OR UPDATING";"BEFORE";"100";"EcBp_Stream_Event.validatePeriod(n_OBJECT_ID, n_DAYTIME, n_END_DATE);";"EC_PROD";
"PIPE_PIGGING_EVENT";"INSERTING OR UPDATING";"BEFORE";"100";"n_PRODUCTION_DAY := Ecdp_Productionday.getProductionDay('PIPELINE',n_OBJECT_ID,n_DAYTIME);";"EC_PROD";
"PIPE_SUB_DAY_PC_STATUS";"INSERTING OR UPDATING";"BEFORE";"10";"n_summer_time := ecdp_date_time.get_summertime_flag(n_daytime,n_summer_time, EcDp_ProductionDay.findProductionDayDefinition(NULL, n_OBJECT_ID, n_DAYTIME));";"EC_PROD";
"POWER_DISTRIBUTION_EQPM";"UPDATING";"AFTER";"3000";"ecdp_equipment_event.updateEventStatus(n_OBJECT_ID, n_DAYTIME, 'POWER_DISTRIBUTION_EQPM');";"EC_PROD";
"PRICE_LIST_ALLOC";"DELETING";"BEFORE";"100";"ecbp_price_value.validateDelete(n_OBJECT_ID,n_PRICE_CONCEPT_CODE,n_PRICE_ELEMENT_CODE,n_daytime);";"EC_SALE";
"PRICE_LIST_ALLOC";"INSERTING";"BEFORE";"200";"n_PRICE_CONCEPT_CODE := ec_product_price.price_concept_code(n_OBJECT_ID);";"EC_SALE";
"PRICE_OBJECT";"UPDATING";"BEFORE";"110";"ecdp_price.ValidateInUse(n_object_id,n_price_concept_code,n_product_id,n_daytime);";"EC_REVN";
"PROCESS_MONITOR";"DELETING";"BEFORE";"100";"DELETE FROM PROC_MONITOR_BA_REL WHERE PROCESS_MONITOR_NO= o_PROCESS_MONITOR_NO;";"EC_FRMW";
"PROCESS_NOTIFICATION";"UPDATING";"BEFORE";"100";"    IF n_ACKNOWLEDGED_IND != nvl(:old.ACKNOWLEDGED_IND,'N') THEN IF  n_ACKNOWLEDGED_IND = 'Y' THEN n_ACKNOWLEDGED_BY := nvl(EcDp_Context.getAppUser, User); n_ACKNOWLEDGED_DATE := EcDp_Date_Time.getCurrentSysdate; ELSE n_ACKNOWLEDGED_BY := null; n_ACKNOWLEDGED_DATE := null; END IF;  END IF;";"EC_FRMW";
"PROCESS_TRAIN_EVENT";"DELETING";"BEFORE";"200";"ue_cargo_planning.delProcessTrainEvent(n_OBJECT_ID, n_DAYTIME, n_END_DATE);";"EC_TRAN";
"PROCESS_TRAIN_EVENT";"INSERTING OR UPDATING";"AFTER";"100";"ue_cargo_planning.setProcessTrainEvent(n_OBJECT_ID, n_DAYTIME, n_END_DATE, n_EVENT_CODE);";"EC_TRAN";
"PROD_AREA_FORECAST";"INSERTING";"BEFORE";"3000";"n_FORECAST_TYPE:=ec_prod_forecast.forecast_type(n_FCST_SCEN_NO);n_SCENARIO:=ec_prod_forecast.scenario(n_FCST_SCEN_NO);n_EFFECTIVE_DAYTIME:=ec_prod_forecast.daytime(n_FCST_SCEN_NO);";"EC_PROD";
"PROD_FCTY1_FORECAST";"INSERTING";"BEFORE";"3000";"n_FORECAST_TYPE:=ec_prod_forecast.forecast_type(n_FCST_SCEN_NO);n_SCENARIO:=ec_prod_forecast.scenario(n_FCST_SCEN_NO);n_EFFECTIVE_DAYTIME:=ec_prod_forecast.daytime(n_FCST_SCEN_NO);IF n_CLASS_NAME IS NULL THEN n_CLASS_NAME:='PROD_FCTY1_FORECAST';END IF;";"EC_PROD";
"PROD_FCTY2_FORECAST";"INSERTING";"BEFORE";"3000";"n_FORECAST_TYPE:=ec_prod_forecast.forecast_type(n_FCST_SCEN_NO);n_SCENARIO:=ec_prod_forecast.scenario(n_FCST_SCEN_NO);n_EFFECTIVE_DAYTIME:=ec_prod_forecast.daytime(n_FCST_SCEN_NO);IF n_CLASS_NAME IS NULL THEN n_CLASS_NAME:='PROD_FCTY2_FORECAST';END IF;";"EC_PROD";
"PROD_FIELD_FORECAST";"INSERTING";"BEFORE";"3000";"n_FORECAST_TYPE:=ec_prod_forecast.forecast_type(n_FCST_SCEN_NO);n_SCENARIO:=ec_prod_forecast.scenario(n_FCST_SCEN_NO);n_EFFECTIVE_DAYTIME:=ec_prod_forecast.daytime(n_FCST_SCEN_NO);";"EC_PROD";
"PROD_PRICE_SUB_DAY_LIST";"DELETING";"BEFORE";"200";"ecbp_price_value.validateDelete(n_OBJECT_ID,n_PRICE_CONCEPT_CODE,n_PRICE_ELEMENT_CODE,n_DAYTIME);";"EC_SALE";
"PROD_PRICE_SUB_DAY_LIST";"INSERTING";"AFTER";"400";"EcDp_Sales_Contract_Price.InsNewPriceElementSet(n_OBJECT_ID ,n_PRICE_CONCEPT_CODE, n_PRICE_ELEMENT_CODE, n_DAYTIME, n_CREATED_BY);";"EC_SALE";
"PROD_PRICE_SUB_DAY_LIST";"INSERTING";"BEFORE";"100";"n_price_concept_code :=EC_PRODUCT_PRICE.price_concept_code(n_object_id);";"EC_SALE";
"PROD_PRICE_SUB_DAY_LIST";"INSERTING";"BEFORE";"300";"n_price_element_code :=NVL(n_price_element_code,ecdp_sales_contract_price.GetAnySubPriceElement(n_price_concept_code,n_object_id,n_daytime));";"EC_SALE";
"PROD_PRODUNIT_FORECAST";"INSERTING";"BEFORE";"3000";"n_FORECAST_TYPE:=ec_prod_forecast.forecast_type(n_FCST_SCEN_NO);n_SCENARIO:=ec_prod_forecast.scenario(n_FCST_SCEN_NO);n_EFFECTIVE_DAYTIME:=ec_prod_forecast.daytime(n_FCST_SCEN_NO);";"EC_PROD";
"PROD_STORAGE_FORECAST";"INSERTING";"BEFORE";"3000";"n_FORECAST_TYPE:=ec_prod_forecast.forecast_type(n_FCST_SCEN_NO);n_SCENARIO:=ec_prod_forecast.scenario(n_FCST_SCEN_NO);n_EFFECTIVE_DAYTIME:=ec_prod_forecast.daytime(n_FCST_SCEN_NO);";"EC_PROD";
"PROD_STREAM_FORECAST";"INSERTING";"BEFORE";"3000";"n_FORECAST_TYPE:=ec_prod_forecast.forecast_type(n_FCST_SCEN_NO);n_SCENARIO:=ec_prod_forecast.scenario(n_FCST_SCEN_NO);n_EFFECTIVE_DAYTIME:=ec_prod_forecast.daytime(n_FCST_SCEN_NO);";"EC_PROD";
"PROD_SUB_AREA_FORECAST";"INSERTING";"BEFORE";"3000";"n_FORECAST_TYPE:=ec_prod_forecast.forecast_type(n_FCST_SCEN_NO);n_SCENARIO:=ec_prod_forecast.scenario(n_FCST_SCEN_NO);n_EFFECTIVE_DAYTIME:=ec_prod_forecast.daytime(n_FCST_SCEN_NO);";"EC_PROD";
"PROD_SUB_FIELD_FORECAST";"INSERTING";"BEFORE";"3000";"n_FORECAST_TYPE:=ec_prod_forecast.forecast_type(n_FCST_SCEN_NO);n_SCENARIO:=ec_prod_forecast.scenario(n_FCST_SCEN_NO);n_EFFECTIVE_DAYTIME:=ec_prod_forecast.daytime(n_FCST_SCEN_NO);";"EC_PROD";
"PROD_SUB_PRODUNIT_FCST";"INSERTING";"BEFORE";"3000";"n_FORECAST_TYPE:=ec_prod_forecast.forecast_type(n_FCST_SCEN_NO);n_SCENARIO:=ec_prod_forecast.scenario(n_FCST_SCEN_NO);n_EFFECTIVE_DAYTIME:=ec_prod_forecast.daytime(n_FCST_SCEN_NO);";"EC_PROD";
"PROD_TEST";"DELETING";"BEFORE";"100";"EcDp_Performance_Test.deleteChildEvent(n_TEST_NO);";"EC_PROD";
"PROD_TEST_RESULT";"DELETING";"AFTER";"800";"ecdp_performance_test.delPwelResultData(n_RESULT_NO);";"EC_PROD";
"PROD_TEST_RESULT";"INSERTING OR UPDATING";"BEFORE";"300";"EcDp_Performance_Test.validateTestDate(n_DAYTIME);";"EC_PROD";
"PROD_TEST_RESULT";"INSERTING OR UPDATING";"BEFORE";"350";"IF n_STATUS IS NULL THEN n_STATUS:='NEW'; END IF;";"EC_PROD";
"PROD_TEST_RESULT";"UPDATING";"AFTER";"400";"IF :OLD.daytime != n_daytime THEN ecdp_performance_test.auiSyncPwelResult(n_RESULT_NO, 'DAYTIME', n_DAYTIME, n_VALID_FROM_DATE, n_STATUS, n_USE_CALC, n_END_DATE, n_DURATION, n_LAST_UPDATED_BY, n_well_test_reason); END IF;";"EC_PROD";
"PROD_TEST_RESULT";"UPDATING";"AFTER";"500";"IF NVL(:OLD.valid_from_date,TO_DATE('01-JAN-1900', 'DD-MON-YYYY')) != NVL(n_valid_from_date,TO_DATE('01-JAN-1900', 'DD-MON-YYYY')) THEN ecdp_performance_test.auiSyncPwelResult(n_RESULT_NO, 'VALID_FROM_DATE', n_DAYTIME, n_VALID_FROM_DATE, n_STATUS, n_USE_CALC,n_END_DATE, n_DURATION, n_LAST_UPDATED_BY, n_well_test_reason); END IF;";"EC_PROD";
"PROD_TEST_RESULT";"UPDATING";"AFTER";"600";"IF NVL(:OLD.status,'EMPTY') != NVL(n_status,'EMPTY') THEN ecdp_performance_test.auiSyncPwelResult(n_RESULT_NO, 'STATUS', n_DAYTIME, n_VALID_FROM_DATE, n_STATUS, n_USE_CALC,n_END_DATE, n_DURATION, n_LAST_UPDATED_BY, n_well_test_reason); END IF;";"EC_PROD";
"PROD_TEST_RESULT";"UPDATING";"AFTER";"700";"IF NVL(:OLD.use_calc,'EMPTY') != NVL(n_use_calc,'EMPTY') THEN ecdp_performance_test.auiSyncPwelResult(n_RESULT_NO, 'USE_CALC', n_DAYTIME, n_VALID_FROM_DATE, n_STATUS, n_USE_CALC,n_END_DATE, n_DURATION, n_LAST_UPDATED_BY, n_well_test_reason); END IF;";"EC_PROD";
"PROD_TEST_RESULT";"UPDATING";"AFTER";"900";"IF NVL(:OLD.end_date,TO_DATE('01-JAN-1900', 'DD-MON-YYYY')) != NVL(n_end_date,TO_DATE('01-JAN-1900', 'DD-MON-YYYY')) THEN ecdp_performance_test.auiSyncPwelResult(n_RESULT_NO, 'END_DATE', n_DAYTIME, n_VALID_FROM_DATE, n_STATUS, n_USE_CALC,n_END_DATE, n_DURATION, n_LAST_UPDATED_BY, n_well_test_reason); END IF;";"EC_PROD";
"PROD_TEST_RESULT";"UPDATING";"AFTER";"1000";"IF NVL(:OLD.duration,-1) != NVL(n_duration,-1) THEN ecdp_performance_test.auiSyncPwelResult(n_RESULT_NO, 'DURATION', n_DAYTIME, n_VALID_FROM_DATE, n_STATUS, n_USE_CALC,n_END_DATE, n_DURATION, n_LAST_UPDATED_BY, n_well_test_reason); END IF;";"EC_PROD";
"PROD_TEST_RESULT";"UPDATING";"AFTER";"1100";"IF NVL(:OLD.record_status,-1) != NVL(n_record_status,-1) THEN ecdp_performance_test.auiUpdateRecordStatus(n_RESULT_NO, n_RECORD_STATUS, n_LAST_UPDATED_BY); END IF;";"EC_PROD";
"PROD_TEST_RESULT";"UPDATING";"AFTER";"1200";"IF NVL(:OLD.well_test_reason,'EMPTY') != NVL(n_well_test_reason,'EMPTY') THEN ecdp_performance_test.auiSyncPwelResult(n_RESULT_NO, 'WELL_TEST_REASON', n_DAYTIME, n_VALID_FROM_DATE, n_STATUS, n_USE_CALC,n_END_DATE, n_DURATION, n_LAST_UPDATED_BY, n_well_test_reason); END IF;";"EC_PROD";
"PROD_TEST_RESULT_SINGLE";"UPDATING";"AFTER";"100";"IF NVL(:OLD.record_status,-1) != NVL(n_record_status,-1) THEN ecdp_performance_test.auiUpdateRecordStatus(n_RESULT_NO, n_RECORD_STATUS, n_LAST_UPDATED_BY); END IF;";"EC_PROD";
"PRODUCT_COUNTRY";"INSERTING OR UPDATING";"AFTER";"500";"ecdp_stream_item.IsIntergroupConversionValid(:new.density,:new.density_mass_uom,:new.density_volume_uom,:new.gcv,:new.gcv_energy_uom,:new.gcv_volume_uom,:new.mcv,:new.mcv_energy_uom,:new.mcv_mass_uom);";"EC_REVN";
"PRODUCT_COUNTRY";"UPDATING";"BEFORE";"510";"IF :NEW.OBJECT_END_DATE = :NEW.OBJECT_START_DATE THEN DELETE DV_PRODUCT_COUNTRY_V WHERE OBJECT_ID = :NEW.OBJECT_ID; END IF;";"EC_REVN";
"PRODUCT_COUNTRY_BOE";"UPDATING";"BEFORE";"510";"IF :NEW.OBJECT_END_DATE = :NEW.OBJECT_START_DATE THEN DELETE DV_PRODUCT_COUNTRY_BOE_V WHERE OBJECT_ID = :NEW.OBJECT_ID; END IF;";"EC_REVN";
"PRODUCT_COUNTRY_BOE_V";"INSERTING";"BEFORE";"600";"ecdp_stream_item.InsertUpdateIUCVersion('PRODUCT_COUNTRY_BOE',n_OBJECT_ID,n_daytime,nvl(n_last_updated_by,n_created_by));";"EC_REVN";
"PRODUCT_COUNTRY_BOE_V";"UPDATING";"BEFORE";"700";"IF UPDATING('DAYTIME') THEN ecdp_stream_item.InsertUpdateIUCVersion('PRODUCT_COUNTRY_BOE',n_OBJECT_ID,n_daytime,nvl(n_last_updated_by,n_created_by)); END IF;";"EC_REVN";
"PRODUCT_COUNTRY_V";"INSERTING";"BEFORE";"600";"ecdp_stream_item.InsertUpdateIUCVersion('PRODUCT_COUNTRY',n_OBJECT_ID,n_daytime,nvl(n_last_updated_by,n_created_by));";"EC_REVN";
"PRODUCT_COUNTRY_V";"INSERTING OR UPDATING";"AFTER";"500";"ecdp_stream_item.IsIntergroupConversionValid(:new.density,:new.density_mass_uom,:new.density_volume_uom,:new.gcv,:new.gcv_energy_uom,:new.gcv_volume_uom,:new.mcv,:new.mcv_energy_uom,:new.mcv_mass_uom);";"EC_REVN";
"PRODUCT_COUNTRY_V";"UPDATING";"BEFORE";"700";"IF UPDATING('DAYTIME') THEN ecdp_stream_item.InsertUpdateIUCVersion('PRODUCT_COUNTRY',n_OBJECT_ID,n_daytime,nvl(n_last_updated_by,n_created_by)); END IF;";"EC_REVN";
"PRODUCT_FIELD";"INSERTING OR UPDATING";"AFTER";"500";"ecdp_stream_item.IsIntergroupConversionValid(:new.density,:new.density_mass_uom,:new.density_volume_uom,:new.gcv,:new.gcv_energy_uom,:new.gcv_volume_uom,:new.mcv,:new.mcv_energy_uom,:new.mcv_mass_uom);";"EC_REVN";
"PRODUCT_FIELD";"UPDATING";"BEFORE";"600";"IF :NEW.OBJECT_END_DATE = :NEW.OBJECT_START_DATE THEN DELETE DV_PRODUCT_FIELD_V WHERE OBJECT_ID = :NEW.OBJECT_ID; END IF;";"EC_REVN";
"PRODUCT_FIELD_BOE";"UPDATING";"BEFORE";"500";"IF :NEW.OBJECT_END_DATE = :NEW.OBJECT_START_DATE THEN DELETE DV_PRODUCT_FIELD_BOE_V WHERE OBJECT_ID = :NEW.OBJECT_ID; END IF;";"EC_REVN";
"PRODUCT_FIELD_BOE_V";"INSERTING";"BEFORE";"600";"ecdp_stream_item.InsertUpdateIUCVersion('PRODUCT_FIELD_BOE',n_OBJECT_ID,n_daytime,nvl(n_last_updated_by,n_created_by));";"EC_REVN";
"PRODUCT_FIELD_BOE_V";"UPDATING";"BEFORE";"700";"IF UPDATING('DAYTIME') THEN ecdp_stream_item.InsertUpdateIUCVersion('PRODUCT_FIELD_BOE',n_OBJECT_ID,n_daytime,nvl(n_last_updated_by,n_created_by)); END IF;";"EC_REVN";
"PRODUCT_FIELD_V";"INSERTING";"BEFORE";"600";"ecdp_stream_item.InsertUpdateIUCVersion('PRODUCT_FIELD',n_OBJECT_ID,n_daytime,nvl(n_last_updated_by,n_created_by));";"EC_REVN";
"PRODUCT_FIELD_V";"INSERTING OR UPDATING";"AFTER";"500";"ecdp_stream_item.IsIntergroupConversionValid(:new.density,:new.density_mass_uom,:new.density_volume_uom,:new.gcv,:new.gcv_energy_uom,:new.gcv_volume_uom,:new.mcv,:new.mcv_energy_uom,:new.mcv_mass_uom);";"EC_REVN";
"PRODUCT_FIELD_V";"UPDATING";"BEFORE";"700";"IF UPDATING('DAYTIME') THEN ecdp_stream_item.InsertUpdateIUCVersion('PRODUCT_FIELD',n_OBJECT_ID,n_daytime,nvl(n_last_updated_by,n_created_by)); END IF;";"EC_REVN";
"PRODUCT_NODE";"INSERTING OR UPDATING";"AFTER";"500";"ecdp_stream_item.IsIntergroupConversionValid(:new.density,:new.density_mass_uom,:new.density_volume_uom,:new.gcv,:new.gcv_energy_uom,:new.gcv_volume_uom,:new.mcv,:new.mcv_energy_uom,:new.mcv_mass_uom);";"EC_REVN";
"PRODUCT_NODE";"UPDATING";"BEFORE";"510";"IF :NEW.OBJECT_END_DATE = :NEW.OBJECT_START_DATE THEN DELETE DV_PRODUCT_NODE_V WHERE OBJECT_ID = :NEW.OBJECT_ID; END IF;";"EC_REVN";
"PRODUCT_NODE_BOE";"UPDATING";"BEFORE";"500";"IF :NEW.OBJECT_END_DATE = :NEW.OBJECT_START_DATE THEN DELETE DV_PRODUCT_NODE_BOE_V WHERE OBJECT_ID = :NEW.OBJECT_ID; END IF;";"EC_REVN";
"PRODUCT_NODE_BOE_V";"INSERTING";"BEFORE";"600";"ecdp_stream_item.InsertUpdateIUCVersion('PRODUCT_COUNTRY_BOE',n_OBJECT_ID,n_daytime,nvl(n_last_updated_by,n_created_by));";"EC_REVN";
"PRODUCT_NODE_BOE_V";"UPDATING";"BEFORE";"700";"IF UPDATING('DAYTIME') THEN ecdp_stream_item.InsertUpdateIUCVersion('PRODUCT_NODE_BOE',n_OBJECT_ID,n_daytime,nvl(n_last_updated_by,n_created_by)); END IF;";"EC_REVN";
"PRODUCT_NODE_ITEM";"INSERTING";"AFTER";"100";"IF (n_code IS NULL) THEN ue_RevenueCodes.UpdateCodeForClass(n_object_id, n_daytime, 'PRODUCT_NODE_ITEM'); END IF;";"EC_REVN";
"PRODUCT_NODE_V";"INSERTING";"BEFORE";"600";"ecdp_stream_item.InsertUpdateIUCVersion('PRODUCT_NODE',n_OBJECT_ID,n_daytime,nvl(n_last_updated_by,n_created_by));";"EC_REVN";
"PRODUCT_NODE_V";"INSERTING OR UPDATING";"AFTER";"500";"ecdp_stream_item.IsIntergroupConversionValid(:new.density,:new.density_mass_uom,:new.density_volume_uom,:new.gcv,:new.gcv_energy_uom,:new.gcv_volume_uom,:new.mcv,:new.mcv_energy_uom,:new.mcv_mass_uom);";"EC_REVN";
"PRODUCT_NODE_V";"UPDATING";"BEFORE";"700";"IF UPDATING('DAYTIME') THEN ecdp_stream_item.InsertUpdateIUCVersion('PRODUCT_NODE',n_OBJECT_ID,n_daytime,nvl(n_last_updated_by,n_created_by)); END IF;";"EC_REVN";
"PRODUCT_PRICE_DS_LIST";"INSERTING";"BEFORE";"110";"n_price_concept_code := ec_product_price.price_concept_code(n_object_id);";"EC_SALE";
"PRODUCT_PRICE_LIST";"DELETING";"AFTER";"1100";"EcDp_Contract_setup.updateFactorAdjustedPrice(o_OBJECT_ID ,n_PRICE_CONCEPT_CODE, o_PRICE_ELEMENT_CODE, o_DAYTIME, o_CREATED_BY);";"EC_REVN";
"PRODUCT_PRICE_LIST";"DELETING";"BEFORE";"100";"ecbp_price_value.validateDelete(n_OBJECT_ID,n_PRICE_CONCEPT_CODE,n_PRICE_ELEMENT_CODE,n_DAYTIME);";"EC_SALE";
"PRODUCT_PRICE_LIST";"INSERTING";"AFTER";"120";"EcDp_Sales_Contract_Price.InsNewPriceElementSet(n_OBJECT_ID ,n_PRICE_CONCEPT_CODE, n_PRICE_ELEMENT_CODE, n_DAYTIME, n_CREATED_BY);";"EC_SALE";
"PRODUCT_PRICE_LIST";"INSERTING";"BEFORE";"110";"n_price_concept_code := ec_product_price.price_concept_code(n_object_id);n_price_element_code := ecdp_sales_contract_price.GetAnyPriceElement(n_price_concept_code,n_object_id,n_daytime);";"EC_SALE";
"PRODUCT_PRICE_LIST";"INSERTING OR UPDATING";"AFTER";"1000";"EcDp_Contract_setup.updateFactorAdjustedPrice(n_OBJECT_ID ,n_PRICE_CONCEPT_CODE, n_PRICE_ELEMENT_CODE, n_DAYTIME, n_CREATED_BY);";"EC_REVN";
"PROD_WELL_FORECAST";"INSERTING";"BEFORE";"3000";"n_FORECAST_TYPE:=ec_prod_forecast.forecast_type(n_FCST_SCEN_NO);n_SCENARIO:=ec_prod_forecast.scenario(n_FCST_SCEN_NO);n_EFFECTIVE_DAYTIME:=ec_prod_forecast.daytime(n_FCST_SCEN_NO);";"EC_PROD";
"PROD_WELL_FORECAST";"INSERTING";"BEFORE";"4000";"IF n_DAYTIME < ec_prod_forecast.daytime(n_FCST_SCEN_NO) THEN Raise_Application_Error('-20605', 'Forecast Date is lesser than Effective Date.');END IF;";"EC_PROD";
"PUMP";"UPDATING";"AFTER";"3000";"ecdp_equipment_event.updateEventStatus(n_OBJECT_ID, n_DAYTIME, 'PUMP');";"EC_PROD";
"PWEL_DAY_PROD_ALLOC";"INSERTING";"BEFORE";"100";"n_CLASS_NAME:='PWEL_DAY_PROD_ALLOC';";"EC_PROD";
"PWEL_MTH_CPY_ALLOC";"INSERTING";"BEFORE";"100";"n_CLASS_NAME:='PWEL_MTH_CPY_ALLOC';";"EC_PROD";
"PWEL_PERIOD_STATUS";"DELETING";"BEFORE";"600";"EcDp_Well.DelAllowWellClosedLT(n_OBJECT_ID, n_DAYTIME, n_SUMMER_TIME, n_WELL_STATUS);";"EC_PROD";
"PWEL_PERIOD_STATUS";"DELETING";"BEFORE";"800";"EcDp_Well.chkDeferEventWhenWellClosed('DELETE', n_OBJECT_ID, n_DAYTIME, n_WELL_STATUS, n_TIME_SPAN, n_SUMMER_TIME);";"EC_PROD";
"PWEL_PERIOD_STATUS";"INSERTING";"BEFORE";"300";"EcDp_Well.IUAllowWellClosedLT(n_OBJECT_ID, n_DAYTIME, n_SUMMER_TIME, n_WELL_STATUS);";"EC_PROD";
"PWEL_PERIOD_STATUS";"INSERTING";"BEFORE";"500";"EcDp_Well.AllowWellClosedLT(n_OBJECT_ID, n_DAYTIME, n_SUMMER_TIME, n_WELL_STATUS);";"EC_PROD";
"PWEL_PERIOD_STATUS";"INSERTING OR UPDATING";"BEFORE";"700";"EcDp_Well.chkDeferEventWhenWellClosed('INSERT', n_OBJECT_ID, n_DAYTIME, n_WELL_STATUS, n_TIME_SPAN, n_SUMMER_TIME);";"EC_PROD";
"PWEL_PERIOD_STATUS";"UPDATING";"BEFORE";"400";"IF (:OLD.RECORD_STATUS = n_RECORD_STATUS) THEN EcDp_Well.IUAllowWellClosedLT(n_OBJECT_ID, n_DAYTIME, n_SUMMER_TIME, n_WELL_STATUS); END IF;";"EC_PROD";
"PWEL_RESULT";"DELETING";"AFTER";"700";"Ecdp_performance_test.auidelEqpmResult(n_TEST_DEVICE_ID,n_RESULT_NO);";"EC_PROD";
"PWEL_RESULT";"DELETING";"AFTER";"1000";"Ecdp_performance_test.delPtstResultData(n_RESULT_NO);";"EC_PROD";
"PWEL_RESULT";"INSERTING";"AFTER";"900";"Ecdp_performance_test.auiSyncEqpmResult(n_TEST_DEVICE_ID,n_RESULT_NO,n_DAYTIME,n_CREATED_BY);";"EC_PROD";
"PWEL_RESULT";"INSERTING";"AFTER";"1400";"EcBp_TestDevice.updEQPMResultValues(n_TEST_DEVICE_ID, n_RESULT_NO, n_DAYTIME);";"EC_PROD";
"PWEL_RESULT";"INSERTING";"BEFORE";"250";"n_PRIMARY_IND:=Nvl(n_PRIMARY_IND,'Y'); n_FLOWING_IND := Nvl(n_FLOWING_IND,'Y'); n_RATE_SOURCE := Nvl(n_RATE_SOURCE,'MANUAL'); IF n_RESULT_NO IS NULL THEN EcDp_System_Key.assignNextNumber('PTST_RESULT', n_RESULT_NO); END IF;ecdp_performance_test.auiSyncPtstResult(n_RESULT_NO, 'SYNC', n_DAYTIME, n_VALID_FROM_DATE, n_STATUS, n_USE_CALC_IND, n_END_DATE, n_DURATION, n_CREATED_BY,n_WELL_TEST_REASON);";"EC_PROD";
"PWEL_RESULT";"INSERTING";"BEFORE";"360";"IF ec_pwel_period_status.active_well_status(n_OBJECT_ID,n_DAYTIME,'EVENT','<=') = 'CLOSED_LT' THEN RAISE_APPLICATION_ERROR(-20230,'Unable to create production test result for well that is closed long term.'); END IF;";"EC_PROD";
"PWEL_RESULT";"INSERTING";"BEFORE";"1500";"IF n_TEST_DEVICE_ID IS NULL THEN n_TEST_DEVICE_ID := ec_well_version.test_device_id(n_OBJECT_ID, n_DAYTIME, '<='); END IF;";"EC_PROD";
"PWEL_RESULT";"INSERTING OR UPDATING";"AFTER";"100";"EcDp_Performance_Test.auiSetProductionDay(n_OBJECT_ID, n_DAYTIME, n_RESULT_NO, nvl(n_LAST_UPDATED_BY, n_CREATED_BY));";"EC_PROD";
"PWEL_RESULT";"INSERTING OR UPDATING";"BEFORE";"200";"IF n_STATUS IS NULL THEN n_STATUS:='NEW'; END IF;";"EC_PROD";
"PWEL_RESULT";"INSERTING OR UPDATING";"BEFORE";"300";"EcDp_Performance_Test.validateTestDate(n_DAYTIME);";"EC_PROD";
"PWEL_RESULT";"INSERTING OR UPDATING";"BEFORE";"350";"IF EcDp_Objects.getOBjStartDate(n_OBJECT_ID) > n_VALID_FROM_DATE THEN RAISE_APPLICATION_ERROR(-20229,'Valid From Daytime is less than owner objects start date.'); END IF;";"EC_PROD";
"PWEL_RESULT";"UPDATING";"AFTER";"300";"IF :OLD.daytime != n_daytime THEN ecdp_performance_test.auiSyncPtstResult(n_RESULT_NO, 'DAYTIME', n_DAYTIME, n_VALID_FROM_DATE, n_STATUS, n_USE_CALC_IND, n_END_DATE, n_DURATION, n_LAST_UPDATED_BY,n_WELL_TEST_REASON); END IF;";"EC_PROD";
"PWEL_RESULT";"UPDATING";"AFTER";"400";"IF NVL(:OLD.valid_from_date,TO_DATE('01-JAN-1900', 'DD-MON-YYYY')) != NVL(n_valid_from_date,TO_DATE('01-JAN-1900', 'DD-MON-YYYY')) THEN ecdp_performance_test.auiSyncPtstResult(n_RESULT_NO, 'VALID_FROM_DATE', n_DAYTIME, n_VALID_FROM_DATE, n_STATUS, n_USE_CALC_IND, n_END_DATE, n_DURATION, n_LAST_UPDATED_BY,n_WELL_TEST_REASON); END IF;";"EC_PROD";
"PWEL_RESULT";"UPDATING";"AFTER";"500";"IF NVL(:OLD.status,'EMPTY') != NVL(n_status,'EMPTY') THEN ecdp_performance_test.auiSyncPtstResult(n_RESULT_NO, 'STATUS', n_DAYTIME, n_VALID_FROM_DATE, n_STATUS, n_USE_CALC_IND, n_END_DATE, n_DURATION, n_LAST_UPDATED_BY,n_WELL_TEST_REASON); END IF;";"EC_PROD";
"PWEL_RESULT";"UPDATING";"AFTER";"600";"IF NVL(:OLD.use_calc_ind,'EMPTY') != NVL(n_use_calc_ind,'EMPTY') THEN ecdp_performance_test.auiSyncPtstResult(n_RESULT_NO, 'USE_CALC', n_DAYTIME, n_VALID_FROM_DATE, n_STATUS, n_USE_CALC_IND, n_END_DATE, n_DURATION, n_LAST_UPDATED_BY,n_WELL_TEST_REASON); END IF;";"EC_PROD";
"PWEL_RESULT";"UPDATING";"AFTER";"1100";"IF NVL(:OLD.end_date,TO_DATE('01-JAN-1900', 'DD-MON-YYYY')) != NVL(n_end_date,TO_DATE('01-JAN-1900', 'DD-MON-YYYY')) THEN ecdp_performance_test.auiSyncPtstResult(n_RESULT_NO, 'END_DATE', n_DAYTIME, n_VALID_FROM_DATE, n_STATUS, n_USE_CALC_IND, n_END_DATE, n_DURATION, n_LAST_UPDATED_BY,n_WELL_TEST_REASON); END IF;";"EC_PROD";
"PWEL_RESULT";"UPDATING";"AFTER";"1200";"IF NVL(:OLD.duration,-1) != NVL(n_duration,-1) THEN ecdp_performance_test.auiSyncPtstResult(n_RESULT_NO, 'DURATION', n_DAYTIME, n_VALID_FROM_DATE, n_STATUS, n_USE_CALC_IND, n_END_DATE, n_DURATION, n_LAST_UPDATED_BY,n_WELL_TEST_REASON); END IF;";"EC_PROD";
"PWEL_RESULT";"UPDATING";"AFTER";"1300";"EcBp_TestDevice.updateRateSource(n_OBJECT_ID ,n_RESULT_NO, n_LAST_UPDATED_BY);";"EC_PROD";
"PWEL_RESULT";"UPDATING";"AFTER";"1600";"IF NVL(:OLD.WELL_TEST_REASON,'EMPTY') != NVL(n_WELL_TEST_REASON,'EMPTY') THEN ecdp_performance_test.auiSyncPtstResult(n_RESULT_NO, 'WELL_TEST_REASON', n_DAYTIME, n_VALID_FROM_DATE, n_STATUS, n_USE_CALC_IND, n_END_DATE, n_DURATION, n_LAST_UPDATED_BY,n_WELL_TEST_REASON); END IF;";"EC_PROD";
"PWEL_RESULT_1";"INSERTING";"AFTER";"200";"EcDp_Performance_Test.aiSyncPwelResultFromPwel(n_RESULT_NO,n_OBJECT_ID,n_CREATED_BY);";"EC_PROD";
"PWEL_RESULT_1";"INSERTING OR UPDATING";"AFTER";"100";"EcDp_Performance_Test.auiSetProductionDay(n_OBJECT_ID, n_DAYTIME, n_RESULT_NO, nvl(n_LAST_UPDATED_BY, n_CREATED_BY));";"EC_PROD";
"PWEL_RESULT_2";"INSERTING";"AFTER";"200";"EcDp_Performance_Test.aiSyncPwelResultFromPwel(n_RESULT_NO,n_OBJECT_ID,n_CREATED_BY);";"EC_PROD";
"PWEL_RESULT_2";"INSERTING OR UPDATING";"AFTER";"100";"EcDp_Performance_Test.auiSetProductionDay(n_OBJECT_ID, n_DAYTIME, n_RESULT_NO, nvl(n_LAST_UPDATED_BY, n_CREATED_BY));";"EC_PROD";
"PWEL_RESULT_3";"INSERTING";"AFTER";"200";"EcDp_Performance_Test.aiSyncPwelResultFromPwel(n_RESULT_NO,n_OBJECT_ID,n_CREATED_BY);";"EC_PROD";
"PWEL_RESULT_3";"INSERTING OR UPDATING";"AFTER";"100";"EcDp_Performance_Test.auiSetProductionDay(n_OBJECT_ID, n_DAYTIME, n_RESULT_NO, nvl(n_LAST_UPDATED_BY, n_CREATED_BY));";"EC_PROD";
"PWEL_SUB_DAY_STATUS";"INSERTING OR UPDATING";"BEFORE";"100";"EcBp_Well_SubDaily.chkObjSubDayFreq(n_ON_STREAM_HRS, 'WELL', n_OBJECT_ID, n_DAYTIME);";"EC_PROD";
"PWEL_SUB_DAY_STATUS_2";"INSERTING OR UPDATING";"BEFORE";"100";"EcBp_Well_SubDaily.chkObjSubDayFreq(n_ON_STREAM_HRS, 'WELL', n_OBJECT_ID, n_DAYTIME);";"EC_PROD";
"PWEL_TOTALIZER_GAS";"INSERTING OR UPDATING";"BEFORE";"100";"EcDp_Well_Event.validateTotalizerMax(n_OBJECT_ID,n_DAYTIME,n_OPENING_READING,n_CLOSING_READING);";"EC_PROD";
"PWEL_TOTALIZER_LIQ";"INSERTING OR UPDATING";"BEFORE";"100";"EcDp_Well_Event.validateTotalizerMax(n_OBJECT_ID,n_DAYTIME,n_OPENING_READING,n_CLOSING_READING);";"EC_PROD";
"QB_CLASS";"DELETING";"BEFORE";"100";"EcDp_Query_Builder.removeRelations(n_CLASS_ALIAS, n_object_id);";"EC_FRMW";
"QB_CLASS";"DELETING";"BEFORE";"200";"EcDp_Query_Builder.removeColumns(o_CLASS_ALIAS, n_object_id);";"EC_FRMW";
"QB_CLASS";"DELETING";"BEFORE";"300";"EcDp_Query_Builder.removeDateRelation(o_CLASS_ALIAS, n_object_id);";"EC_FRMW";
"QB_CLASS";"INSERTING";"AFTER";"100";"EcDp_Query_Builder.addColumns(n_CLASS_ALIAS, n_object_id);";"EC_FRMW";
"QB_CLASS";"INSERTING";"AFTER";"200";"EcDp_Query_Builder.addRelations(n_CLASS_ALIAS, n_object_id);";"EC_FRMW";
"QB_CLASS";"INSERTING";"AFTER";"300";"EcDp_Query_Builder.addDateRelation(n_CLASS_ALIAS, n_object_id);";"EC_FRMW";
"QB_DATE_HANDLING";"UPDATING";"BEFORE";"100";"IF n_DATE_TYPE = 'SYSTEM_DAYS' THEN n_DRIVING_CLASS_ALIAS := 'sd'; END IF;";"EC_FRMW";
"QB_DATE_HANDLING";"UPDATING";"BEFORE";"200";"IF n_DATE_TYPE = 'SYSTEM_DAYS' THEN n_DRIVING_COLUMN := 'DAYTIME'; END IF;";"EC_FRMW";
"QBL_EXPORT_ORDER_BY";"DELETING";"BEFORE";"1000";"IF o_created_by!=EcDp_User_Session.getUserSessionParameter('USERNAME') THEN Raise_Application_Error(-20000,'Cannot delete other users queries'); END IF;";"EC_FRMW";
"QBL_EXPORT_ORDER_BY";"INSERTING";"BEFORE";"2000";"EcDp_QBL_Export_Report.ValidateOwner(n_QBL_EXPORT_QUERY_NO);";"EC_FRMW";
"QBL_EXPORT_QUERY";"DELETING";"BEFORE";"1000";"IF o_CREATED_BY!=EcDp_User_Session.getUserSessionParameter('USERNAME') THEN Raise_Application_Error(-20000,'Cannot delete other users queries'); END IF;DELETE FROM DV_QBL_SEL_EXPORT_COLUMNS WHERE QBL_EXPORT_QUERY_NO=:old.QBL_EXPORT_QUERY_NO;";"EC_FRMW";
"QBL_EXPORT_QUERY";"INSERTING OR UPDATING";"AFTER";"2000";"EcDp_QBL_Export_Report.ValidateReportColumns(n_REPORT_VIEW, n_QBL_EXPORT_QUERY_NO);";"EC_FRMW";
"QBL_EXPORT_QUERY";"INSERTING OR UPDATING";"BEFORE";"100";"n_OWNER_ID:=n_CREATED_BY;";"EC_FRMW";
"QBL_EXPORT_WHERE_COND";"DELETING";"BEFORE";"1100";"IF o_created_by!=EcDp_User_Session.getUserSessionParameter('USERNAME') THEN Raise_Application_Error(-20000,'Cannot delete other users queries'); END IF;";"EC_FRMW";
"QBL_EXPORT_WHERE_COND";"INSERTING";"BEFORE";"2000";"EcDp_QBL_Export_Report.ValidateOwner(n_QBL_EXPORT_QUERY_NO);";"EC_FRMW";
"QB_REPORT_VIEW";"INSERTING";"AFTER";"1000";"INSERT INTO DV_QB_DATE_HANDLING (OBJECT_ID, OBJECT_CODE) VALUES (n_OBJECT_ID, n_CODE);";"EC_FRMW";
"QB_REPORT_VIEW";"INSERTING";"AFTER";"1200";"INSERT INTO DV_QB_CUSTOM_WHERE (OBJECT_ID, OBJECT_CODE) VALUES (n_OBJECT_ID, n_CODE);";"EC_FRMW";
"QB_REPORT_VIEW";"UPDATING";"BEFORE";"1100";"IF n_object_start_date = n_object_end_date THEN DELETE FROM DV_QB_DATE_HANDLING WHERE OBJECT_ID = n_OBJECT_ID; END IF;";"EC_FRMW";
"QB_REPORT_VIEW";"UPDATING";"BEFORE";"1300";"IF n_object_start_date = n_object_end_date THEN DELETE FROM DV_QB_CUSTOM_WHERE WHERE OBJECT_ID = n_OBJECT_ID; END IF;";"EC_FRMW";
"REBOILER";"UPDATING";"AFTER";"3000";"ecdp_equipment_event.updateEventStatus(n_OBJECT_ID, n_DAYTIME, 'REBOILER');";"EC_PROD";
"RECIPIENT";"INSERTING";"AFTER";"2000";"ecbp_messaging.copyDeliveryMethod(n_OBJECT_ID, n_MESSAGE_NO,n_CREATED_DATE);";"EC_FRMW";
"RECIPIENT";"INSERTING OR UPDATING";"AFTER";"2100";" IF n_DELIVERY_ADDRESS IS NULL THEN UPDATE RECIPIENT SET DELIVERY_ADDRESS = ec_company_contact_version.delivery_address(n_OBJECT_ID, n_CREATED_DATE,'=<'), DELIVERY_METHOD = ec_company_contact_version.delivery_method(n_OBJECT_ID, n_CREATED_DATE,'=<') WHERE OBJECT_ID= n_OBJECT_ID; END IF; IF n_DELIVERY_ADDRESS_2 IS NULL THEN UPDATE RECIPIENT SET DELIVERY_ADDRESS_2 =  ec_company_contact_version.delivery_address_2(n_OBJECT_ID, n_CREATED_DATE,'=<'), DELIVERY_METHOD_2 = ec_company_contact_version.delivery_method_2(n_OBJECT_ID, n_CREATED_DATE,'=<') WHERE OBJECT_ID= n_OBJECT_ID;  END IF;";"EC_FRMW";
"REPORT_ADM_PUB";"INSERTING";"AFTER";"20";"EcBp_Report.insertReportPublishedParams(n_report_no,n_report_published_no);";"EC_FRMW";
"REPORT_ADM_PUB";"INSERTING";"BEFORE";"10";"EcDp_System_Key.assignNextNumber('REPORT_PUBLISHED_NO', n_report_published_no);";"EC_FRMW";
"REPORT_DEF_GRP_VERSION";"DELETING";"BEFORE";"200";"EcBp_Report.deleteReportDefinition(n_rep_group_code, n_daytime);";"EC_FRMW";
"REPORT_DEF_GRP_VERSION";"INSERTING";"AFTER";"100";"EcBp_Report.insertReportDefinition(n_rep_group_code, n_daytime);";"EC_FRMW";
"REPORT_DEFINITION";"DELETING";"BEFORE";"3000";"EcBp_Report.deleteReportDefParam(o_TEMPLATE_CODE ,o_REPORT_DEFINITION_NO);";"EC_FRMW";
"REPORT_DEFINITION";"INSERTING";"AFTER";"3100";"EcBp_Report.insertReportDefParam(n_TEMPLATE_CODE ,n_REPORT_DEFINITION_NO, n_DAYTIME);";"EC_FRMW";
"REPORT_DEFINITION_PARAM";"UPDATING";"AFTER";"3000";"EcBp_Report.updateReportParamFromDef(n_REPORT_DEFINITION_NO,n_PARAMETER_NAME, n_PARAMETER_TYPE, n_PARAMETER_SUB_TYPE,n_PARAMETER_VALUE,:OLD.PARAMETER_VALUE,n_ALIAS,:OLD.ALIAS, n_DAYTIME, n_ACCESS_CHECK_IND, :OLD.ACCESS_CHECK_IND);";"EC_FRMW";
"REPORT_GENERATED";"DELETING";"BEFORE";"3200";"EcBp_Report.delReportParam(o_REPORT_NO);";"EC_FRMW";
"REPORT_GENERATED";"DELETING";"BEFORE";"3300";"DELETE FROM  REPORT_SEND_LOG where REPORT_NO=o_REPORT_NO;";"EC_FRMW";
"REPORT_GENERATED";"INSERTING OR UPDATING";"BEFORE";"3400";"n_RECORD_STATUS:=n_ACCEPT_STATUS; ";"EC_FRMW";
"REPORT_MSG_DISTRIBUTION";"DELETING";"BEFORE";"10";"DELETE FROM  MESSAGE_DISTR_PARAM where MESSAGE_DISTRIBUTION_NO=o_MESSAGE_DISTRIBUTION_NO;";"EC_FRMW";
"REPORT_MSG_DISTRIBUTION";"DELETING";"BEFORE";"20";"DELETE FROM  MESSAGE_DISTR_CONN where MESSAGE_DISTRIBUTION_NO=o_MESSAGE_DISTRIBUTION_NO;";"EC_FRMW";
"REPORT_PUBLISHED";"INSERTING";"BEFORE";"10";"EcDp_System_Key.assignNextNumber('REPORT_PUBLISHED_NO', n_report_published_no);";"EC_FRMW";
"REPORT_RUNABLE";"DELETING";"BEFORE";"3100";"EcBp_Report.deleteReportRunnableParams(o_REPORT_RUNABLE_NO);";"EC_FRMW";
"REPORT_SET";"DELETING";"BEFORE";"3000";"delete report_set_param rsp where rsp.report_set_no = n_REPORT_SET_NO and not exists (select parameter_name from report_set_param where report_set_no = n_REPORT_SET_NO and parameter_name != 'PRINTER' and parameter_name != 'SEND_MSG');";"EC_FRMW";
"REPORT_SET_LIST";"DELETING";"AFTER";"3100";"EcBp_Report.deleteReportSetParams(n_REPORT_SET_NO );";"EC_FRMW";
"REPORT_SET_LIST";"INSERTING";"AFTER";"3000";"EcBp_Report.insertReportSetParams(n_REPORT_SET_NO);";"EC_FRMW";
"REPORT_TEMPLATE";"DELETING";"BEFORE";"3100";"EcBp_Report.deleteReportSystemParams(n_TEMPLATE_CODE ,'REPORT_SYSTEM_PARAM');";"EC_FRMW";
"REPORT_TEMPLATE";"INSERTING";"AFTER";"3000";"EcBp_Report.createReportSystemParams(n_TEMPLATE_CODE ,n_REPORT_SYSTEM_CODE);";"EC_FRMW";
"REPORT_TEMPLATE_PARAM";"DELETING";"AFTER";"3200";"EcBp_Report.deleteReportParam(n_TEMPLATE_CODE,n_PARAMETER_NAME);";"EC_FRMW";
"REPORT_TEMPLATE_PARAM";"INSERTING";"AFTER";"3000";"EcBp_Report.copyReportParam(n_TEMPLATE_CODE, n_PARAMETER_NAME, n_PARAMETER_TYPE, n_PARAMETER_SUB_TYPE, n_ACCESS_CHECK_IND, n_SORT_ORDER );";"EC_FRMW";
"REPORT_TEMPLATE_PARAM";"UPDATING";"AFTER";"3100";"EcBp_Report.updateReportParam(n_TEMPLATE_CODE,n_PARAMETER_NAME, o_PARAMETER_NAME, n_PARAMETER_TYPE, n_PARAMETER_SUB_TYPE,:OLD.PARAMETER_SUB_TYPE, n_ACCESS_CHECK_IND, :OLD.ACCESS_CHECK_IND, n_SORT_ORDER);";"EC_FRMW";
"REVERSE_OSMOSIS_UNIT";"UPDATING";"AFTER";"3000";"ecdp_equipment_event.updateEventStatus(n_OBJECT_ID, n_DAYTIME, 'REVERSE_OSMOSIS_UNIT');";"EC_PROD";
"SAILING_ADVICE_MESSAGE";"DELETING";"BEFORE";"10";"ue_sailing_advice.validate_message_action('DELETING',:old.sailing_message_no);";"EC_TRAN";
"SCTR_ACC_DAY_CPY_STATUS";"INSERTING";"BEFORE";"100";"n_time_span := 'DAY';";"EC_SALE";
"SCTR_ACC_DAY_DS_ALLOC";"INSERTING";"BEFORE";"100";"n_time_span := 'DAY';";"EC_SALE";
"SCTR_ACC_DAY_DS_PC_ALLOC";"INSERTING";"BEFORE";"100";"n_time_span := 'DAY';";"EC_SALE";
"SCTR_ACC_DAY_EVENT";"INSERTING";"BEFORE";"1000";"n_time_span:='DAY';";"EC_SALE";
"SCTR_ACC_DAY_EVENT";"INSERTING OR UPDATING";"AFTER";"1200";"ecbp_contract_account_event.setRecordStatus(n_OBJECT_ID, n_ACCOUNT_CODE, n_EVENT_TYPE, n_DAYTIME, nvl(n_last_updated_by, n_created_by));";"EC_SALE";
"SCTR_ACC_DAY_EVENT";"INSERTING OR UPDATING";"BEFORE";"1100";"ecbp_contract_account_event.validateQty(n_OBJECT_ID, n_ACCOUNT_CODE, n_EVENT_TYPE, n_QTY);";"EC_SALE";
"SCTR_ACC_DAY_PC_CPY";"INSERTING";"BEFORE";"100";"n_time_span := 'DAY';";"EC_SALE";
"SCTR_ACC_DAY_PC_STATUS";"INSERTING";"AFTER";"100";"EcBp_Replicate_Sale_Qty.insertSalesQty(n_object_id, n_account_code, n_profit_centre_id, n_time_span, n_daytime, n_vol_qty, n_mass_qty, n_energy_qty, n_created_by);";"EC_SALE";
"SCTR_ACC_DAY_PC_STATUS";"INSERTING";"BEFORE";"100";"n_time_span := 'DAY';";"EC_SALE";
"SCTR_ACC_DAY_PC_STATUS";"UPDATING";"AFTER";"100";"EcBp_Replicate_Sale_Qty.insertSalesQty(n_object_id, n_account_code, n_profit_centre_id, n_time_span, n_daytime, n_vol_qty, n_mass_qty, n_energy_qty, n_created_by);";"EC_SALE";
"SCTR_ACC_DAY_STATUS";"INSERTING";"AFTER";"100";"EcBp_Replicate_Sale_Qty.insertSalesQty(n_object_id, n_account_code, NULL, n_time_span, n_daytime, n_vol_qty, n_mass_qty, n_energy_qty, n_created_by);";"EC_SALE";
"SCTR_ACC_DAY_STATUS";"INSERTING";"BEFORE";"100";"n_time_span := 'DAY';";"EC_SALE";
"SCTR_ACC_DAY_STATUS";"UPDATING";"AFTER";"100";"EcBp_Replicate_Sale_Qty.insertSalesQty(n_object_id, n_account_code, NULL, n_time_span, n_daytime, n_vol_qty, n_mass_qty, n_energy_qty, n_created_by);";"EC_SALE";
"SCTR_ACC_MTH_CPY_STATUS";"INSERTING";"BEFORE";"100";"n_time_span := 'MTH';";"EC_SALE";
"SCTR_ACC_MTH_DS_ALLOC";"INSERTING";"BEFORE";"100";"n_time_span := 'MTH';";"EC_SALE";
"SCTR_ACC_MTH_DS_PC_ALLOC";"INSERTING";"BEFORE";"100";"n_time_span := 'MTH';";"EC_SALE";
"SCTR_ACC_MTH_EVENT";"INSERTING";"BEFORE";"1000";"n_time_span:='MTH';";"EC_SALE";
"SCTR_ACC_MTH_EVENT";"INSERTING OR UPDATING";"AFTER";"1200";"ecbp_contract_account_event.setRecordStatus(n_OBJECT_ID, n_ACCOUNT_CODE, n_EVENT_TYPE, n_DAYTIME, nvl(n_last_updated_by, n_created_by));";"EC_SALE";
"SCTR_ACC_MTH_EVENT";"INSERTING OR UPDATING";"BEFORE";"1100";"ecbp_contract_account_event.validateQty(n_OBJECT_ID, n_ACCOUNT_CODE, n_EVENT_TYPE, n_QTY);";"EC_SALE";
"SCTR_ACC_MTH_PC_CPY";"INSERTING";"BEFORE";"100";"n_time_span := 'MTH';";"EC_SALE";
"SCTR_ACC_MTH_PC_STATUS";"INSERTING";"AFTER";"200";"EcBp_Replicate_Sale_Qty.insertSalesQty(n_object_id, n_account_code, n_profit_centre_id, n_time_span, n_daytime, n_vol_qty, n_mass_qty, n_energy_qty, n_created_by);";"EC_SALE";
"SCTR_ACC_MTH_PC_STATUS";"INSERTING";"BEFORE";"100";"n_time_span := 'MTH';";"EC_SALE";
"SCTR_ACC_MTH_PC_STATUS";"UPDATING";"AFTER";"300";"EcBp_Replicate_Sale_Qty.insertSalesQty(n_object_id, n_account_code, n_profit_centre_id, n_time_span, n_daytime, n_vol_qty, n_mass_qty, n_energy_qty, n_created_by);";"EC_SALE";
"SCTR_ACC_MTH_STATUS";"INSERTING";"AFTER";"100";"EcBp_Replicate_Sale_Qty.insertSalesQty(n_object_id, n_account_code, NULL, n_time_span, n_daytime, n_vol_qty, n_mass_qty, n_energy_qty, n_created_by);";"EC_SALE";
"SCTR_ACC_MTH_STATUS";"INSERTING";"BEFORE";"100";"n_time_span := 'MTH';";"EC_SALE";
"SCTR_ACC_MTH_STATUS";"UPDATING";"AFTER";"100";"EcBp_Replicate_Sale_Qty.insertSalesQty(n_object_id, n_account_code, NULL, n_time_span, n_daytime, n_vol_qty, n_mass_qty, n_energy_qty, n_created_by);";"EC_SALE";
"SCTR_ACC_YR_CPY_STATUS";"INSERTING";"BEFORE";"100";"n_time_span := 'YR';";"EC_SALE";
"SCTR_ACC_YR_EVENT";"INSERTING";"BEFORE";"1000";"n_time_span:='YR';";"EC_SALE";
"SCTR_ACC_YR_EVENT";"INSERTING OR UPDATING";"AFTER";"1200";"ecbp_contract_account_event.setRecordStatus(n_OBJECT_ID, n_ACCOUNT_CODE, n_EVENT_TYPE, n_DAYTIME, nvl(n_last_updated_by, n_created_by));";"EC_SALE";
"SCTR_ACC_YR_EVENT";"INSERTING OR UPDATING";"BEFORE";"1100";"ecbp_contract_account_event.validateQty(n_OBJECT_ID, n_ACCOUNT_CODE, n_EVENT_TYPE, n_QTY);";"EC_SALE";
"SCTR_ACC_YR_PC_CPY";"INSERTING";"BEFORE";"100";"n_time_span := 'YR';";"EC_SALE";
"SCTR_ACC_YR_PC_STATUS";"INSERTING";"AFTER";"100";"EcBp_Replicate_Sale_Qty.insertSalesQty(n_object_id, n_account_code, n_profit_centre_id, n_time_span, n_daytime, n_vol_qty, n_mass_qty, n_energy_qty, n_created_by);";"EC_SALE";
"SCTR_ACC_YR_PC_STATUS";"INSERTING";"BEFORE";"100";"n_time_span := 'YR';";"EC_SALE";
"SCTR_ACC_YR_PC_STATUS";"UPDATING";"AFTER";"100";"EcBp_Replicate_Sale_Qty.insertSalesQty(n_object_id, n_account_code, n_profit_centre_id, n_time_span, n_daytime, n_vol_qty, n_mass_qty, n_energy_qty, n_created_by);";"EC_SALE";
"SCTR_ACC_YR_STATUS";"INSERTING";"AFTER";"100";"EcBp_Replicate_Sale_Qty.insertSalesQty(n_object_id, n_account_code, NULL, n_time_span, n_daytime, n_vol_qty, n_mass_qty, n_energy_qty, n_created_by);";"EC_SALE";
"SCTR_ACC_YR_STATUS";"INSERTING";"BEFORE";"100";"n_time_span := 'YR';";"EC_SALE";
"SCTR_ACC_YR_STATUS";"UPDATING";"AFTER";"100";"EcBp_Replicate_Sale_Qty.insertSalesQty(n_object_id, n_account_code, NULL, n_time_span, n_daytime, n_vol_qty, n_mass_qty, n_energy_qty, n_created_by);";"EC_SALE";
"SCTR_DAY_FCST";"DELETING";"BEFORE";"100";"ecdp_contract_forecast.deleteHourlyData(n_object_id, n_delivery_point_id, n_daytime);";"EC_SALE";
"SCTR_DAY_NOM";"DELETING";"BEFORE";"1100";"ecdp_contract_nomination.deleteHourlyData(n_object_id, n_delivery_point_id, n_daytime);";"EC_SALE";
"SCTR_DAY_NOM";"UPDATING";"BEFORE";"1000";"EcDp_contract_Nomination.validateDailyNominationQty(n_OBJECT_ID, n_DAYTIME, n_NOMINATED_QTY);";"EC_SALE";
"SCTR_DAY_NOM_OVERVIEW";"UPDATING";"BEFORE";"100";"EcDp_contract_Nomination.validateDailyNominationQty(n_OBJECT_ID,n_DAYTIME,n_NOMINATED_QTY);";"EC_SALE";
"SCTR_DELIVERY_EVENT";"INSERTING OR UPDATING";"BEFORE";"1000";"EcBp_Contract_Delivery_Event.validateContractPeriod(n_OBJECT_ID, n_DAYTIME, n_END_DATE);";"EC_SALE";
"SCTR_MTH_ADJUSTMENT";"INSERTING OR UPDATING";"AFTER";"1000";"EcBp_Contract_Mth_Adjustment.validateAdjustment(n_COMPANY_ID, n_OBJECT_ID, n_DAYTIME);";"EC_SALE";
"SCTR_PRICE_ELEMENT";"DELETING";"BEFORE";"100";"Ecdp_Contract_Cargo.checkContractRelations(n_OBJECT_ID, n_ELEMENT_CODE);";"EC_SALE";
"SCTR_SUB_DAY_DEL";"UPDATING";"AFTER";"1000";"EcDp_contract_Delivery.aggregateSubDailyToDaily(n_OBJECT_ID, n_DELIVERY_POINT_ID, n_PRODUCTION_DAY, nvl(n_last_updated_by, n_created_by));";"EC_SALE";
"SCTR_SUB_DAY_FCST";"UPDATING";"AFTER";"1000";"EcDp_contract_Forecast.aggregateSubDailyToDaily(n_OBJECT_ID, n_DELIVERY_POINT_ID, n_PRODUCTION_DAY,nvl(n_last_updated_by, n_created_by));";"EC_SALE";
"SLNL_PERIOD_DEL_EVENT";"INSERTING";"AFTER";"100";"ue_nomination.createCntrEventPrLocation(n_object_id, n_daytime, n_event_type, n_event_seq);";"EC_SALE";
"SLNP_DAY_DELIVERY";"INSERTING";"BEFORE";"100";"n_contract_id := nvl(n_contract_id, ec_nomination_point.contract_id(n_object_id));";"EC_SALE";
"SLNP_DAY_NOMINATION";"INSERTING";"BEFORE";"100";"N_NOMINATION_TYPE := 'SALE_NOM'; ";"EC_SALE";
"SLNP_DAY_RENOMINATION";"INSERTING";"BEFORE";"100";"N_NOMINATION_TYPE := 'SALE_RENOM'; ";"EC_SALE";
"SLNP_MTH_DELIVERY";"INSERTING";"BEFORE";"100";"n_contract_id := nvl(n_contract_id, ec_nomination_point.contract_id(n_object_id));";"EC_SALE";
"SLNP_PERIOD_DEL_EVENT_NL";"DELETING";"BEFORE";"100";"delete NOMPNT_SUB_DAY_EVENT where DAY_EVENT_SEQ = n_event_seq;";"EC_SALE";
"SLNP_PERIOD_NOMINATION";"INSERTING";"BEFORE";"100";"N_NOMINATION_TYPE := 'SALE_PERIOD_NOM'; ";"EC_SALE";
"SLNP_PERIOD_NOMINATION";"INSERTING";"BEFORE";"200";"n_contract_id := nvl(n_contract_id, ec_nomination_point.contract_id(n_object_id));";"EC_SALE";
"SLNP_PERIOD_NOMINATION";"INSERTING";"BEFORE";"300";"N_EXIT_LOCATION_ID := nvl(N_EXIT_LOCATION_ID, ec_nomination_point.exit_location_id(n_OBJECT_ID));";"EC_SALE";
"SLNP_PERIOD_NOMINATION";"INSERTING";"BEFORE";"400";"N_ENTRY_LOCATION_ID := nvl(N_ENTRY_LOCATION_ID,ec_nomination_point.entry_location_id(n_OBJECT_ID));";"EC_SALE";
"SLNP_SUB_DAY_NOMINATION";"INSERTING";"BEFORE";"100";"N_NOMINATION_TYPE := 'SALE_NOM'; ";"EC_SALE";
"SO2_SCRUBBER";"UPDATING";"AFTER";"3000";"ecdp_equipment_event.updateEventStatus(n_OBJECT_ID, n_DAYTIME, 'SO2_SCRUBBER');";"EC_PROD";
"SPLITIGATOR";"UPDATING";"AFTER";"3000";"ecdp_equipment_event.updateEventStatus(n_OBJECT_ID, n_DAYTIME, 'SPLITIGATOR');";"EC_PROD";
"SPLIT_KEY";"INSERTING";"AFTER";"100";"IF (n_code IS NULL) THEN ue_RevenueCodes.UpdateCodeForClass(n_object_id, n_daytime, 'SPLIT_KEY'); END IF;";"EC_REVN";
"SPLIT_KEY_SETUP_COMPANY";"INSERTING";"BEFORE";"10";"IF n_profit_centre_id IS NOT NULL THEN  n_split_member_id := n_profit_centre_id; END IF;";"EC_REVN";
"SPLIT_KEY_SETUP_SP";"INSERTING";"AFTER";"20";"EcDp_Split_Key.InsNewChildSplitKey(n_object_id,n_split_member_id,'COMPANY','PERCENT',n_daytime);";"EC_REVN";
"SPLIT_KEY_SETUP_SP";"INSERTING";"BEFORE";"10";"IF n_profit_centre_id IS NOT NULL THEN  n_split_member_id := n_profit_centre_id; END IF;";"EC_REVN";
"STABILIZER";"UPDATING";"AFTER";"3000";"ecdp_equipment_event.updateEventStatus(n_OBJECT_ID, n_DAYTIME, 'STABILIZER');";"EC_PROD";
"STATUS_PROCESS";"DELETING";"BEFORE";"100";"EcDp_STATUS_PROCESS.checkAndDeleteChildren(:old.process_id);";"EC_PROD";
"STEAM_GENERATOR";"UPDATING";"AFTER";"3000";"ecdp_equipment_event.updateEventStatus(n_OBJECT_ID, n_DAYTIME, 'STEAM_GENERATOR');";"EC_PROD";
"STIM_DAY_VALUE_FORM";"INSERTING OR UPDATING";"BEFORE";"1000";"if updating('BOE_FROM_UOM_CODE') or updating('BOE_FACTOR') then n_boe_to_uom_code := 'BOE'; end if;";"EC_REVN";
"STIM_FCST_MTH_VALUE_FORM";"INSERTING OR UPDATING";"BEFORE";"1000";"if updating('BOE_FROM_UOM_CODE') or updating('BOE_FACTOR') then n_boe_to_uom_code := 'BOE'; end if;";"EC_REVN";
"STIM_MTH_INV_HISTORIC_OL";"UPDATING";"BEFORE";"10";"EcDp_Inventory.verifyLayer('OVERLIFT', n_object_id, n_daytime, n_qty1, n_qty2, n_rate, n_closing_value, 'FIELD');";"EC_REVN";
"STIM_MTH_INV_HISTORIC_UL";"UPDATING";"BEFORE";"10";"EcDp_Inventory.verifyLayer('UNDERLIFT', n_object_id, n_daytime, n_qty1, n_qty2, n_rate, n_closing_value, 'FIELD');";"EC_REVN";
"STIM_MTH_VALUE_FORM";"INSERTING OR UPDATING";"BEFORE";"1000";"if updating('BOE_FROM_UOM_CODE') or updating('BOE_FACTOR') then n_boe_to_uom_code := 'BOE'; end if;";"EC_REVN";
"STORAGE_LIFTING";"INSERTING OR UPDATING OR DELETING";"AFTER";"300";"ue_storage_lift_nomination.calcSubDayLifting(n_parcel_no);";"EC_TRAN";
"STORAGE_LIFTING";"UPDATING";"AFTER";"100";"ue_Replicate_CargoValues.updateLiftingQty(n_PARCEL_NO, :OLD.load_value, n_load_value, null, null, 'BOL', n_PRODUCT_MEAS_NO, n_last_updated_by);";"EC_TRAN";
"STORAGE_LIFTING";"UPDATING";"AFTER";"200";"ue_storage_lifting.setBalanceDeltaQty(n_parcel_no);";"EC_TRAN";
"STORAGE_LIFTING_UNLOAD";"INSERTING OR UPDATING OR DELETING";"AFTER";"300";"ue_storage_lift_nomination.calcSubDayLifting(n_parcel_no);";"EC_TRAN";
"STORAGE_LIFTING_UNLOAD";"UPDATING";"AFTER";"100";"ue_Replicate_CargoValues.updateLiftingQty(n_PARCEL_NO, :OLD.unload_value, n_UNLOAD_VALUE, null, null, 'UNLOAD', n_PRODUCT_MEAS_NO, n_last_updated_by);";"EC_TRAN";
"STORAGE_LIFTING_UNLOAD";"UPDATING";"AFTER";"200";"ue_storage_lifting.setBalanceDeltaQty(n_parcel_no, 'UNLOAD');";"EC_TRAN";
"STORAGE_LIFT_NOM_ALLOC";"INSERTING";"AFTER";"200";"EcBP_Storage_Lift_Nomination.insertFromLiftProg(n_parcel_no, n_nom_qty, n_daytime, n_created_by);";"EC_TRAN";
"STORAGE_LIFT_NOM_ALLOC";"INSERTING";"BEFORE";"100";"EcDp_System_Key.assignNextNumber('STORAGE_LIFT_NOMINATION', n_PARCEL_NO);";"EC_TRAN";
"STORAGE_LIFT_NOM_ALLOC";"INSERTING OR UPDATING OR DELETING";"AFTER";"300";"ue_storage_lift_nomination.calcSubDayLifting(n_parcel_no);";"EC_TRAN";
"STORAGE_LIFT_NOM_BLMR";"UPDATING";"AFTER";"100";"ue_replicate_cargovalues.updatebldate(n_parcel_no, :old.bl_date, n_bl_date, n_last_updated_by);";"EC_TRAN";
"STORAGE_LIFT_NOM_DETAIL";"UPDATING";"AFTER";"200";"ue_replicate_cargovalues.updateDetails(n_parcel_no, :old.consignor_id, n_consignor_id, :old.consignee_id, n_consignee_id, :old.incoterm, n_incoterm, :old.contract_id, n_contract_id, :old.port_id, n_port_id, n_last_updated_by);";"EC_TRAN";
"STORAGE_LIFT_NOM_DETAIL";"UPDATING";"BEFORE";"100";"ecbp_storage_lift_nomination.validateLiftingIndicator(:OLD.LIFTING_CODE, n_LIFTING_CODE);";"EC_TRAN";
"STORAGE_LIFT_NOMINATION";"DELETING";"BEFORE";"100";"ecbp_storage_lift_nomination.bdStorageLiftNomination(n_parcel_no);";"EC_TRAN";
"STORAGE_LIFT_NOMINATION";"INSERTING";"AFTER";"200";"ecbp_storage_lift_nomination.aiStorageLiftNomination(n_parcel_no, n_nom_date, n_NOM_DATE_RANGE, n_REQ_DATE, n_REQ_DATE_RANGE, n_REQ_GRS_VOL, n_REQ_TOLERANCE_TYPE, n_nom_grs_vol, nvl(n_last_updated_by, n_created_by));";"EC_TRAN";
"STORAGE_LIFT_NOMINATION";"INSERTING";"BEFORE";"1400";"IF n_start_lifting_date IS NULL THEN n_start_lifting_date := nvl(n_nom_date, n_req_date); END IF;";"EC_TRAN";
"STORAGE_LIFT_NOMINATION";"INSERTING OR UPDATING";"AFTER";"300";"ecbp_storage_lift_nomination.aiStorageLiftNomination2(n_parcel_no, n_REQ_GRS_VOL2, n_nom_grs_vol2, nvl(n_last_updated_by, n_created_by));";"EC_TRAN";
"STORAGE_LIFT_NOMINATION";"INSERTING OR UPDATING";"AFTER";"350";"ecbp_storage_lift_nomination.aiStorageLiftNomination3(n_parcel_no, n_REQ_GRS_VOL3, n_nom_grs_vol3, nvl(n_last_updated_by, n_created_by));";"EC_TRAN";
"STORAGE_LIFT_NOMINATION";"INSERTING OR UPDATING";"AFTER";"700";"ecbp_storage_lift_nomination.createUpdateSplit(n_Parcel_No, nvl(:old.lifting_account_id,'NULL'), nvl(n_lifting_account_id,'NULL'));";"EC_TRAN";
"STORAGE_LIFT_NOMINATION";"INSERTING OR UPDATING";"AFTER";"1200";"ue_storage_lift_nomination.setBalanceDelta(n_parcel_no);";"EC_TRAN";
"STORAGE_LIFT_NOMINATION";"INSERTING OR UPDATING";"BEFORE";"800";"if n_COOLDOWN_IND = 'Y' AND n_COOLDOWN_QTY IS NULL then n_COOLDOWN_QTY := Ec_Carrier_Version.cooldown_qty(n_carrier_id, NVL(n_nom_date, n_req_date), '<='); end if;";"EC_TRAN";
"STORAGE_LIFT_NOMINATION";"INSERTING OR UPDATING";"BEFORE";"900";"if n_COOLDOWN_IND = 'N' AND n_COOLDOWN_QTY IS NOT NULL then n_COOLDOWN_QTY := NULL; end if;";"EC_TRAN";
"STORAGE_LIFT_NOMINATION";"INSERTING OR UPDATING";"BEFORE";"1000";"if n_PURGE_IND = 'Y' AND n_PURGE_QTY IS NULL then n_PURGE_QTY := Ec_Carrier_Version.purge_qty(n_carrier_id, NVL(n_nom_date, n_req_date), '<='); end if;";"EC_TRAN";
"STORAGE_LIFT_NOMINATION";"INSERTING OR UPDATING";"BEFORE";"1100";"if n_PURGE_IND = 'N' AND n_PURGE_QTY IS NOT NULL then n_PURGE_QTY := NULL; end if;";"EC_TRAN";
"STORAGE_LIFT_NOMINATION";"INSERTING OR UPDATING OR DELETING";"AFTER";"1300";"ue_storage_lift_nomination.calcSubDayLifting(n_parcel_no);";"EC_TRAN";
"STORAGE_LIFT_NOMINATION";"UPDATING";"AFTER";"400";"ue_Replicate_CargoValues.updateLiftingQty(n_PARCEL_NO, :OLD.REQ_GRS_VOL, n_REQ_GRS_VOL, :OLD.REQ_DATE, n_REQ_DATE, 'REQUESTED', null, n_last_updated_by);";"EC_TRAN";
"STORAGE_LIFT_NOMINATION";"UPDATING";"AFTER";"500";"ue_Replicate_CargoValues.updateLiftingQty(n_PARCEL_NO, :OLD.NOM_GRS_VOL, n_NOM_GRS_VOL, :OLD.NOM_DATE, n_NOM_DATE, 'NOMINATED', null, n_last_updated_by);";"EC_TRAN";
"STORAGE_LIFT_NOM_INFO";"INSERTING OR UPDATING";"AFTER";"400";"ue_storage_lift_nomination.setBalanceDelta(n_parcel_no);";"EC_TRAN";
"STORAGE_LIFT_NOM_INFO";"INSERTING OR UPDATING OR DELETING";"AFTER";"500";"ue_storage_lift_nomination.calcSubDayLifting(n_parcel_no);";"EC_TRAN";
"STORAGE_LIFT_NOM_INFO";"UPDATING";"AFTER";"300";"ue_Replicate_CargoValues.updateLiftingQty(n_PARCEL_NO, :OLD.NOM_GRS_VOL, n_NOM_GRS_VOL, :OLD.NOM_DATE, n_NOM_DATE, 'NOMINATED', null, n_last_updated_by);";"EC_TRAN";
"STORAGE_LIFT_NOM_LA";"DELETING";"BEFORE";"200";"ecbp_storage_lift_nomination.bdStorageLiftNomination(n_parcel_no);";"EC_TRAN";
"STORAGE_LIFT_NOM_LA";"INSERTING";"BEFORE";"500";"IF n_start_lifting_date IS NULL THEN n_start_lifting_date := n_nom_date; END IF;";"EC_TRAN";
"STORAGE_LIFT_NOM_LA";"INSERTING OR UPDATING";"AFTER";"300";"ue_storage_lift_nomination.setBalanceDelta(n_parcel_no);";"EC_TRAN";
"STORAGE_LIFT_NOM_LA";"INSERTING OR UPDATING OR DELETING";"AFTER";"400";"ue_storage_lift_nomination.calcSubDayLifting(n_parcel_no);";"EC_TRAN";
"STORAGE_LIFT_NOM_SCHED";"DELETING";"BEFORE";"200";"ecbp_storage_lift_nomination.bdStorageLiftNomination(n_parcel_no);";"EC_TRAN";
"STORAGE_LIFT_NOM_SCHED";"INSERTING";"BEFORE";"500";"IF n_start_lifting_date IS NULL THEN n_start_lifting_date := n_nom_date; END IF;";"EC_TRAN";
"STORAGE_LIFT_NOM_SCHED";"INSERTING OR UPDATING";"AFTER";"300";"ue_storage_lift_nomination.setBalanceDelta(n_parcel_no);";"EC_TRAN";
"STORAGE_LIFT_NOM_SCHED";"INSERTING OR UPDATING OR DELETING";"AFTER";"400";"ue_storage_lift_nomination.calcSubDayLifting(n_parcel_no);";"EC_TRAN";
"STORAGE_LIFT_NOM_UNLOAD";"UPDATING";"AFTER";"100";"ue_replicate_cargovalues.updateUnloadDate(n_parcel_no, :old.unload_date, n_unload_date, n_last_updated_by);";"EC_TRAN";
"STORAGE_LOAD_INSTRUCTION";"UPDATING";"AFTER";"200";"ue_Replicate_CargoValues.updateLiftingQty(n_PARCEL_NO, :OLD.SCHEDULED_GRS_VOL, n_SCHEDULED_GRS_VOL, :OLD.NOM_DATE, n_NOM_DATE, 'SCHEDULED', null, n_last_updated_by);";"EC_TRAN";
"STORAGE_LOAD_INSTRUCTION";"UPDATING";"BEFORE";"100";"ecbp_storage_lift_nomination.validateLiftingIndicator(:OLD.LIFTING_CODE, n_LIFTING_CODE);";"EC_TRAN";
"STORAGE_OFFICIAL_RECEIPT";"INSERTING";"AFTER";"100";"EcDp_Storage_Receipt.aggrOfficial(n_object_id, n_daytime, n_receipt_type, NULL, n_grs_vol, n_created_by);ecdp_storage_receipt.calcLiftAccOfficial(n_object_id, n_profit_centre_id, n_company_id,n_daytime, n_receipt_type, NULL, n_grs_vol, n_created_by);";"EC_TRAN";
"STORAGE_OFFICIAL_RECEIPT";"UPDATING";"AFTER";"100";"EcDp_Storage_Receipt.aggrOfficial(n_object_id, n_daytime, n_receipt_type, :old.grs_vol, n_grs_vol, n_last_updated_by);ecdp_storage_receipt.calcLiftAccOfficial(n_object_id, n_profit_centre_id, n_company_id, n_daytime, n_receipt_type, :old.grs_vol, n_grs_vol, n_last_updated_by);";"EC_TRAN";
"STOR_BLEND_BATCH";"DELETING";"BEFORE";"400";"EcBp_Storage_Proc_Plant.deleteChildEvent(n_EVENT_NO);";"EC_PROD";
"STOR_BLEND_BATCH";"INSERTING";"AFTER";"100";"EcBp_Storage_Proc_Plant.createBlendContent(n_EVENT_NO);";"EC_PROD";
"STOR_BLEND_BATCH";"UPDATING";"AFTER";"200";"EcBp_Storage_Proc_Plant.updateBlendContent(n_EVENT_NO);";"EC_PROD";
"STOR_BLEND_BATCH";"UPDATING";"AFTER";"300";"EcBp_Storage_Proc_Plant.updateVolBlendOwnshp(n_EVENT_NO);";"EC_PROD";
"STOR_BLEND_BATCH";"UPDATING";"AFTER";"500";"EcBp_Storage_Proc_Plant.updateApprovedBatchOwnshp(n_EVENT_NO);";"EC_PROD";
"STOR_BLEND_CONTENT";"DELETING";"BEFORE";"200";"EcBp_Storage_Proc_Plant.deleteApprovedProductTrans(n_EVENT_NO,n_OBJECT_ID);";"EC_PROD";
"STOR_BLEND_CONTENT";"INSERTING";"AFTER";"300";"EcBp_Storage_Proc_Plant.approveBlendContent(n_EVENT_NO,n_OBJECT_ID);";"EC_PROD";
"STOR_BLEND_CONTENT";"UPDATING";"AFTER";"100";"EcBp_Storage_Proc_Plant.updateBlendTrans(n_EVENT_NO,nvl(n_last_updated_by, n_created_by));";"EC_PROD";
"STOR_BLEND_OWNSHP";"DELETING";"BEFORE";"300";"EcBp_Storage_Proc_Plant.deleteApprovedBatchOwnshp(n_EVENT_NO,n_OBJECT_ID);";"EC_PROD";
"STOR_BLEND_OWNSHP";"INSERTING";"AFTER";"200";"EcBp_Storage_Proc_Plant.insertApprovedBatchOwnshp(n_EVENT_NO,n_OBJECT_ID);";"EC_PROD";
"STOR_BLEND_OWNSHP";"UPDATING";"AFTER";"100";"EcBp_Storage_Proc_Plant.updateApprovedBatchOwnshp(n_EVENT_NO);";"EC_PROD";
"STOR_DAY_EXPORT_STATUS";"INSERTING";"BEFORE";"100";"n_TIME_SPAN := 'DAY';";"EC_TRAN";
"STOR_DAY_PC_LIFT_ALLOC";"INSERTING OR UPDATING";"AFTER";"100";"ue_Replicate_CargoValues.insertAlloc(n_parcel_no, n_profit_centre_id, n_qty, nvl(n_last_updated_by, n_created_by));";"EC_TRAN";
"STOR_DAY_PLAN_RECEIPT";"INSERTING";"AFTER";"100";"EcDp_Storage_Forecast.aggrForecast(n_object_id, n_daytime, n_created_by); ecdp_storage_forecast.aiuStorPcForecast(n_object_id, n_profit_centre_id, n_daytime, NULL, n_grs_vol, n_created_by);";"EC_TRAN";
"STOR_DAY_PLAN_RECEIPT";"UPDATING";"AFTER";"100";"EcDp_Storage_Forecast.aggrForecast(n_object_id, n_daytime, n_last_updated_by); ecdp_storage_forecast.aiuStorPcForecast(n_object_id, n_profit_centre_id, n_daytime, :old.grs_vol, n_grs_vol, n_last_updated_by);";"EC_TRAN";
"STOR_INTERMED_PROD";"DELETING";"BEFORE";"900";"ecbp_storage_proc_plant.validateStorageProdDelete(n_OBJECT_ID,n_DAYTIME,n_PRODUCT_ID);";"EC_PROD";
"STOR_INTERMED_PROD";"INSERTING OR UPDATING";"BEFORE";"700";"ecbp_storage_proc_plant.validateOverlappingPeriod(n_OBJECT_ID,n_DAYTIME,n_END_DATE,n_PRODUCT_ID);";"EC_PROD";
"STOR_INTERMED_PROD";"UPDATING";"BEFORE";"800";"ecbp_storage_proc_plant.validateStorageProdUpdate(n_OBJECT_ID,n_DAYTIME,n_END_DATE,n_PRODUCT_ID);";"EC_PROD";
"STOR_LIFT_NOM_LIGHT";"INSERTING OR UPDATING";"AFTER";"200";"EcBP_Storage_Lift_Nomination.updateStorageLifting(n_parcel_no, n_cl_net_vol, n_cl_grs_vol, n_cl_net_mass, n_cl_grs_mass, n_cl_net_energy, n_cl_grs_energy,nvl(n_last_updated_by, n_created_by));";"EC_TRAN";
"STOR_LIFT_NOM_LIGHT";"INSERTING OR UPDATING";"BEFORE";"100";"n_NOM_FIRM_DATE:=n_BL_DATE;";"EC_TRAN";
"STOR_LIFT_NOM_LIGHT";"INSERTING OR UPDATING";"BEFORE";"300";"n_REQUESTED_DATE:=n_BL_DATE;";"EC_TRAN";
"STOR_MTH_EXPORT_STATUS";"INSERTING";"BEFORE";"100";"n_TIME_SPAN := 'MTH';";"EC_TRAN";
"STOR_PROD_EVENT_TRANS";"DELETING";"AFTER";"500";"EcBp_Storage_Proc_Plant.deleteComplementTrans(n_EVENT_NO);";"EC_PROD";
"STOR_PROD_EVENT_TRANS";"DELETING";"BEFORE";"300";"Delete from transaction_meas_ownshp where event_no = n_event_no;";"EC_PROD";
"STOR_PROD_EVENT_TRANS";"DELETING";"BEFORE";"1100";"EcBp_Storage_Proc_Plant.deleteRecalculateStorageMeas(n_EVENT_NO);";"EC_PROD";
"STOR_PROD_EVENT_TRANS";"INSERTING";"AFTER";"100";"EcBp_Storage_Proc_Plant.createTransactionOwnshp(n_EVENT_NO);";"EC_PROD";
"STOR_PROD_EVENT_TRANS";"INSERTING";"AFTER";"400";"EcBp_Storage_Proc_Plant.createComplementTrans(n_EVENT_NO);";"EC_PROD";
"STOR_PROD_EVENT_TRANS";"INSERTING";"AFTER";"700";"EcBp_Storage_Proc_Plant.createRegradeTrans(n_EVENT_NO);";"EC_PROD";
"STOR_PROD_EVENT_TRANS";"INSERTING";"AFTER";"900";"EcBp_Storage_Proc_Plant.insertRecalculateStorageMeas(n_EVENT_NO);";"EC_PROD";
"STOR_PROD_EVENT_TRANS";"INSERTING OR UPDATING";"AFTER";"200";"EcBp_Storage_Proc_Plant.updateOwnshpVol(n_EVENT_NO,nvl(n_last_updated_by, n_created_by));";"EC_PROD";
"STOR_PROD_EVENT_TRANS";"UPDATING";"AFTER";"600";"EcBp_Storage_Proc_Plant.updateComplementTrans(n_EVENT_NO,nvl(n_last_updated_by, n_created_by));";"EC_PROD";
"STOR_PROD_EVENT_TRANS";"UPDATING";"AFTER";"800";"IF n_OWNERSHIP_TYPE IS NOT NULL AND :OLD.OWNERSHIP_TYPE <> n_OWNERSHIP_TYPE THEN EcBp_Storage_Proc_Plant.updateOwnshpType(n_EVENT_NO); END IF;";"EC_PROD";
"STOR_PROD_EVENT_TRANS";"UPDATING";"AFTER";"1000";"EcBp_Storage_Proc_Plant.updateRecalculateStorageMeas(n_EVENT_NO);";"EC_PROD";
"STOR_SUB_DAY_FORECAST";"INSERTING OR UPDATING";"AFTER";"100";"IF NVL(:OLD.FORECAST_QTY,-1) != NVL(n_FORECAST_QTY,-1) THEN EcDp_Storage_Forecast.aggregateSubDay(n_object_id, nvl(n_production_day, EcDp_ProductionDay.getProductionDay('STORAGE', n_object_id, n_daytime, n_summer_time)) ); END IF;";"EC_TRAN";
"STOR_SUB_DAY_FORECAST";"INSERTING OR UPDATING";"AFTER";"200";"IF NVL(:OLD.FORECAST_QTY2,-1) != NVL(n_FORECAST_QTY2,-1) THEN EcDp_Storage_Forecast.aggregateSubDay(n_object_id, nvl(n_production_day, EcDp_ProductionDay.getProductionDay('STORAGE', n_object_id, n_daytime, n_summer_time)), 1); END IF;";"EC_TRAN";
"STOR_SUB_DAY_FORECAST";"INSERTING OR UPDATING";"AFTER";"300";"IF NVL(:OLD.FORECAST_QTY3,-1) != NVL(n_FORECAST_QTY3,-1) THEN EcDp_Storage_Forecast.aggregateSubDay(n_object_id, nvl(n_production_day, EcDp_ProductionDay.getProductionDay('STORAGE', n_object_id, n_daytime, n_summer_time)),2); END IF;";"EC_TRAN";
"STOR_SUB_DAY_OFFICIAL";"INSERTING OR UPDATING";"AFTER";"100";"IF NVL(:OLD.OFFICIAL_QTY,-1) != NVL(n_OFFICIAL_QTY,-1) THEN EcDp_Storage_Official.aggregateSubDay(n_object_id, nvl(n_production_day, EcDp_ProductionDay.getProductionDay('STORAGE', n_object_id, n_daytime, n_summer_time)) ); END IF;";"EC_TRAN";
"STOR_SUB_DAY_OFFICIAL";"INSERTING OR UPDATING";"AFTER";"200";"IF NVL(:OLD.OFFICIAL_QTY2,-1) != NVL(n_OFFICIAL_QTY2,-1) THEN EcDp_Storage_Official.aggregateSubDay(n_object_id, nvl(n_production_day, EcDp_ProductionDay.getProductionDay('STORAGE', n_object_id, n_daytime, n_summer_time)), 1 ); END IF;";"EC_TRAN";
"STOR_SUB_DAY_OFFICIAL";"INSERTING OR UPDATING";"AFTER";"300";"IF NVL(:OLD.OFFICIAL_QTY3,-1) != NVL(n_OFFICIAL_QTY3,-1) THEN EcDp_Storage_Official.aggregateSubDay(n_object_id, nvl(n_production_day, EcDp_ProductionDay.getProductionDay('STORAGE', n_object_id, n_daytime, n_summer_time)), 2 ); END IF;";"EC_TRAN";
"STREAM";"INSERTING";"AFTER";"100";"IF (n_code IS NULL) THEN ue_RevenueCodes.UpdateCodeForClass(n_object_id, n_daytime, 'STREAM'); END IF;";"EC_REVN";
"STREAM_ITEM";"INSERTING";"AFTER";"100";"IF (n_code IS NULL) THEN ue_RevenueCodes.UpdateCodeForClass(n_object_id, n_daytime, 'STREAM_ITEM'); END IF;";"EC_REVN";
"STREAM_ITEM";"INSERTING OR UPDATING";"AFTER";"300";"ecdp_stream_item.validate_stream_item(n_object_id,n_daytime);";"EC_REVN";
"STREAM_ITEM";"INSERTING OR UPDATING";"AFTER";"400";"IF Inserting OR UPDATING ('STREAM_ITEM_FORMULA') OR UPDATING ('OBJECT_START_DATE') OR UPDATING ('OBJECT_END_DATE') OR UPDATING ('DAYTIME') OR UPDATING ('CALC_METHOD') THEN EcDp_Stream_Item.populateSIFormula(:NEW.calc_method,n_daytime,nvl(n_last_updated_by,n_created_by),n_object_id); END IF;";"EC_REVN";
"STREAM_ITEM";"UPDATING";"BEFORE";"200";"IF (:NEW.calc_method='SK' OR :NEW.calc_method='FO') AND n_object_start_date = n_object_end_date THEN DELETE FROM STREAM_ITEM_FORMULA WHERE OBJECT_ID=n_object_id; END IF;";"EC_REVN";
"STREAM_ITEM_COLLECTION";"INSERTING";"AFTER";"100";"IF (n_code IS NULL) THEN ue_RevenueCodes.UpdateCodeForClass(n_object_id, n_daytime, 'STREAM_ITEM_COLLECTION'); END IF;";"EC_REVN";
"STREAM_SET_LIST";"UPDATING";"BEFORE";"10";"IF UPDATING('FROM_DATE') or UPDATING('END_DATE') THEN EcDp_Stream_set_list.validateOverlappingPeriod(n_STREAM_ID, n_REC_ID, n_CODE, n_FROM_DATE,n_END_DATE); END IF;";"EC_PROD";
"STRM_COMPANY_SPLIT";"INSERTING OR UPDATING";"BEFORE";"10";"EcBp_Stream_Event.setStrmFactorEndDate(n_OBJECT_ID, n_DAYTIME, n_END_DATE, n_COMPANY_ID);";"EC_PROD";
"STRM_COMPANY_SWAP";"DELETING";"BEFORE";"200";"EcBp_Stream_Event.swap_delete(n_SWAP_NO);";"EC_PROD";
"STRM_COMPANY_SWAP";"INSERTING OR UPDATING";"BEFORE";"100";"EcBp_Stream_Event.setStrmSwapEndDate(n_OBJECT_ID, n_COMPANY_ID, n_DAYTIME, n_END_DATE);";"EC_PROD";
"STRM_DAY_NR_EQPM";"DELETING";"AFTER";"800";"ecbp_stream_ventflare.recalcGrsVolMass(n_OBJECT_ID,  n_DAYTIME,nvl(n_last_updated_by, n_created_by));";"EC_PROD";
"STRM_DAY_NR_EQPM";"DELETING";"BEFORE";"700";"ecdp_stream_ventflare.delEqpmWellChildEvent(n_OBJECT_ID, n_CLASS_NAME, n_DAYTIME, n_EQPM_ID,n_START_DAYTIME);";"EC_PROD";
"STRM_DAY_NR_EQPM";"INSERTING";"AFTER";"500";"ecdp_stream_VentFlare.createChildEvent(n_OBJECT_ID, n_CLASS_NAME, n_DAYTIME, n_EQPM_ID,n_START_DAYTIME,n_END_DAYTIME ,nvl(n_last_updated_by, n_created_by)); ";"EC_PROD";
"STRM_DAY_NR_EQPM";"INSERTING";"AFTER";"600";"ecdp_stream_ventFlare.insertWell(n_OBJECT_ID, n_CLASS_NAME, n_DAYTIME, n_EQPM_ID,n_START_DAYTIME,n_END_DAYTIME ,nvl(n_last_updated_by, n_created_by));";"EC_PROD";
"STRM_DAY_NR_EQPM";"INSERTING";"BEFORE";"300";" IF n_DAYTIME <> ecdp_productionday.getproductionday(null,n_EQPM_ID,n_START_DAYTIME) THEN  Raise_Application_Error(-20104,'The Start Daytime entered is outside production day boundaries.' );  END IF;";"EC_PROD";
"STRM_DAY_NR_EQPM";"INSERTING OR UPDATING";"BEFORE";"100";" IF n_START_DAYTIME > nvl(n_END_DAYTIME,n_START_DAYTIME) THEN  Raise_Application_Error(-20104,'END_DAYTIME cannot be before START_DAYTIME: '||n_START_DAYTIME); END IF; ";"EC_PROD";
"STRM_DAY_NR_EQPM";"INSERTING OR UPDATING";"BEFORE";"400";"IF n_END_DAYTIME IS NOT NULL AND :OLD.END_DAYTIME <> n_END_DAYTIME THEN IF n_DAYTIME <> ecdp_productionday.getproductionday(null,n_EQPM_ID,n_END_DAYTIME) THEN  Raise_Application_Error(-20104,'The End Daytime entered is outside production day boundaries.' );  END IF; END IF;";"EC_PROD";
"STRM_DAY_NR_EQPM";"UPDATING";"AFTER";"200";"EcDp_Stream_VentFlare.updateEndDateForChildEvent(n_OBJECT_ID, n_CLASS_NAME, n_DAYTIME, n_EQPM_ID,n_START_DAYTIME,n_END_DAYTIME ,nvl(n_last_updated_by, n_created_by)); ";"EC_PROD";
"STRM_DAY_NR_EQPM_WELL";"INSERTING";"AFTER";"100";"ecdp_stream_VentFlare.createEqpmWellChildEvent(n_OBJECT_ID, n_CLASS_NAME, n_DAYTIME, n_EQPM_ID,n_WELL_ID,n_START_DAYTIME,nvl(n_last_updated_by, n_created_by)); ";"EC_PROD";
"STRM_DAY_NR_OTHER";"DELETING";"AFTER";"600";"ecbp_stream_ventflare.recalcGrsVolMass(n_OBJECT_ID,  n_DAYTIME,nvl(n_last_updated_by, n_created_by));";"EC_PROD";
"STRM_DAY_NR_OTHER";"INSERTING";"AFTER";"500";"ecdp_stream_VentFlare.createChildEvent(n_OBJECT_ID, n_CLASS_NAME, n_DAYTIME, n_ASSET_ID,n_START_DAYTIME,n_END_DAYTIME ,nvl(n_last_updated_by, n_created_by)); ";"EC_PROD";
"STRM_DAY_NR_OTHER";"INSERTING";"BEFORE";"300";" IF n_DAYTIME <> ecdp_productionday.getproductionday(null,n_ASSET_ID,n_START_DAYTIME) THEN  Raise_Application_Error(-20104,'The Start Daytime entered is outside production day boundaries.' );  END IF;";"EC_PROD";
"STRM_DAY_NR_OTHER";"INSERTING OR UPDATING";"BEFORE";"100";" IF n_START_DAYTIME > nvl(n_END_DAYTIME,n_START_DAYTIME) THEN  Raise_Application_Error(-20104,'END_DAYTIME cannot be before START_DAYTIME: '||n_START_DAYTIME); END IF; ";"EC_PROD";
"STRM_DAY_NR_OTHER";"INSERTING OR UPDATING";"BEFORE";"400";"IF n_END_DAYTIME IS NOT NULL AND :OLD.END_DAYTIME <> n_END_DAYTIME THEN IF n_DAYTIME <> ecdp_productionday.getproductionday(null,n_ASSET_ID,n_END_DAYTIME) THEN  Raise_Application_Error(-20104,'The End Daytime entered is outside production day boundaries.' );  END IF; END IF;";"EC_PROD";
"STRM_DAY_NR_OTHER";"UPDATING";"AFTER";"200";"EcDp_Stream_VentFlare.updateEndDateForChildEvent(n_OBJECT_ID, n_CLASS_NAME, n_DAYTIME, n_ASSET_ID,n_START_DAYTIME,n_END_DAYTIME ,nvl(n_last_updated_by, n_created_by)); ";"EC_PROD";
"STRM_DAY_NR_WELL";"DELETING";"AFTER";"600";"ecbp_stream_ventflare.recalcGrsVolMass(n_OBJECT_ID,  n_DAYTIME,nvl(n_last_updated_by, n_created_by));";"EC_PROD";
"STRM_DAY_NR_WELL";"INSERTING";"AFTER";"500";"ecdp_stream_VentFlare.createChildEvent(n_OBJECT_ID, n_CLASS_NAME, n_DAYTIME, n_WELL_ID,n_START_DAYTIME,n_END_DAYTIME ,nvl(n_last_updated_by, n_created_by)); ";"EC_PROD";
"STRM_DAY_NR_WELL";"INSERTING";"BEFORE";"300";" IF n_DAYTIME <> ecdp_productionday.getproductionday(null,n_WELL_ID,n_START_DAYTIME) THEN  Raise_Application_Error(-20104,'The Start Daytime entered is outside production day boundaries.' );  END IF;";"EC_PROD";
"STRM_DAY_NR_WELL";"INSERTING OR UPDATING";"BEFORE";"100";" IF n_START_DAYTIME > nvl(n_END_DAYTIME,n_START_DAYTIME) THEN  Raise_Application_Error(-20104,'END_DAYTIME cannot be before START_DAYTIME: '||n_START_DAYTIME); END IF; ";"EC_PROD";
"STRM_DAY_NR_WELL";"INSERTING OR UPDATING";"BEFORE";"400";"IF n_END_DAYTIME IS NOT NULL AND :OLD.END_DAYTIME <> n_END_DAYTIME THEN IF n_DAYTIME <> ecdp_productionday.getproductionday('WELL',n_WELL_ID,n_END_DAYTIME) THEN  Raise_Application_Error(-20104,'The End Daytime entered is outside production day boundaries.' );  END IF; END IF;";"EC_PROD";
"STRM_DAY_NR_WELL";"UPDATING";"AFTER";"200";"EcDp_Stream_VentFlare.updateEndDateForChildEvent(n_OBJECT_ID, n_CLASS_NAME, n_DAYTIME, n_WELL_ID,n_START_DAYTIME,n_END_DAYTIME ,nvl(n_last_updated_by, n_created_by)); ";"EC_PROD";
"STRM_DAY_PC_CP_CPY_ALLOC";"INSERTING";"BEFORE";"100";"n_CLASS_NAME:='STRM_DAY_PC_CP_CPY_ALLOC';";"EC_PROD";
"STRM_DAY_PC_CPY_CE_REAS";"INSERTING OR UPDATING";"BEFORE";"100";"EcBp_Strm_Ownership.validateReassignment(n_NET_MASS, n_WT_FRAC);";"EC_PROD";
"STRM_DAY_PC_CPY_CPY_REAS";"INSERTING OR UPDATING";"BEFORE";"100";"EcBp_Strm_Ownership.validateReassignment(n_NET_MASS, n_WT_FRAC);";"EC_PROD";
"STRM_DAY_PC_CPY_PC_REAS";"INSERTING OR UPDATING";"BEFORE";"100";"EcBp_Strm_Ownership.validateReassignment(n_NET_MASS, n_WT_FRAC);";"EC_PROD";
"STRM_DAY_PROD_ALLOC";"INSERTING";"BEFORE";"100";"n_CLASS_NAME:='STRM_DAY_PROD_ALLOC';";"EC_PROD";
"STRM_DAY_PROD_CP_ALLOC";"INSERTING";"BEFORE";"100";"n_CLASS_NAME:='STRM_DAY_PROD_CP_ALLOC';";"EC_PROD";
"STRM_DAY_PROD_CPY_ALLOC";"INSERTING";"BEFORE";"100";"n_CLASS_NAME:='STRM_DAY_PROD_CPY_ALLOC';";"EC_PROD";
"STRM_DAY_STREAM_LOSS";"INSERTING";"BEFORE";"100";"n_EVENT_NO :=EcBp_Defer_Loss_Accounting.getEventNo(n_OBJECT_ID, n_DAYTIME);";"EC_PROD";
"STRM_DAY_VENTFLARE";"INSERTING OR UPDATING";"BEFORE";"110";"If n_GRS_MASS <> :OLD.GRS_MASS THEN n_SOURCE := 'MANUAL'; END IF;";"EC_PROD";
"STRM_DAY_VENTFLARE";"UPDATING";"AFTER";"100";"If n_GRS_VOL <> :OLD.GRS_VOL THEN EcDp_Stream_VentFlare.updateSource(n_OBJECT_ID,n_DAYTIME,n_LAST_UPDATED_BY,n_GRS_VOL); END IF;";"EC_PROD";
"STRM_DPT_CONVERSION";"INSERTING OR UPDATING OR DELETING";"BEFORE";"100";"EcDp_Stream_DPT_Value.copyToNewDaytime(n_object_id, n_daytime, n_density,  n_press, n_temp);";"EC_PROD";
"STRM_GAS_ANALYSIS";"INSERTING";"AFTER";"400";"EcDp_Fluid_Analysis.createCompSetForAnalysis(n_ANALYSIS_TYPE,n_ANALYSIS_NO,n_DAYTIME,n_CREATED_BY);";"EC_PROD";
"STRM_GAS_ANALYSIS";"INSERTING";"BEFORE";"200";"n_PRODUCTION_DAY := Ecdp_Productionday.getProductionDay(n_OBJECT_CLASS_NAME,n_OBJECT_ID,n_DAYTIME);";"EC_PROD";
"STRM_GAS_ANALYSIS";"INSERTING";"BEFORE";"300";"n_COMPONENT_SET := EcBp_Fluid_Analysis.getCompSet(n_OBJECT_CLASS_NAME,n_OBJECT_ID,n_DAYTIME,n_ANALYSIS_TYPE);";"EC_PROD";
"STRM_GAS_ANALYSIS";"INSERTING OR UPDATING";"BEFORE";"100";"n_object_class_name := 'STREAM';n_phase := ec_strm_version.stream_phase(n_OBJECT_ID,n_DAYTIME,'<=');";"EC_PROD";
"STRM_GAS_ANALYSIS_EVENT";"DELETING";"BEFORE";"3200";"ecdp_fluid_analysis.delCompSetForPeriodAnalysis(n_OBJECT_ID,n_SAMPLING_METHOD,n_ANALYSIS_TYPE,n_DAYTIME);";"EC_PROD";
"STRM_GAS_ANALYSIS_EVENT";"INSERTING";"BEFORE";"3300";"n_ANALYSIS_TYPE := EcBp_Fluid_Analysis.getPeriodCompSet(n_OBJECT_ID,n_DAYTIME,n_ANALYSIS_TYPE);";"EC_PROD";
"STRM_GAS_TOTALIZER";"INSERTING";"BEFORE";"200";"IF n_END_DATE IS NULL THEN n_END_DATE:=n_DAYTIME + 1; END IF;";"EC_PROD";
"STRM_GAS_TOTALIZER";"INSERTING OR UPDATING";"BEFORE";"100";"EcBp_Stream_Event.validateTotalizerMax(n_OBJECT_ID,n_DAYTIME,n_OPENING_READING_OVRWRITE,n_CLOSING_READING);";"EC_PROD";
"STRM_ITEM_WELL_CONN";"INSERTING OR UPDATING";"BEFORE";"600";"EcBp_Stream_Well_Conn.checkIfEventOverlaps(n_OBJECT_ID, n_DAYTIME, n_WELL_OBJECT_ID, n_END_DATE);";"EC_PROD";
"STRM_LIQ_TOTALIZER";"INSERTING";"BEFORE";"200";"IF n_END_DATE IS NULL THEN n_END_DATE:=n_DAYTIME + 1; END IF;";"EC_PROD";
"STRM_LIQ_TOTALIZER";"INSERTING OR UPDATING";"BEFORE";"100";"EcBp_Stream_Event.validateTotalizerMax(n_OBJECT_ID,n_DAYTIME,n_OPENING_READING_OVRWRITE,n_CLOSING_READING);";"EC_PROD";
"STRM_LNG_ANALYSIS";"INSERTING";"AFTER";"400";"EcDp_Fluid_Analysis.createCompSetForAnalysis(n_ANALYSIS_TYPE,n_ANALYSIS_NO,n_DAYTIME,n_CREATED_BY);";"EC_PROD";
"STRM_LNG_ANALYSIS";"INSERTING";"BEFORE";"200";"n_PRODUCTION_DAY := Ecdp_Productionday.getProductionDay(n_OBJECT_CLASS_NAME,n_OBJECT_ID,n_DAYTIME);";"EC_PROD";
"STRM_LNG_ANALYSIS";"INSERTING";"BEFORE";"300";"n_COMPONENT_SET := EcBp_Fluid_Analysis.getCompSet(n_OBJECT_CLASS_NAME,n_OBJECT_ID,n_DAYTIME,n_ANALYSIS_TYPE);";"EC_PROD";
"STRM_LNG_ANALYSIS";"INSERTING OR UPDATING";"BEFORE";"100";"n_object_class_name := 'STREAM';n_phase := ec_strm_version.stream_phase(n_OBJECT_ID,n_DAYTIME,'<=');";"EC_PROD";
"STRM_LOAD_FROM_WELLS";"DELETING";"BEFORE";"100";"EcBp_Truck_Ticket.deleteChildEvent(n_EVENT_NO, n_DAYTIME);";"EC_PROD";
"STRM_LOAD_FROM_WELLS";"INSERTING";"AFTER";"200";"IF n_DAYTIME > SYSDATE+1 THEN Raise_Application_Error('-20630', 'Start Date should not exceed more than one day of system date.');  END IF;";"EC_PROD";
"STRM_LOAD_TO_WELLS";"DELETING";"BEFORE";"100";"EcBp_Truck_Ticket.deleteChildEvent(n_EVENT_NO, n_DAYTIME);";"EC_PROD";
"STRM_LOAD_TO_WELLS";"INSERTING";"AFTER";"200";"IF n_DAYTIME > SYSDATE+1 THEN Raise_Application_Error('-20630', 'Start Date should not exceed more than one day of system date.');  END IF;";"EC_PROD";
"STRM_MTH_PC_CP_CPY_ALLOC";"INSERTING";"BEFORE";"100";"n_CLASS_NAME:='STRM_MTH_PC_CP_CPY_ALLOC';";"EC_PROD";
"STRM_MTH_PROD_ALLOC";"INSERTING";"BEFORE";"100";"n_CLASS_NAME:='STRM_MTH_PROD_ALLOC';";"EC_PROD";
"STRM_MTH_PROD_CPY_ALLOC";"INSERTING";"BEFORE";"100";"n_CLASS_NAME:='STRM_MTH_PROD_CPY_ALLOC';";"EC_PROD";
"STRM_OIL_ANALYSIS";"INSERTING";"AFTER";"400";"EcDp_Fluid_Analysis.createCompSetForAnalysis(n_ANALYSIS_TYPE,n_ANALYSIS_NO,n_DAYTIME,n_CREATED_BY);";"EC_PROD";
"STRM_OIL_ANALYSIS";"INSERTING";"BEFORE";"200";"n_PRODUCTION_DAY := Ecdp_Productionday.getProductionDay(n_OBJECT_CLASS_NAME,n_OBJECT_ID,n_DAYTIME);";"EC_PROD";
"STRM_OIL_ANALYSIS";"INSERTING";"BEFORE";"300";"n_COMPONENT_SET := EcBp_Fluid_Analysis.getCompSet(n_OBJECT_CLASS_NAME,n_OBJECT_ID,n_DAYTIME,n_ANALYSIS_TYPE);";"EC_PROD";
"STRM_OIL_ANALYSIS";"INSERTING OR UPDATING";"BEFORE";"100";"n_object_class_name := 'STREAM';n_phase := ec_strm_version.stream_phase(n_OBJECT_ID,n_DAYTIME,'<=');";"EC_PROD";
"STRM_OIL_ANALYSIS_EVENT";"DELETING";"BEFORE";"3600";"ecdp_fluid_analysis.delCompSetForPeriodAnalysis(n_OBJECT_ID,n_SAMPLING_METHOD,n_ANALYSIS_TYPE,n_DAYTIME);";"EC_PROD";
"STRM_OIL_ANALYSIS_EVENT";"INSERTING";"BEFORE";"3700";"n_ANALYSIS_TYPE := EcBp_Fluid_Analysis.getPeriodCompSet(n_OBJECT_ID,n_DAYTIME,n_ANALYSIS_TYPE);";"EC_PROD";
"STRM_OIL_BATCH_EVENT";"INSERTING";"BEFORE";"100";"IF n_END_DATE IS NULL THEN n_END_DATE:=n_DAYTIME + 1; END IF;";"EC_PROD";
"STRM_OIL_BATCH_EVENT";"INSERTING OR UPDATING";"BEFORE";"200";"EcBp_Stream_Event.validatePeriod(n_OBJECT_ID, n_DAYTIME, n_END_DATE);";"EC_PROD";
"STRM_OIL_EXPORT_EVENT";"INSERTING OR UPDATING";"AFTER";"3000";"update strm_event set grs_mass = (grs_closing_mass-grs_opening_mass), last_updated_by = n_last_updated_by where object_id = n_OBJECT_ID and daytime = n_DAYTIME and grs_mass is null and event_type = 'STRM_OIL_EXPORT_EVENT';";"EC_PROD";
"STRM_PC_ANALYSIS";"INSERTING";"BEFORE";"200";"n_PRODUCTION_DAY := Ecdp_Productionday.getProductionDay(n_OBJECT_CLASS_NAME,n_OBJECT_ID,n_DAYTIME);";"EC_PROD";
"STRM_PC_ANALYSIS";"INSERTING";"BEFORE";"300";"n_COMPONENT_SET := EcBp_Fluid_Analysis.getCompSet('STREAM', n_OBJECT_ID, n_DAYTIME, 'STRM_PC_COMP' );";"EC_PROD";
"STRM_PC_ANALYSIS";"INSERTING OR UPDATING";"BEFORE";"100";"n_object_class_name := 'STREAM';";"EC_PROD";
"STRM_PC_SPLIT";"INSERTING";"AFTER";"700";"EcDp_Objects_Split.SetInsertSplitEndDate(n_OBJECT_ID,n_DAYTIME,'STRM_PC_SPLIT' );";"EC_PROD";
"STRM_PLAN_BUDGET";"INSERTING";"BEFORE";"100";"n_CLASS_NAME:='STRM_PLAN_BUDGET';";"EC_PROD";
"STRM_PLAN_OTHER";"INSERTING";"BEFORE";"100";"n_CLASS_NAME:='STRM_PLAN_OTHER';";"EC_PROD";
"STRM_PLAN_POTENTIAL";"INSERTING";"BEFORE";"100";"n_CLASS_NAME:='STRM_PLAN_POTENTIAL';";"EC_PROD";
"STRM_PLAN_TARGET";"INSERTING";"BEFORE";"100";"n_CLASS_NAME:='STRM_PLAN_TARGET';";"EC_PROD";
"STRM_PT_CONVERSION";"INSERTING OR UPDATING OR DELETING";"BEFORE";"100";"EcDp_Stream_PT_Value.copyToNewDaytime(n_object_id, n_daytime, n_press, n_temp);";"EC_PROD";
"STRM_SAMP_LAST_ANAL";"INSERTING";"BEFORE";"100";"n_PRODUCTION_DAY := Ecdp_Productionday.getProductionDay(n_OBJECT_CLASS_NAME,n_OBJECT_ID,n_DAYTIME);";"EC_PROD";
"STRM_SAMPLE_ANALYSIS";"INSERTING";"BEFORE";"200";"n_PRODUCTION_DAY := Ecdp_Productionday.getProductionDay(n_OBJECT_CLASS_NAME,n_OBJECT_ID,n_DAYTIME);n_PHASE := ec_strm_version.stream_phase(n_OBJECT_ID, n_DAYTIME, '<=');";"EC_PROD";
"STRM_SAMPLE_ANALYSIS";"INSERTING OR UPDATING";"BEFORE";"100";"n_object_class_name := 'STREAM';";"EC_PROD";
"STRM_SINGLE_TRANSFER";"INSERTING";"AFTER";"200";"IF n_DAYTIME > SYSDATE+1 THEN Raise_Application_Error('-20630', 'Start Date should not exceed more than one day of system date.');  END IF;";"EC_PROD";
"STRM_SINGLE_TRANSFER";"INSERTING OR UPDATING";"AFTER";"100";"EcBp_CalculateAPI.calcApiTruckTicket(n_OBJECT_ID, n_DAYTIME, n_EVENT_NO, NVL(n_LAST_UPDATED_BY,n_CREATED_BY));";"EC_PROD";
"STRM_SUB_DAY_STATUS_GAS";"INSERTING OR UPDATING";"BEFORE";"100";"EcBp_Stream_SubDaily.chkObjSubDayFreq(n_ON_STREAM_HRS, 'STREAM', n_OBJECT_ID, n_DAYTIME);";"EC_PROD";
"STRM_SUB_DAY_STATUS_OIL";"INSERTING OR UPDATING";"BEFORE";"100";"EcBp_Stream_SubDaily.chkObjSubDayFreq(n_ON_STREAM_HRS, 'STREAM', n_OBJECT_ID, n_DAYTIME);";"EC_PROD";
"STRM_SUB_DAY_STATUS_WAT";"INSERTING OR UPDATING";"BEFORE";"100";"EcBp_Stream_SubDaily.chkObjSubDayFreq(n_ON_STREAM_HRS, 'STREAM', n_OBJECT_ID, n_DAYTIME);";"EC_PROD";
"STRM_TBP_ANALYSIS";"INSERTING";"BEFORE";"200";"n_PRODUCTION_DAY := Ecdp_Productionday.getProductionDay(n_OBJECT_CLASS_NAME,n_OBJECT_ID,n_DAYTIME);";"EC_PROD";
"STRM_TBP_ANALYSIS";"INSERTING OR UPDATING";"BEFORE";"100";"n_object_class_name := 'STREAM';";"EC_PROD";
"STRM_TRUCK_LOAD_VOL";"INSERTING";"AFTER";"100";"IF n_DAYTIME > SYSDATE+1 THEN Raise_Application_Error('-20630', 'Start Date should not exceed more than one day of system date.');  END IF;";"EC_PROD";
"STRM_TRUCK_UNLOAD_MASS";"INSERTING";"AFTER";"2900";"IF n_DAYTIME > SYSDATE+1 THEN Raise_Application_Error('-20630', 'Start Date should not exceed more than one day of system date.');  END IF;";"EC_PROD";
"STRM_TRUCK_UNLOAD_MASS";"INSERTING OR UPDATING";"AFTER";"3100";"n_NET_VOL := n_GRS_MASS * (1-n_BS_W_WT)/EcBp_CalculateAPI.getStdDensityForTruckTicket(n_OBJECT_ID, n_DAYTIME, n_EVENT_NO);update STRM_TRANSPORT_EVENT SET NET_VOL=n_NET_VOL WHERE EVENT_NO= n_EVENT_NO AND DAYTIME= n_DAYTIME AND OBJECT_ID= n_OBJECT_ID;";"EC_PROD";
"STRM_TRUCK_UNLOAD_MASS";"INSERTING OR UPDATING";"AFTER";"3500";"EcBp_CalculateAPI.calcApiTruckTicket(n_OBJECT_ID, n_DAYTIME, n_EVENT_NO, NVL(n_LAST_UPDATED_BY,n_CREATED_BY));";"EC_PROD";
"STRM_TRUCK_UNLOAD_MASS";"INSERTING OR UPDATING";"BEFORE";"3000";"n_GRS_MASS := EcBp_Truck_Ticket.getCalcGrsMass(n_OBJECT_ID,n_START_METER_READING,n_END_METER_READING,n_DAYTIME);";"EC_PROD";
"STRM_TRUCK_UNLOAD_MASS";"INSERTING OR UPDATING";"BEFORE";"3200";"n_WATER_VOL := n_GRS_MASS * n_BS_W_WT/ecdp_system.getWaterDensity(nvl(n_RUN_TEMP,n_OBS_TEMP),n_daytime);";"EC_PROD";
"STRM_TRUCK_UNLOAD_VOL";"INSERTING";"AFTER";"2900";"IF n_DAYTIME > SYSDATE+1 THEN Raise_Application_Error('-20630', 'Start Date should not exceed more than one day of system date.');  END IF;";"EC_PROD";
"STRM_TRUCK_UNLOAD_VOL";"INSERTING OR UPDATING";"AFTER";"3000";"n_NET_VOL:=n_GRS_VOL*(1-n_BS_W)*EcBp_CalculateAPI.getVCFForTruckTicket(n_OBJECT_ID,n_DAYTIME,n_EVENT_NO);update STRM_TRANSPORT_EVENT SET NET_VOL=n_NET_VOL WHERE EVENT_NO= n_EVENT_NO AND DAYTIME= n_DAYTIME AND OBJECT_ID= n_OBJECT_ID;";"EC_PROD";
"STRM_TRUCK_UNLOAD_VOL";"INSERTING OR UPDATING";"AFTER";"3400";"EcBp_CalculateAPI.calcApiTruckTicket(n_OBJECT_ID, n_DAYTIME, n_EVENT_NO, NVL(n_LAST_UPDATED_BY,n_CREATED_BY));";"EC_PROD";
"STRM_TRUCK_UNLOAD_VOL";"INSERTING OR UPDATING";"BEFORE";"3100";"n_WATER_VOL:=n_GRS_VOL * n_BS_W;";"EC_PROD";
"STRM_WATER_TOTALIZER";"INSERTING";"BEFORE";"200";"IF n_END_DATE IS NULL THEN n_END_DATE:=n_DAYTIME + 1; END IF;";"EC_PROD";
"STRM_WATER_TOTALIZER";"INSERTING OR UPDATING";"BEFORE";"160";"EcBp_Stream_Event.validateTotalizerMax(n_OBJECT_ID,n_DAYTIME,n_OPENING_READING_OVRWRITE,n_CLOSING_READING);";"EC_PROD";
"STRM_WELL_CONN";"INSERTING OR UPDATING";"BEFORE";"1400";"EcBp_Stream_Well_Conn.checkIfEventOverlaps(n_OBJECT_ID, n_DAYTIME, n_WELL_OBJECT_ID, n_END_DATE);";"EC_PROD";
"SUMMARY_SET";"UPDATING";"AFTER";"100";"IF UPDATING('DAYTIME') THEN EcDp_RR_Revn_Summary.InitNewSummarySetVersion(n_last_updated_by, :new.object_id, :new.daytime); END IF;";"EC_REVN";
"SUMMARY_SETUP";"UPDATING OR INSERTING";"AFTER";"10";"IF :New.SUMMARY_TYPE = 'FORECAST' THEN IF :New.POPULATE_METHOD = 'LAST_ACTUAL' AND ec_summary_setup_version.summary_type(:New.parent_sum_setup_id, :New.daytime, '<=') != 'ACTUAL' THEN raise_application_error(-20000, 'Must point to a actual parent summary setup when populating by Last Actual'); ELSIF :New.POPULATE_METHOD = 'LAST_FORECAST' AND ec_summary_setup_version.summary_type(:New.parent_sum_setup_id, :New.daytime, '<=') != 'FORECAST' THEN raise_application_error(-20000, 'Must point to a forecast parent summary setup when populating by Last Forecast'); END IF; END IF;";"EC_REVN";
"SUMMARY_SETUP_LIST";"INSERTING OR UPDATING";"AFTER";"10";"IF n_value_type = 'MONETARY' AND n_CURRENCY_ID IS NULL THEN raise_application_error(-20000, 'Monetary value setup requires a currency. \n\nPlease apply a currency and re-save.'); ELSIF n_value_type = 'QUANTITY' AND n_UOM1_CODE IS NULL THEN raise_application_error(-20000, 'Quantity value setup requires a UOM. \n\nPlease apply a UOM and re-save.'); END IF;";"EC_REVN";
"TANK_ANALYSIS";"INSERTING";"AFTER";"450";"EcDp_Tank.createTankTapsAnalysis(n_OBJECT_ID,n_ANALYSIS_NO,n_DAYTIME,n_CREATED_BY);";"EC_PROD";
"TANK_DAY_DIP_STATUS";"INSERTING OR UPDATING";"BEFORE";"3000";"IF n_MEASUREMENT_EVENT_TYPE IS NULL THEN n_MEASUREMENT_EVENT_TYPE := 'DAY_CLOSING'; END IF;";"EC_PROD";
"TANK_DAY_INV_MASS";"INSERTING OR UPDATING";"BEFORE";"2000";"IF n_MEASUREMENT_EVENT_TYPE IS NULL THEN n_MEASUREMENT_EVENT_TYPE := 'DAY_CLOSING'; END IF;";"EC_PROD";
"TANK_DAY_INV_OIL";"INSERTING OR UPDATING";"BEFORE";"2000";"IF n_MEASUREMENT_EVENT_TYPE IS NULL THEN n_MEASUREMENT_EVENT_TYPE := 'DAY_CLOSING'; END IF;";"EC_PROD";
"TANK_DAY_INV_SINGLE_DIP";"INSERTING OR UPDATING";"BEFORE";"2000";"IF n_MEASUREMENT_EVENT_TYPE IS NULL THEN n_MEASUREMENT_EVENT_TYPE := 'DAY_CLOSING'; END IF;";"EC_PROD";
"TANK_DAY_SINGLE_WELL";"INSERTING OR UPDATING";"BEFORE";"2000";"IF n_MEASUREMENT_EVENT_TYPE IS NULL THEN n_MEASUREMENT_EVENT_TYPE := 'DAY_CLOSING'; END IF;";"EC_PROD";
"TANK_DAY_SINGLE_WELL_CP";"INSERTING OR UPDATING";"BEFORE";"2000";"IF n_MEASUREMENT_EVENT_TYPE IS NULL THEN n_MEASUREMENT_EVENT_TYPE := 'DAY_CLOSING'; END IF;";"EC_PROD";
"TANK_DAY_STATUS";"INSERTING OR UPDATING";"BEFORE";"2000";"IF n_MEASUREMENT_EVENT_TYPE IS NULL THEN n_MEASUREMENT_EVENT_TYPE := 'DAY_CLOSING'; END IF;";"EC_PROD";
"TANK_EVENT_DIP_STATUS";"INSERTING OR UPDATING";"BEFORE";"3000";"IF :new.measurement_event_type IS NULL THEN n_measurement_event_type := 'EVENT_CLOSING'; END IF;";"EC_PROD";
"TANK_EVENT_RUN_TICKETS";"DELETING";"BEFORE";"300";"ecdp_tank_measurement.delMeasurementSet(n_DAYTIME,n_EXPORT_TANK_ID);";"EC_PROD";
"TANK_EVENT_RUN_TICKETS";"DELETING";"BEFORE";"400";"ecdp_tank_measurement.delSealLocation(n_EXPORT_TANK_ID, n_DAYTIME);";"EC_PROD";
"TANK_EVENT_RUN_TICKETS";"INSERTING";"AFTER";"200";"ecdp_tank_measurement.createMeasurementSet(n_OBJECT_ID,n_EVENT_TYPE,n_DAYTIME,'OPEN_CLOSE',n_EXPORT_TANK_ID);";"EC_PROD";
"TANK_EVENT_RUN_TICKETS";"INSERTING";"BEFORE";"100";"n_OBJECT_ID := ec_tank_version.export_stream_id(n_EXPORT_TANK_ID,n_DAYTIME,'<=');";"EC_PROD";
"TANK_MTH_INV_OIL";"INSERTING OR UPDATING";"BEFORE";"2000";"IF n_MEASUREMENT_EVENT_TYPE IS NULL THEN n_MEASUREMENT_EVENT_TYPE := 'DAY_CLOSING'; END IF;";"EC_PROD";
"TANK_MTH_STATUS";"INSERTING OR UPDATING";"BEFORE";"2000";"IF n_MEASUREMENT_EVENT_TYPE IS NULL THEN n_MEASUREMENT_EVENT_TYPE := 'DAY_CLOSING'; END IF;";"EC_PROD";
"TANK_OIL_BATCH_EXP";"INSERTING OR UPDATING";"AFTER";"1100";"EcDp_Tank_Measurement.SetDefaultExportTank(n_OBJECT_ID, n_DAYTIME);";"EC_PROD";
"TANK_STRAPPING";"DELETING";"AFTER";"300";"EcDp_Tank_Strapping.SetPrevEndDate(o_OBJECT_ID, NULL, o_DAYTIME, 'DELETE');";"EC_PROD";
"TANK_STRAPPING";"INSERTING";"AFTER";"100";"EcDp_Tank_Strapping.SetPrevEndDate(n_OBJECT_ID, n_DAYTIME, NULL, 'INSERT');";"EC_PROD";
"TANK_STRAPPING";"UPDATING";"AFTER";"200";"EcDp_Tank_Strapping.SetPrevEndDate(n_OBJECT_ID, n_DAYTIME, o_DAYTIME, 'UPDATE');";"EC_PROD";
"TANK_TAPS";"DELETING";"AFTER";"200";"EcDp_Tank.SetTankTapsEndDate(n_OBJECT_ID, o_DAYTIME,  'DELETE');";"EC_PROD";
"TANK_TAPS";"INSERTING";"AFTER";"100";"EcDp_Tank.SetTankTapsEndDate(n_OBJECT_ID, n_DAYTIME, 'INSERT');";"EC_PROD";
"TANK_USAGE";"INSERTING OR UPDATING";"BEFORE";"3000";"EcBp_Tank_Usage.validatePeriod(n_OBJECT_ID, n_TANK_ID, n_END_DATE);";"EC_PROD";
"TANK_USAGE";"INSERTING OR UPDATING";"BEFORE";"3100";"EcBp_Tank_Usage.validateOverlappingPeriod(n_OBJECT_ID,n_DAYTIME,n_END_DATE,n_TANK_ID);";"EC_PROD";
"TASK_PROCESS";"INSERTING OR UPDATING OR DELETING";"BEFORE";"100";"IF nvl(n_CODE,'X') IN ('APPROVAL', 'CP_ERROR', 'CP_WARNING')  OR   nvl(:OLD.CODE,'X') IN ('APPROVAL', 'CP_ERROR', 'CP_WARNING')  THEN  Raise_Application_Error(-20122,'Operation on system processes not allowed');  END IF;";"EC_FRMW";
"T_BASIS_ACCESS_PARTITION";"DELETING";"BEFORE";"1000";"delete from t_basis_object_partition t where t.t_basis_access_id = n_t_basis_access_id;";"EC_FRMW";
"T_BASIS_OBJECT_PARTITION";"INSERTING OR UPDATING";"AFTER";"200";"EcDp_Objects_Partition.validatePartition(n_T_BASIS_ACCESS_ID, n_ATTRIBUTE_NAME);";"EC_FRMW";
"T_BASIS_OBJECT_PARTITION";"INSERTING OR UPDATING";"BEFORE";"100";"IF (n_OPERATOR = 'ALL' and n_ATTRIBUTE_TEXT is not null) THEN Raise_Application_Error(-20000,'Cannot have ojbect(s) when operator is ALL'); END IF;";"EC_FRMW";
"TCTR_SUB_DAY_DP_IN_NOM";"UPDATING OR INSERTING";"AFTER";"100";"ecdp_contract_nomination.aggrNomSubDailyToDaily( n_object_id, n_entry_delivery_point_id, n_PRODUCTION_DAY,nvl(n_last_updated_by,n_created_by));ecdp_contract_nomination.aggrReqSubDailyToDaily( n_object_id, n_entry_delivery_point_id, n_PRODUCTION_DAY, nvl(n_last_updated_by, n_created_by));ecdp_contract_nomination.aggrAdjSubDailyToDaily( n_object_id, n_entry_delivery_point_id, n_PRODUCTION_DAY, nvl(n_last_updated_by, n_created_by));ecdp_contract_nomination.aggrSentSubDailyToDaily( n_object_id, n_entry_delivery_point_id, n_PRODUCTION_DAY, nvl(n_last_updated_by, n_created_by));";"EC_TRAN";
"TCTR_SUB_DAY_DP_IN_NOM";"UPDATING OR INSERTING";"BEFORE";"100";"n_adjusted_qty := nvl(n_requested_qty, 0) + nvl(n_adjustment_qty, 0);";"EC_TRAN";
"TCTR_SUB_DAY_DP_OUT_NOM";"UPDATING OR INSERTING";"AFTER";"100";"ecdp_contract_nomination.aggrNomSubDailyToDaily( n_object_id, n_exit_delivery_point_id, n_PRODUCTION_DAY,nvl(n_last_updated_by,n_created_by));ecdp_contract_nomination.aggrReqSubDailyToDaily( n_object_id, n_exit_delivery_point_id, n_PRODUCTION_DAY, nvl(n_last_updated_by, n_created_by));ecdp_contract_nomination.aggrAdjSubDailyToDaily( n_object_id, n_exit_delivery_point_id, n_PRODUCTION_DAY, nvl(n_last_updated_by, n_created_by));ecdp_contract_nomination.aggrSentSubDailyToDaily( n_object_id, n_exit_delivery_point_id, n_PRODUCTION_DAY, nvl(n_last_updated_by, n_created_by));";"EC_TRAN";
"TDEV_RESULT_1";"INSERTING";"AFTER";"100";"EcDp_Performance_Test.aiSyncPwelResultFromTdev(n_RESULT_NO,n_OBJECT_ID,n_CREATED_BY);";"EC_PROD";
"TDEV_RESULT_2";"INSERTING";"AFTER";"100";"EcDp_Performance_Test.aiSyncPwelResultFromTdev(n_RESULT_NO,n_OBJECT_ID,n_CREATED_BY);";"EC_PROD";
"TDEV_RESULT_3";"INSERTING";"AFTER";"100";"EcDp_Performance_Test.aiSyncPwelResultFromTdev(n_RESULT_NO,n_OBJECT_ID,n_CREATED_BY);";"EC_PROD";
"TEST_DEVICE";"INSERTING";"BEFORE";"3100";"IF :new.default_fcty_test_device='Y' THEN ecbp_testdevice.getDefaultTdev(:NEW.OP_FCTY_1_ID,n_daytime); END IF;";"EC_PROD";
"TEST_DEVICE";"UPDATING";"AFTER";"3000";"ecdp_equipment_event.updateEventStatus(n_OBJECT_ID, n_DAYTIME, 'TEST_DEVICE');";"EC_PROD";
"TEST_DEVICE";"UPDATING";"BEFORE";"3200";"IF (:new.default_fcty_test_device='Y' AND (:old.default_fcty_test_device is null OR :old.default_fcty_test_device!='Y')) THEN ecbp_testdevice.getDefaultTdev(:OLD.OP_FCTY_1_ID,n_daytime); END IF;";"EC_PROD";
"TEST_DEVICE_TEST_DEF";"DELETING";"BEFORE";"2000";"EcDp_Performance_Test.removeGraphDefParameters(n_OBJECT_ID,n_TEST_NO);";"EC_PROD";
"TEST_DEVICE_TEST_DEF";"INSERTING";"AFTER";"1000";"EcDp_Performance_Test.createGraphDefParameters(n_OBJECT_ID,n_TEST_NO,n_CREATED_BY);";"EC_PROD";
"TEST_RESULT";"INSERTING OR UPDATING";"BEFORE";"300";"IF n_STATUS IS NULL THEN n_STATUS:='NEW'; END IF;";"EC_PROD";
"TEST_RESULT_TREND";"INSERTING OR UPDATING";"AFTER";"100";"IF UPDATING('TREND_RESET_IND') AND nvl(n_TREND_RESET_IND,'N')='N' THEN DELETE FROM trend_curve WHERE daytime = ec_ptst_result.daytime(n_RESULT_NO) AND object_id = n_OBJECT_ID; END IF;";"EC_PROD";
"TEST_TREND_CURVE";"INSERTING";"BEFORE";"300";"EcDp_System_Key.assignNextNumber('TREND_CURVE', n_TREND_SEGMENT_NO);";"EC_PROD";
"TEST_TREND_CURVE";"INSERTING OR UPDATING";"AFTER";"400";"IF n_TREND_METHOD = 'ACTUAL' THEN UPDATE TREND_CURVE SET R_SQUARED='' WHERE TREND_SEGMENT_NO=n_TREND_SEGMENT_NO; END IF;";"EC_PROD";
"TEST_TREND_CURVE";"INSERTING OR UPDATING";"BEFORE";"100";"n_C0_UNIT:=ecdp_unit.GetUnitLabel(ecdp_unit.GetViewUnitFromLogical(ec_class_attr_presentation.uom_code('TEST_RESULT_TREND',n_TREND_PARAMETER)));";"EC_PROD";
"TEST_TREND_CURVE";"INSERTING OR UPDATING";"BEFORE";"200";"IF n_TREND_METHOD = 'EXP' THEN n_C1_UNIT:='%/d'; ELSE n_C1_UNIT:=replace(n_C0_UNIT,'/d','')||'/d'; END IF;";"EC_PROD";
"TRAIN_INLET_GAS";"DELETING";"BEFORE";"300";"ue_train_storage_yield.deleteChildStorage(n_OBJECT_ID,n_DAYTIME);";"EC_TRAN";
"TRAIN_INLET_GAS";"INSERTING";"AFTER";"200";"ue_train_storage_yield.insertStorageYieldFactor(n_OBJECT_ID,n_DAYTIME);";"EC_TRAN";
"TRAIN_INLET_GAS";"INSERTING OR UPDATING";"BEFORE";"100";"ue_train_storage_yield.validateOverlappingPeriod(n_OBJECT_ID,n_DAYTIME,n_END_DATE);";"EC_TRAN";
"TRAIN_STOR_YIELD_FAC";"DELETING";"BEFORE";"100";"ue_train_storage_yield.deleteFactor(n_PROCESS_TRAIN_ID,n_STORAGE_ID);";"EC_TRAN";
"TRAIN_STOR_YIELD_FAC";"INSERTING OR UPDATING";"AFTER";"200";"ue_train_storage_yield.updateStorageYieldFactor(n_PROCESS_TRAIN_ID);";"EC_TRAN";
"TRANSACTION_TEMPLATE";"INSERTING";"AFTER";"110";"IF NVL(:NEW.DIST_OBJECT_TYPE, '$NULL$') <> 'FIELD' AND :NEW.USE_STREAM_ITEMS_IND = 'Y' THEN RAISE_APPLICATION_ERROR(-20000, 'Cannot enable ""Use Stream Item Config"" when ""Distribution Object Type"" is not ""FIELD"".'); END IF;";"EC_REVN";
"TRANSACTION_TEMPLATE";"INSERTING";"AFTER";"120";"EcDp_Transaction.InsTransTemplSplitKey(n_object_id, n_daytime, n_last_updated_by);";"EC_REVN";
"TRANSACTION_TEMPLATE";"INSERTING";"AFTER";"170";"EcDp_Transaction.SetOriginCountryForTT(n_object_id, :new.transaction_scope, :new.delivery_point_id, :new.loading_port_id, n_daytime);";"EC_REVN";
"TRANSACTION_TEMPLATE";"INSERTING";"AFTER";"180";"EcDp_Transaction.SetDestinationCountryForTT(n_object_id, :new.transaction_scope, :new.delivery_point_id, :new.discharge_port_id, n_daytime);";"EC_REVN";
"TRANSACTION_TEMPLATE";"UPDATING";"AFTER";"100";"IF NVL(:NEW.DIST_OBJECT_TYPE, '$NULL$') <> 'FIELD' AND :NEW.USE_STREAM_ITEMS_IND = 'Y' THEN RAISE_APPLICATION_ERROR(-20000, 'Cannot enable ""Use Stream Item Config"" when ""Distribution Object Type"" is not ""FIELD"".'); END IF;";"EC_REVN";
"TRANSACTION_TEMPLATE";"UPDATING";"AFTER";"130";"IF UPDATING('DAYTIME') THEN ecdp_transaction.InitNewTransactionTmplVersion(n_last_updated_by, :new.object_id, :new.daytime); END IF;";"EC_REVN";
"TRANSACTION_TEMPLATE";"UPDATING";"AFTER";"140";"EcDp_Transaction.UpdTransTemplSplitKey(n_object_id, n_daytime, n_last_updated_by);";"EC_REVN";
"TRANSACTION_TEMPLATE";"UPDATING";"AFTER";"150";"ecdp_transaction.refreshdistsplittype(:new.split_key_id, :old.dist_split_type,:new.dist_split_type);";"EC_REVN";
"TRANSACTION_TEMPLATE";"UPDATING";"AFTER";"160";"IF NVL(:New.price_src_type,'X') != NVL(:Old.price_src_type,'X') THEN EcDp_Transaction.ValidateNumberOfQtyLI(n_object_id, n_daytime); END IF;";"EC_REVN";
"TRANSACTION_TEMPLATE";"UPDATING";"AFTER";"190";"IF NOT UPDATING('ORIGIN_COUNTRY_ID') AND (UPDATING('DELIVERY_POINT_ID') OR UPDATING('LOADING_PORT_ID')) THEN EcDp_Transaction.SetOriginCountryForTT(n_object_id, :new.transaction_scope, :new.delivery_point_id, :new.loading_port_id, n_daytime); END IF;";"EC_REVN";
"TRANSACTION_TEMPLATE";"UPDATING";"AFTER";"200";"IF NOT UPDATING('COUNTRY_ID') AND (UPDATING('DELIVERY_POINT_ID') OR UPDATING('DISCHARGE_PORT_ID')) THEN EcDp_Transaction.SetDestinationCountryForTT(n_object_id,  :new.transaction_scope, :new.delivery_point_id, :new.discharge_port_id, n_daytime); END IF;";"EC_REVN";
"TRANSACTION_TEMPLATE";"UPDATING";"AFTER";"210";"IF (UPDATING('DIST_SPLIT_TYPE') OR NVL(:new.DIST_SPLIT_TYPE, '$NULL$') <> NVL(:old.DIST_SPLIT_TYPE, '$NULL$')) AND :new.DIST_SPLIT_TYPE <> 'SOURCE_SPLIT' THEN EcDp_Transaction.ClearTranTmplVerSourceSplitMtd(n_object_id,  n_daytime); END IF;";"EC_REVN";
"TRANSACTION_TEMPLATE";"UPDATING";"AFTER";"220";"IF :NEW.USE_STREAM_ITEMS_IND = 'N' AND :OLD.USE_STREAM_ITEMS_IND = 'Y' THEN ECDP_TRANSACTION.ClearStreamItemInfo(n_object_id, n_daytime); END IF;";"EC_REVN";
"TRANSACTION_TEMPLATE";"UPDATING";"AFTER";"230";"IF :NEW.USE_STREAM_ITEMS_IND = 'Y' AND NVL(:OLD.USE_STREAM_ITEMS_IND, '$NULL$') = 'N' THEN ECDP_TRANSACTION.DelTransactionDist(n_object_id, n_daytime); END IF;";"EC_REVN";
"TRANS_INVENTORY";"UPDATING";"AFTER";"3";"if  nvl(:old.end_date,to_date('01011811','ddmmyyyy')) != nvl(:new.end_date,to_date('01011811','ddmmyyyy')) then ecdp_trans_inventory.UpdateTIEndDate(:new.object_id,:new.daytime,:new.End_Date); end if;";"EC_REVN";
"TRANS_INVENTORY";"UPDATING";"BEFORE";"1";"if not ecdp_trans_inventory.AllowChangeProdSet(:old.daytime,:old.end_date,:old.trans_prod_set_id,:old.object_id) and :old.trans_prod_set_id !=:new.trans_prod_set_id then raise_application_error(-20001,'You can not change product set when there are products on lines that are based on the product set, you must first remove all the transaction inventory product lines before changing'); end if;";"EC_REVN";
"TRANS_INVENTORY_BALANCE";"INSERTING";"BEFORE";"2";"if  :old.TRANS_QTY_SOURCE_ID is null then N_TRANS_QTY_SOURCE_ID := ec_trans_inventory_version.contract_id(:new.object_id,:new.daytime,'<=') ; end if;";"EC_REVN";
"TRANS_INVENTORY_TEMPLATE";"DELETING";"BEFORE";"10";"DELETE FROM trans_inventory_tmpl_attr WHERE template_code = n_code;";"EC_REVN";
"TRANS_INVENTORY_TRANS";"INSERTING";"BEFORE";"1";"if  :old.TRANS_QTY_SOURCE_ID is null then N_TRANS_QTY_SOURCE_ID := ec_trans_inventory_version.contract_id(:new.object_id,:new.daytime,'<=') ; end if;";"EC_REVN";
"TRANS_INV_LINE";"DELETING";"BEFORE";"2";"  DELETE FROM TRANS_INV_LI_PRODUCT tilp WHERE :OLD.object_id = object_id AND LINE_tag = :OLD.tag  AND trans_prod_set_item_id != 'MESSAGE'  AND daytime = :OLD.daytime;";"EC_REVN";
"TRANS_INV_LINE";"INSERTING";"BEFORE";"1";"IF ec_trans_inventory_version.trans_dim_set_id(:new.object_id,:new.daytime,'<=') = 'x' or ec_trans_inventory_version.trans_prod_set_id(:new.object_id,:new.daytime,'<=') = 'x' THEN raise_application_error(-20001,'Lines can only be added on transactional inventories with dimension sets and product sets chosen. Please first fill in the two values on the transaction inventory');end if;";"EC_REVN";
"TRANS_INV_LINE";"UPDATING";"AFTER";"2";"if  :old.tag != :new.tag then ecdp_trans_inventory.UpdateTILineTag(:new.object_id,:old.tag,:new.tag,:old.daytime); end if;";"EC_REVN";
"TRANS_INV_LINE";"UPDATING";"AFTER";"3";"if  :old.daytime != :new.daytime then ecdp_trans_inventory.UpdateTILineStartDate(:new.object_id,:new.tag,:old.daytime,:new.Daytime); end if;";"EC_REVN";
"TRANS_INV_LINE";"UPDATING";"AFTER";"4";"if  nvl(:old.end_date,to_date('01011811','ddmmyyyy')) != nvl(:new.end_date,to_date('01011811','ddmmyyyy')) then ecdp_trans_inventory.UpdateTILineEndDate(:new.object_id,:new.tag,:new.daytime,:new.End_Date); end if;";"EC_REVN";
"TRANS_INV_LI_PRODUCT";"DELETING";"BEFORE";"1";"  DELETE FROM TRANS_INV_LI_PR_VAR tilpvd WHERE :OLD.object_id = object_id AND line_tag = :OLD.Line_tag AND :old.trans_prod_set_item_id = TRANS_PROD_SET_ITEM_id AND daytime = :OLD.daytime;";"EC_REVN";
"TRANS_INV_LI_PRODUCT";"INSERTING OR UPDATING";"AFTER";"3";"if updating('TRANS_PROD_SET_ITEM_ID') then ecdp_trans_inventory.UpdateTILiProd(:new.object_id,:new.daytime,:new.line_tag,:old.trans_prod_set_item_id, :new.trans_prod_set_item_id);end if;";"EC_REVN";
"TRANS_INV_LI_PR_VAR";"DELETING";"BEFORE";"1";"  DELETE FROM TRANS_INV_LI_PR_VAR_DIM tilpvd WHERE :OLD.object_id = object_id AND line_tag = :OLD.Line_tag and CONFIG_VARIABLE_ID = :old.config_variable_id AND :old.trans_prod_set_item_id = TRANS_PROD_SET_ITEM_id and :old.exec_order = variable_exec_order AND daytime = :OLD.daytime;";"EC_REVN";
"TRANS_INV_LI_PR_VAR";"INSERTING";"BEFORE";"1";"if n_exec_order is null then select nvl(max(var_exec_order),0) + 1 into n_exec_order FROM TRANS_INV_LI_PR_VAR WHERE N_object_id=object_id  AND line_tag=n_Line_tag  and CONFIG_VARIABLE_ID=n_config_variable_id AND n_trans_prod_set_item_id=TRANS_PROD_SET_ITEM_id AND daytime=n_daytime; end if;";"EC_REVN";
"TRANS_INV_LI_PR_VAR";"INSERTING OR UPDATING";"AFTER";"3";"if updating('EXEC_ORDER') then update trans_inv_li_pr_var_dim set variable_exec_order = :new.exec_order where :OLD.object_id = object_id AND line_tag = :OLD.Line_tag and CONFIG_VARIABLE_ID=:old.config_variable_id AND :old.trans_prod_set_item_id = TRANS_PROD_SET_ITEM_id and :old.exec_order=variable_exec_order AND daytime=:OLD.daytime;end if;";"EC_REVN";
"TRANS_INV_LI_PR_VAR";"INSERTING OR UPDATING";"AFTER";"4";"if nvl(n_config_variable_id,'x') != nvl(:old.config_variable_id,'x') then ecdp_trans_inventory.refreshparams(n_object_id,n_CONFIG_VARIABLE_ID,n_daytime,n_end_date,N_trans_prod_set_item_id,:new.line_tag,:new.exec_order); end if;";"EC_REVN";
"TRANS_INV_LI_PR_VAR_DIM";"INSERTING OR UPDATING";"BEFORE";"1";"IF nvl(:new.TRANS_PARAM_SOURCE_CODE,'x_x') != nvl(:old.TRANS_PARAM_SOURCE_CODE,'x_x') then n_trans_param_source_id := ecdp_trans_inventory.getSourceId(:new.CONFIG_VARIABLE_ID,:old.daytime,:new.DIMENSION,:new.TRANS_PARAM_SOURCE_CODE);  END IF;";"EC_REVN";
"TRANS_INV_MSG";"DELETING";"BEFORE";"1";"  DELETE FROM TRANS_INV_LI_PR_VAR tilpvd WHERE :OLD.object_id = object_id AND line_tag = :OLD.MESSAGE_CODE  AND :old.trans_prod_set_item_id = 'MESSAGE' AND daytime = :OLD.daytime;";"EC_REVN";
"TRANS_INV_MSG";"UPDATING";"AFTER";"2";"if  :old.message_code != :new.message_code then ecdp_trans_inventory.UpdateTILiVarTag(:new.object_id,:old.message_code,:new.message_code,'MESSAGE',:old.daytime); end if;";"EC_REVN";
"TRANS_INV_MSG";"UPDATING";"AFTER";"3";"if  :old.daytime != :new.daytime then ecdp_trans_inventory.UpdateTILiVarStartDate(:new.object_id,:new.message_code,'MESSAGE',:old.daytime,:new.Daytime); end if;";"EC_REVN";
"TRANS_INV_MSG";"UPDATING";"AFTER";"4";"if  nvl(:old.end_date,to_date('01011811','ddmmyyyy')) != nvl(:new.end_date,to_date('01011811','ddmmyyyy')) then ecdp_trans_inventory.UpdateTILiVarEndDate(:new.object_id,:new.message_code,'MESSAGE',:new.daytime,:new.End_Date); end if;";"EC_REVN";
"TRANS_INV_MSG_VAR";"DELETING";"BEFORE";"1";"  DELETE FROM TRANS_INV_LI_PR_VAR_DIM tilpvd WHERE :OLD.object_id = object_id AND LINE_TAG = :OLD.MESSAGE_CODE and CONFIG_VARIABLE_ID = :old.config_variable_id AND :old.trans_prod_set_item_id = TRANS_PROD_SET_ITEM_id and :old.exec_order = variable_exec_order AND daytime = :OLD.daytime;";"EC_REVN";
"TRANS_INV_MSG_VAR";"INSERTING";"BEFORE";"2";"if n_exec_order is null then select nvl(max(var_exec_order),0) + 1 into n_exec_order FROM TRANS_INV_LI_PR_VAR WHERE N_object_id=object_id  AND LINE_TAG=n_MESSAGE_CODE  and CONFIG_VARIABLE_ID=n_config_variable_id AND n_trans_prod_set_item_id=TRANS_PROD_SET_ITEM_id AND daytime=n_daytime; end if;";"EC_REVN";
"TRANS_INV_MSG_VAR";"INSERTING OR UPDATING";"AFTER";"4";"if updating('EXEC_ORDER') then update trans_inv_li_pr_var_dim set variable_exec_order = :new.exec_order where :OLD.object_id = object_id AND LINE_TAG = :OLD.MESSAGE_CODE and CONFIG_VARIABLE_ID=:old.config_variable_id AND :old.trans_prod_set_item_id = TRANS_PROD_SET_ITEM_id and :old.exec_order=variable_exec_order AND daytime=:OLD.daytime;end if;";"EC_REVN";
"TRANS_INV_MSG_VAR";"INSERTING OR UPDATING";"AFTER";"5";"if nvl(n_config_variable_id,'x') != nvl(:old.config_variable_id,'x') then ecdp_trans_inventory.refreshparams(n_object_id,n_CONFIG_VARIABLE_ID,n_daytime,n_end_date,N_trans_prod_set_item_id,:new.MESSAGE_CODE,:new.exec_order); end if;";"EC_REVN";
"TRCN_CAPACITY_FACTOR";"DELETING";"BEFORE";"200";"ue_nomination.updateFactorsEndDate(o_object_id, o_daytime, n_end_date, 'TRCN_CAPACITY_FACTOR');";"EC_TRAN";
"TRCN_CAPACITY_FACTOR";"INSERTING";"AFTER";"100";"ue_nomination.setFactorsEndDate(n_object_id, n_daytime, 'TRCN_CAPACITY_FACTOR');";"EC_TRAN";
"TRCN_FACTOR";"DELETING";"BEFORE";"200";"ue_nomination.updateFactorsEndDate(o_object_id, o_daytime, n_end_date, 'TRCN_FACTOR');";"EC_TRAN";
"TRCN_FACTOR";"INSERTING";"AFTER";"100";"ue_nomination.setFactorsEndDate(n_object_id, n_daytime, 'TRCN_FACTOR');";"EC_TRAN";
"TRCN_QUALITY_HANDLING";"DELETING";"BEFORE";"200";"UE_CONTRACT_DISPATCHING.REMOVE_QA_HANDLING_COMP(n_QUALITY_HANDLING_NO);";"EC_TRAN";
"TRCN_QUALITY_HANDLING";"INSERTING";"AFTER";"100";"UE_CONTRACT_DISPATCHING.POPULATE_QA_HANDLING_COMP(n_QUALITY_HANDLING_NO);";"EC_TRAN";
"TRNP_DAY_NOM_CONF";"UPDATING";"BEFORE";"1000";"IF (Nvl(:OLD.EXT_ADJUSTED_QTY, -1) <> Nvl(n_EXT_ADJUSTED_QTY, -1)) THEN n_EXT_CONFIRMED_QTY:= EcDp_NOMINATION.lesserRule(n_ACCEPTED_QTY, n_EXT_ADJUSTED_QTY); end if;";"EC_TRAN";
"TRNP_DAY_NOM_INPUT";"INSERTING";"BEFORE";"100";"N_NOMINATION_TYPE := 'TRAN_INPUT'; ";"EC_TRAN";
"TRNP_DAY_NOM_INPUT";"INSERTING";"BEFORE";"200";"n_contract_id := nvl(n_contract_id, ec_nomination_point.contract_id(n_object_id));";"EC_TRAN";
"TRNP_DAY_NOM_INPUT";"INSERTING";"BEFORE";"1000";"n_NOM_STATUS := nvl(n_NOM_STATUS, 'REQ');";"EC_TRAN";
"TRNP_DAY_NOM_INPUT";"INSERTING";"BEFORE";"1100";"n_shipper_code:=ec_nompnt_version.counter_code(n_counter_nompnt_id, n_daytime, '<=');";"EC_TRAN";
"TRNP_DAY_NOM_INPUT";"INSERTING OR UPDATING";"BEFORE";"2100";"IF NVL(:OLD.REQUESTED_QTY,0) <> NVL(n_REQUESTED_QTY,0) AND NVL(n_REQUESTED_QTY,0) <> NVL(n_ACCEPTED_QTY,0) THEN n_NOM_STATUS := 'REQ';END IF;";"EC_TRAN";
"TRNP_DAY_NOM_LOC_CONF";"INSERTING";"AFTER";"300";"ue_nomination.createSubdayConfHours('TRNP_SUB_DAY_LOC_CONF', n_object_id, n_daytime, n_contract_id, nvl(n_confirmation_type,'TRAN_INPUT'), n_confirmation_seq, nvl(n_con_status, 'ACC'));";"EC_TRAN";
"TRNP_DAY_NOM_LOC_CONF";"INSERTING";"BEFORE";"200";"n_CON_STATUS := nvl(n_CON_STATUS, 'ACC');";"EC_TRAN";
"TRNP_DAY_NOM_LOC_CONF";"INSERTING OR UPDATING";"BEFORE";"100";"n_shipper_code:=ec_nompnt_version.counter_code(n_counter_nompnt_id, n_daytime, '<=');";"EC_TRAN";
"TRNP_DAY_NOM_OPER_CTR";"INSERTING";"BEFORE";"100";"IF ecdp_nomination.getLocationType(n_object_id) = 'ENTRY' THEN n_NOMINATION_TYPE := 'TRAN_INPUT'; ELSE n_NOMINATION_TYPE := 'TRAN_OUTPUT'; END IF;";"EC_TRAN";
"TRNP_DAY_NOM_OPER_CTR";"INSERTING";"BEFORE";"200";"n_CONTRACT_ID := nvl(n_CONTRACT_ID, ec_nomination_point.contract_id(n_object_id));";"EC_TRAN";
"TRNP_DAY_NOM_OPER_CTR";"INSERTING";"BEFORE";"300";"n_OPER_NOM_IND := 'Y';";"EC_TRAN";
"TRNP_DAY_NOM_OPER_CTR";"INSERTING";"BEFORE";"1000";"n_NOM_STATUS := nvl(n_NOM_STATUS, 'ACC');";"EC_TRAN";
"TRNP_DAY_NOM_OPER_CTR";"INSERTING OR UPDATING";"BEFORE";"1100";"n_shipper_code:=ec_nompnt_version.counter_code(n_counter_nompnt_id, n_daytime, '<=');";"EC_TRAN";
"TRNP_DAY_NOM_OUTPUT";"INSERTING";"BEFORE";"100";"N_NOMINATION_TYPE := 'TRAN_OUTPUT'; ";"EC_TRAN";
"TRNP_DAY_NOM_OUTPUT";"INSERTING";"BEFORE";"200";"n_contract_id := nvl(n_contract_id, ec_nomination_point.contract_id(n_object_id));";"EC_TRAN";
"TRNP_DAY_NOM_OUTPUT";"INSERTING";"BEFORE";"1000";"n_NOM_STATUS := nvl(n_NOM_STATUS, 'REQ');";"EC_TRAN";
"TRNP_DAY_NOM_OUTPUT";"INSERTING";"BEFORE";"1100";"n_shipper_code:=ec_nompnt_version.counter_code(n_counter_nompnt_id, n_daytime, '<=');";"EC_TRAN";
"TRNP_DAY_NOM_OUTPUT";"INSERTING OR UPDATING";"BEFORE";"2100";"IF NVL(:OLD.REQUESTED_QTY,0) <> NVL(n_REQUESTED_QTY,0) AND NVL(n_REQUESTED_QTY,0) <> NVL(n_ACCEPTED_QTY,0) THEN n_NOM_STATUS := 'REQ';END IF;";"EC_TRAN";
"TRNP_DAY_NOM_TRANSFER";"INSERTING";"BEFORE";"100";"n_NOM_STATUS := nvl(n_NOM_STATUS, 'REQ');";"EC_TRAN";
"TRNP_DAY_RENOMINATION";"INSERTING";"BEFORE";"100";"N_NOMINATION_TYPE := 'TRAN_RENOM'; ";"EC_TRAN";
"TRNP_DAY_RENOMINATION";"INSERTING";"BEFORE";"1000";"n_NOM_STATUS := nvl(n_NOM_STATUS, 'REQ');";"EC_TRAN";
"TRNP_DAY_RENOMINATION";"INSERTING";"BEFORE";"1100";"EcDp_NOMINATION.validateRenomTime(n_parent_nomination_seq, n_object_id, n_daytime);";"EC_TRAN";
"TRNP_EVENT_SHARE";"INSERTING";"AFTER";"100";"ue_nompnt_share.set_end_date(n_object_id, n_daytime);";"EC_TRAN";
"TRNP_EVENT_SHARE";"INSERTING";"AFTER";"200";"ue_nompnt_share.copy_prev_values(n_object_id, n_daytime);";"EC_TRAN";
"TRNP_FACTOR";"DELETING";"BEFORE";"200";"ue_nomination.updateFactorsEndDate(o_object_id, o_daytime, n_end_date, 'TRNP_FACTOR');";"EC_TRAN";
"TRNP_FACTOR";"INSERTING";"AFTER";"100";"ue_nomination.setFactorsEndDate(n_object_id, n_daytime, 'TRNP_FACTOR');";"EC_TRAN";
"TRNP_SUB_DAY_LOC_CONF";"INSERTING";"BEFORE";"50";"n_CON_STATUS := nvl(n_CON_STATUS,'ACC');";"EC_TRAN";
"TRNP_SUB_DAY_LOC_CONF";"INSERTING OR UPDATING";"AFTER";"100";"ue_Nomination.aggrSubDailyToDailyConf(n_object_id, n_daytime, n_contract_id, n_summer_time, n_production_day, n_day_con_seq);";"EC_TRAN";
"TRNP_SUB_DAY_LOC_MATRIX";"INSERTING";"BEFORE";"100";"n_OPER_NOM_IND := 'N';";"EC_TRAN";
"TRNP_SUB_DAY_NOM_OPER";"INSERTING";"BEFORE";"100";"n_OPER_NOM_IND := 'Y';";"EC_TRAN";
"TRNP_SUB_DAY_NOM_OPER";"INSERTING";"BEFORE";"200";"n_NOM_STATUS := nvl(n_NOM_STATUS, 'ACC');";"EC_TRAN";
"TRNP_SUB_DAY_NOM_OUTPUT";"INSERTING";"BEFORE";"100";"N_NOMINATION_TYPE := 'TRAN_OUTPUT'; ";"EC_TRAN";
"TRNP_SUB_DAY_NOM_OUTPUT";"INSERTING";"BEFORE";"200";"n_contract_id := nvl(n_contract_id, ec_nomination_point.contract_id(n_object_id));";"EC_TRAN";
"TRNP_SUB_DAY_NOM_OUTPUT";"INSERTING";"BEFORE";"1000";"n_NOM_STATUS := nvl(n_NOM_STATUS, 'REQ');";"EC_TRAN";
"TRNP_SUB_DAY_RENOM";"INSERTING";"BEFORE";"10";"n_NOMINATION_TYPE := 'TRAN_RENOM'; ";"EC_TRAN";
"TRNP_SUB_DAY_RENOM";"INSERTING";"BEFORE";"20";"n_NOM_STATUS := nvl(n_NOM_STATUS, 'REQ');";"EC_TRAN";
"TRNP_SUB_DAY_RENOM";"INSERTING";"BEFORE";"40";"ecdp_nomination.validateRenomSubTime(n_day_nom_seq, n_object_id, n_production_day, n_daytime, n_summer_time);";"EC_TRAN";
"TRNP_SUB_DAY_RENOM";"INSERTING OR UPDATING";"AFTER";"30";"ecdp_nomination.aggrRequestedQty(n_day_nom_seq);";"EC_TRAN";
"TRTZ_FACTOR";"DELETING";"BEFORE";"200";"ue_nomination.updateFactorsEndDate(o_object_id, o_daytime, n_end_date, 'TRTZ_FACTOR');";"EC_TRAN";
"TRTZ_FACTOR";"INSERTING";"AFTER";"100";"ue_nomination.setFactorsEndDate(n_object_id, n_daytime, 'TRTZ_FACTOR');";"EC_TRAN";
"UNIT_OBJ_CONVERSION";"INSERTING";"BEFORE";"100";"IF TRUNC(EcDp_Objects.getOBjStartDate(n_object_id)) > n_daytime THEN RAISE_APPLICATION_ERROR(-20000,'Daytime is less than owner objects start date.');END IF;IF n_Daytime >= nvl(EcDp_Objects.getObjEndDate(n_object_id),n_Daytime + 1) THEN Raise_Application_Error(-20000,'Daytime must be less than owner objects end date.');END IF;";"EC_FRMW";
"UTILITY_EQPM";"UPDATING";"AFTER";"3000";"ecdp_equipment_event.updateEventStatus(n_OBJECT_ID, n_DAYTIME, 'UTILITY_EQPM');";"EC_PROD";
"WATER_TREATMENT_UNIT";"UPDATING";"AFTER";"3000";"ecdp_equipment_event.updateEventStatus(n_OBJECT_ID, n_DAYTIME, 'WATER_TREATMENT_UNIT');";"EC_PROD";
"WEBO_INTERVAL_PLT_TEST";"DELETING";"BEFORE";"100";"EcDp_WELL_PLT.deleteWellPltResult(n_object_id, n_daytime, n_run_no);";"EC_PROD";
"WEBO_PRESS_TEST";"DELETING";"BEFORE";"1400";"EcDp_Webo_Press_Test.deleteChildEvent(n_EVENT_NO);";"EC_PROD";
"WEBO_PRESS_TEST";"INSERTING";"AFTER";"1100";"ecdp_webo_press_test.addPreviousGradients(n_event_no,n_object_id,n_daytime);";"EC_PROD";
"WEBO_PRESS_TEST";"INSERTING";"BEFORE";"1200";"IF (:new.datum_press IS NULL) THEN n_datum_source:=NULL; ELSE n_datum_source:='MANUAL'; END IF;";"EC_PROD";
"WEBO_PRESS_TEST";"UPDATING";"BEFORE";"1300";"IF (:new.datum_press <> :old.datum_press)  THEN n_datum_source:='MANUAL'; ELSIF (:new.datum_press IS NULL) THEN  n_datum_source:=NULL; ELSIF (:old.datum_press IS NULL)  AND (:new.datum_press IS NOT NULL) THEN  n_datum_source:='MANUAL'; END IF;";"EC_PROD";
"WEBO_PRESS_TEST_INT";"DELETING";"BEFORE";"100";"EcDp_Webo_Press_Test.delPerfInterval(n_EVENT_NO,n_OBJECT_ID);";"EC_PROD";
"WELL";"UPDATING";"BEFORE";"3000";"ecdp_well.updatDateOnConnectedObjects(n_object_start_date,n_object_end_date, n_object_id);";"EC_PROD";
"WELL_BORE_INTERVAL_SPLIT";"INSERTING";"AFTER";"1300";"EcDp_Well_Reservoir.setWeboIntervalShareEndDate(n_OBJECT_ID,n_DAYTIME,'WELL_BORE_INTERVAL_SPLIT' );";"EC_PROD";
"WELL_BORE_SPLIT_FACTOR";"INSERTING";"AFTER";"1200";"EcDp_Objects_Split.SetSplitEndDate(n_OBJECT_ID,n_DAYTIME,'WELL_BORE_SPLIT_FACTOR' );";"EC_PROD";
"WELL_CHEM_ANALYSIS";"INSERTING OR UPDATING";"BEFORE";"100";"n_object_class_name := 'WELL';";"EC_PROD";
"WELL_EQPM_CORR_ACTION";"INSERTING";"BEFORE";"3000";"ecbp_well_eqpm_deferment.VerifyActionsWellEqpm(n_event_no,n_daytime,n_end_date,n_action);";"EC_PROD";
"WELL_EQPM_CORR_ACTION";"UPDATING";"AFTER";"3100";"ecbp_well_eqpm_deferment.VerifyActionsWellEqpm(n_event_no,n_daytime,n_end_date,n_action);";"EC_PROD";
"WELL_EQPM_LOW";"DELETING";"BEFORE";"500";"EcBp_Well_Eqpm_Deferment.deleteChildEvent(n_event_no);";"EC_PROD";
"WELL_EQPM_LOW";"INSERTING";"BEFORE";"100";"n_DOWNTIME_CATEG:='WELL_LOW';";"EC_PROD";
"WELL_EQPM_LOW";"INSERTING";"BEFORE";"200";"IF n_DOWNTIME_TYPE  = 'WELL_DT' THEN n_DOWNTIME_CLASS_TYPE := 'SINGLE';  ELSE  n_DOWNTIME_CLASS_TYPE := 'GROUP'; END IF;";"EC_PROD";
"WELL_EQPM_LOW";"INSERTING";"BEFORE";"800";"IF n_DOWNTIME_TYPE = 'WELL_DT' THEN IF ecdp_well.IsWellActiveStatus(n_OBJECT_ID, 'OPEN', n_DAYTIME)  = 'N' THEN Raise_Application_Error('-20545', 'Could not insert - Well Active Status is not OPEN.'); ELSIF (ecdp_well.checkClosedWellWithinPeriod(n_OBJECT_ID,n_DAYTIME, NVL(n_END_DATE, to_date('2100-01-01','yyyy-mm-dd'))) = 'Y') THEN Raise_Application_Error('-20545', 'Could not insert - Well Active Status is not OPEN.'); END IF; END IF;";"EC_PROD";
"WELL_EQPM_LOW";"INSERTING OR UPDATING";"AFTER";"400";"if (nvl(n_END_DATE, to_date('01-01-1900', 'DD-MM-YYYY'))<>  nvl(:old.END_DATE, to_date('01-01-1900', 'DD-MM-YYYY'))) then EcDp_Well_Eqpm_Deferment.updateEndDateForChildEvent(n_EVENT_NO, :OLD.END_DATE , nvl(n_last_updated_by, n_created_by), nvl(n_last_updated_date, n_created_date)); end if;";"EC_PROD";
"WELL_EQPM_LOW";"INSERTING OR UPDATING";"AFTER";"900";"if (nvl(n_reason_code_1,'NULL') <>  nvl(:old.reason_code_1,'NULL') or nvl(n_reason_code_2,'NULL')<>  nvl(:old.reason_code_2,'NULL') or nvl(n_reason_code_3,'NULL')<>  nvl(:old.reason_code_3,'NULL') or nvl(n_reason_code_4,'NULL')<>  nvl(:old.reason_code_4,'NULL')) then EcDp_Well_Eqpm_Deferment.updateReasonCodeForChildEvent(n_event_no, nvl(n_last_updated_by, n_created_by), nvl(n_last_updated_date, n_created_date));end if;";"EC_PROD";
"WELL_EQPM_LOW";"INSERTING OR UPDATING";"AFTER";"1100";"IF n_DAYTIME > SYSDATE+1 OR n_END_DATE > SYSDATE+1 THEN Raise_Application_Error('-20630', 'Start Date or End Date should not exceed more than one day of system date.');  END IF;";"EC_PROD";
"WELL_EQPM_LOW";"INSERTING OR UPDATING";"AFTER";"1200";"EcDp_Well_Eqpm_Deferment.setLossRate(n_event_no, nvl(n_last_updated_by, n_created_by));";"EC_PROD";
"WELL_EQPM_LOW";"UPDATING";"AFTER";"450";"EcDp_Well_Eqpm_Deferment.updateStartDateForChildEvent(n_EVENT_NO, n_DAYTIME , nvl(n_last_updated_by, n_created_by), nvl(n_last_updated_date, n_created_date)); ";"EC_PROD";
"WELL_EQPM_LOW";"UPDATING";"BEFORE";"460";"EcBp_Well_Eqpm_Deferment.checkChildEndDate(n_EVENT_NO,n_DAYTIME);";"EC_PROD";
"WELL_EQPM_LOW";"UPDATING";"BEFORE";"1000";"IF NVL(:OLD.END_DATE,  n_DAYTIME) <> NVL(:NEW.END_DATE,  n_DAYTIME) AND n_DOWNTIME_TYPE = 'WELL_DT' THEN IF (ecdp_well.checkClosedWellWithinPeriod(n_OBJECT_ID,n_DAYTIME, NVL(n_END_DATE, to_date('2100-01-01','yyyy-mm-dd'))) = 'Y') THEN Raise_Application_Error('-20546', 'Could not update - Well Active Status is not OPEN for the whole period.'); END IF; END IF;";"EC_PROD";
"WELL_EQPM_LOW_BY_WELL";"INSERTING";"BEFORE";"100";"n_DOWNTIME_CATEG:='WELL_LOW';";"EC_PROD";
"WELL_EQPM_LOW_BY_WELL";"INSERTING";"BEFORE";"200";"IF n_DOWNTIME_TYPE  = 'WELL_DT' THEN n_DOWNTIME_CLASS_TYPE := 'SINGLE';  ELSE  n_DOWNTIME_CLASS_TYPE := 'GROUP'; END IF;";"EC_PROD";
"WELL_EQPM_LOW_BY_WELL";"INSERTING";"BEFORE";"800";"IF n_DOWNTIME_TYPE = 'WELL_DT' THEN IF ecdp_well.IsWellActiveStatus(n_OBJECT_ID, 'OPEN', n_DAYTIME)  = 'N' THEN Raise_Application_Error('-20545', 'Could not insert - Well Active Status is not OPEN.'); ELSIF (ecdp_well.checkClosedWellWithinPeriod(n_OBJECT_ID,n_DAYTIME, NVL(n_END_DATE, to_date('2100-01-01','yyyy-mm-dd'))) = 'Y') THEN Raise_Application_Error('-20545', 'Could not insert - Well Active Status is not OPEN.'); END IF; END IF;";"EC_PROD";
"WELL_EQPM_LOW_BY_WELL";"INSERTING OR UPDATING";"AFTER";"1200";"EcDp_Well_Eqpm_Deferment.setLossRate(n_event_no, nvl(n_last_updated_by, n_created_by));";"EC_PROD";
"WELL_EQPM_LOW_BY_WELL";"INSERTING OR UPDATING";"BEFORE";"600";"IF n_downtime_class_type <> 'GROUP' THEN EcBp_Well_Eqpm_Deferment.checkIfEventOverlaps(n_OBJECT_ID, n_DAYTIME, n_END_DATE, n_DOWNTIME_CATEG, n_EVENT_NO); END IF;";"EC_PROD";
"WELL_EQPM_LOW_BY_WELL";"UPDATING";"BEFORE";"1000";"IF NVL(:OLD.END_DATE, n_DAYTIME) <> NVL(:NEW.END_DATE, n_DAYTIME) AND n_DOWNTIME_TYPE = 'WELL_DT' THEN IF (ecdp_well.checkClosedWellWithinPeriod(n_OBJECT_ID,n_DAYTIME, NVL(n_END_DATE, to_date('2100-01-01','yyyy-mm-dd'))) = 'Y') THEN Raise_Application_Error('-20546', 'Could not update - Well Active Status is not OPEN for the whole period.'); END IF; END IF;";"EC_PROD";
"WELL_EQPM_LOW_CHILD";"INSERTING";"BEFORE";"100";"n_DOWNTIME_CATEG:='WELL_LOW';";"EC_PROD";
"WELL_EQPM_LOW_CHILD";"INSERTING";"BEFORE";"200";"n_DOWNTIME_CLASS_TYPE:='GROUP_CHILD';";"EC_PROD";
"WELL_EQPM_LOW_CHILD";"INSERTING";"BEFORE";"300";"n_OBJECT_TYPE:='WELL';";"EC_PROD";
"WELL_EQPM_LOW_CHILD";"INSERTING";"BEFORE";"400";"n_DOWNTIME_TYPE:='WELL_DT';";"EC_PROD";
"WELL_EQPM_LOW_CHILD";"INSERTING";"BEFORE";"800";"IF n_DOWNTIME_TYPE = 'WELL_DT' THEN IF ecdp_well.IsWellActiveStatus(n_OBJECT_ID, 'OPEN', n_DAYTIME)  = 'N' THEN Raise_Application_Error('-20545', 'Could not insert - Well Active Status is not OPEN.'); ELSIF (ecdp_well.checkClosedWellWithinPeriod(n_OBJECT_ID,n_DAYTIME, NVL(n_END_DATE, to_date('2100-01-01','yyyy-mm-dd'))) = 'Y') THEN Raise_Application_Error('-20545', 'Could not insert - Well Active Status is not OPEN.'); END IF; END IF;";"EC_PROD";
"WELL_EQPM_LOW_CHILD";"INSERTING OR UPDATING";"AFTER";"1000";"EcDp_Well_Eqpm_Deferment.updateReasonCodeForChildEvent(n_parent_event_no, nvl(n_last_updated_by, n_created_by), nvl(n_last_updated_date, n_created_date));";"EC_PROD";
"WELL_EQPM_LOW_CHILD";"INSERTING OR UPDATING";"AFTER";"1200";"IF n_END_DATE > ec_well_equip_downtime.end_date(n_parent_event_no) THEN Raise_Application_Error('-20629', 'End Date must be equal to or less than End Date of the parent records.');  END IF;";"EC_PROD";
"WELL_EQPM_LOW_CHILD";"INSERTING OR UPDATING";"AFTER";"1300";"EcDp_Well_Eqpm_Deferment.setLossRate(n_EVENT_NO, nvl(n_last_updated_by, n_created_by));";"EC_PROD";
"WELL_EQPM_LOW_CHILD";"INSERTING OR UPDATING";"BEFORE";"700";"EcBp_Well_Eqpm_Deferment.checkValidChildPeriod(n_PARENT_EVENT_NO,n_DAYTIME);";"EC_PROD";
"WELL_EQPM_LOW_CHILD";"UPDATING";"BEFORE";"1100";"IF NVL(:OLD.END_DATE, n_DAYTIME) <> NVL(:NEW.END_DATE, n_DAYTIME) AND n_DOWNTIME_TYPE = 'WELL_DT' THEN IF (ecdp_well.checkClosedWellWithinPeriod(n_OBJECT_ID,n_DAYTIME, NVL(n_END_DATE, to_date('2100-01-01','yyyy-mm-dd'))) = 'Y') THEN Raise_Application_Error('-20546', 'Could not update - Well Active Status is not OPEN for the whole period.'); END IF; END IF;";"EC_PROD";
"WELL_EQPM_MASTER_EVENT";"INSERTING";"BEFORE";"10";"n_event_id := EcDp_Well_EQPM_Master_Event.genEventID(n_event_type, n_daytime);";"EC_PROD";
"WELL_EQPM_MASTER_EVENT";"UPDATING('EVENT_TYPE')";"BEFORE";"20";"n_event_id := EcDp_Well_EQPM_Master_Event.genEventID(n_event_type, n_daytime);";"EC_PROD";
"WELL_EQPM_OFF";"DELETING";"BEFORE";"500";"EcBp_Well_Eqpm_Deferment.deleteChildEvent(n_event_no);";"EC_PROD";
"WELL_EQPM_OFF";"INSERTING";"BEFORE";"100";"n_DOWNTIME_CATEG:='WELL_OFF';";"EC_PROD";
"WELL_EQPM_OFF";"INSERTING";"BEFORE";"200";"IF n_DOWNTIME_TYPE  = 'WELL_DT' THEN n_DOWNTIME_CLASS_TYPE := 'SINGLE';  ELSE  n_DOWNTIME_CLASS_TYPE := 'GROUP'; END IF;";"EC_PROD";
"WELL_EQPM_OFF";"INSERTING";"BEFORE";"800";"IF n_DOWNTIME_TYPE = 'WELL_DT' THEN IF ecdp_well.IsWellActiveStatus(n_OBJECT_ID, 'OPEN', n_DAYTIME)  = 'N' THEN Raise_Application_Error('-20545', 'Could not insert - Well Active Status is not OPEN.'); ELSIF (ecdp_well.checkClosedWellWithinPeriod(n_OBJECT_ID,n_DAYTIME, NVL(n_END_DATE, to_date('2100-01-01','yyyy-mm-dd'))) = 'Y') THEN Raise_Application_Error('-20545', 'Could not insert - Well Active Status is not OPEN.'); END IF; END IF;";"EC_PROD";
"WELL_EQPM_OFF";"INSERTING OR UPDATING";"AFTER";"900";"if (nvl(n_reason_code_1,'NULL') <>  nvl(:old.reason_code_1,'NULL') or nvl(n_reason_code_2,'NULL')<>  nvl(:old.reason_code_2,'NULL') or nvl(n_reason_code_3,'NULL')<>  nvl(:old.reason_code_3,'NULL') or nvl(n_reason_code_4,'NULL')<>  nvl(:old.reason_code_4,'NULL')) then EcDp_Well_Eqpm_Deferment.updateReasonCodeForChildEvent(n_event_no, nvl(n_last_updated_by, n_created_by), nvl(n_last_updated_date, n_created_date));end if;";"EC_PROD";
"WELL_EQPM_OFF";"INSERTING OR UPDATING";"AFTER";"1100";"IF n_DAYTIME > SYSDATE+1 OR n_END_DATE > SYSDATE+1 THEN Raise_Application_Error('-20630', 'Start Date or End Date should not exceed more than one day of system date.');  END IF;";"EC_PROD";
"WELL_EQPM_OFF";"INSERTING OR UPDATING";"AFTER";"1200";"EcDp_Well_Eqpm_Deferment.setLossRate(n_event_no, nvl(n_last_updated_by, n_created_by));";"EC_PROD";
"WELL_EQPM_OFF";"INSERTING OR UPDATING";"BEFORE";"600";"IF n_downtime_class_type <> 'GROUP' THEN EcBp_Well_Eqpm_Deferment.checkIfEventOverlaps(n_OBJECT_ID, n_DAYTIME, n_END_DATE, n_DOWNTIME_CATEG, n_EVENT_NO); END IF;";"EC_PROD";
"WELL_EQPM_OFF";"UPDATING";"AFTER";"400";"if (nvl(n_END_DATE, to_date('01-01-1900', 'DD-MM-YYYY'))<>  nvl(:old.END_DATE, to_date('01-01-1900', 'DD-MM-YYYY'))) then EcDp_Well_Eqpm_Deferment.updateEndDateForChildEvent(n_EVENT_NO, :OLD.END_DATE , nvl(n_last_updated_by, n_created_by),nvl(n_last_updated_date, n_created_date));end if;";"EC_PROD";
"WELL_EQPM_OFF";"UPDATING";"AFTER";"450";"EcDp_Well_Eqpm_Deferment.updateStartDateForChildEvent(n_EVENT_NO, n_DAYTIME , nvl(n_last_updated_by, n_created_by), nvl(n_last_updated_date, n_created_date)); ";"EC_PROD";
"WELL_EQPM_OFF";"UPDATING";"BEFORE";"460";"EcBp_Well_Eqpm_Deferment.checkChildEndDate(n_EVENT_NO,n_DAYTIME);";"EC_PROD";
"WELL_EQPM_OFF";"UPDATING";"BEFORE";"1000";"IF NVL(:OLD.END_DATE, n_DAYTIME) <> NVL(:NEW.END_DATE, n_DAYTIME) AND n_DOWNTIME_TYPE = 'WELL_DT' THEN IF (ecdp_well.checkClosedWellWithinPeriod(n_OBJECT_ID,n_DAYTIME, NVL(n_END_DATE, to_date('2100-01-01','yyyy-mm-dd'))) = 'Y') THEN Raise_Application_Error('-20546', 'Could not update - Well Active Status is not OPEN for the whole period.'); END IF; END IF;";"EC_PROD";
"WELL_EQPM_OFF_BY_WELL";"INSERTING";"BEFORE";"100";"n_DOWNTIME_CATEG:='WELL_OFF';";"EC_PROD";
"WELL_EQPM_OFF_BY_WELL";"INSERTING";"BEFORE";"200";"IF n_DOWNTIME_TYPE  = 'WELL_DT' THEN n_DOWNTIME_CLASS_TYPE := 'SINGLE';  ELSE  n_DOWNTIME_CLASS_TYPE := 'GROUP'; END IF;";"EC_PROD";
"WELL_EQPM_OFF_BY_WELL";"INSERTING";"BEFORE";"800";"IF n_DOWNTIME_TYPE = 'WELL_DT' THEN IF ecdp_well.IsWellActiveStatus(n_OBJECT_ID, 'OPEN', n_DAYTIME)  = 'N' THEN Raise_Application_Error('-20545', 'Could not insert - Well Active Status is not OPEN.'); ELSIF (ecdp_well.checkClosedWellWithinPeriod(n_OBJECT_ID,n_DAYTIME, NVL(n_END_DATE, to_date('2100-01-01','yyyy-mm-dd'))) = 'Y') THEN Raise_Application_Error('-20545', 'Could not insert - Well Active Status is not OPEN.'); END IF; END IF;";"EC_PROD";
"WELL_EQPM_OFF_BY_WELL";"INSERTING OR UPDATING";"AFTER";"1000";"EcDp_Well_Eqpm_Deferment.setLossRate(n_event_no, nvl(n_last_updated_by, n_created_by));";"EC_PROD";
"WELL_EQPM_OFF_BY_WELL";"INSERTING OR UPDATING";"BEFORE";"600";"IF n_downtime_class_type <> 'GROUP' THEN EcBp_Well_Eqpm_Deferment.checkIfEventOverlaps(n_OBJECT_ID, n_DAYTIME, n_END_DATE, n_DOWNTIME_CATEG, n_EVENT_NO); END IF;";"EC_PROD";
"WELL_EQPM_OFF_BY_WELL";"UPDATING";"BEFORE";"900";"IF NVL(:OLD.END_DATE, n_DAYTIME) <> NVL(:NEW.END_DATE, n_DAYTIME) AND n_DOWNTIME_TYPE = 'WELL_DT' THEN IF (ecdp_well.checkClosedWellWithinPeriod(n_OBJECT_ID,n_DAYTIME, NVL(n_END_DATE, to_date('2100-01-01','yyyy-mm-dd'))) = 'Y') THEN Raise_Application_Error('-20546', 'Could not update - Well Active Status is not OPEN for the whole period.'); END IF; END IF;";"EC_PROD";
"WELL_EQPM_OFF_CHILD";"INSERTING";"BEFORE";"100";"n_DOWNTIME_CATEG:='WELL_OFF';";"EC_PROD";
"WELL_EQPM_OFF_CHILD";"INSERTING";"BEFORE";"200";"n_DOWNTIME_CLASS_TYPE:='GROUP_CHILD';";"EC_PROD";
"WELL_EQPM_OFF_CHILD";"INSERTING";"BEFORE";"300";"n_OBJECT_TYPE:='WELL';";"EC_PROD";
"WELL_EQPM_OFF_CHILD";"INSERTING";"BEFORE";"400";"n_DOWNTIME_TYPE:='WELL_DT';";"EC_PROD";
"WELL_EQPM_OFF_CHILD";"INSERTING";"BEFORE";"800";"IF n_DOWNTIME_TYPE = 'WELL_DT' THEN IF ecdp_well.IsWellActiveStatus(n_OBJECT_ID, 'OPEN', n_DAYTIME)  = 'N' THEN Raise_Application_Error('-20545', 'Could not insert ' || ecdp_objects.getObjName(n_OBJECT_ID, n_DAYTIME) || ' - Well Active Status is not OPEN.'); ELSIF (ecdp_well.checkClosedWellWithinPeriod(n_OBJECT_ID,n_DAYTIME, NVL(n_END_DATE, to_date('2100-01-01','yyyy-mm-dd'))) = 'Y') THEN Raise_Application_Error('-20545', 'Could not insert - Well Active Status is not OPEN.'); END IF; END IF;";"EC_PROD";
"WELL_EQPM_OFF_CHILD";"INSERTING OR UPDATING";"AFTER";"1000";"EcDp_Well_Eqpm_Deferment.updateReasonCodeForChildEvent(n_parent_event_no, nvl(n_last_updated_by, n_created_by), nvl(n_last_updated_date, n_created_date));";"EC_PROD";
"WELL_EQPM_OFF_CHILD";"INSERTING OR UPDATING";"AFTER";"1200";"IF n_END_DATE > ec_well_equip_downtime.end_date(n_parent_event_no) THEN Raise_Application_Error('-20629', 'End Date must be equal to or less than End Date of the parent records.');  END IF;";"EC_PROD";
"WELL_EQPM_OFF_CHILD";"INSERTING OR UPDATING";"AFTER";"1300";"EcDp_Well_Eqpm_Deferment.setLossRate(n_EVENT_NO, nvl(n_last_updated_by, n_created_by));";"EC_PROD";
"WELL_EQPM_OFF_CHILD";"INSERTING OR UPDATING";"BEFORE";"600";"EcBp_Well_Eqpm_Deferment.checkIfEventOverlaps(n_OBJECT_ID, n_DAYTIME, n_END_DATE, n_DOWNTIME_CATEG, n_EVENT_NO);";"EC_PROD";
"WELL_EQPM_OFF_CHILD";"INSERTING OR UPDATING";"BEFORE";"700";"EcBp_Well_Eqpm_Deferment.checkValidChildPeriod(n_PARENT_EVENT_NO, n_DAYTIME );";"EC_PROD";
"WELL_EQPM_OFF_CHILD";"UPDATING";"BEFORE";"1100";"IF NVL(:OLD.END_DATE, n_DAYTIME) <> NVL(:NEW.END_DATE, n_DAYTIME) AND n_DOWNTIME_TYPE = 'WELL_DT' THEN IF (ecdp_well.checkClosedWellWithinPeriod(n_OBJECT_ID,n_DAYTIME, NVL(n_END_DATE, to_date('2100-01-01','yyyy-mm-dd'))) = 'Y') THEN Raise_Application_Error('-20546', 'Could not update - Well Active Status is not OPEN for the whole period.'); END IF; END IF;";"EC_PROD";
"WELL_FLASH_GAS_ANALYSIS";"INSERTING";"BEFORE";"300";"n_COMPONENT_SET := EcBp_Fluid_Analysis.getCompSet(n_OBJECT_CLASS_NAME,n_OBJECT_ID,n_DAYTIME,'WELL_FLSH_GS_CMP');";"EC_PROD";
"WELL_FLASH_GAS_ANALYSIS";"INSERTING ";"BEFORE";"200";"n_PRODUCTION_DAY := Ecdp_Productionday.getProductionDay(n_OBJECT_CLASS_NAME,n_OBJECT_ID,n_DAYTIME);";"EC_PROD";
"WELL_FLASH_GAS_ANALYSIS";"INSERTING OR UPDATING";"BEFORE";"100";"n_object_class_name := 'WELL';";"EC_PROD";
"WELL_FORM_ION_ANALYSIS";"INSERTING";"BEFORE";"200";"n_PRODUCTION_DAY := Ecdp_Productionday.getProductionDay(n_OBJECT_CLASS_NAME,n_OBJECT_ID,n_DAYTIME);";"EC_PROD";
"WELL_FORM_ION_ANALYSIS";"INSERTING OR UPDATING";"BEFORE";"100";"n_object_class_name := 'WELL';";"EC_PROD";
"WELL_GAS_ANALYSIS";"INSERTING";"BEFORE";"200";"n_PRODUCTION_DAY := Ecdp_Productionday.getProductionDay(n_OBJECT_CLASS_NAME,n_OBJECT_ID,n_DAYTIME);";"EC_PROD";
"WELL_GAS_ANALYSIS";"INSERTING";"BEFORE";"300";"n_COMPONENT_SET := EcBp_Fluid_Analysis.getCompSet(n_OBJECT_CLASS_NAME,n_OBJECT_ID,n_DAYTIME,n_ANALYSIS_TYPE);";"EC_PROD";
"WELL_GAS_ANALYSIS";"INSERTING OR UPDATING";"BEFORE";"100";"n_object_class_name := 'WELL';";"EC_PROD";
"WELL_GAS_INJ_ANALYSIS";"INSERTING";"BEFORE";"200";"n_PRODUCTION_DAY := Ecdp_Productionday.getProductionDay(n_OBJECT_CLASS_NAME,n_OBJECT_ID,n_DAYTIME);";"EC_PROD";
"WELL_GAS_INJ_ANALYSIS";"INSERTING";"BEFORE";"300";"n_COMPONENT_SET := EcBp_Fluid_Analysis.getCompSet(n_OBJECT_CLASS_NAME,n_OBJECT_ID,n_DAYTIME,n_ANALYSIS_TYPE);";"EC_PROD";
"WELL_GAS_INJ_ANALYSIS";"INSERTING OR UPDATING";"BEFORE";"100";"n_object_class_name := 'WELL';";"EC_PROD";
"WELL_INJ_ION_ANALYSIS";"INSERTING";"BEFORE";"200";"n_PRODUCTION_DAY := Ecdp_Productionday.getProductionDay(n_OBJECT_CLASS_NAME,n_OBJECT_ID,n_DAYTIME);";"EC_PROD";
"WELL_INJ_ION_ANALYSIS";"INSERTING OR UPDATING";"BEFORE";"100";"n_object_class_name := 'WELL';";"EC_PROD";
"WELL_OIL_ANALYSIS";"INSERTING";"BEFORE";"200";"n_PRODUCTION_DAY := Ecdp_Productionday.getProductionDay(n_OBJECT_CLASS_NAME,n_OBJECT_ID,n_DAYTIME);";"EC_PROD";
"WELL_OIL_ANALYSIS";"INSERTING";"BEFORE";"300";"n_COMPONENT_SET := EcBp_Fluid_Analysis.getCompSet(n_OBJECT_CLASS_NAME,n_OBJECT_ID,n_DAYTIME,n_ANALYSIS_TYPE);";"EC_PROD";
"WELL_OIL_ANALYSIS";"INSERTING OR UPDATING";"BEFORE";"100";"n_object_class_name := 'WELL';";"EC_PROD";
"WELL_PLAN_BUDGET";"INSERTING";"BEFORE";"100";"n_CLASS_NAME:='WELL_PLAN_BUDGET';";"EC_PROD";
"WELL_PLAN_OTHER";"INSERTING";"BEFORE";"100";"n_CLASS_NAME:='WELL_PLAN_OTHER';";"EC_PROD";
"WELL_PLAN_POTENTIAL";"INSERTING";"BEFORE";"100";"n_CLASS_NAME:='WELL_PLAN_POTENTIAL';";"EC_PROD";
"WELL_PLAN_TARGET";"INSERTING";"BEFORE";"100";"n_CLASS_NAME:='WELL_PLAN_TARGET';";"EC_PROD";
"WELL_PROD_ION_ANALYSIS";"INSERTING";"BEFORE";"200";"n_PRODUCTION_DAY := Ecdp_Productionday.getProductionDay(n_OBJECT_CLASS_NAME,n_OBJECT_ID,n_DAYTIME);";"EC_PROD";
"WELL_PROD_ION_ANALYSIS";"INSERTING OR UPDATING";"BEFORE";"100";"n_object_class_name := 'WELL';";"EC_PROD";
"WELL_PRODUCT_ANALYSIS";"DELETING";"BEFORE";"100";"EcDp_Well_Product_Analysis.deleteAnalysisDetail(n_object_id, n_daytime);";"EC_PROD";
"WELL_SAMP_LAST_ANAL";"INSERTING";"BEFORE";"100";"n_PRODUCTION_DAY := Ecdp_Productionday.getProductionDay(n_OBJECT_CLASS_NAME,n_OBJECT_ID,n_DAYTIME);";"EC_PROD";
"WELL_SAMPLE_ANALYSIS";"INSERTING";"BEFORE";"200";"n_PRODUCTION_DAY := Ecdp_Productionday.getProductionDay(n_OBJECT_CLASS_NAME,n_OBJECT_ID,n_DAYTIME);";"EC_PROD";
"WELL_SAMPLE_ANALYSIS";"INSERTING OR UPDATING";"BEFORE";"100";"n_object_class_name := 'WELL';";"EC_PROD";
"WELL_TEST_DEF";"DELETING";"BEFORE";"800";"EcDp_Performance_Test.removeWbiTestDefine(o_OBJECT_ID,o_TEST_NO);";"EC_PROD";
"WELL_TEST_DEF";"DELETING";"BEFORE";"2000";"EcDp_Performance_Test.removeGraphDefParameters(n_OBJECT_ID,n_TEST_NO);";"EC_PROD";
"WELL_TEST_DEF";"INSERTING";"AFTER";"700";"EcDp_Performance_Test.setWbiTestDefine(n_OBJECT_ID,ec_ptst_definition.daytime(n_TEST_NO),n_TEST_NO,'DIACS',n_CREATED_BY);";"EC_PROD";
"WELL_TEST_DEF";"INSERTING";"AFTER";"1000";"EcDp_Performance_Test.createGraphDefParameters(n_OBJECT_ID,n_TEST_NO,n_CREATED_BY);";"EC_PROD";
