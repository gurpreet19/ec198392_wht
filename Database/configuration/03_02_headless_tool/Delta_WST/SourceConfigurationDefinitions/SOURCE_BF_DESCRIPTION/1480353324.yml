!!com.ec.upgrade.ecconfig.model.ConfigurationItemGroup
fileName: '1480353324'
keys:
  BF_DESCRIPTION_NO: CO.1038
  DATA_LEVEL: 0.0
  T: BF_DESCRIPTION
parentKeys: {}
properties:
  BF_DESCRIPTION_NO: CO.1038
  BUSINESS_FUNCTION_NO: (SELECT BUSINESS_FUNCTION_NO FROM BUSINESS_FUNCTION WHERE URL ='/com.ec.frmw.bs.calc.screens/simple_predefined_object_type' )
  DATA_LEVEL: 0.0
  DESCRIPTION: |
    <p>The Simple Object Types screen is used to define object types that are not themselves EC objects for use in the calculation engine. Simple Object Types are defined for each <em>Calculation Context (CO.1036)</em>.</p>

    <p>Object types are used by the calculation engine to build sets of objects that should all be treated in the same way, and to access data on these objects. Most of these object types would correspond to an EC class, and these should be defined in the <em>Database Object Types (CO.1037) </em>screen. Please see the documentation for this screen on more information about object types in general.</p>


    <p>In some cases, there is a need for simpler object types that are not actually objects in the EC database. In most cases these are values used as dimensions on data.</p>

    <p>See also the documentation for the BF <em>Variable Definitions (CO.1039) </em>for more information on how the object types are used as dimensions on data.</p>

    <p>These object types that are not represented by an object or class in EC, falls into two categories:</p>
    <p>
    <ul>
    <li>Dimensions on data that are some kind of codes, constants etc. These types were known as &ldquo;Literals&rdquo; in earlier EC versions, and can be defined in the Simple types tab. Common examples are EC codes and data with sequence numbers or similar.</li>
    <li>
    <p>Date types that are used as the object type for any date dimensions on the data. These object types are predefined and include types like Day, Month, and Year. Any data with a higher resolution than Day should use the generic SubDay type, and there is no need to define separate types for different resolutions like e.g. Hourly.</p>
    <p>For backwards compatibility reasons it is common to prefix the code of simple types with LITERAL, but this is not a requirement</p>
    </li>
    </ul>
    </p>

    <p>The following example illustrates when to use which object type category:</p>

    <p>Well injection data for a production operation is read from an EC class called IWEL_DAY_DATA. This class has data per well, per day and also per &ldquo;injection type&rdquo; (gas injection, water injection etc). If we want to define a variable to read this information, then the variable will have three dimensions:</p>
    <p>
    <ul>
    <li>
    <p>Well (or Allocation Node):</p>

    <p>This is an actual object in the EC database, and thus the object type must be defined in the <em>Database Object Types (CO.1037) </em>screen.</p>
    </li>
    <li>
    <p>Day:</p>

    <p>This is a pre&ndash;defined object type </em>screen.</p>
    </li>
    <li>
    <p>Injection Type:</p>

    <p>This is actually an EC Code, and should therefore be defined as a simple object type.</p>
    </li>
    </ul>
    </p>
related: {}
