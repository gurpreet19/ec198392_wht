CREATE OR REPLACE EDITIONABLE TRIGGER "IUV_SCHEDULE_LIST" 
 INSTEAD OF INSERT OR UPDATE OR DELETE ON TV_SCHEDULE_LIST
FOR EACH ROW
-- Generated by ecdp_viewlayer
DECLARE
  n_record_status      VARCHAR2(1) := EcDB_Utils.ConditionNVL(NOT Updating('RECORD_STATUS'),:NEW.record_status,:OLD.record_status);
  n_rev_no             NUMBER := NVL(:OLD.rev_no,0);
  n_rev_text           VARCHAR2(4000):= EcDB_Utils.ConditionNVL(NOT Updating('REV_TEXT'),:NEW.rev_text,:OLD.rev_text);
  n_created_by         VARCHAR2(30):= EcDB_Utils.ConditionNVL(NOT Updating('CREATED_BY'),to_char(:NEW.created_by),to_char(:OLD.created_by));
  n_created_date       DATE := EcDB_Utils.ConditionNVL(NOT Updating('CREATED_DATE'),:NEW.created_date,:OLD.created_date);
  n_last_updated_by    VARCHAR2(30):= EcDB_Utils.ConditionNVL(NOT Updating('LAST_UPDATED_BY'),to_char(:NEW.last_updated_by),to_char(:OLD.last_updated_by));
  n_last_updated_date  DATE := EcDB_Utils.ConditionNVL(NOT Updating('LAST_UPDATED_DATE'),:NEW.last_updated_date,:OLD.last_updated_date);
  o_created_by         VARCHAR2(30):= :OLD.created_by;
  o_last_updated_by    VARCHAR2(30):= :OLD.last_updated_by;
  n_lock_columns       EcDp_Month_lock.column_list;
  o_lock_columns       EcDp_Month_lock.column_list;
  n_NAME VARCHAR2(4000) := EcDB_Utils.ConditionNVL(NOT Updating('NAME'),:NEW.NAME,:OLD.NAME);
  n_DESCRIPTION VARCHAR2(4000) := EcDB_Utils.ConditionNVL(NOT Updating('DESCRIPTION'),:NEW.DESCRIPTION,:OLD.DESCRIPTION);
  n_PIN_TO VARCHAR2(4000) := EcDB_Utils.ConditionNVL(NOT Updating('PIN_TO'),:NEW.PIN_TO,:OLD.PIN_TO);
  n_ENABLED VARCHAR2(4000) := EcDB_Utils.ConditionNVL(NOT Updating('ENABLED'),:NEW.ENABLED,:OLD.ENABLED);
  n_SCHEDULE_NO NUMBER  := EcDB_Utils.ConditionNVL(NOT Updating('SCHEDULE_NO'),:NEW.SCHEDULE_NO,:OLD.SCHEDULE_NO);
  o_SCHEDULE_NO NUMBER  := :OLD.SCHEDULE_NO;
  n_FUNCTIONAL_AREA_ID VARCHAR2(4000) := EcDB_Utils.ConditionNVL(NOT Updating('FUNCTIONAL_AREA_ID'),:NEW.FUNCTIONAL_AREA_ID,:OLD.FUNCTIONAL_AREA_ID);
   o_rec_id          VARCHAR2(32) := :OLD.rec_id;
   n_rec_id          VARCHAR2(32) := Nvl(:NEW.rec_id, SYS_GUID());
BEGIN

   --*************************************************************************************
   -- Start Trigger Action block
   -- Any code block defined as a BEFORE trigger-type in table CLASS_TRIGGER_ACTION will be put here
   --
   -- end Trigger Action block Class_trigger_actions before
   --*************************************************************************************

   -- Attributes check
  IF n_NAME IS NULL THEN Raise_Application_Error(-20103,'Missing value for NAME'); END IF;
  IF n_FUNCTIONAL_AREA_ID IS NULL THEN Raise_Application_Error(-20103,'Missing value for FUNCTIONAL_AREA_ID'); END IF;

   IF INSERTING THEN

      INSERT INTO ECKERNEL_EC.V_SCHEDULE(NAME, DESCRIPTION, PIN_TO, enabled_ind, SCHEDULE_NO, Schedule_group, CREATED_BY, CREATED_DATE, LAST_UPDATED_BY, LAST_UPDATED_DATE, REV_NO, REV_TEXT, RECORD_STATUS, REC_ID)
      VALUES(n_NAME, n_DESCRIPTION, n_PIN_TO, n_ENABLED, n_SCHEDULE_NO, n_FUNCTIONAL_AREA_ID, n_CREATED_BY, n_CREATED_DATE, n_LAST_UPDATED_BY, n_LAST_UPDATED_DATE, n_REV_NO, n_REV_TEXT, n_RECORD_STATUS, n_rec_id);
   ELSIF UPDATING THEN

   IF TRUE
   THEN
      n_rev_no := n_rev_no + 1;
   END IF;


      IF  NOT UPDATING('LAST_UPDATED_BY') OR n_last_updated_by IS NULL THEN  n_last_updated_by := USER;  END IF;
      IF  NOT UPDATING('LAST_UPDATED_DATE') OR n_last_updated_date IS NULL THEN  n_last_updated_date := Ecdp_Timestamp.getCurrentSysdate;  END IF;

      UPDATE ECKERNEL_EC.V_SCHEDULE
      SET NAME = n_NAME, DESCRIPTION = n_DESCRIPTION, PIN_TO = n_PIN_TO, enabled_ind = n_ENABLED, SCHEDULE_NO = n_SCHEDULE_NO, Schedule_group = n_FUNCTIONAL_AREA_ID, CREATED_BY = n_CREATED_BY, CREATED_DATE = n_CREATED_DATE , LAST_UPDATED_BY = n_LAST_UPDATED_BY,LAST_UPDATED_DATE = n_LAST_UPDATED_DATE ,REV_NO = n_rev_no, REV_TEXT = n_REV_TEXT,RECORD_STATUS = n_RECORD_STATUS, REC_ID = n_rec_id
      WHERE SCHEDULE_NO= o_SCHEDULE_NO;

   ELSE -- deleting

     DELETE FROM ECKERNEL_EC.V_SCHEDULE
     WHERE SCHEDULE_NO= o_SCHEDULE_NO;

   END IF; -- Inserting

--*************************************************************************************
-- Start Trigger Action block
-- Any code block defined as a AFTER trigger-type in table CLASS_TRIGGER_ACTION will be put here
--
-- end Trigger Action block Class_trigger_actions after
--*************************************************************************************

END;

