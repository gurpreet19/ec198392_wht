CREATE OR REPLACE EDITIONABLE TRIGGER "IUD_PTST_PWEL_RESULT" 
 INSTEAD OF INSERT OR UPDATE OR DELETE ON DV_PTST_PWEL_RESULT
 FOR EACH ROW
-- Generated by ecdp_viewlayer

DECLARE
  n_class_name         VARCHAR2(30) := EcDB_Utils.ConditionNVL(NOT Updating('CLASS_NAME'),:NEW.CLASS_NAME,:OLD.CLASS_NAME);
  n_record_status      VARCHAR2(1) := EcDB_Utils.ConditionNVL(NOT Updating('RECORD_STATUS'),:NEW.record_status,:OLD.record_status);
  n_rev_no             NUMBER := NVL(:OLD.rev_no,0);
  n_rev_text           VARCHAR2(4000):= EcDB_Utils.ConditionNVL(NOT Updating('REV_TEXT'),:NEW.rev_text,:OLD.rev_text);
  n_created_by         VARCHAR2(30):= EcDB_Utils.ConditionNVL(NOT Updating('CREATED_BY'),to_char(:NEW.created_by),to_char(:OLD.created_by));
  n_created_date       DATE := EcDB_Utils.ConditionNVL(NOT Updating('CREATED_DATE'),:NEW.created_date,:OLD.created_date);
  n_last_updated_by    VARCHAR2(30):= EcDB_Utils.ConditionNVL(NOT Updating('LAST_UPDATED_BY'),to_char(:NEW.last_updated_by),to_char(:OLD.last_updated_by));
  n_last_updated_date  DATE := EcDB_Utils.ConditionNVL(NOT Updating('LAST_UPDATED_DATE'),:NEW.last_updated_date,:OLD.last_updated_date);

  o_created_by         VARCHAR2(30):= :OLD.created_by;
  o_last_updated_by    VARCHAR2(30):= :OLD.last_updated_by;
  n_lock_columns       EcDp_Month_lock.column_list;
  o_lock_columns       EcDp_Month_lock.column_list;
  n_END_DATE DATE := EcDB_Utils.ConditionNVL(NOT Updating('END_DATE'),:NEW.END_DATE,:OLD.END_DATE);
  n_DURATION NUMBER  := EcDB_Utils.ConditionNVL(NOT Updating('DURATION'),:NEW.DURATION,:OLD.DURATION);
  n_TEST_NO NUMBER  := EcDB_Utils.ConditionNVL(NOT Updating('TEST_NO'),:NEW.TEST_NO,:OLD.TEST_NO);
  n_TEST_TYPE VARCHAR2(4000) := EcDB_Utils.ConditionNVL(NOT Updating('TEST_TYPE'),:NEW.TEST_TYPE,:OLD.TEST_TYPE);
  n_VALID_FROM_DATE DATE := EcDB_Utils.ConditionNVL(NOT Updating('VALID_FROM_DATE'),:NEW.VALID_FROM_DATE,:OLD.VALID_FROM_DATE);
  n_USE_CALC VARCHAR2(4000) := EcDB_Utils.ConditionNVL(NOT Updating('USE_CALC'),:NEW.USE_CALC,:OLD.USE_CALC);
  n_STATUS VARCHAR2(4000) := EcDB_Utils.ConditionNVL(NOT Updating('STATUS'),:NEW.STATUS,:OLD.STATUS);
  n_SUMMARISED_IND VARCHAR2(4000) := EcDB_Utils.ConditionNVL(NOT Updating('SUMMARISED_IND'),:NEW.SUMMARISED_IND,:OLD.SUMMARISED_IND);
  n_RESULT_TYPE VARCHAR2(4000) := EcDB_Utils.ConditionNVL(NOT Updating('RESULT_TYPE'),:NEW.RESULT_TYPE,:OLD.RESULT_TYPE);
  n_PRIMARY_IND VARCHAR2(4000) := EcDB_Utils.ConditionNVL(NOT Updating('PRIMARY_IND'),:NEW.PRIMARY_IND,:OLD.PRIMARY_IND);
  n_FLOWING_IND VARCHAR2(4000) := EcDB_Utils.ConditionNVL(NOT Updating('FLOWING_IND'),:NEW.FLOWING_IND,:OLD.FLOWING_IND);
  n_CHOKE_SIZE NUMBER  := EcDB_Utils.ConditionNVL(NOT Updating('CHOKE_SIZE'),:NEW.CHOKE_SIZE,:OLD.CHOKE_SIZE);
  n_WH_PRESS NUMBER  := EcDB_Utils.ConditionNVL(NOT Updating('WH_PRESS'),:NEW.WH_PRESS,:OLD.WH_PRESS);
  n_WH_TEMP NUMBER  := EcDB_Utils.ConditionNVL(NOT Updating('WH_TEMP'),:NEW.WH_TEMP,:OLD.WH_TEMP);
  n_BH_PRESS NUMBER  := EcDB_Utils.ConditionNVL(NOT Updating('BH_PRESS'),:NEW.BH_PRESS,:OLD.BH_PRESS);
  n_BH_TEMP NUMBER  := EcDB_Utils.ConditionNVL(NOT Updating('BH_TEMP'),:NEW.BH_TEMP,:OLD.BH_TEMP);
  n_ANNULUS_PRESS NUMBER  := EcDB_Utils.ConditionNVL(NOT Updating('ANNULUS_PRESS'),:NEW.ANNULUS_PRESS,:OLD.ANNULUS_PRESS);
  n_ANNULUS_TEMP NUMBER  := EcDB_Utils.ConditionNVL(NOT Updating('ANNULUS_TEMP'),:NEW.ANNULUS_TEMP,:OLD.ANNULUS_TEMP);
  n_WH_USC_PRESS NUMBER  := EcDB_Utils.ConditionNVL(NOT Updating('WH_USC_PRESS'),:NEW.WH_USC_PRESS,:OLD.WH_USC_PRESS);
  n_WH_USC_TEMP NUMBER  := EcDB_Utils.ConditionNVL(NOT Updating('WH_USC_TEMP'),:NEW.WH_USC_TEMP,:OLD.WH_USC_TEMP);
  n_WH_DSC_PRESS NUMBER  := EcDB_Utils.ConditionNVL(NOT Updating('WH_DSC_PRESS'),:NEW.WH_DSC_PRESS,:OLD.WH_DSC_PRESS);
  n_WH_DSC_TEMP NUMBER  := EcDB_Utils.ConditionNVL(NOT Updating('WH_DSC_TEMP'),:NEW.WH_DSC_TEMP,:OLD.WH_DSC_TEMP);
  n_SAND_RATE NUMBER  := EcDB_Utils.ConditionNVL(NOT Updating('SAND_RATE'),:NEW.SAND_RATE,:OLD.SAND_RATE);
  n_EROSION_RATE NUMBER  := EcDB_Utils.ConditionNVL(NOT Updating('EROSION_RATE'),:NEW.EROSION_RATE,:OLD.EROSION_RATE);
  n_PUMP_SPEED NUMBER  := EcDB_Utils.ConditionNVL(NOT Updating('PUMP_SPEED'),:NEW.PUMP_SPEED,:OLD.PUMP_SPEED);
  n_PUMP_POWER NUMBER  := EcDB_Utils.ConditionNVL(NOT Updating('PUMP_POWER'),:NEW.PUMP_POWER,:OLD.PUMP_POWER);
  n_PUMP_STROKE NUMBER  := EcDB_Utils.ConditionNVL(NOT Updating('PUMP_STROKE'),:NEW.PUMP_STROKE,:OLD.PUMP_STROKE);
  n_DRIVE_CURRENT NUMBER  := EcDB_Utils.ConditionNVL(NOT Updating('DRIVE_CURRENT'),:NEW.DRIVE_CURRENT,:OLD.DRIVE_CURRENT);
  n_DRIVE_VOLTAGE NUMBER  := EcDB_Utils.ConditionNVL(NOT Updating('DRIVE_VOLTAGE'),:NEW.DRIVE_VOLTAGE,:OLD.DRIVE_VOLTAGE);
  n_LIQUID_LEVEL NUMBER  := EcDB_Utils.ConditionNVL(NOT Updating('LIQUID_LEVEL'),:NEW.LIQUID_LEVEL,:OLD.LIQUID_LEVEL);
  n_DRIVE_FREQUENCY NUMBER  := EcDB_Utils.ConditionNVL(NOT Updating('DRIVE_FREQUENCY'),:NEW.DRIVE_FREQUENCY,:OLD.DRIVE_FREQUENCY);
  n_DILUENT_RATE NUMBER  := EcDB_Utils.ConditionNVL(NOT Updating('DILUENT_RATE'),:NEW.DILUENT_RATE,:OLD.DILUENT_RATE);
  n_GL_CHOKE_SIZE NUMBER  := EcDB_Utils.ConditionNVL(NOT Updating('GL_CHOKE_SIZE'),:NEW.GL_CHOKE_SIZE,:OLD.GL_CHOKE_SIZE);
  n_GL_PRESS NUMBER  := EcDB_Utils.ConditionNVL(NOT Updating('GL_PRESS'),:NEW.GL_PRESS,:OLD.GL_PRESS);
  n_GL_TEMP NUMBER  := EcDB_Utils.ConditionNVL(NOT Updating('GL_TEMP'),:NEW.GL_TEMP,:OLD.GL_TEMP);
  n_GL_RATE NUMBER  := EcDB_Utils.ConditionNVL(NOT Updating('GL_RATE'),:NEW.GL_RATE,:OLD.GL_RATE);
  n_GL_DENSITY NUMBER  := EcDB_Utils.ConditionNVL(NOT Updating('GL_DENSITY'),:NEW.GL_DENSITY,:OLD.GL_DENSITY);
  n_NET_OIL_DENSITY_ADJ NUMBER  := EcDB_Utils.ConditionNVL(NOT Updating('NET_OIL_DENSITY_ADJ'),:NEW.NET_OIL_DENSITY_ADJ,:OLD.NET_OIL_DENSITY_ADJ);
  n_GAS_DENSITY_ADJ NUMBER  := EcDB_Utils.ConditionNVL(NOT Updating('GAS_DENSITY_ADJ'),:NEW.GAS_DENSITY_ADJ,:OLD.GAS_DENSITY_ADJ);
  n_NET_COND_DENSITY_ADJ NUMBER  := EcDB_Utils.ConditionNVL(NOT Updating('NET_COND_DENSITY_ADJ'),:NEW.NET_COND_DENSITY_ADJ,:OLD.NET_COND_DENSITY_ADJ);
  n_TOT_WATER_DENSITY_ADJ NUMBER  := EcDB_Utils.ConditionNVL(NOT Updating('TOT_WATER_DENSITY_ADJ'),:NEW.TOT_WATER_DENSITY_ADJ,:OLD.TOT_WATER_DENSITY_ADJ);
  n_NET_OIL_RATE_ADJ NUMBER  := EcDB_Utils.ConditionNVL(NOT Updating('NET_OIL_RATE_ADJ'),:NEW.NET_OIL_RATE_ADJ,:OLD.NET_OIL_RATE_ADJ);
  n_GAS_RATE_ADJ NUMBER  := EcDB_Utils.ConditionNVL(NOT Updating('GAS_RATE_ADJ'),:NEW.GAS_RATE_ADJ,:OLD.GAS_RATE_ADJ);
  n_NET_COND_RATE_ADJ NUMBER  := EcDB_Utils.ConditionNVL(NOT Updating('NET_COND_RATE_ADJ'),:NEW.NET_COND_RATE_ADJ,:OLD.NET_COND_RATE_ADJ);
  n_TOT_WATER_RATE_ADJ NUMBER  := EcDB_Utils.ConditionNVL(NOT Updating('TOT_WATER_RATE_ADJ'),:NEW.TOT_WATER_RATE_ADJ,:OLD.TOT_WATER_RATE_ADJ);
  n_NET_OIL_MASS_RATE_ADJ NUMBER  := EcDB_Utils.ConditionNVL(NOT Updating('NET_OIL_MASS_RATE_ADJ'),:NEW.NET_OIL_MASS_RATE_ADJ,:OLD.NET_OIL_MASS_RATE_ADJ);
  n_GAS_MASS_RATE_ADJ NUMBER  := EcDB_Utils.ConditionNVL(NOT Updating('GAS_MASS_RATE_ADJ'),:NEW.GAS_MASS_RATE_ADJ,:OLD.GAS_MASS_RATE_ADJ);
  n_NET_COND_MASS_RATE_ADJ NUMBER  := EcDB_Utils.ConditionNVL(NOT Updating('NET_COND_MASS_RATE_ADJ'),:NEW.NET_COND_MASS_RATE_ADJ,:OLD.NET_COND_MASS_RATE_ADJ);
  n_TOT_WATER_MASS_RATE_ADJ NUMBER  := EcDB_Utils.ConditionNVL(NOT Updating('TOT_WATER_MASS_RATE_ADJ'),:NEW.TOT_WATER_MASS_RATE_ADJ,:OLD.TOT_WATER_MASS_RATE_ADJ);
  n_EST_NET_OIL_RATE NUMBER  := EcDB_Utils.ConditionNVL(NOT Updating('EST_NET_OIL_RATE'),:NEW.EST_NET_OIL_RATE,:OLD.EST_NET_OIL_RATE);
  n_EST_GAS_RATE NUMBER  := EcDB_Utils.ConditionNVL(NOT Updating('EST_GAS_RATE'),:NEW.EST_GAS_RATE,:OLD.EST_GAS_RATE);
  n_EST_NET_COND_RATE NUMBER  := EcDB_Utils.ConditionNVL(NOT Updating('EST_NET_COND_RATE'),:NEW.EST_NET_COND_RATE,:OLD.EST_NET_COND_RATE);
  n_EST_WATER_RATE NUMBER  := EcDB_Utils.ConditionNVL(NOT Updating('EST_WATER_RATE'),:NEW.EST_WATER_RATE,:OLD.EST_WATER_RATE);
  n_MPM_PRESS NUMBER  := EcDB_Utils.ConditionNVL(NOT Updating('MPM_PRESS'),:NEW.MPM_PRESS,:OLD.MPM_PRESS);
  n_MPM_TEMP NUMBER  := EcDB_Utils.ConditionNVL(NOT Updating('MPM_TEMP'),:NEW.MPM_TEMP,:OLD.MPM_TEMP);
  n_MPM_OIL_DENSITY NUMBER  := EcDB_Utils.ConditionNVL(NOT Updating('MPM_OIL_DENSITY'),:NEW.MPM_OIL_DENSITY,:OLD.MPM_OIL_DENSITY);
  n_MPM_MIX_DENSITY NUMBER  := EcDB_Utils.ConditionNVL(NOT Updating('MPM_MIX_DENSITY'),:NEW.MPM_MIX_DENSITY,:OLD.MPM_MIX_DENSITY);
  n_MPM_GAS_DENSITY NUMBER  := EcDB_Utils.ConditionNVL(NOT Updating('MPM_GAS_DENSITY'),:NEW.MPM_GAS_DENSITY,:OLD.MPM_GAS_DENSITY);
  n_MPM_COND_DENSITY NUMBER  := EcDB_Utils.ConditionNVL(NOT Updating('MPM_COND_DENSITY'),:NEW.MPM_COND_DENSITY,:OLD.MPM_COND_DENSITY);
  n_MPM_WATER_DENSITY NUMBER  := EcDB_Utils.ConditionNVL(NOT Updating('MPM_WATER_DENSITY'),:NEW.MPM_WATER_DENSITY,:OLD.MPM_WATER_DENSITY);
  n_MPM_OIL_DENSITY_FLC NUMBER  := EcDB_Utils.ConditionNVL(NOT Updating('MPM_OIL_DENSITY_FLC'),:NEW.MPM_OIL_DENSITY_FLC,:OLD.MPM_OIL_DENSITY_FLC);
  n_MPM_MIX_DENSITY_FLC NUMBER  := EcDB_Utils.ConditionNVL(NOT Updating('MPM_MIX_DENSITY_FLC'),:NEW.MPM_MIX_DENSITY_FLC,:OLD.MPM_MIX_DENSITY_FLC);
  n_MPM_GAS_DENSITY_FLC NUMBER  := EcDB_Utils.ConditionNVL(NOT Updating('MPM_GAS_DENSITY_FLC'),:NEW.MPM_GAS_DENSITY_FLC,:OLD.MPM_GAS_DENSITY_FLC);
  n_MPM_COND_DENSITY_FLC NUMBER  := EcDB_Utils.ConditionNVL(NOT Updating('MPM_COND_DENSITY_FLC'),:NEW.MPM_COND_DENSITY_FLC,:OLD.MPM_COND_DENSITY_FLC);
  n_MPM_WATER_DENSITY_FLC NUMBER  := EcDB_Utils.ConditionNVL(NOT Updating('MPM_WATER_DENSITY_FLC'),:NEW.MPM_WATER_DENSITY_FLC,:OLD.MPM_WATER_DENSITY_FLC);
  n_MPM_OIL_RATE NUMBER  := EcDB_Utils.ConditionNVL(NOT Updating('MPM_OIL_RATE'),:NEW.MPM_OIL_RATE,:OLD.MPM_OIL_RATE);
  n_MPM_GAS_RATE NUMBER  := EcDB_Utils.ConditionNVL(NOT Updating('MPM_GAS_RATE'),:NEW.MPM_GAS_RATE,:OLD.MPM_GAS_RATE);
  n_MPM_COND_RATE NUMBER  := EcDB_Utils.ConditionNVL(NOT Updating('MPM_COND_RATE'),:NEW.MPM_COND_RATE,:OLD.MPM_COND_RATE);
  n_MPM_WATER_RATE NUMBER  := EcDB_Utils.ConditionNVL(NOT Updating('MPM_WATER_RATE'),:NEW.MPM_WATER_RATE,:OLD.MPM_WATER_RATE);
  n_MPM_OIL_RATE_FLC NUMBER  := EcDB_Utils.ConditionNVL(NOT Updating('MPM_OIL_RATE_FLC'),:NEW.MPM_OIL_RATE_FLC,:OLD.MPM_OIL_RATE_FLC);
  n_MPM_GAS_RATE_FLC NUMBER  := EcDB_Utils.ConditionNVL(NOT Updating('MPM_GAS_RATE_FLC'),:NEW.MPM_GAS_RATE_FLC,:OLD.MPM_GAS_RATE_FLC);
  n_MPM_COND_RATE_FLC NUMBER  := EcDB_Utils.ConditionNVL(NOT Updating('MPM_COND_RATE_FLC'),:NEW.MPM_COND_RATE_FLC,:OLD.MPM_COND_RATE_FLC);
  n_MPM_WATER_RATE_FLC NUMBER  := EcDB_Utils.ConditionNVL(NOT Updating('MPM_WATER_RATE_FLC'),:NEW.MPM_WATER_RATE_FLC,:OLD.MPM_WATER_RATE_FLC);
  n_MPM_OIL_MASS_RATE NUMBER  := EcDB_Utils.ConditionNVL(NOT Updating('MPM_OIL_MASS_RATE'),:NEW.MPM_OIL_MASS_RATE,:OLD.MPM_OIL_MASS_RATE);
  n_MPM_GAS_MASS_RATE NUMBER  := EcDB_Utils.ConditionNVL(NOT Updating('MPM_GAS_MASS_RATE'),:NEW.MPM_GAS_MASS_RATE,:OLD.MPM_GAS_MASS_RATE);
  n_MPM_COND_MASS_RATE NUMBER  := EcDB_Utils.ConditionNVL(NOT Updating('MPM_COND_MASS_RATE'),:NEW.MPM_COND_MASS_RATE,:OLD.MPM_COND_MASS_RATE);
  n_MPM_WATER_MASS_RATE NUMBER  := EcDB_Utils.ConditionNVL(NOT Updating('MPM_WATER_MASS_RATE'),:NEW.MPM_WATER_MASS_RATE,:OLD.MPM_WATER_MASS_RATE);
  n_MPM_OIL_MASS_RATE_FLC NUMBER  := EcDB_Utils.ConditionNVL(NOT Updating('MPM_OIL_MASS_RATE_FLC'),:NEW.MPM_OIL_MASS_RATE_FLC,:OLD.MPM_OIL_MASS_RATE_FLC);
  n_MPM_GAS_MASS_RATE_FLC NUMBER  := EcDB_Utils.ConditionNVL(NOT Updating('MPM_GAS_MASS_RATE_FLC'),:NEW.MPM_GAS_MASS_RATE_FLC,:OLD.MPM_GAS_MASS_RATE_FLC);
  n_MPM_COND_MASS_RATE_FLC NUMBER  := EcDB_Utils.ConditionNVL(NOT Updating('MPM_COND_MASS_RATE_FLC'),:NEW.MPM_COND_MASS_RATE_FLC,:OLD.MPM_COND_MASS_RATE_FLC);
  n_MPM_WATER_MASS_RATE_FLC NUMBER  := EcDB_Utils.ConditionNVL(NOT Updating('MPM_WATER_MASS_RATE_FLC'),:NEW.MPM_WATER_MASS_RATE_FLC,:OLD.MPM_WATER_MASS_RATE_FLC);
  n_MPM_CONDUCT NUMBER  := EcDB_Utils.ConditionNVL(NOT Updating('MPM_CONDUCT'),:NEW.MPM_CONDUCT,:OLD.MPM_CONDUCT);
  n_MPM_CONDUCT_TEMP NUMBER  := EcDB_Utils.ConditionNVL(NOT Updating('MPM_CONDUCT_TEMP'),:NEW.MPM_CONDUCT_TEMP,:OLD.MPM_CONDUCT_TEMP);
  n_MPM_OIL_RATE_RAW NUMBER  := EcDB_Utils.ConditionNVL(NOT Updating('MPM_OIL_RATE_RAW'),:NEW.MPM_OIL_RATE_RAW,:OLD.MPM_OIL_RATE_RAW);
  n_MPM_GAS_RATE_RAW NUMBER  := EcDB_Utils.ConditionNVL(NOT Updating('MPM_GAS_RATE_RAW'),:NEW.MPM_GAS_RATE_RAW,:OLD.MPM_GAS_RATE_RAW);
  n_MPM_WATER_RATE_RAW NUMBER  := EcDB_Utils.ConditionNVL(NOT Updating('MPM_WATER_RATE_RAW'),:NEW.MPM_WATER_RATE_RAW,:OLD.MPM_WATER_RATE_RAW);
  n_WET_DRY_GAS_RATIO NUMBER  := EcDB_Utils.ConditionNVL(NOT Updating('WET_DRY_GAS_RATIO'),:NEW.WET_DRY_GAS_RATIO,:OLD.WET_DRY_GAS_RATIO);
  n_PUMP_TIMER NUMBER  := EcDB_Utils.ConditionNVL(NOT Updating('PUMP_TIMER'),:NEW.PUMP_TIMER,:OLD.PUMP_TIMER);
  n_WATERCUT_PCT NUMBER  := EcDB_Utils.ConditionNVL(NOT Updating('WATERCUT_PCT'),:NEW.WATERCUT_PCT,:OLD.WATERCUT_PCT);
  n_GAS_SP_GRAV NUMBER  := EcDB_Utils.ConditionNVL(NOT Updating('GAS_SP_GRAV'),:NEW.GAS_SP_GRAV,:OLD.GAS_SP_GRAV);
  n_CHLORIDE NUMBER  := EcDB_Utils.ConditionNVL(NOT Updating('CHLORIDE'),:NEW.CHLORIDE,:OLD.CHLORIDE);
  n_EMULSION NUMBER  := EcDB_Utils.ConditionNVL(NOT Updating('EMULSION'),:NEW.EMULSION,:OLD.EMULSION);
  n_FORMATION_GLR NUMBER  := EcDB_Utils.ConditionNVL(NOT Updating('FORMATION_GLR'),:NEW.FORMATION_GLR,:OLD.FORMATION_GLR);
  n_WGR NUMBER  := EcDB_Utils.ConditionNVL(NOT Updating('WGR'),:NEW.WGR,:OLD.WGR);
  n_GOR NUMBER  := EcDB_Utils.ConditionNVL(NOT Updating('GOR'),:NEW.GOR,:OLD.GOR);
  n_CGR NUMBER  := EcDB_Utils.ConditionNVL(NOT Updating('CGR'),:NEW.CGR,:OLD.CGR);
  n_GLR NUMBER  := EcDB_Utils.ConditionNVL(NOT Updating('GLR'),:NEW.GLR,:OLD.GLR);
  n_DECLINE_RATE_OIL NUMBER  := EcDB_Utils.ConditionNVL(NOT Updating('DECLINE_RATE_OIL'),:NEW.DECLINE_RATE_OIL,:OLD.DECLINE_RATE_OIL);
  n_PUMP_RUNTIME NUMBER  := EcDB_Utils.ConditionNVL(NOT Updating('PUMP_RUNTIME'),:NEW.PUMP_RUNTIME,:OLD.PUMP_RUNTIME);
  n_OIL_SHRINKAGE NUMBER  := EcDB_Utils.ConditionNVL(NOT Updating('OIL_SHRINKAGE'),:NEW.OIL_SHRINKAGE,:OLD.OIL_SHRINKAGE);
  n_SOLUTION_GAS_FACTOR NUMBER  := EcDB_Utils.ConditionNVL(NOT Updating('SOLUTION_GAS_FACTOR'),:NEW.SOLUTION_GAS_FACTOR,:OLD.SOLUTION_GAS_FACTOR);
  n_SAND_CONTENT NUMBER  := EcDB_Utils.ConditionNVL(NOT Updating('SAND_CONTENT'),:NEW.SAND_CONTENT,:OLD.SAND_CONTENT);
  n_OBJECT_ID VARCHAR2(4000) := EcDB_Utils.ConditionNVL(NOT Updating('OBJECT_ID'),:NEW.OBJECT_ID,:OLD.OBJECT_ID);
  n_object_code VARCHAR2(4000) := EcDB_Utils.ConditionNVL(NOT Updating('OBJECT_CODE'),:NEW.object_code,:OLD.object_code);
  o_OBJECT_ID VARCHAR2(4000) := :OLD.OBJECT_ID;
  n_MPM_OIL_MASS_RATE_RAW NUMBER  := EcDB_Utils.ConditionNVL(NOT Updating('MPM_OIL_MASS_RATE_RAW'),:NEW.MPM_OIL_MASS_RATE_RAW,:OLD.MPM_OIL_MASS_RATE_RAW);
  n_MPM_GAS_MASS_RATE_RAW NUMBER  := EcDB_Utils.ConditionNVL(NOT Updating('MPM_GAS_MASS_RATE_RAW'),:NEW.MPM_GAS_MASS_RATE_RAW,:OLD.MPM_GAS_MASS_RATE_RAW);
  n_MPM_WATER_MASS_RATE_RAW NUMBER  := EcDB_Utils.ConditionNVL(NOT Updating('MPM_WATER_MASS_RATE_RAW'),:NEW.MPM_WATER_MASS_RATE_RAW,:OLD.MPM_WATER_MASS_RATE_RAW);
  n_MPM_OIL_DENSITY_RAW NUMBER  := EcDB_Utils.ConditionNVL(NOT Updating('MPM_OIL_DENSITY_RAW'),:NEW.MPM_OIL_DENSITY_RAW,:OLD.MPM_OIL_DENSITY_RAW);
  n_MPM_GAS_DENSITY_RAW NUMBER  := EcDB_Utils.ConditionNVL(NOT Updating('MPM_GAS_DENSITY_RAW'),:NEW.MPM_GAS_DENSITY_RAW,:OLD.MPM_GAS_DENSITY_RAW);
  n_MPM_WATER_DENSITY_RAW NUMBER  := EcDB_Utils.ConditionNVL(NOT Updating('MPM_WATER_DENSITY_RAW'),:NEW.MPM_WATER_DENSITY_RAW,:OLD.MPM_WATER_DENSITY_RAW);
  n_GL_DIFF_PRESS NUMBER  := EcDB_Utils.ConditionNVL(NOT Updating('GL_DIFF_PRESS'),:NEW.GL_DIFF_PRESS,:OLD.GL_DIFF_PRESS);
  n_EST_POWERWATER_RATE NUMBER  := EcDB_Utils.ConditionNVL(NOT Updating('EST_POWERWATER_RATE'),:NEW.EST_POWERWATER_RATE,:OLD.EST_POWERWATER_RATE);
  n_POWERWATER_RATE NUMBER  := EcDB_Utils.ConditionNVL(NOT Updating('POWERWATER_RATE'),:NEW.POWERWATER_RATE,:OLD.POWERWATER_RATE);
  n_MPM_MIX_DENSITY_RAW NUMBER  := EcDB_Utils.ConditionNVL(NOT Updating('MPM_MIX_DENSITY_RAW'),:NEW.MPM_MIX_DENSITY_RAW,:OLD.MPM_MIX_DENSITY_RAW);
  n_daytime  DATE := EcDB_Utils.ConditionNVL(NOT Updating('DAYTIME'),:NEW.DAYTIME,:OLD.DAYTIME);
  o_daytime  DATE := :OLD.DAYTIME;


BEGIN

 --------------------------------------------------------------------------
 -- Start Before Trigger action block
 -- Need to find object_ids for foreign references given by code before we leave the control to user exit
 -- Also set record status columns in this section to allow user exits to overule them later

 IF INSERTING THEN -- set any default values from CLASS_ATTRIBUTE.DEFAULT_VALUE 

    NULL; -- In case there are no default values 

 END IF;  -- set any default values  

 IF INSERTING OR UPDATING THEN 

   -- Get object_id given object_code
   IF n_object_id IS NULL AND n_object_code IS NOT NULL THEN
      n_object_id := EcDp_Objects.GetObjIDFromCode('WELL',n_object_code);
   END IF;


   IF INSERTING THEN
     n_created_by :=  Nvl(n_created_by,user);
     n_created_date := Nvl(n_created_date,Ecdp_Timestamp.getCurrentSysdate);
     n_RECORD_STATUS := Nvl(n_RECORD_STATUS,'P');
   ELSE  -- UPDATING
     IF  NOT UPDATING('LAST_UPDATED_BY') OR n_last_updated_by IS NULL THEN  n_last_updated_by := USER;  END IF;
     IF  NOT UPDATING('LAST_UPDATED_DATE') OR n_last_updated_date IS NULL THEN  n_last_updated_date := Ecdp_Timestamp.getCurrentSysdate;  END IF;
   END IF;  -- IF INSERTING

 END IF;  -- INSERTING OR UPDATING

 -- End Before Trigger Action block -------------------------------------------------
 -------------------------------------------------------------------------------

 --*************************************************************************************
 -- Start Trigger Action block
 -- Any code block defined as a BEFORE trigger-type in table CLASS_TRIGGER_ACTION will be put here

 --
 -- end Trigger Action block Class_trigger_actions before
 --*************************************************************************************

 IF INSERTING THEN

    -- Start Insert check block ---------------------------------------
    IF n_Object_id IS NULL THEN Raise_Application_Error(-20103,'Missing value for object_id/object code'); END IF;
    IF n_DAYTIME < EcDp_System_Constants.Earliest_date THEN  Raise_Application_Error(-20104,'Cannot set DAYTIME before system earliest date: 01.01.1900'); END IF;
    IF n_END_DATE < EcDp_System_Constants.Earliest_date THEN  Raise_Application_Error(-20104,'Cannot set END_DATE before system earliest date: 01.01.1900'); END IF;
    IF n_DAYTIME > nvl(n_END_DATE,n_DAYTIME) THEN  Raise_Application_Error(-20104,'END_DATE cannot be before DAYTIME: '||n_DAYTIME); END IF; 
    -- End Insert check block ---------------------------------------

  -- Start Insert relation block ---------------------------------------
    IF ecdp_objects.isValidOwnerReference('PTST_PWEL_RESULT',n_OBJECT_ID) = 'N'  THEN 
      Raise_Application_Error(-20106,'Given object id is not of the same class as the owner class for this data class.') ;
    END IF;

    IF TRUNC(EcDp_Objects.getOBjStartDate(n_object_id)) > n_daytime THEN
       RAISE_APPLICATION_ERROR(-20128,'Daytime is less than owner object start date.');
    END IF;

    IF n_Daytime >= nvl(EcDp_Objects.getObjEndDate(n_object_id),n_Daytime + 1) THEN
       Raise_Application_Error(-20129,'Daytime must be less than owner object end date.');
    END IF;

    -- End Insert relation block ---------------------------------------
    INSERT INTO ECKERNEL_EC12SRC.V_PTST_PWEL_RESULT(DAYTIME, END_DATE, DURATION, TEST_NO, TEST_TYPE, VALID_FROM_DATE, USE_CALC, STATUS, SUMMARISED_IND, ESTIMATE_TYPE, PRIMARY_IND, FLOWING_IND, CHOKE_SIZE, WH_PRESS, WH_TEMP, BH_PRESS, BH_TEMP, ANNULUS_PRESS, ANNULUS_TEMP, WH_USC_PRESS, WH_USC_TEMP, WH_DSC_PRESS, WH_DSC_TEMP, SAND_RATE, EROSION_RATE, PUMP_SPEED, PUMP_POWER, PUMP_STROKE, DRIVE_CURRENT, DRIVE_VOLTAGE, LIQUID_LEVEL, DRIVE_FREQUENCY, DILUENT_RATE, GL_CHOKE_SIZE, GL_PRESS, GL_TEMP, GL_RATE, GL_DENSITY, NET_OIL_DENSITY_ADJ, GAS_DENSITY_ADJ, NET_COND_DENSITY_ADJ, TOT_WATER_DENSITY_ADJ, NET_OIL_RATE_ADJ, GAS_RATE_ADJ, NET_COND_RATE_ADJ, TOT_WATER_RATE_ADJ, NET_OIL_MASS_RATE_ADJ, GAS_MASS_RATE_ADJ, NET_COND_MASS_RATE_ADJ, TOT_WATER_MASS_RATE_ADJ, EST_NET_OIL_RATE, EST_GAS_RATE, EST_NET_COND_RATE, EST_WATER_RATE, MPM_PRESS, MPM_TEMP, MPM_OIL_DENSITY, MPM_MIX_DENSITY, MPM_GAS_DENSITY, MPM_COND_DENSITY, MPM_WATER_DENSITY, MPM_OIL_DENSITY_FLC, MPM_MIX_DENSITY_FLC, MPM_GAS_DENSITY_FLC, MPM_COND_DENSITY_FLC, MPM_WATER_DENSITY_FLC, MPM_OIL_RATE, MPM_GAS_RATE, MPM_COND_RATE, MPM_WATER_RATE, MPM_OIL_RATE_FLC, MPM_GAS_RATE_FLC, MPM_COND_RATE_FLC, MPM_WATER_RATE_FLC, MPM_OIL_MASS_RATE, MPM_GAS_MASS_RATE, MPM_COND_MASS_RATE, MPM_WATER_MASS_RATE, MPM_OIL_MASS_RATE_FLC, MPM_GAS_MASS_RATE_FLC, MPM_COND_MASS_RATE_FLC, MPM_WATER_MASS_RATE_FLC, MPM_CONDUCT, MPM_CONDUCT_TEMP, MPM_OIL_RATE_RAW, MPM_GAS_RATE_RAW, MPM_WATER_RATE_RAW, WET_DRY_GAS_RATIO, PUMP_TIMER, WATERCUT_PCT, GAS_SP_GRAV, CHLORIDE, EMULSION, FORMATION_GLR, WGR, GOR, CGR, GLR, DECLINE_RATE_OIL, PUMP_RUNTIME, OIL_SHRINKAGE, SOLUTION_GAS_FACTOR, SAND_CONTENT, OBJECT_ID, MPM_OIL_MASS_RATE_RAW, MPM_GAS_MASS_RATE_RAW, MPM_WATER_MASS_RATE_RAW, MPM_OIL_DENSITY_RAW, MPM_GAS_DENSITY_RAW, MPM_WATER_DENSITY_RAW, GL_DIFF_PRESS, EST_POWERWATER_RATE, POWERWATER_RATE, MPM_MIX_DENSITY_RAW,  CREATED_BY, CREATED_DATE, LAST_UPDATED_BY, LAST_UPDATED_DATE, REV_NO, REV_TEXT, RECORD_STATUS)
    VALUES(n_DAYTIME, n_END_DATE, n_DURATION, n_TEST_NO, n_TEST_TYPE, n_VALID_FROM_DATE, n_USE_CALC, n_STATUS, n_SUMMARISED_IND, n_RESULT_TYPE, n_PRIMARY_IND, n_FLOWING_IND, n_CHOKE_SIZE, n_WH_PRESS, n_WH_TEMP, n_BH_PRESS, n_BH_TEMP, n_ANNULUS_PRESS, n_ANNULUS_TEMP, n_WH_USC_PRESS, n_WH_USC_TEMP, n_WH_DSC_PRESS, n_WH_DSC_TEMP, n_SAND_RATE, n_EROSION_RATE, n_PUMP_SPEED, n_PUMP_POWER, n_PUMP_STROKE, n_DRIVE_CURRENT, n_DRIVE_VOLTAGE, n_LIQUID_LEVEL, n_DRIVE_FREQUENCY, n_DILUENT_RATE, n_GL_CHOKE_SIZE, n_GL_PRESS, n_GL_TEMP, n_GL_RATE, n_GL_DENSITY, n_NET_OIL_DENSITY_ADJ, n_GAS_DENSITY_ADJ, n_NET_COND_DENSITY_ADJ, n_TOT_WATER_DENSITY_ADJ, n_NET_OIL_RATE_ADJ, n_GAS_RATE_ADJ, n_NET_COND_RATE_ADJ, n_TOT_WATER_RATE_ADJ, n_NET_OIL_MASS_RATE_ADJ, n_GAS_MASS_RATE_ADJ, n_NET_COND_MASS_RATE_ADJ, n_TOT_WATER_MASS_RATE_ADJ, n_EST_NET_OIL_RATE, n_EST_GAS_RATE, n_EST_NET_COND_RATE, n_EST_WATER_RATE, n_MPM_PRESS, n_MPM_TEMP, n_MPM_OIL_DENSITY, n_MPM_MIX_DENSITY, n_MPM_GAS_DENSITY, n_MPM_COND_DENSITY, n_MPM_WATER_DENSITY, n_MPM_OIL_DENSITY_FLC, n_MPM_MIX_DENSITY_FLC, n_MPM_GAS_DENSITY_FLC, n_MPM_COND_DENSITY_FLC, n_MPM_WATER_DENSITY_FLC, n_MPM_OIL_RATE, n_MPM_GAS_RATE, n_MPM_COND_RATE, n_MPM_WATER_RATE, n_MPM_OIL_RATE_FLC, n_MPM_GAS_RATE_FLC, n_MPM_COND_RATE_FLC, n_MPM_WATER_RATE_FLC, n_MPM_OIL_MASS_RATE, n_MPM_GAS_MASS_RATE, n_MPM_COND_MASS_RATE, n_MPM_WATER_MASS_RATE, n_MPM_OIL_MASS_RATE_FLC, n_MPM_GAS_MASS_RATE_FLC, n_MPM_COND_MASS_RATE_FLC, n_MPM_WATER_MASS_RATE_FLC, n_MPM_CONDUCT, n_MPM_CONDUCT_TEMP, n_MPM_OIL_RATE_RAW, n_MPM_GAS_RATE_RAW, n_MPM_WATER_RATE_RAW, n_WET_DRY_GAS_RATIO, n_PUMP_TIMER, n_WATERCUT_PCT, n_GAS_SP_GRAV, n_CHLORIDE, n_EMULSION, n_FORMATION_GLR, n_WGR, n_GOR, n_CGR, n_GLR, n_DECLINE_RATE_OIL, n_PUMP_RUNTIME, n_OIL_SHRINKAGE, n_SOLUTION_GAS_FACTOR, n_SAND_CONTENT, n_OBJECT_ID, n_MPM_OIL_MASS_RATE_RAW, n_MPM_GAS_MASS_RATE_RAW, n_MPM_WATER_MASS_RATE_RAW, n_MPM_OIL_DENSITY_RAW, n_MPM_GAS_DENSITY_RAW, n_MPM_WATER_DENSITY_RAW, n_GL_DIFF_PRESS, n_EST_POWERWATER_RATE, n_POWERWATER_RATE, n_MPM_MIX_DENSITY_RAW,  n_CREATED_BY,n_CREATED_DATE, n_LAST_UPDATED_BY, n_LAST_UPDATED_DATE, n_REV_NO, n_REV_TEXT, n_RECORD_STATUS) ;

  ELSIF UPDATING THEN 

    -- Start Update check block ---------------------------------------
    IF n_DAYTIME < EcDp_System_Constants.Earliest_date THEN  Raise_Application_Error(-20104,'Cannot set DAYTIME before system earliest date: 01.01.1900'); END IF;
    IF n_END_DATE < EcDp_System_Constants.Earliest_date THEN  Raise_Application_Error(-20104,'Cannot set END_DATE before system earliest date: 01.01.1900'); END IF;
    IF n_DAYTIME > nvl(n_END_DATE,n_DAYTIME) THEN  Raise_Application_Error(-20104,'END_DATE cannot be before DAYTIME: '||n_DAYTIME); END IF; 
    -- Start Update relation block
      IF Updating('OBJECT_ID') THEN
          IF NOT (Nvl(:NEW.object_id,'NULL') = :OLD.object_id) THEN
             Raise_Application_Error(-20101,'Cannot update object_id ');
          END IF;
      END IF;

    IF Updating('DAYTIME') THEN

       IF TRUNC(EcDp_Objects.getOBjStartDate(n_object_id)) > n_daytime THEN
          RAISE_APPLICATION_ERROR(-20128,'Daytime is less than owner object start date.');
       END IF;

       IF n_Daytime >= nvl(EcDp_Objects.getObjEndDate(n_object_id),n_Daytime + 1) THEN
          Raise_Application_Error(-20129,'Daytime must be less than owner object end date.');
       END IF;

    END IF;

    -- End Update relation block
    UPDATE ECKERNEL_EC12SRC.V_PTST_PWEL_RESULT SET DAYTIME = n_DAYTIME, END_DATE = n_END_DATE, DURATION = n_DURATION, TEST_NO = n_TEST_NO, TEST_TYPE = n_TEST_TYPE, VALID_FROM_DATE = n_VALID_FROM_DATE, USE_CALC = n_USE_CALC, STATUS = n_STATUS, SUMMARISED_IND = n_SUMMARISED_IND, ESTIMATE_TYPE = n_RESULT_TYPE, PRIMARY_IND = n_PRIMARY_IND, FLOWING_IND = n_FLOWING_IND, CHOKE_SIZE = n_CHOKE_SIZE, WH_PRESS = n_WH_PRESS, WH_TEMP = n_WH_TEMP, BH_PRESS = n_BH_PRESS, BH_TEMP = n_BH_TEMP, ANNULUS_PRESS = n_ANNULUS_PRESS, ANNULUS_TEMP = n_ANNULUS_TEMP, WH_USC_PRESS = n_WH_USC_PRESS, WH_USC_TEMP = n_WH_USC_TEMP, WH_DSC_PRESS = n_WH_DSC_PRESS, WH_DSC_TEMP = n_WH_DSC_TEMP, SAND_RATE = n_SAND_RATE, EROSION_RATE = n_EROSION_RATE, PUMP_SPEED = n_PUMP_SPEED, PUMP_POWER = n_PUMP_POWER, PUMP_STROKE = n_PUMP_STROKE, DRIVE_CURRENT = n_DRIVE_CURRENT, DRIVE_VOLTAGE = n_DRIVE_VOLTAGE, LIQUID_LEVEL = n_LIQUID_LEVEL, DRIVE_FREQUENCY = n_DRIVE_FREQUENCY, DILUENT_RATE = n_DILUENT_RATE, GL_CHOKE_SIZE = n_GL_CHOKE_SIZE, GL_PRESS = n_GL_PRESS, GL_TEMP = n_GL_TEMP, GL_RATE = n_GL_RATE, GL_DENSITY = n_GL_DENSITY, NET_OIL_DENSITY_ADJ = n_NET_OIL_DENSITY_ADJ, GAS_DENSITY_ADJ = n_GAS_DENSITY_ADJ, NET_COND_DENSITY_ADJ = n_NET_COND_DENSITY_ADJ, TOT_WATER_DENSITY_ADJ = n_TOT_WATER_DENSITY_ADJ, NET_OIL_RATE_ADJ = n_NET_OIL_RATE_ADJ, GAS_RATE_ADJ = n_GAS_RATE_ADJ, NET_COND_RATE_ADJ = n_NET_COND_RATE_ADJ, TOT_WATER_RATE_ADJ = n_TOT_WATER_RATE_ADJ, NET_OIL_MASS_RATE_ADJ = n_NET_OIL_MASS_RATE_ADJ, GAS_MASS_RATE_ADJ = n_GAS_MASS_RATE_ADJ, NET_COND_MASS_RATE_ADJ = n_NET_COND_MASS_RATE_ADJ, TOT_WATER_MASS_RATE_ADJ = n_TOT_WATER_MASS_RATE_ADJ, EST_NET_OIL_RATE = n_EST_NET_OIL_RATE, EST_GAS_RATE = n_EST_GAS_RATE, EST_NET_COND_RATE = n_EST_NET_COND_RATE, EST_WATER_RATE = n_EST_WATER_RATE, MPM_PRESS = n_MPM_PRESS, MPM_TEMP = n_MPM_TEMP, MPM_OIL_DENSITY = n_MPM_OIL_DENSITY, MPM_MIX_DENSITY = n_MPM_MIX_DENSITY, MPM_GAS_DENSITY = n_MPM_GAS_DENSITY, MPM_COND_DENSITY = n_MPM_COND_DENSITY, MPM_WATER_DENSITY = n_MPM_WATER_DENSITY, MPM_OIL_DENSITY_FLC = n_MPM_OIL_DENSITY_FLC, MPM_MIX_DENSITY_FLC = n_MPM_MIX_DENSITY_FLC, MPM_GAS_DENSITY_FLC = n_MPM_GAS_DENSITY_FLC, MPM_COND_DENSITY_FLC = n_MPM_COND_DENSITY_FLC, MPM_WATER_DENSITY_FLC = n_MPM_WATER_DENSITY_FLC, MPM_OIL_RATE = n_MPM_OIL_RATE, MPM_GAS_RATE = n_MPM_GAS_RATE, MPM_COND_RATE = n_MPM_COND_RATE, MPM_WATER_RATE = n_MPM_WATER_RATE, MPM_OIL_RATE_FLC = n_MPM_OIL_RATE_FLC, MPM_GAS_RATE_FLC = n_MPM_GAS_RATE_FLC, MPM_COND_RATE_FLC = n_MPM_COND_RATE_FLC, MPM_WATER_RATE_FLC = n_MPM_WATER_RATE_FLC, MPM_OIL_MASS_RATE = n_MPM_OIL_MASS_RATE, MPM_GAS_MASS_RATE = n_MPM_GAS_MASS_RATE, MPM_COND_MASS_RATE = n_MPM_COND_MASS_RATE, MPM_WATER_MASS_RATE = n_MPM_WATER_MASS_RATE, MPM_OIL_MASS_RATE_FLC = n_MPM_OIL_MASS_RATE_FLC, MPM_GAS_MASS_RATE_FLC = n_MPM_GAS_MASS_RATE_FLC, MPM_COND_MASS_RATE_FLC = n_MPM_COND_MASS_RATE_FLC, MPM_WATER_MASS_RATE_FLC = n_MPM_WATER_MASS_RATE_FLC, MPM_CONDUCT = n_MPM_CONDUCT, MPM_CONDUCT_TEMP = n_MPM_CONDUCT_TEMP, MPM_OIL_RATE_RAW = n_MPM_OIL_RATE_RAW, MPM_GAS_RATE_RAW = n_MPM_GAS_RATE_RAW, MPM_WATER_RATE_RAW = n_MPM_WATER_RATE_RAW, WET_DRY_GAS_RATIO = n_WET_DRY_GAS_RATIO, PUMP_TIMER = n_PUMP_TIMER, WATERCUT_PCT = n_WATERCUT_PCT, GAS_SP_GRAV = n_GAS_SP_GRAV, CHLORIDE = n_CHLORIDE, EMULSION = n_EMULSION, FORMATION_GLR = n_FORMATION_GLR, WGR = n_WGR, GOR = n_GOR, CGR = n_CGR, GLR = n_GLR, DECLINE_RATE_OIL = n_DECLINE_RATE_OIL, PUMP_RUNTIME = n_PUMP_RUNTIME, OIL_SHRINKAGE = n_OIL_SHRINKAGE, SOLUTION_GAS_FACTOR = n_SOLUTION_GAS_FACTOR, SAND_CONTENT = n_SAND_CONTENT, OBJECT_ID = n_OBJECT_ID, MPM_OIL_MASS_RATE_RAW = n_MPM_OIL_MASS_RATE_RAW, MPM_GAS_MASS_RATE_RAW = n_MPM_GAS_MASS_RATE_RAW, MPM_WATER_MASS_RATE_RAW = n_MPM_WATER_MASS_RATE_RAW, MPM_OIL_DENSITY_RAW = n_MPM_OIL_DENSITY_RAW, MPM_GAS_DENSITY_RAW = n_MPM_GAS_DENSITY_RAW, MPM_WATER_DENSITY_RAW = n_MPM_WATER_DENSITY_RAW, GL_DIFF_PRESS = n_GL_DIFF_PRESS, EST_POWERWATER_RATE = n_EST_POWERWATER_RATE, POWERWATER_RATE = n_POWERWATER_RATE, MPM_MIX_DENSITY_RAW = n_MPM_MIX_DENSITY_RAW, CREATED_BY = n_CREATED_BY, CREATED_DATE = n_CREATED_DATE , LAST_UPDATED_BY = n_LAST_UPDATED_BY,LAST_UPDATED_DATE = n_LAST_UPDATED_DATE ,REV_NO = n_rev_no, REV_TEXT = n_REV_TEXT, RECORD_STATUS = n_RECORD_STATUS
    WHERE DAYTIME= o_DAYTIME AND OBJECT_ID= o_OBJECT_ID;

  ELSE -- Deleting 

     DELETE FROM ECKERNEL_EC12SRC.V_PTST_PWEL_RESULT
     WHERE DAYTIME= o_DAYTIME AND OBJECT_ID= o_OBJECT_ID;

  END IF; -- IF INSERTING  

 --*************************************************************************************
 -- Start Trigger action block
 -- Any code block defined as a AFTER trigger-type in table CLASS_TRIGGER_ACTION will be put here

 --
 -- end user exit block Class_trigger_actions after
 --*************************************************************************************

  END; -- TRIGGER IUD_PTST_PWEL_RESULT

