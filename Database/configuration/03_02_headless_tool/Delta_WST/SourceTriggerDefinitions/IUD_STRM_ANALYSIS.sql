CREATE OR REPLACE EDITIONABLE TRIGGER "IUD_STRM_ANALYSIS" 
 INSTEAD OF INSERT OR UPDATE OR DELETE ON DV_STRM_ANALYSIS
 FOR EACH ROW
-- Generated by ecdp_viewlayer

DECLARE
  n_class_name         VARCHAR2(30) := EcDB_Utils.ConditionNVL(NOT Updating('CLASS_NAME'),:NEW.CLASS_NAME,:OLD.CLASS_NAME);
  n_record_status      VARCHAR2(1) := EcDB_Utils.ConditionNVL(NOT Updating('RECORD_STATUS'),:NEW.record_status,:OLD.record_status);
  n_rev_no             NUMBER := NVL(:OLD.rev_no,0);
  n_rev_text           VARCHAR2(4000):= EcDB_Utils.ConditionNVL(NOT Updating('REV_TEXT'),:NEW.rev_text,:OLD.rev_text);
  n_created_by         VARCHAR2(30):= EcDB_Utils.ConditionNVL(NOT Updating('CREATED_BY'),to_char(:NEW.created_by),to_char(:OLD.created_by));
  n_created_date       DATE := EcDB_Utils.ConditionNVL(NOT Updating('CREATED_DATE'),:NEW.created_date,:OLD.created_date);
  n_last_updated_by    VARCHAR2(30):= EcDB_Utils.ConditionNVL(NOT Updating('LAST_UPDATED_BY'),to_char(:NEW.last_updated_by),to_char(:OLD.last_updated_by));
  n_last_updated_date  DATE := EcDB_Utils.ConditionNVL(NOT Updating('LAST_UPDATED_DATE'),:NEW.last_updated_date,:OLD.last_updated_date);

  o_created_by         VARCHAR2(30):= :OLD.created_by;
  o_last_updated_by    VARCHAR2(30):= :OLD.last_updated_by;
  n_lock_columns       EcDp_Month_lock.column_list;
  o_lock_columns       EcDp_Month_lock.column_list;
  n_OBJECT_ID VARCHAR2(4000) := EcDB_Utils.ConditionNVL(NOT Updating('OBJECT_ID'),:NEW.OBJECT_ID,:OLD.OBJECT_ID);
  n_object_code VARCHAR2(4000) := EcDB_Utils.ConditionNVL(NOT Updating('OBJECT_CODE'),:NEW.object_code,:OLD.object_code);
  o_OBJECT_ID VARCHAR2(4000) := :OLD.OBJECT_ID;
  n_FLUID_STATE VARCHAR2(4000) := EcDB_Utils.ConditionNVL(NOT Updating('FLUID_STATE'),:NEW.FLUID_STATE,:OLD.FLUID_STATE);
  n_ANALYSIS_TYPE VARCHAR2(4000) := EcDB_Utils.ConditionNVL(NOT Updating('ANALYSIS_TYPE'),:NEW.ANALYSIS_TYPE,:OLD.ANALYSIS_TYPE);
  o_ANALYSIS_TYPE VARCHAR2(4000) := :OLD.ANALYSIS_TYPE;
  n_SAMPLING_METHOD VARCHAR2(4000) := EcDB_Utils.ConditionNVL(NOT Updating('SAMPLING_METHOD'),:NEW.SAMPLING_METHOD,:OLD.SAMPLING_METHOD);
  o_SAMPLING_METHOD VARCHAR2(4000) := :OLD.SAMPLING_METHOD;
  n_PHASE VARCHAR2(4000) := EcDB_Utils.ConditionNVL(NOT Updating('PHASE'),:NEW.PHASE,:OLD.PHASE);
  o_PHASE VARCHAR2(4000) := :OLD.PHASE;
  n_ANALYSIS_NO NUMBER  := EcDB_Utils.ConditionNVL(NOT Updating('ANALYSIS_NO'),:NEW.ANALYSIS_NO,:OLD.ANALYSIS_NO);
  n_ANALYSIS_STATUS VARCHAR2(4000) := EcDB_Utils.ConditionNVL(NOT Updating('ANALYSIS_STATUS'),:NEW.ANALYSIS_STATUS,:OLD.ANALYSIS_STATUS);
  n_BSW_WT NUMBER  := EcDB_Utils.ConditionNVL(NOT Updating('BSW_WT'),:NEW.BSW_WT,:OLD.BSW_WT);
  n_OBJECT_CLASS_NAME VARCHAR2(4000) := EcDB_Utils.ConditionNVL(NOT Updating('OBJECT_CLASS_NAME'),:NEW.OBJECT_CLASS_NAME,:OLD.OBJECT_CLASS_NAME);
  n_CNPL_MOL_WT NUMBER  := EcDB_Utils.ConditionNVL(NOT Updating('CNPL_MOL_WT'),:NEW.CNPL_MOL_WT,:OLD.CNPL_MOL_WT);
  n_CNPL_SP_GRAV NUMBER  := EcDB_Utils.ConditionNVL(NOT Updating('CNPL_SP_GRAV'),:NEW.CNPL_SP_GRAV,:OLD.CNPL_SP_GRAV);
  n_CNPL_DENSITY NUMBER  := EcDB_Utils.ConditionNVL(NOT Updating('CNPL_DENSITY'),:NEW.CNPL_DENSITY,:OLD.CNPL_DENSITY);
  n_MOL_WT NUMBER  := EcDB_Utils.ConditionNVL(NOT Updating('MOL_WT'),:NEW.MOL_WT,:OLD.MOL_WT);
  n_SAMPLE_PRESS NUMBER  := EcDB_Utils.ConditionNVL(NOT Updating('SAMPLE_PRESS'),:NEW.SAMPLE_PRESS,:OLD.SAMPLE_PRESS);
  n_SAMPLE_TEMP NUMBER  := EcDB_Utils.ConditionNVL(NOT Updating('SAMPLE_TEMP'),:NEW.SAMPLE_TEMP,:OLD.SAMPLE_TEMP);
  n_SP_GRAV VARCHAR2(4000) := EcDB_Utils.ConditionNVL(NOT Updating('SP_GRAV'),:NEW.SP_GRAV,:OLD.SP_GRAV);
  n_VALID_FROM_DATE DATE := EcDB_Utils.ConditionNVL(NOT Updating('VALID_FROM_DATE'),:NEW.VALID_FROM_DATE,:OLD.VALID_FROM_DATE);
  n_COMMENTS VARCHAR2(4000) := EcDB_Utils.ConditionNVL(NOT Updating('COMMENTS'),:NEW.COMMENTS,:OLD.COMMENTS);
  n_DENSITY NUMBER  := EcDB_Utils.ConditionNVL(NOT Updating('DENSITY'),:NEW.DENSITY,:OLD.DENSITY);
  n_LABORATORY VARCHAR2(4000) := EcDB_Utils.ConditionNVL(NOT Updating('LABORATORY'),:NEW.LABORATORY,:OLD.LABORATORY);
  n_LAB_REF_NO VARCHAR2(4000) := EcDB_Utils.ConditionNVL(NOT Updating('LAB_REF_NO'),:NEW.LAB_REF_NO,:OLD.LAB_REF_NO);
  n_RVP NUMBER  := EcDB_Utils.ConditionNVL(NOT Updating('RVP'),:NEW.RVP,:OLD.RVP);
  n_SALT NUMBER  := EcDB_Utils.ConditionNVL(NOT Updating('SALT'),:NEW.SALT,:OLD.SALT);
  n_SHRINKAGE_FACTOR NUMBER  := EcDB_Utils.ConditionNVL(NOT Updating('SHRINKAGE_FACTOR'),:NEW.SHRINKAGE_FACTOR,:OLD.SHRINKAGE_FACTOR);
  n_BS_W NUMBER  := EcDB_Utils.ConditionNVL(NOT Updating('BS_W'),:NEW.BS_W,:OLD.BS_W);
  n_CO2 NUMBER  := EcDB_Utils.ConditionNVL(NOT Updating('CO2'),:NEW.CO2,:OLD.CO2);
  n_GCV NUMBER  := EcDB_Utils.ConditionNVL(NOT Updating('GCV'),:NEW.GCV,:OLD.GCV);
  n_H2S NUMBER  := EcDB_Utils.ConditionNVL(NOT Updating('H2S'),:NEW.H2S,:OLD.H2S);
  n_O2 NUMBER  := EcDB_Utils.ConditionNVL(NOT Updating('O2'),:NEW.O2,:OLD.O2);
  n_REL_DENSITY NUMBER  := EcDB_Utils.ConditionNVL(NOT Updating('REL_DENSITY'),:NEW.REL_DENSITY,:OLD.REL_DENSITY);
  n_WDP NUMBER  := EcDB_Utils.ConditionNVL(NOT Updating('WDP'),:NEW.WDP,:OLD.WDP);
  n_WOBBE_INDEX NUMBER  := EcDB_Utils.ConditionNVL(NOT Updating('WOBBE_INDEX'),:NEW.WOBBE_INDEX,:OLD.WOBBE_INDEX);
  n_ZMIX NUMBER  := EcDB_Utils.ConditionNVL(NOT Updating('ZMIX'),:NEW.ZMIX,:OLD.ZMIX);
  n_daytime  DATE := EcDB_Utils.ConditionNVL(NOT Updating('DAYTIME'),:NEW.DAYTIME,:OLD.DAYTIME);
  o_daytime  DATE := :OLD.DAYTIME;

  n_rec_id  VARCHAR2(32) := :NEW.rec_id;

BEGIN

 --------------------------------------------------------------------------
 -- Start Before Trigger action block
 -- Need to find object_ids for foreign references given by code before we leave the control to user exit
 -- Also set record status columns in this section to allow user exits to overule them later

 IF INSERTING THEN -- set any default values from CLASS_ATTRIBUTE.DEFAULT_VALUE 

    NULL; -- In case there are no default values 

 END IF;  -- set any default values  

 IF INSERTING OR UPDATING THEN 

   -- Get object_id given object_code
   IF n_object_id IS NULL AND n_object_code IS NOT NULL THEN
      n_object_id := EcDp_Objects.GetObjIDFromCode('STREAM',n_object_code);
   END IF;


   IF INSERTING THEN
     n_created_by :=  Nvl(n_created_by,user);
     n_created_date := Nvl(n_created_date,Ecdp_Timestamp.getCurrentSysdate);
     n_RECORD_STATUS := Nvl(n_RECORD_STATUS,'P');
   ELSE  -- UPDATING
     IF  NOT UPDATING('LAST_UPDATED_BY') OR n_last_updated_by IS NULL THEN  n_last_updated_by := USER;  END IF;
     IF  NOT UPDATING('LAST_UPDATED_DATE') OR n_last_updated_date IS NULL THEN  n_last_updated_date := Ecdp_Timestamp.getCurrentSysdate;  END IF;
   END IF;  -- IF INSERTING

 END IF;  -- INSERTING OR UPDATING

 -- End Before Trigger Action block -------------------------------------------------
 -------------------------------------------------------------------------------

 --*************************************************************************************
 -- Start Trigger Action block
 -- Any code block defined as a BEFORE trigger-type in table CLASS_TRIGGER_ACTION will be put here

 --
 -- end Trigger Action block Class_trigger_actions before
 --*************************************************************************************

 IF INSERTING THEN

    -- Start Insert check block ---------------------------------------
    IF n_Object_id IS NULL THEN Raise_Application_Error(-20103,'Missing value for object_id/object code'); END IF;
    IF n_DAYTIME IS NULL THEN Raise_Application_Error(-20103,'Missing value for DAYTIME'); END IF;
    IF n_DAYTIME < EcDp_System_Constants.Earliest_date THEN  Raise_Application_Error(-20104,'Cannot set DAYTIME before system earliest date: 01.01.1900'); END IF;
    IF n_ANALYSIS_TYPE IS NULL THEN Raise_Application_Error(-20103,'Missing value for ANALYSIS_TYPE'); END IF;
    IF n_SAMPLING_METHOD IS NULL THEN Raise_Application_Error(-20103,'Missing value for SAMPLING_METHOD'); END IF;
    IF n_PHASE IS NULL THEN Raise_Application_Error(-20103,'Missing value for PHASE'); END IF;
    -- End Insert check block ---------------------------------------

  -- Start Insert relation block ---------------------------------------
    IF ecdp_objects.isValidOwnerReference('STRM_ANALYSIS',n_OBJECT_ID) = 'N'  THEN 
      Raise_Application_Error(-20106,'Given object id is not of the same class as the owner class for this data class.') ;
    END IF;

    IF TRUNC(EcDp_Objects.getOBjStartDate(n_object_id)) > n_daytime THEN
       RAISE_APPLICATION_ERROR(-20128,'Daytime is less than owner object start date.');
    END IF;

    IF n_Daytime >= nvl(EcDp_Objects.getObjEndDate(n_object_id),n_Daytime + 1) THEN
       Raise_Application_Error(-20129,'Daytime must be less than owner object end date.');
    END IF;

    -- End Insert relation block ---------------------------------------
    INSERT INTO ECKERNEL_EC12SRC.V_OBJECT_FLUID_ANALYSIS(OBJECT_ID, DAYTIME, FLUID_STATE, ANALYSIS_TYPE, SAMPLING_METHOD, PHASE, ANALYSIS_NO, ANALYSIS_STATUS, BS_W_WT, OBJECT_CLASS_NAME, CNPL_MOL_WT, CNPL_SP_GRAV, CNPL_DENSITY, MOL_WT, SAMPLE_PRESS, SAMPLE_TEMP, SP_GRAV, VALID_FROM_DATE, COMMENTS, DENSITY, LABORATORY, LAB_REF_NO, RVP, SALT, SHRINKAGE_FACTOR, BS_W, CO2, GCV, H2S, O2, REL_DENSITY, WDP, WOBBE_INDEX, ZMIX,  CREATED_BY, CREATED_DATE, LAST_UPDATED_BY, LAST_UPDATED_DATE, REV_NO, REV_TEXT, RECORD_STATUS, REC_ID)
    VALUES(n_OBJECT_ID, n_DAYTIME, n_FLUID_STATE, n_ANALYSIS_TYPE, n_SAMPLING_METHOD, n_PHASE, n_ANALYSIS_NO, n_ANALYSIS_STATUS, n_BSW_WT, n_OBJECT_CLASS_NAME, n_CNPL_MOL_WT, n_CNPL_SP_GRAV, n_CNPL_DENSITY, n_MOL_WT, n_SAMPLE_PRESS, n_SAMPLE_TEMP, n_SP_GRAV, n_VALID_FROM_DATE, n_COMMENTS, n_DENSITY, n_LABORATORY, n_LAB_REF_NO, n_RVP, n_SALT, n_SHRINKAGE_FACTOR, n_BS_W, n_CO2, n_GCV, n_H2S, n_O2, n_REL_DENSITY, n_WDP, n_WOBBE_INDEX, n_ZMIX,  n_CREATED_BY,n_CREATED_DATE, n_LAST_UPDATED_BY, n_LAST_UPDATED_DATE, n_REV_NO, n_REV_TEXT, n_RECORD_STATUS, n_rec_id) ;

  ELSIF UPDATING THEN 

    -- Start Update check block ---------------------------------------
    IF n_DAYTIME IS NULL THEN Raise_Application_Error(-20103,'Missing value for DAYTIME'); END IF;
    IF n_DAYTIME < EcDp_System_Constants.Earliest_date THEN  Raise_Application_Error(-20104,'Cannot set DAYTIME before system earliest date: 01.01.1900'); END IF;
    IF n_ANALYSIS_TYPE IS NULL THEN Raise_Application_Error(-20103,'Missing value for ANALYSIS_TYPE'); END IF;
    IF n_SAMPLING_METHOD IS NULL THEN Raise_Application_Error(-20103,'Missing value for SAMPLING_METHOD'); END IF;
    IF n_PHASE IS NULL THEN Raise_Application_Error(-20103,'Missing value for PHASE'); END IF;
    -- Start Update relation block
      IF Updating('OBJECT_ID') THEN
          IF NOT (Nvl(:NEW.object_id,'NULL') = :OLD.object_id) THEN
             Raise_Application_Error(-20101,'Cannot update object_id ');
          END IF;
      END IF;

    IF Updating('DAYTIME') THEN

       IF TRUNC(EcDp_Objects.getOBjStartDate(n_object_id)) > n_daytime THEN
          RAISE_APPLICATION_ERROR(-20128,'Daytime is less than owner object start date.');
       END IF;

       IF n_Daytime >= nvl(EcDp_Objects.getObjEndDate(n_object_id),n_Daytime + 1) THEN
          Raise_Application_Error(-20129,'Daytime must be less than owner object end date.');
       END IF;

    END IF;

    -- End Update relation block
    UPDATE ECKERNEL_EC12SRC.V_OBJECT_FLUID_ANALYSIS SET OBJECT_ID = n_OBJECT_ID, DAYTIME = n_DAYTIME, FLUID_STATE = n_FLUID_STATE, ANALYSIS_TYPE = n_ANALYSIS_TYPE, SAMPLING_METHOD = n_SAMPLING_METHOD, PHASE = n_PHASE, ANALYSIS_NO = n_ANALYSIS_NO, ANALYSIS_STATUS = n_ANALYSIS_STATUS, BS_W_WT = n_BSW_WT, OBJECT_CLASS_NAME = n_OBJECT_CLASS_NAME, CNPL_MOL_WT = n_CNPL_MOL_WT, CNPL_SP_GRAV = n_CNPL_SP_GRAV, CNPL_DENSITY = n_CNPL_DENSITY, MOL_WT = n_MOL_WT, SAMPLE_PRESS = n_SAMPLE_PRESS, SAMPLE_TEMP = n_SAMPLE_TEMP, SP_GRAV = n_SP_GRAV, VALID_FROM_DATE = n_VALID_FROM_DATE, COMMENTS = n_COMMENTS, DENSITY = n_DENSITY, LABORATORY = n_LABORATORY, LAB_REF_NO = n_LAB_REF_NO, RVP = n_RVP, SALT = n_SALT, SHRINKAGE_FACTOR = n_SHRINKAGE_FACTOR, BS_W = n_BS_W, CO2 = n_CO2, GCV = n_GCV, H2S = n_H2S, O2 = n_O2, REL_DENSITY = n_REL_DENSITY, WDP = n_WDP, WOBBE_INDEX = n_WOBBE_INDEX, ZMIX = n_ZMIX, CREATED_BY = n_CREATED_BY, CREATED_DATE = n_CREATED_DATE , LAST_UPDATED_BY = n_LAST_UPDATED_BY,LAST_UPDATED_DATE = n_LAST_UPDATED_DATE ,REV_NO = n_rev_no, REV_TEXT = n_REV_TEXT, RECORD_STATUS = n_RECORD_STATUS, REC_ID = n_rec_id
    WHERE OBJECT_ID= o_OBJECT_ID AND DAYTIME= o_DAYTIME AND ANALYSIS_TYPE= o_ANALYSIS_TYPE AND SAMPLING_METHOD= o_SAMPLING_METHOD AND PHASE= o_PHASE;

  ELSE -- Deleting 

     DELETE FROM ECKERNEL_EC12SRC.V_OBJECT_FLUID_ANALYSIS
     WHERE OBJECT_ID= o_OBJECT_ID AND DAYTIME= o_DAYTIME AND ANALYSIS_TYPE= o_ANALYSIS_TYPE AND SAMPLING_METHOD= o_SAMPLING_METHOD AND PHASE= o_PHASE;

  END IF; -- IF INSERTING  

 --*************************************************************************************
 -- Start Trigger action block
 -- Any code block defined as a AFTER trigger-type in table CLASS_TRIGGER_ACTION will be put here

 --
 -- end user exit block Class_trigger_actions after
 --*************************************************************************************

  END; -- TRIGGER IUD_STRM_ANALYSIS

