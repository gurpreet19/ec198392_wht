CREATE OR REPLACE PACKAGE BODY EcDp_Import IS
  ------------------------------------------------------------------------------------
  -- Package body: EcDp_Import
  -- Generated by ROUHAMAJ
  ------------------------------------------------------------------------------------

  ------------------------------------------------------------------------------------
  PROCEDURE Validate_Key(p_interface_code VARCHAR2, p_key VARCHAR2);
  PROCEDURE Validate_Path_Origin(p_path_origin VARCHAR2);
  FUNCTION is_key_constant(p_key VARCHAR2) RETURN BOOLEAN;

  PROCEDURE Import_Data(p_interface_code VARCHAR2,
                        p_file_name      VARCHAR2,
                        p_daytime        VARCHAR2,
                        p_user_id        VARCHAR2) IS
  BEGIN

    IF p_daytime IS NULL THEN
      UPDATE imp_staging s
         SET s.record_status     = 'V',
             s.last_updated_by   = p_user_id,
             s.last_updated_date = Ecdp_Timestamp.getCurrentSysdate
       WHERE s.interface_code = p_interface_code
         AND s.file_name = p_file_name;
    ELSE
      UPDATE imp_staging s
         SET s.record_status     = 'V',
             s.last_updated_by   = p_user_id,
             s.last_updated_date = Ecdp_Timestamp.getCurrentSysdate
       WHERE s.interface_code = p_interface_code
         AND s.file_name = p_file_name
         AND s.created_date >=
             to_date(p_daytime, 'YYYY-MM-DD"T"HH24:MI:SS');
    END IF;

  END Import_Data;

  ------------------------------------------------------------------------------------
  PROCEDURE Validate_Mapping(p_interface_code VARCHAR2,
                             p_path_origin    VARCHAR2,
                             p_key_1          VARCHAR2,
                             p_key_2          VARCHAR2,
                             p_key_3          VARCHAR2,
                             p_key_4          VARCHAR2,
                             p_key_5          VARCHAR2) IS

    lv_interface_format imp_source_interface.format%TYPE;
    ln_dummy            NUMBER;

  BEGIN

    -- Get interface_format
    lv_interface_format := NULL;
    SELECT count(*)
      INTO ln_dummy
      FROM TV_IMP_SOURCE_INTERFACE i
     WHERE i.CODE = p_interface_code;
    IF ln_dummy = 1 THEN
      SELECT nvl(source_type, 'EXCEL')
        INTO lv_interface_format
        FROM TV_IMP_SOURCE_INTERFACE i
       WHERE i.CODE = p_interface_code;
    END IF;

    Validate_Key(p_interface_code, p_key_1);
    Validate_Key(p_interface_code, p_key_2);
    Validate_Key(p_interface_code, p_key_3);
    Validate_Key(p_interface_code, p_key_4);
    Validate_Key(p_interface_code, p_key_5);

    IF lv_interface_format <> 'XML' THEN
      Validate_Path_Origin(p_path_origin);
    END IF;

  END Validate_Mapping;

  PROCEDURE Validate_Key(p_interface_code VARCHAR2, p_key VARCHAR2) IS
    lv_key_name  VARCHAR2(255);
    lv_key_value VARCHAR2(255);

    ln_dummy       NUMBER;
    lb_is_constant BOOLEAN;

  BEGIN

    -- Validate Key
    IF p_key IS NOT NULL THEN
      ln_dummy := InStr(p_key, ':');
      IF ln_dummy > 0 THEN
        lv_key_name  := SubStr(p_key, 0, ln_dummy - 1);
        lv_key_value := SubStr(p_key, ln_dummy + 1);
      ELSE
        lv_key_name  := NULL;
        lv_key_value := p_key;
      END IF;

      lb_is_constant := IS_KEY_CONSTANT(p_key);

      IF lb_is_constant = FALSE THEN
        SELECT count(*)
          INTO ln_dummy
          FROM tv_imp_source_mapping
         WHERE code = lv_key_value
           AND interface_code = p_interface_code;

        IF ln_dummy = 0 THEN
          RAISE_APPLICATION_ERROR(-20000,
                                  p_key || ' -> ' || lv_key_value ||
                                  ' does not exist. Please specify a valid key.');
        END IF;

        IF lv_key_name IS NOT NULL THEN
          IF lv_key_name NOT IN ('ROWS', 'COLUMNS') THEN
            RAISE_APPLICATION_ERROR(-20000,
                                    lv_key_name ||
                                    ' is not spelled currect. Valid values: ROWS, COLUMNS');
          END IF;
        END IF;
      END IF;
    END IF;
  END Validate_Key;

  FUNCTION is_key_constant(p_key VARCHAR2) RETURN BOOLEAN IS
    lb_result    BOOLEAN := false;
    ln_start_pos NUMBER;
    ln_end_pos   NUMBER;
    ln_length    NUMBER;

  BEGIN

    ln_start_pos := InStr(p_key, '"');
    IF ln_start_pos = 1 THEN
      ln_length := Length(p_key);

      IF ln_length > 1 THEN
        ln_end_pos := InStr(p_key, '"', 2);

        IF ln_end_pos = ln_length THEN
          lb_result := TRUE;
        END IF;
      END IF;
    END IF;

    RETURN lb_result;
  END is_key_constant;

  PROCEDURE Validate_Path_Origin(p_path_origin VARCHAR2) IS
    ln_dummy NUMBER;
    lv_left  VARCHAR2(255);
    lv_right VARCHAr2(255);

  BEGIN
    IF p_path_origin IS NOT NULL THEN
      ln_dummy := InStr(p_path_origin, '.');
      IF ln_dummy = 0 THEN
        RAISE_APPLICATION_ERROR(-20000,
                                p_path_origin ||
                                ' is invalid. Valid format: <sheet name>.<cell name>');
      ELSE
        lv_left  := InStr(p_path_origin, 0, ln_dummy - 1);
        lv_right := InStr(p_path_origin, ln_dummy + 1);

        ln_dummy := InStr(lv_right, '.');
        IF ln_dummy > 0 OR lv_right is NULL THEN
          RAISE_APPLICATION_ERROR(-20000,
                                  p_path_origin ||
                                  ' is invalid. Valid format: <sheet name>.<cell name>');
        END IF;
      END IF;
    END IF;

  END Validate_Path_Origin;

  PROCEDURE UpdateFileStatus(p_interface_code VARCHAR2,
                             p_file_name      VARCHAR2,
                             p_status         VARCHAR2) IS

    ln_dummy NUMBER;

  BEGIN

    SELECT count(*)
      INTO ln_dummy
      FROM imp_source_file_status fs
     WHERE fs.interface_code = p_interface_code
       and fs.file_name = p_file_name;
    IF ln_dummy = 0 THEN
      INSERT INTO imp_source_file_status
        (interface_code, file_name, file_status)
      VALUES
        (p_interface_code, p_file_name, p_Status);
    ELSE
      UPDATE imp_source_file_status sif
         SET sif.file_status = p_status
       WHERE sif.interface_code = p_interface_code
         AND sif.file_name = p_file_name;
    END IF;

  END UpdateFileStatus;

  PROCEDURE UpdateFileStatusForced(p_interface_code VARCHAR2,
                                   p_file_name      VARCHAR2,
                                   p_status         VARCHAR2) IS

    PRAGMA AUTONOMOUS_TRANSACTION;
    ln_dummy NUMBER;

  BEGIN

    SELECT count(*)
      INTO ln_dummy
      FROM imp_source_file_status fs
     WHERE fs.interface_code = p_interface_code
       and fs.file_name = p_file_name;
    IF ln_dummy = 0 THEN
      INSERT INTO imp_source_file_status
        (interface_code, file_name, file_status)
      VALUES
        (p_interface_code, p_file_name, p_Status);
    ELSE
      UPDATE imp_source_file_status sif
         SET sif.file_status = p_status
       WHERE sif.interface_code = p_interface_code
         AND sif.file_name = p_file_name;
    END IF;

    COMMIT;

  END UpdateFileStatusForced;

  FUNCTION get_source_type(p_interface_code VARCHAR2) RETURN VARCHAR2 IS
    lv_source_type imp_source_interface.source_type%TYPE;
    ln_dummy       NUMBER;

  BEGIN
    -- Get interface_format
    lv_source_type := NULL;
    SELECT count(*)
      INTO ln_dummy
      FROM TV_IMP_SOURCE_INTERFACE i
     WHERE i.CODE = p_interface_code;
    IF ln_dummy = 1 THEN
      SELECT nvl(source_type, 'EXCEL')
        INTO lv_source_type
        FROM TV_IMP_SOURCE_INTERFACE i
       WHERE i.CODE = p_interface_code;
    END IF;

    RETURN lv_source_type;
  END get_source_type;


  FUNCTION isEditableConf(p_interface_code VARCHAR2
      ,p_source_mapping_no NUMBER DEFAULT NULL
      ) RETURN VARCHAR2
  IS

  CURSOR cStaging(cp_interface_code VARCHAR2) IS
  SELECT 1 counter
  FROM imp_staging
  WHERE interface_code = cp_interface_code and rownum = 1;

  CURSOR cInterface(cp_source_mapping_no NUMBER) IS
  SELECT interface_code
  FROM imp_source_mapping
  WHERE imp_source_mapping_no = cp_source_mapping_no;



  ln_count NUMBER := 0;
  lv2_HasStaging VARCHAR2(32);
  lv2_interface_code imp_source_mapping.interface_code%TYPE;

  BEGIN

      lv2_interface_code := p_interface_code;

      IF (lv2_interface_code IS NULL) THEN
          FOR curInterface IN cInterface(p_source_mapping_no) LOOP
              lv2_interface_code := curInterface.interface_code;
          END LOOP;
      END IF;

      FOR curCount IN cStaging(lv2_interface_code) LOOP
          ln_count := curCount.counter;
      END LOOP;

      IF (ln_count > 0) THEN
          lv2_HasStaging := 'false';
      ELSE
          lv2_HasStaging := 'true';
      END IF;

      RETURN lv2_HasStaging;

  END isEditableConf;

  PROCEDURE Delete_Staging_Data(p_interface_code VARCHAR2,
                             p_user_name      VARCHAR2)
  IS
  BEGIN
      IF (p_interface_code IS NOT NULL) THEN
          DELETE FROM imp_staging WHERE interface_code = p_interface_code;
      END IF;
  END Delete_Staging_Data;

  PROCEDURE Delete_File(p_interface_code VARCHAR2,
                             p_file_name      VARCHAR2,
                             p_file_no        VARCHAR2)
  IS
  BEGIN
      IF (p_interface_code IS NOT NULL) THEN
          DELETE
            FROM imp_source_interface_atcm
           WHERE parent_interface_code = p_interface_code
             and parent_file_name = p_file_name
             and parent_file_no = p_file_no;

          DELETE
            FROM imp_staging
           WHERE interface_code = p_interface_code
             and file_name = p_file_name;

          DELETE
            FROM imp_source_file_status
           WHERE interface_code = p_interface_code
             and file_name = p_file_name;

          DELETE
            FROM imp_source_interface_file
           WHERE interface_code = p_interface_code
             and file_name = p_file_name
             and file_no = p_file_no;
      END IF;
  END Delete_File;

END EcDp_Import;