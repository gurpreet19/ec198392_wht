CREATE OR REPLACE PACKAGE BODY ecdp_4ea_generate IS
/******************************************************************************
** Package        :  ecdp_4ea_generate, body part
**
** $Revision: 1.10 $
**
** Purpose        :  Generate 4 eyes approval packages for all ec classes
**
** Documentation  :  www.energy-components.com
**
** Created        :  23.12.2007
**
** Modification history:
**
** Date        Whom  Change description:
** ------      ----- ------------------------------------------------------------------------------
** 23.12.2007  AV    Initial version
** 10.03.2008  AV    Incorporated changes  done by ?stein and me during Sharpe testing.
** 28.08.2008  KEB   Calling WriteDebugText instead of WriteTempText
********************************************************************/

   CURSOR c_class(cp_class_name VARCHAR2) IS
   SELECT * FROM class_cnfg
   WHERE class_type IN ('OBJECT','DATA','TABLE','INTERFACE')
   AND   class_name = Nvl(cp_class_name,class_name)
   ORDER BY class_name;

  CURSOR c_class_keys(p_class_name VARCHAR2) IS
    SELECT ca.attribute_name, ca.DB_SQL_SYNTAX, ca.data_type
    FROM class_attribute_cnfg ca
    WHERE ca.class_name = p_class_name
    AND   ca.attribute_name <> 'REC_ID'
    AND   is_key = 'Y';

   TYPE KeyList_t IS TABLE OF c_class_keys%ROWTYPE INDEX BY PLS_INTEGER;
   TYPE AttrList_t IS TABLE OF EcDp_ClassMeta.c_classes_attr%ROWTYPE INDEX BY PLS_INTEGER;
   TYPE DependencyList_t IS TABLE OF ecdp_4ea_utility.c_classdependencylinks%ROWTYPE INDEX BY PLS_INTEGER;

--<EC-DOC>
---------------------------------------------------------------------------------------------------
-- function       : GeneratedCodeMsg
-- Description    :
--
-- Preconditions  :
-- Postcondition  :
--
-- Using Tables   :
--
-- Using functions:
--
-- Configuration
-- required       :
--
-- Behavior      :
--
---------------------------------------------------------------------------------------------------
FUNCTION GeneratedCodeMsg RETURN VARCHAR2
--</EC-DOC>

IS

BEGIN

    RETURN '-- Generated by Ec4ea_genvalidation ';

END GeneratedCodeMsg;



--<EC-DOC>
---------------------------------------------------------------------------------------------------
-- function       : userexitpackageExists
-- Description    :
--
-- Preconditions  :
-- Postcondition  :
--
-- Using Tables   :
--
-- Using functions:
--
-- Configuration
-- required       :
--
-- Behavior      :
--
---------------------------------------------------------------------------------------------------
FUNCTION userexitpackageExists(p_class_name VARCHAR2) RETURN VARCHAR2
--</EC-DOC>

IS

  CURSOR c_userexit IS
  SELECT 1 FROM user_objects
  WHERE object_name = 'UE4E_'||UPPER(p_class_name);

  lv2_result VARCHAR2(1) := 'N';

BEGIN

  FOR cur IN c_userexit LOOP

   lv2_result := 'Y';

  END LOOP;

  RETURN lv2_result;


END userexitpackageExists;



PROCEDURE BuildEC4EA_PackageHeader(
        p_class_name        VARCHAR2,
        p_target            VARCHAR2 DEFAULT 'CREATE')

IS


   header_lines   DBMS_SQL.varchar2a;


BEGIN

     Ecdp_Dynsql.AddSqlLineNoWrap(header_lines, 'CREATE OR REPLACE PACKAGE EC4E_' || p_class_name ||' IS '|| chr(10) || GeneratedCodeMsg || q'[

FUNCTION isUnapprovedData(
          p_where_clause     IN  VARCHAR2
         ,p_finding_severity IN  VARCHAR2 DEFAULT 'ERROR'
         ,p_task_no          IN  NUMBER   DEFAULT NULL
         ,p_debug            IN  VARCHAR2 DEFAULT 'N')
RETURN VARCHAR2;


PROCEDURE FindUnapprovedData(
          p_where_clause    IN  VARCHAR2
         ,p_class_name_list IN OUT ecdp_4ea_utility.t_class_name_list
         ,p_rec_id_list     IN OUT ecdp_4ea_utility.t_rec_id_list);

PROCEDURE FindChildUnapprovedData(
          p_where_clause    IN  VARCHAR2
         ,p_class_name_list IN OUT ecdp_4ea_utility.t_class_name_list
         ,p_rec_id_list     IN OUT ecdp_4ea_utility.t_rec_id_list
         ,p_level           IN  NUMBER);

PROCEDURE findClassChanges(
          p_from_date  DATE
         ,p_to_date    DATE
         ,p_user_id    VARCHAR2);

FUNCTION changedColumns(
          p_rec_id varchar2) return varchar2;

END;
]');

     Ecdp_Dynsql.SafeBuild('EC4EA_'||p_class_name,'PACKAGE',header_lines,p_target);

END;



PROCEDURE BuildEC4EA_AllPackageHeader(
        p_class_name        VARCHAR2 DEFAULT NULL,
        p_target            VARCHAR2 DEFAULT 'CREATE')

IS



BEGIN

   FOR curClass IN c_class(p_class_name) LOOP

      BuildEC4EA_PackageHeader(curClass.class_name,p_target);

   END LOOP;

END;

Function TableColumnExistAndSupported(p_table varchar2, p_column varchar2) return varchar2 is

  Cursor c_cols is
  select 1
  from user_tab_columns
  where table_name = p_table
  and   column_name = p_column
  and   data_type <> 'BLOB';

  lv2_exists varchar2(1) := 'N';

begin

  For cur IN c_cols LOOP
    lv2_exists := 'Y';
  end loop;

   RETURN lv2_exists;

end;

FUNCTION getKeyList(p_class_name IN VARCHAR)
RETURN KeyList_t
IS
  l_keylist KeyList_t;
BEGIN
   OPEN c_class_keys(p_class_name);
   BEGIN
     FETCH c_class_keys BULK COLLECT INTO l_keylist;
   EXCEPTION
     WHEN NO_DATA_FOUND THEN
       NULL;
   END;
   CLOSE c_class_keys;
   RETURN l_keylist;
END getKeyList;

FUNCTION getAttributeList(p_class_name IN VARCHAR)
RETURN AttrList_t
IS
  l_attrlist AttrList_t;
BEGIN
   OPEN ecdp_classmeta.c_classes_attr(p_class_name);
   BEGIN
     FETCH ecdp_classmeta.c_classes_attr BULK COLLECT INTO l_attrlist;
   EXCEPTION
     WHEN NO_DATA_FOUND THEN
       NULL;
   END;
   CLOSE ecdp_classmeta.c_classes_attr;
   RETURN l_attrlist;
END getAttributeList;

FUNCTION getDependencyList(p_class_name IN VARCHAR)
RETURN DependencyList_t
IS
  l_dependencylist DependencyList_t;
BEGIN
   OPEN ecdp_4ea_utility.c_classdependencylinks(p_class_name);
   BEGIN
     FETCH ecdp_4ea_utility.c_classdependencylinks BULK COLLECT INTO l_dependencylist;
   EXCEPTION
     WHEN NO_DATA_FOUND THEN
       NULL;
   END;
   CLOSE ecdp_4ea_utility.c_classdependencylinks;
   RETURN l_dependencylist;
END getDependencyList;

PROCEDURE BuildEC4EA_PackageBody(
        p_class_name        VARCHAR2,
        p_target            VARCHAR2 DEFAULT 'CREATE')

IS
   body_lines      DBMS_SQL.varchar2a;
   lv2_maintable_name VARCHAR2(50);
   lv2_table_name  VARCHAR2(50);
   lv2_collist     VARCHAR2(4000);
   lv2_selectlist  VARCHAR2(4000);
   lb_objectclass  BOOLEAN;
   lv2_attribute_name VARCHAR2(200);
   ln_count        NUMBER;
   lv2_key         VARCHAR2(4000);
   has_object_id   BOOLEAN;
   lb_isusing4ea   BOOLEAN := ecdp_4ea_utility.isusing4ea = 'Y';
   lv2_viewname    VARCHAR2(30) := ecdp_classmeta.getclassviewname(p_class_name);
   lr_class_cnfg   class_cnfg%ROWTYPE := ec_class_cnfg.row_by_pk(p_class_name);
   l_keylist       KeyList_t := getKeyList(p_class_name);
   l_attrlist      AttrList_t := getAttributeList(p_class_name);
   l_dependencylist DependencyList_t;
   lv2_hasJnView   VARCHAR2(1) := ecdp_classmeta.hasJournalView(p_class_name);
   lv2_jnCondition VARCHAR2(4000) := EcDp_ClassMeta.getClassJournalIfCondition(p_class_name);
BEGIN
   IF lb_isusing4ea THEN
     l_dependencylist := getDependencyList(p_class_name);
   END IF;

   Ecdp_Dynsql.AddSqlLineNoWrap(body_lines, 'CREATE OR REPLACE PACKAGE BODY EC4E_' || p_class_name ||' IS '|| chr(10) );
   Ecdp_Dynsql.AddSqlLineNoWrap(body_lines, GeneratedCodeMsg||CHR(10)|| chr(10) );

   Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'FUNCTION isUnapprovedData(' || chr(10));
   Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'          p_where_clause     IN  VARCHAR2' || chr(10));
   Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'         ,p_finding_severity IN  VARCHAR2 DEFAULT ''ERROR''' || chr(10));
   Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'         ,p_task_no          IN  NUMBER   DEFAULT NULL' || chr(10));
   Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'         ,p_debug            IN  VARCHAR2 DEFAULT ''N'')' || chr(10));
   Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'RETURN VARCHAR2' || chr(10) || chr(10));

   Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'IS' || chr(10) || chr(10) );

   IF lb_isusing4ea THEN

     Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'  l_class_name_list ecdp_4ea_utility.t_class_name_list;' || CHR(10) );
     Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'  l_rec_id_list ecdp_4ea_utility.t_rec_id_list;' || CHR(10) );
     Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'  lts_start  TIMESTAMP;' || CHR(10) );
     Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'  lts_end    TIMESTAMP;' || CHR(10) );
     Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'  lv2_task_process_id VARCHAR2(32);' ||  CHR(10) );
     Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'  lv2_result VARCHAR2(1) := ''N'';' ||  CHR(10) );
     Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'  ln_usedsec NUMBER;' ||  CHR(10) );
     Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'  ln_task_no NUMBER;' || chr(10) || CHR(10) );

     Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'BEGIN'|| chr(10) || chr(10) );

     Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'  lts_start := systimestamp;' || CHR(10) );
     Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'  l_class_name_list := ecdp_4ea_utility.t_class_name_list();' || CHR(10) );
     Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'  l_rec_id_list := ecdp_4ea_utility.t_rec_id_list();' || CHR(10) || CHR(10) );

     Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'  ec4e_'||p_class_name||'.findunapproveddata(p_where_clause,l_class_name_list,l_rec_id_list);' || CHR(10) || CHR(10) );

     Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'  IF l_class_name_list.count > 0 THEN' || CHR(10) || CHR(10) );

     --  Need to log findings to given control point or create a
     Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'    lv2_result := ''Y'';' || CHR(10) || CHR(10) );

     Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'    IF p_task_no is not null THEN' || CHR(10) || CHR(10) );
     Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'      ln_task_no := p_task_no;' || CHR(10) || CHR(10) );
     Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'    ELSE' || CHR(10) || CHR(10) );

     Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'      lv2_task_process_id := ecdp_objects.getobjidfromcode('''||p_class_name||''',''CP_''||upper(p_finding_severity));' || CHR(10) || CHR(10) );

     Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'      INSERT INTO TASK(TASK_TYPE,TASK_PROCESS_ID,TASK_DESCRIPTION,TASK_STATUS)' || CHR(10) );
     Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'      VALUES(''CP_''||p_finding_severity,lv2_task_process_id,''Unapproved data found'',''OPEN'')' || CHR(10) );
     Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'      RETURNING task_no INTO ln_task_no;' || CHR(10) || CHR(10) );
     Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'    END IF;' || CHR(10) || CHR(10) );

     Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'    FOR i in 1..l_class_name_list.count LOOP' || CHR(10) || CHR(10) );

     Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'      IF l_rec_id_list(i) is not null THEN' || CHR(10) || CHR(10) );

     Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'        INSERT INTO TASK_DETAIL(TASK_NO,RECORD_REF_ID,CLASS_NAME)' || CHR(10));
     Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'        VALUES(ln_task_no,l_rec_id_list(i),l_class_name_list(i));' || CHR(10) || CHR(10) );

     Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'        IF p_debug = ''Y'' THEN' || CHR(10) || CHR(10) );

     Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'          ecdp_dynsql.WriteDebugText(''VAL_FINDINGS'', '''||p_class_name||' where: ''||p_where_clause||'' Found unapproved '' || EcDp_Task_Detail.RecIDDetailDescription(l_class_name_list(i),l_rec_id_list(i)), ''DEBUG'' );'|| CHR(10)|| CHR(10));

     Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'         END IF;' || CHR(10) || CHR(10) );

     Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'      ELSE' || CHR(10) || CHR(10) );

     Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'        ecdp_dynsql.WriteDebugText(''VAL_FINDINGS'',''Class: ''||rpad(l_class_name_list(i),30)||'' Rec_id: NULL'', ''DEBUG'' );' || CHR(10) || CHR(10) );

     Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'      END IF;' || CHR(10) || CHR(10) );

     Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'    END LOOP;' || CHR(10) || CHR(10) );

     Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'  END IF;' || CHR(10) || CHR(10) );

     Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'  lts_end := systimestamp;' || CHR(10) );

     Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,' -- ln_usedsec := to_number(lts_end) - to_number(lts_start);' || CHR(10) || CHR(10) );

     Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,' -- ecdp_dynsql.WriteDebugText(''VALTIME'', ''Started: ''||TO_CHAR(lts_start) ||''USED:''||to_char(ln_usedsec), ''DEBUG'');' || CHR(10) || CHR(10) );

     Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'  RETURN lv2_result;' || CHR(10) || CHR(10) );

     Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'END;'|| chr(10) || chr(10) );

   ELSE

     Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'BEGIN' || chr(10)|| chr(10));
     Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'  NULL; -- No classes had 4EA activated when this package was generated' || chr(10)|| chr(10));
     Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'END;' || chr(10)|| chr(10));

   END IF;



   Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'PROCEDURE FindUnapprovedData(' || chr(10));
   Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'          p_where_clause    IN  VARCHAR2' || chr(10));
   Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'         ,p_class_name_list IN OUT ecdp_4ea_utility.t_class_name_list' || chr(10));
   Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'         ,p_rec_id_list     IN OUT ecdp_4ea_utility.t_rec_id_list)' || chr(10) || chr(10));

   Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'IS' || chr(10) || chr(10) );

   Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'BEGIN'|| chr(10) || chr(10) );

   Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,' ecdp_4ea_utility.ClearVisitedNode;' || CHR(10) );
   Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,' ecdp_4ea_utility.ClearVisitedObject;' || CHR(10) );

   Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,' FindChildUnapprovedData(p_where_clause,p_class_name_list,p_rec_id_list,0);' || chr(10) || chr(10));

   Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'END;'|| chr(10) || chr(10) );


   Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'PROCEDURE FindChildUnapprovedData(' || chr(10));
   Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'          p_where_clause    IN  VARCHAR2' || chr(10));
   Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'         ,p_class_name_list IN OUT ecdp_4ea_utility.t_class_name_list' || chr(10));
   Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'         ,p_rec_id_list     IN OUT ecdp_4ea_utility.t_rec_id_list' || CHR(10));
   Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'         ,p_level           IN  NUMBER)' || chr(10) || chr(10));

   Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'IS' || chr(10) || chr(10) );

   IF lb_isusing4ea THEN

     Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'TYPE cv_type IS REF CURSOR;' || chr(10)  );
     Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'cv   cv_type;' || chr(10)  );
     Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'lv2_sql      varchar2(32000);' || chr(10)  );
     Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'lv2_rec_id   varchar2(32);' || chr(10)  );
     Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'lv2_approval_state varchar2(32);' || chr(10)  );
     Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'lv2_object_id varchar2(32);' || chr(10)  );
     Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'ld_daytime    date;' || chr(10)  );

     lv2_selectlist := '';
     lv2_collist := '';

     FOR i IN  1..l_keylist.COUNT LOOP

  --      lv2_selectlist := lv2_selectlist ||', '||l_keylist(i).DB_SQL_SYNTAX;
        lv2_selectlist := lv2_selectlist ||', '||l_keylist(i).Attribute_Name;

        IF l_keylist(i).data_type = 'NUMBER' THEN

          Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'ln_'||l_keylist(i).attribute_name||'   NUMBER;' || chr(10)  );
          lv2_collist := lv2_collist ||', ln_'||l_keylist(i).attribute_name;

        ELSIF l_keylist(i).data_type = 'DATE' THEN

          IF UPPER(l_keylist(i).attribute_name) <> 'DAYTIME' THEN

            Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'ld_'||l_keylist(i).attribute_name||'   DATE;' || chr(10)  );

          END IF;

          lv2_collist := lv2_collist ||', ld_'||l_keylist(i).attribute_name;

        ELSE

         IF UPPER(l_keylist(i).attribute_name) <> 'OBJECT_ID' THEN

            Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'lv2_'||l_keylist(i).attribute_name||'   VARCHAR2(4000);' || chr(10)  );

         END IF;

         lv2_collist := lv2_collist ||', lv2_'||l_keylist(i).attribute_name;

        END IF;
     END LOOP;

     --NOTYET Cursor to add reverse relations
     FOR d IN 1..l_dependencylist.COUNT LOOP

       IF l_dependencylist(d).rel_direction = 2 THEN

          lv2_attribute_name := l_dependencylist(d).role_name;

          IF lv2_attribute_name = 'OWNERCLASS' THEN
             lv2_attribute_name := 'OBJECT_ID';
          ELSE
             lv2_attribute_name := lv2_attribute_name || '_ID';
          END IF;
          Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'lv2_'||lv2_attribute_name||'   VARCHAR2(4000);' || chr(10)  );
          lv2_selectlist := lv2_selectlist ||', '||lv2_attribute_name || '';
          lv2_collist := lv2_collist ||', lv2_'||lv2_attribute_name || '';


       END IF;

     END LOOP;


     Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'BEGIN'|| chr(10) || chr(10) );

     -- If no unapproved data no point in digging further into it
     Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'  IF ecdp_4ea_utility.isunapprovedData = ''Y'' AND ecdp_4ea_utility.isvisitedNode('''||p_class_name||'_''||p_where_clause) = ''N'' THEN' || chr(10) || chr(10) );

     Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'    ecdp_4ea_utility.addvisitedNode('''||p_class_name||'_''||p_where_clause,p_level);' || chr(10) || chr(10) );

     IF lr_class_cnfg.DB_OBJECT_ATTRIBUTE IS NOT NULL THEN

        lb_objectclass := TRUE;
        Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'     lv2_sql := ''SELECT rec_id, approval_state, daytime, object_id '|| lv2_selectlist ||' FROM '|| lv2_viewname ||'  ''||'|| chr(10) );
        Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'                '' WHERE 1=1 '';'|| chr(10) || chr(10) );

     ELSE

        Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'     lv2_sql := ''SELECT rec_id, approval_state'|| lv2_selectlist ||' FROM '|| lv2_viewname ||' where 1=1 '';'|| chr(10)|| chr(10) );

     END IF;

     Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'    IF p_where_clause IS NOT NULL THEN' || chr(10) || chr(10) );
     Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'      lv2_sql := lv2_sql || '' AND '' || p_where_clause;'|| chr(10) || chr(10) );
     Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'    END IF;' || chr(10) || chr(10) );

     Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'    OPEN cv FOR lv2_sql;' || chr(10) || chr(10) );
     Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'    ecdp_dynsql.WriteDebugText(''EC4EA_DEBUG'',lv2_sql, ''DEBUG'');' || chr(10));



     Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'    LOOP' || chr(10) || chr(10) );

     IF lb_objectclass THEN
       Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'      FETCH cv INTO lv2_rec_id, lv2_approval_state, ld_DAYTIME, lv2_OBJECT_ID ' || lv2_collist ||';'||  chr(10) );
     ELSE
       Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'      FETCH cv INTO lv2_rec_id, lv2_approval_state' || lv2_collist ||';'||  chr(10) );
     END IF;


     Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'      EXIT WHEN cv%NOTFOUND; ' || chr(10) || chr(10) );

     Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'      IF  ecdp_4ea_utility.isvisitedObject(lv2_rec_id) = ''N'' THEN ' || chr(10) || chr(10) );

     Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'         ecdp_4ea_utility.addvisitedObject('''||p_class_name||''',lv2_rec_id,p_level); ' || chr(10) || chr(10) );


     IF  ecdp_4ea_utility.hasapproval(p_class_name) = 'Y' THEN

       Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'        IF nvl(lv2_approval_state,''U'') <> ''O''  THEN ' || chr(10) || chr(10) );
       Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'          ecdp_4ea_utility.AddUnapprovedData('''||p_class_name||''',lv2_rec_id,p_class_name_list,p_rec_id_list); ' || chr(10) || chr(10) );
       Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'        END IF;' || chr(10) || chr(10) );

     END IF;


    Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'        IF lv2_object_id is not null THEN ' || CHR(10) || CHR(10) );
    Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'          NULL; '  || CHR(10) );


    FOR d IN 1..l_dependencylist.COUNT LOOP

       IF l_dependencylist(d).rel_direction IN (1,3) THEN


   --   Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'      -- LOOP "child" branches that include Approval candidate:' || curChild.child_class || chr(10) || chr(10) );
      ecdp_4ea_utility.ClearVisitedNode;


      IF ecdp_4ea_utility.isonapprovalpath(l_dependencylist(d).child_class) = 'Y' THEN

          lv2_attribute_name := l_dependencylist(d).role_name;

          IF lv2_attribute_name = 'OWNERCLASS' THEN
             lv2_attribute_name := 'OBJECT_ID';
          ELSE
             lv2_attribute_name := lv2_attribute_name || '_ID';
          END IF;

          Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'          ec4e_'||l_dependencylist(d).child_class||'.FindChildUnapprovedData('''||lv2_attribute_name||' = ''''''||lv2_object_id||'''''''' ,p_class_name_list,p_rec_id_list,p_level+1);' || CHR(10) );

       END IF;

      END IF;

    END LOOP;

    Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'        END IF;' || CHR(10) || CHR(10) );


    FOR d IN 1..l_dependencylist.COUNT LOOP

      IF l_dependencylist(d).rel_direction IN (2) THEN


     --   Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'      -- LOOP "child" branches that include Approval candidate:' || curChild.child_class || chr(10) || chr(10) );
        ecdp_4ea_utility.ClearVisitedNode;


        IF ecdp_4ea_utility.isonapprovalpath(l_dependencylist(d).child_class) = 'Y' THEN

            lv2_attribute_name := l_dependencylist(d).role_name;

            IF lv2_attribute_name = 'OWNERCLASS' THEN
               lv2_attribute_name := 'OBJECT_ID';
            ELSE
               lv2_attribute_name := lv2_attribute_name || '_ID';
            END IF;

            Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'        IF lv2_'||lv2_attribute_name|| ' is not null THEN ' || CHR(10) );
            Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'          ec4e_'||l_dependencylist(d).child_class||'.FindChildUnapprovedData(''object_id = ''''''||lv2_'||lv2_attribute_name||'||'''''''' ,p_class_name_list,p_rec_id_list,p_level+1);' || CHR(10) );
            Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'        END IF;'|| CHR(10) );


       END IF;

      END IF;

    END LOOP;



     Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'      END IF;' || chr(10) || chr(10) );

     Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'    END LOOP;' || chr(10) || chr(10) );
     Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'    CLOSE cv;' || chr(10) || chr(10) );

     IF userexitpackageExists(p_class_name) = 'Y' THEN
       Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'      ue4e_'||p_class_name||'.FindChildUnapprovedData(p_where_clause,p_class_name_list,p_rec_id_list,p_level-1);' || CHR(10) );
     END IF;


     Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'  END IF;' || chr(10) || chr(10) );

     Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'END FindChildUnapprovedData;' || chr(10)|| chr(10));

   ELSE

     Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'BEGIN' || chr(10)|| chr(10));
     Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'  NULL; -- No classes had 4EA activated when this package was generated' || chr(10)|| chr(10));
     Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'END FindChildUnapprovedData;' || chr(10)|| chr(10));

   END IF;

   IF lv2_hasJnView = 'Y' AND lv2_jnCondition IS NOT NULL THEN

     ------------------------------------------------------------------------------------------
     -- compareAttributes
     -------------------------------------------------------------------------------------------

     Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'PROCEDURE compareAttributes(' || chr(10));
     Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'          p_rec  '||ecdp_classmeta.getclassviewname(p_class_name)||'%ROWTYPE' || chr(10));
     Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'         ,p_jrec  '||ecdp_classmeta.getclassviewname(p_class_name)||'_JN%ROWTYPE)' || chr(10) || chr(10));
     Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'IS' || chr(10) || chr(10));
     Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'  lv2_id  varchar2(200);' || chr(10) );
     Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'  lv2_object_id  varchar2(200);' || chr(10) || chr(10));

     Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'BEGIN' || chr(10) || chr(10));

--     Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'  lv2_id := EcDp_Task_detail.RecIDDetailDescription('''||p_class_name||''',p_Rec.rec_id);' || chr(10) || chr(10));

     IF lr_class_cnfg.class_type = 'OBJECT' THEN

       Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'  lv2_id := p_rec.NAME||'' ''||to_char(p_rec.daytime,''dd.mm.yyyy hh24:mi'');' ||  chr(10));
       Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'  lv2_object_id := p_rec.OBJECT_ID;' || chr(10) || chr(10));

     ELSE

       lv2_key := NULL;

       IF lr_class_cnfg.owner_class_name IS NULL THEN
         has_object_id := FALSE;
       ELSE
         has_object_id := TRUE;
       END IF;

       FOR i IN  1..l_keylist.COUNT LOOP
         IF lv2_key IS NULL THEN
           lv2_key := lv2_key || 'p_rec.'||l_keylist(i).attribute_name;
         ELSE
           lv2_key := lv2_key || '||'' ''||p_rec.'||l_keylist(i).attribute_name;
         END IF;

         IF UPPER(l_keylist(i).attribute_name) = 'OBJECT_ID' THEN
           has_object_id := TRUE;
         END IF;

       END LOOP;

       Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'  IF p_Rec.rec_id is not null THEN' || chr(10) );
       Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'    lv2_id := EcDp_Task_detail.RecIDDetailDescription('''||p_class_name||''',p_Rec.rec_id);' || chr(10) );
       Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'  ELSE' || chr(10) );
       Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'    lv2_id := '||Nvl(lv2_key,'NULL')||';' || chr(10) );
       Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'  END IF;' || chr(10)|| chr(10));

        IF has_object_id THEN
          Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'  lv2_object_id := p_rec.object_id;' || chr(10) || chr(10));
        ELSE
         Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'  lv2_object_id := NULL;' || chr(10) || chr(10));
        END IF;


     END IF;


     FOR j IN 1..l_attrlist.COUNT LOOP

      IF Nvl(l_attrlist(j).disabled_ind,'N') = 'N'  AND  l_attrlist(j).db_mapping_type IN ('ATTRIBUTE','COLUMN') AND  Nvl(l_attrlist(j).report_only_ind,'N') = 'N' THEN

         IF l_attrlist(j).data_type = 'DATE' THEN

            Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'  IF nvl(to_char(p_rec.'||l_attrlist(j).attribute_name||',''dd.mm.yyyy hh24:mi:ss''),''?NULL?'') <> nvl(to_char(p_jrec.'||l_attrlist(j).attribute_name||',''dd.mm.yyyy hh24:mi:ss''),''?NULL?'') THEN' || chr(10) || chr(10));

         ELSIF l_attrlist(j).data_type <> 'STRING' AND l_attrlist(j).data_type <> 'TEXT' THEN

            Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'  IF nvl(to_char(p_rec.'||l_attrlist(j).attribute_name||'),''?NULL?'') <> nvl(to_char(p_jrec.'||l_attrlist(j).attribute_name||'),''?NULL?'') THEN' || chr(10) || chr(10));

         ELSE

            Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'  IF nvl(p_rec.'||l_attrlist(j).attribute_name||',''?NULL?'') <> nvl(p_jrec.'||l_attrlist(j).attribute_name||',''?NULL?'') THEN' || chr(10) || chr(10));

         END IF;


         Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'    ecdp_change_logging.AddClassChanges('''||p_class_name||''',lv2_object_id,lv2_id,'''||l_attrlist(j).attribute_name||''',' || CHR(10));
         Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'      p_jrec.'||l_attrlist(j).attribute_name||', p_rec.'||l_attrlist(j).attribute_name||',' ||  chr(10));
         Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'      p_rec.last_updated_by,p_rec.last_updated_date,p_rec.rev_no, p_rec.rev_text, p_rec.rec_id);' || chr(10) || chr(10));
         Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'  END IF;' || chr(10) || chr(10));

      END IF;

     END LOOP;

     Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'  END compareAttributes;' || chr(10) || chr(10));



     ------------------------------------------------------------------------------------------
     -- AddNewRowAttributes
     -------------------------------------------------------------------------------------------

     Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'PROCEDURE AddNewRowAttributes(' || chr(10));
     Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'          p_rec  '||ecdp_classmeta.getclassviewname(p_class_name)||'%ROWTYPE)' || chr(10) || chr(10));
     Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'IS' || chr(10) || chr(10));
     Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'  lv2_id  varchar2(200);' ||  chr(10));
     Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'  lv2_object_id  varchar2(32);' || chr(10) || chr(10));

     Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'BEGIN' || chr(10) || chr(10));

--     Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'  lv2_id := EcDp_Task_detail.RecIDDetailDescription('''||p_class_name||''',p_Rec.rec_id);' || chr(10) || chr(10));
     IF lr_class_cnfg.class_type = 'OBJECT' THEN

       Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'  lv2_id := p_rec.NAME||'' ''||to_char(p_rec.daytime,''dd.mm.yyyy hh24:mi'');' || CHR(10));
       Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'  lv2_object_id := p_rec.OBJECT_ID;' || chr(10) || chr(10));

     ELSE

       lv2_key := NULL;
       IF lr_class_cnfg.owner_class_name IS NULL THEN
         has_object_id := FALSE;
       ELSE
         has_object_id := TRUE;
       END IF;


       FOR i IN  1..l_keylist.COUNT LOOP
         IF lv2_key IS NULL THEN
           lv2_key := lv2_key || 'p_rec.'||l_keylist(i).attribute_name;
         ELSE
           lv2_key := lv2_key || '||'' ''||p_rec.'||l_keylist(i).attribute_name;
         END IF;

         IF UPPER(l_keylist(i).attribute_name) = 'OBJECT_ID' THEN
           has_object_id := TRUE;
         END IF;

       END LOOP;

       Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'  IF p_Rec.rec_id is not null THEN' || chr(10) );
       Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'    lv2_id := EcDp_Task_detail.RecIDDetailDescription('''||p_class_name||''',p_Rec.rec_id);' || chr(10) );
       Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'  ELSE' || chr(10) );
       Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'    lv2_id := '||Nvl(lv2_key,'NULL')||';' || chr(10) );
       Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'  END IF;' || chr(10)|| chr(10));

        IF has_object_id THEN
          Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'  lv2_object_id := p_rec.object_id;' || chr(10) || chr(10));
        ELSE
         Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'  lv2_object_id := NULL;' || chr(10) || chr(10));
        END IF;


     END IF;

     FOR j IN 1..l_attrlist.COUNT LOOP

      IF Nvl(l_attrlist(j).disabled_ind,'N') = 'N'  AND  l_attrlist(j).db_mapping_type IN ('ATTRIBUTE','COLUMN') AND  Nvl(l_attrlist(j).report_only_ind,'N') = 'N' THEN

         Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'    ecdp_change_logging.AddClassChanges('''||p_class_name||''',lv2_object_id, lv2_id,'''||l_attrlist(j).attribute_name||''',' || CHR(10));
         Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'      ''New Row'', p_rec.'||l_attrlist(j).attribute_name||',' ||  chr(10));
         Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'      p_rec.created_by,p_rec.created_date,p_rec.rev_no,p_rec.rev_text, p_rec.rec_id);' || chr(10) || chr(10));

      END IF;

     END LOOP;

     Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'  END AddNewRowAttributes;' || chr(10) || chr(10));


     ------------------------------------------------------------------------------------------
     -- AddDelRowAttributes
     -------------------------------------------------------------------------------------------

     Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'PROCEDURE AddDelRowAttributes(' || chr(10));
     Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'          p_rec  '||ecdp_classmeta.getclassviewname(p_class_name)||'_JN%ROWTYPE)' || chr(10) || chr(10));
     Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'IS' || chr(10) || chr(10));
     Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'  lv2_id  varchar2(200);' ||  chr(10));
     Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'  lv2_object_id  varchar2(32);' || chr(10) || chr(10));

     Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'BEGIN' || chr(10) || chr(10));

     IF lr_class_cnfg.class_type = 'OBJECT' THEN

       Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'  lv2_id := p_rec.NAME||'' ''||to_char(p_rec.daytime,''dd.mm.yyyy hh24:mi'');' || CHR(10));
       Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'  lv2_object_id := p_rec.OBJECT_ID;' || chr(10) || chr(10));

     ELSE

       lv2_key := NULL;
       IF lr_class_cnfg.owner_class_name IS NULL THEN
         has_object_id := FALSE;
       ELSE
         has_object_id := TRUE;
       END IF;


       FOR i IN  1..l_keylist.COUNT LOOP
         IF lv2_key IS NULL THEN
           lv2_key := lv2_key || 'p_rec.'||l_keylist(i).attribute_name;
         ELSE
           lv2_key := lv2_key || '||'' ''||p_rec.'||l_keylist(i).attribute_name;
         END IF;

         IF UPPER(l_keylist(i).attribute_name) = 'OBJECT_ID' THEN
           has_object_id := TRUE;
         END IF;

       END LOOP;

       Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'  IF p_Rec.rec_id is not null THEN' || chr(10) );
       Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'    lv2_id := EcDp_Task_detail.RecIDDetailDescription('''||p_class_name||''',p_Rec.rec_id);' || chr(10) );
       Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'  ELSE' || chr(10) );
       Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'    lv2_id := '||Nvl(lv2_key,'NULL')||';' || chr(10) );
       Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'  END IF;' || chr(10)|| chr(10));

        IF has_object_id THEN
          Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'  lv2_object_id := p_rec.object_id;' || chr(10) || chr(10));
        ELSE
         Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'  lv2_object_id := NULL;' || chr(10) || chr(10));
        END IF;


     END IF;

     FOR j IN 1..l_attrlist.COUNT LOOP

      IF Nvl(l_attrlist(j).disabled_ind,'N') = 'N'  AND  l_attrlist(j).db_mapping_type IN ('ATTRIBUTE','COLUMN') AND  Nvl(l_attrlist(j).report_only_ind,'N') = 'N' THEN

         Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'    ecdp_change_logging.AddClassChanges('''||p_class_name||''',lv2_object_id, lv2_id,'''||l_attrlist(j).attribute_name||''',' || CHR(10));
         Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'      p_rec.'||l_attrlist(j).attribute_name||',''Deleted Row'','  ||  chr(10));
         Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'      p_rec.last_updated_by,p_rec.last_updated_date,p_rec.rev_no,p_rec.rev_text, p_rec.rec_id);' || chr(10) || chr(10));

      END IF;

     END LOOP;

     Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'  END AddDelRowAttributes;' || chr(10) || chr(10));





     ------------------------------------------------------------------------------------------
     -- AddNewJNRowAttributes
     -------------------------------------------------------------------------------------------

     Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'PROCEDURE AddNewJNRowAttributes(' || chr(10));
     Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'          p_rec  '||ecdp_classmeta.getclassviewname(p_class_name)||'_JN%ROWTYPE)' || chr(10) || chr(10));
     Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'IS' || chr(10) || chr(10));
     Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'  lv2_id  varchar2(200);' || chr(10) );
     Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'  lv2_object_id  varchar2(32);' || chr(10) || chr(10));

     Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'BEGIN' || chr(10) || chr(10));

--     Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'  lv2_id := EcDp_Task_detail.RecIDDetailDescription('''||p_class_name||''',p_Rec.rec_id);' || chr(10) || chr(10));
     IF lr_class_cnfg.class_type = 'OBJECT' THEN

       Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'  lv2_id := p_rec.NAME||'' ''||to_char(p_rec.daytime,''dd.mm.yyyy hh24:mi'');' || chr(10) || chr(10));
       Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'  lv2_object_id := p_rec.OBJECT_ID;' || chr(10) || chr(10));

     ELSE

       lv2_key := NULL;
       IF lr_class_cnfg.owner_class_name IS NULL THEN
         has_object_id := FALSE;
       ELSE
         has_object_id := TRUE;
       END IF;

       FOR i IN  1..l_keylist.COUNT LOOP
         IF lv2_key IS NULL THEN
           lv2_key := lv2_key || 'p_rec.'||l_keylist(i).attribute_name;
         ELSE
           lv2_key := lv2_key || '||'' ''||p_rec.'||l_keylist(i).attribute_name;
         END IF;

         IF UPPER(l_keylist(i).attribute_name) = 'OBJECT_ID' THEN
           has_object_id := TRUE;
         END IF;

       END LOOP;

       Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'  IF p_Rec.rec_id is not null THEN' || chr(10) );
       Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'    lv2_id := EcDp_Task_detail.RecIDDetailDescription('''||p_class_name||''',p_Rec.rec_id);' || chr(10) );
       Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'  ELSE' || chr(10) );
       Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'    lv2_id := '||Nvl(lv2_key,'NULL')||';' || chr(10) );
       Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'  END IF;' || chr(10)|| chr(10));

        IF has_object_id THEN
          Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'  lv2_object_id := p_rec.object_id;' || chr(10) || chr(10));
        ELSE
         Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'  lv2_object_id := NULL;' || chr(10) || chr(10));
        END IF;

     END IF;


     FOR j IN 1..l_attrlist.COUNT LOOP

      IF Nvl(l_attrlist(j).disabled_ind,'N') = 'N'  AND  l_attrlist(j).db_mapping_type IN ('ATTRIBUTE','COLUMN') AND  Nvl(l_attrlist(j).report_only_ind,'N') = 'N' THEN

         Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'    ecdp_change_logging.AddClassChanges('''||p_class_name||''',lv2_object_id,lv2_id,'''||l_attrlist(j).attribute_name||''',' || CHR(10));
         Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'      ''New Row'', p_rec.'||l_attrlist(j).attribute_name||',' ||  chr(10));
         Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'      p_rec.created_by,p_rec.created_date,p_rec.rev_no, p_rec.rev_text, p_rec.rec_id);' || chr(10) || chr(10));

      END IF;

     END LOOP;

     Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'  END AddNewJNRowAttributes;' || chr(10) || chr(10));



     ------------------------------------------------------------------------------------------
     -- compareJNAttributes
     -------------------------------------------------------------------------------------------

     Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'PROCEDURE compareJNAttributes(' || chr(10));
     Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'          p_n_rec  '||ecdp_classmeta.getclassviewname(p_class_name)||'_JN%ROWTYPE' || chr(10));
     Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'         ,p_o_rec  '||ecdp_classmeta.getclassviewname(p_class_name)||'_JN%ROWTYPE)' || chr(10) || chr(10));
     Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'IS' || chr(10) || chr(10));
     Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'  lv2_id  varchar2(200);' || chr(10) || chr(10));
     Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'  lv2_object_id  varchar2(32);' || chr(10) || chr(10));

     Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'BEGIN' || chr(10) || chr(10));


     IF lr_class_cnfg.class_type = 'OBJECT' THEN

       Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'  lv2_id := p_n_rec.NAME||'' ''||to_char(p_n_rec.daytime,''dd.mm.yyyy hh24:mi'');' ||  chr(10));
       Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'  lv2_object_id := p_n_rec.OBJECT_ID;' || chr(10) || chr(10));

     ELSE

       lv2_key := NULL;
       IF lr_class_cnfg.owner_class_name IS NULL THEN
         has_object_id := FALSE;
       ELSE
         has_object_id := TRUE;
       END IF;

       FOR i IN  1..l_keylist.COUNT LOOP
         IF lv2_key IS NULL THEN
           lv2_key := lv2_key || 'p_n_rec.'||l_keylist(i).attribute_name;
         ELSE
           lv2_key := lv2_key || '||'' ''||p_n_rec.'||l_keylist(i).attribute_name;
         END IF;

         IF UPPER(l_keylist(i).attribute_name) = 'OBJECT_ID' THEN
           has_object_id := TRUE;
         END IF;


       END LOOP;

       Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'  IF p_n_Rec.rec_id is not null THEN' || chr(10) );
       Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'    lv2_id := EcDp_Task_detail.RecIDDetailDescription('''||p_class_name||''',p_n_Rec.rec_id);' || chr(10) );
       Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'  ELSE' || chr(10) );
       Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'    lv2_id := '||Nvl(lv2_key,'NULL')||';' || chr(10) );
       Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'  END IF;' || chr(10)|| chr(10));

        IF has_object_id THEN
          Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'  lv2_object_id := p_n_rec.object_id;' || chr(10) || chr(10));
        ELSE
         Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'  lv2_object_id := NULL;' || chr(10) || chr(10));
        END IF;


     END IF;

--------

--------


     FOR j IN 1..l_attrlist.COUNT LOOP

      IF Nvl(l_attrlist(j).disabled_ind,'N') = 'N'  AND  l_attrlist(j).db_mapping_type IN ('ATTRIBUTE','COLUMN') AND  Nvl(l_attrlist(j).report_only_ind,'N') = 'N' THEN

         IF l_attrlist(j).data_type = 'DATE' THEN

            Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'  IF nvl(to_char(p_n_rec.'||l_attrlist(j).attribute_name||',''dd.mm.yyyy hh24:mi:ss''),''?NULL?'') <> nvl(to_char(p_o_rec.'||l_attrlist(j).attribute_name||',''dd.mm.yyyy hh24:mi:ss''),''?NULL?'') THEN' || chr(10) || chr(10));

         ELSIF l_attrlist(j).data_type <> 'STRING' AND l_attrlist(j).data_type <> 'TEXT' THEN

            Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'  IF nvl(to_char(p_n_rec.'||l_attrlist(j).attribute_name||'),''?NULL?'') <> nvl(to_char(p_o_rec.'||l_attrlist(j).attribute_name||'),''?NULL?'') THEN' || chr(10) || chr(10));

         ELSE

            Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'  IF nvl(p_n_rec.'||l_attrlist(j).attribute_name||',''?NULL?'') <> nvl(p_o_rec.'||l_attrlist(j).attribute_name||',''?NULL?'') THEN' || chr(10) || chr(10));

         END IF;


         Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'    ecdp_change_logging.AddClassChanges('''||p_class_name||''',lv2_object_id, lv2_id,'''||l_attrlist(j).attribute_name||''',' || CHR(10));
         Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'      p_o_rec.'||l_attrlist(j).attribute_name||', p_n_rec.'||l_attrlist(j).attribute_name||',' ||  chr(10));
         Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'      p_n_rec.last_updated_by,p_n_rec.last_updated_date, p_n_rec.rev_no, p_n_rec.rev_text, p_n_rec.rec_id);' || chr(10) || chr(10));
         Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'  END IF;' || chr(10) || chr(10));

      END IF;

     END LOOP;

     Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'  END compareJNAttributes;' || chr(10) || chr(10));

   END IF;

   ------------------------------------------------------------------------------------------
   -- findClassChanges
   -------------------------------------------------------------------------------------------

   Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'PROCEDURE findClassChanges(' || chr(10));
   Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'          p_from_date  DATE' || chr(10));
   Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'         ,p_to_date    DATE' || CHR(10));
   Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'         ,p_user_id    VARCHAR2)' || chr(10) || chr(10));
   Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'IS' || chr(10) || chr(10));

   IF lv2_hasJnView = 'Y' AND lv2_jnCondition IS NOT NULL
   AND ec_ctrl_system_attribute.attribute_text(Ecdp_Timestamp.getCurrentSysdate,'MASTER_DATA_REPORT_ON','<=') = 'Y' THEN


     Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'CURSOR c_'||p_class_name ||' IS '||  chr(10));
     Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'select * FROM '||ecdp_classmeta.getclassviewname(p_class_name) ||  chr(10));
     Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'WHERE Nvl(last_updated_date, created_date) >= nvl(p_from_date,nvl(last_updated_date, created_date)) ' ||  chr(10));
     Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'AND   Nvl(last_updated_date, created_date) < nvl(p_to_date,nvl(last_updated_date, created_date)+1) ' ||  chr(10));
     Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'AND Nvl(last_updated_by,created_by) = Nvl(p_user_id,Nvl(last_updated_by,created_by));' ||  chr(10) ||  chr(10));

     Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'CURSOR c_'||p_class_name ||'_jnk('||  chr(10));

     -- For object classes we know that the key should be OBJECT_ID and DAYTIME (and that this is not always set, so overruling any wrong config here)
     IF lr_class_cnfg.class_type = 'OBJECT' THEN

        Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'p_object_id VARCHAR2,'||  chr(10));
        Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'p_daytime   DATE,'||  chr(10));

     ELSE
       FOR i IN  1..l_keylist.COUNT LOOP
         Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'p_'||l_keylist(i).attribute_name|| ' '||l_keylist(i).data_type||','||  chr(10));
       END LOOP;
     END IF;


     Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'p_last_updated_date DATE)' || chr(10));
     Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'IS' || chr(10));
     Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'select * FROM  (' || chr(10));
     Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'select * FROM '||ecdp_classmeta.getclassviewname(p_class_name) ||'_JN' || chr(10));
     Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'WHERE JN_DATETIME <= p_last_updated_date ' ||  chr(10));

     IF lr_class_cnfg.class_type = 'OBJECT' THEN

        Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,' AND object_id = p_object_id'||  chr(10));
        Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,' AND daytime  = p_daytime'||  chr(10));

     ELSE

       FOR i IN  1..l_keylist.COUNT LOOP
         Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,' AND ' || l_keylist(i).attribute_name ||' = p_'||l_keylist(i).attribute_name||  chr(10));

       END LOOP;
     END IF;

     Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'AND nvl(last_updated_date,created_date) < p_from_date' ||  chr(10) ||  chr(10));
     Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'ORDER BY JN_DATETIME DESC);' ||  chr(10) ||  chr(10));

     Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'CURSOR c_'||p_class_name ||'_jn IS '||  chr(10));
     Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'select * FROM '||ecdp_classmeta.getclassviewname(p_class_name) ||'_JN' ||  chr(10));

     -- Note even if the user have given a p_from_date and a p_to_date, we will process on JN_DATETIME in descending order
     -- and so we exclude entries after p_to_date, but need to go 1 step before the from date, there not using p_from_date in the where clause
     -- must be handled i the loop the we stop after finding the row before the p_from_date.

     Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,' WHERE nvl(last_updated_date,created_date) < nvl(p_to_date,nvl(last_updated_date,created_date)-1) ' ||  chr(10));
     Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,' AND nvl(last_updated_date,created_date) >= nvl(p_from_date,nvl(last_updated_date,created_date)) ' ||  chr(10));

     -- Trying to optimize a bit here, we are using only 1 cursor loop, so need to sort first on row key , then on JN_DAYTIME desc
     -- For object classes we know that the key should be OBJECT_ID and DAYTIME (and that this is not always set, so overruling any wrong config here)
     IF lr_class_cnfg.class_type = 'OBJECT' THEN

        Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'ORDER BY object_id, daytime, JN_DATETIME DESC;'||  chr(10)||  chr(10));

     ELSE
       Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'ORDER BY'||  chr(10));

       FOR i IN  1..l_keylist.COUNT LOOP
         Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'       '||l_keylist(i).attribute_name|| ', '||  chr(10));
       END LOOP;

        Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'         JN_DATETIME DESC;'||  chr(10)||  chr(10));

     END IF;



     Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,' n_row  '||ecdp_classmeta.getclassviewname(p_class_name)||'_JN%ROWTYPE; ' ||  CHR(10));
     Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,' o_row  '||ecdp_classmeta.getclassviewname(p_class_name)||'_JN%ROWTYPE; ' ||  chr(10));
     Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,' lv2_id varchar2(200);' ||  chr(10) ||  chr(10));

     Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'BEGIN' || chr(10) || chr(10));

     Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'  FOR curRec IN c_'||p_class_name||' LOOP' || chr(10) || chr(10));

     Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'    IF CurREC.last_updated_date is NOT NULL THEN '||chr(10));

     Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'      FOR curJour IN c_'||p_class_name||'_jnk( '||  chr(10));

     IF lr_class_cnfg.class_type = 'OBJECT' THEN

        Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'                    CurREC.object_id, CurREC.daytime,'|| chr(10));

     ELSE

       FOR i IN  1..l_keylist.COUNT LOOP
         Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'                   CurREC.'||l_keylist(i).attribute_name|| ', '||  chr(10));

       END LOOP;

     END IF;

     Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'                                          CurREC.last_updated_date)'|| ' '||  chr(10));

     Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'       LOOP' || chr(10) || chr(10));

     Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'          CompareAttributes(CurRec,curJour);' || CHR(10));
     Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'          EXIT;' || chr(10) || chr(10));

     Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'       END LOOP;' || chr(10) || chr(10));

     Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'      ELSIF curRec.created_date >= p_from_date THEN' || chr(10) || chr(10));
     Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'          addNewRowAttributes(curREC);' || CHR(10)|| CHR(10));

     Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'      END IF;' || chr(10) || chr(10));

     Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'  END LOOP;' || chr(10) || chr(10));

     Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'    n_row := NULL;' || chr(10) || chr(10));

     Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'  FOR curJourRec IN c_'||p_class_name||'_JN LOOP' || chr(10) || chr(10));

     Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'    o_row := n_row;'||chr(10));
     Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'    n_row := curJourRec;'||chr(10)||CHR(10));

     Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'    IF n_row.JN_OPERATION = ''DEL'' THEN'||chr(10)||CHR(10));

     Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'      addDelRowAttributes(n_row);'||CHR(10));
     Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'      n_row := NULL;' || chr(10) || chr(10));

     Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'    ELSE'||chr(10)||CHR(10));


     Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'      If o_row.jn_datetime is not null THEN -- Don''t go in until we have 2 rows to compare'||  chr(10)||CHR(10));

     Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'          -- Find out if the rows have the same key,'|| chr(10));

     IF lr_class_cnfg.class_type = 'OBJECT' THEN

        Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'       IF o_row.object_id = n_row.object_id and o_row.daytime = n_row.daytime THEN'|| chr(10));

     ELSE

        ln_count := 0;

       FOR i IN  1..l_keylist.COUNT LOOP

         IF ln_count = 0 THEN

           Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'       IF o_row.'||l_keylist(i).attribute_name|| ' = n_row.'||l_keylist(i).attribute_name);
           ln_count := 1;

         ELSE

           Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'        and  o_row.'||l_keylist(i).attribute_name|| ' = n_row.'||l_keylist(i).attribute_name);

         END IF;

       END LOOP;

        IF ln_count > 0 THEN
          Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,' THEN'|| chr(10));
        ELSE
          Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,' IF FALSE THEN'|| chr(10));
        END IF;
     END IF;


     Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'            compareJNAttributes(o_row,n_row);' || chr(10) || chr(10));


     Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'        ELSE -- Key has changed, must complete processing of old key' || chr(10) || chr(10));

     Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'             -- First check if the old row is the insert, then we don''t need TO look further back' || chr(10) || chr(10));

     Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'          IF o_row.last_updated_date is null THEN ' || chr(10) || chr(10));

     Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'            addNewJNRowAttributes(o_row);' || CHR(10)|| CHR(10));

     Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'          ELSE' || CHR(10)|| CHR(10));

     Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'            --Need to find the previous row for entry and there should be one!' || CHR(10)|| CHR(10));

     Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'            FOR curJour2 IN c_'||p_class_name||'_jnk( '||  chr(10));

     IF lr_class_cnfg.class_type = 'OBJECT' THEN

        Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'                      o_row.object_id, o_row.daytime,'|| chr(10));

     ELSE

       FOR i IN  1..l_keylist.COUNT LOOP
         Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'                     o_row.'||l_keylist(i).attribute_name|| ', '||  chr(10));

       END LOOP;

     END IF;

     Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'                         o_row.last_updated_date)'|| ' '||  chr(10));

     Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'           LOOP' || chr(10) || chr(10));

     Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'              CompareJNAttributes(o_row,curJour2);' || CHR(10));
     Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'              EXIT;' || chr(10) || chr(10));

     Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'           END LOOP;' || chr(10) || chr(10));


     Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'          END IF;' || chr(10) || chr(10));

     Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'        END IF;' || chr(10) || chr(10));

     Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'      END IF;' || chr(10) || chr(10));

     Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'   END IF;' || chr(10) || chr(10));

     Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'  END LOOP;' || chr(10) || chr(10));

     Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'  -- Complete processing of the last key' ||  chr(10));
     Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'  -- First check if row is the insert , then we don''t need TO look further back' ||  chr(10)||  chr(10));

     Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'  IF n_row.last_updated_date is null and n_row.created_date is not null THEN' || chr(10) || chr(10));

     Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'      addNewJNRowAttributes(n_row);' || CHR(10)|| CHR(10));

     Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'  ELSIF n_row.created_date is not null THEN' || chr(10) || chr(10));

     Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'    --Need to find the previous row for entry and there should be one!' || CHR(10)|| CHR(10));

     Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'    FOR curJour3 IN c_'||p_class_name||'_jnk( '||  chr(10));

     IF lr_class_cnfg.class_type = 'OBJECT' THEN

        Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'             o_row.object_id, o_row.daytime,'|| chr(10));

     ELSE

       FOR i IN  1..l_keylist.COUNT LOOP
         Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'            o_row.'||l_keylist(i).attribute_name|| ', '||  chr(10));

       END LOOP;

     END IF;

     Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'                  o_row.last_updated_date)'|| ' '||  chr(10));

     Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'    LOOP' || chr(10) || chr(10));

     Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'       CompareJNAttributes(o_row,curJour3);' || CHR(10));
     Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'       EXIT;' || chr(10) || chr(10));

     Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'    END LOOP;' || chr(10) || chr(10));


     Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'  END IF;' || chr(10) || chr(10));

   ELSE

     Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'BEGIN' || chr(10) || chr(10));
     Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'  NULL;' || chr(10) || chr(10));


   END IF;



   Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'END;' || chr(10) || chr(10));


   ------------------------------------------------------------------------------------------
   -- changedColumns
   -------------------------------------------------------------------------------------------
  Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'FUNCTION changedColumns(' || chr(10));
  Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'          p_rec_id varchar2) return varchar2' || chr(10) || chr(10));


  Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'  IS' || chr(10) || chr(10));


  IF lr_class_cnfg.class_type = 'OBJECT' THEN
     lv2_maintable_name := lr_class_cnfg.DB_OBJECT_NAME;
     lv2_table_name := lr_class_cnfg.DB_OBJECT_ATTRIBUTE;
  ELSE
     lv2_table_name := lr_class_cnfg.DB_OBJECT_NAME;
  END IF;

  IF lv2_hasJnView = 'Y' and ecdp_classmeta.HasTableColumn(lv2_table_name, 'REC_ID') THEN

    IF lr_class_cnfg.class_type = 'OBJECT' THEN

      Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'  n_'||lv2_maintable_name||' ' || lv2_maintable_name ||'%rowtype;' || chr(10));
      Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'  o_'||lv2_maintable_name||' ' || lv2_maintable_name ||'_jn%rowtype;' || chr(10)|| chr(10));


      Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'  cursor c_'||substr(lv2_maintable_name,1,25)||'_jn is ' || chr(10));
      Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'  select o.*' || chr(10));
      Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'  from '||lv2_maintable_name||'_jn o,'||lv2_table_name ||' oa ' || chr(10));
      Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'  where oa.rec_id = p_rec_id ' || chr(10));
      Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'  and   o.object_id = oa.object_id' || chr(10));
      Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'  order by jn_datetime desc; ' || chr(10)|| chr(10));

      Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'  cursor c_'||lv2_maintable_name||' is ' || chr(10));
      Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'  select o.*' || chr(10));
      Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'  from '||lv2_maintable_name||' o,'||lv2_table_name ||' oa ' || chr(10));
      Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'  where oa.rec_id = p_rec_id ' || chr(10));
      Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'  and   o.object_id = oa.object_id' || chr(10));
      Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'  order by o.rev_no; -- Not really needed but just to make it deterministic in case of duplicates' || chr(10) || chr(10));



    END IF;


    Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'  n_'||lv2_table_name||' ' || lv2_table_name ||'%rowtype;' || chr(10));
    Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'  o_'||lv2_table_name||' ' || lv2_table_name ||'_jn%rowtype;' || chr(10)|| chr(10));

    Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'  cursor c_'||substr(lv2_table_name,1,25)||'_jn is ' || chr(10));
    Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'  select *' || chr(10));
    Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'  from '||lv2_table_name||'_jn' || chr(10));
    Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'  where rec_id = p_rec_id ' || chr(10));
    Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'  and  nvl(approval_state,''O'') = ''O'' ' || chr(10));
    Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'  order by jn_datetime desc; ' || chr(10)|| chr(10));

    Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'  cursor c_'||lv2_table_name||' is ' || chr(10));
    Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'  select *' || chr(10));
    Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'  from '||lv2_table_name|| chr(10));
    Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'  where rec_id = p_rec_id ' || chr(10));
    Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'  order by rev_no; -- Not really needed but just to make it deterministic in case of duplicates' || chr(10) || chr(10));

    Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'  lv2_changed_columns varchar2(4000);' || chr(10));
    Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'  ln_count number;' || chr(10));




    Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'BEGIN' || chr(10) || chr(10));

    IF lr_class_cnfg.class_type = 'OBJECT' THEN

      Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'  FOR curJN in c_'||substr(lv2_maintable_name,1,25)||'_jn LOOP' || chr(10) || chr(10));

      Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'    o_'||lv2_maintable_name||' :=  curJN;' || chr(10) || chr(10));

      Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'  END LOOP;' || chr(10) || chr(10));


      Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'  FOR curRow in c_'||lv2_maintable_name||' LOOP' || chr(10) || chr(10));

      Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'    n_'||lv2_maintable_name||' :=  curRow;' || chr(10) || chr(10));

      Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'  END LOOP;' || chr(10) || chr(10));

      Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'  ln_count := 0;' || chr(10));
      Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'  lv2_changed_columns := '''';' || chr(10) || chr(10));

      Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'  IF o_'||lv2_maintable_name||'.object_id is not NULL and n_'||lv2_maintable_name||'.object_id is not null THEN' || chr(10) || chr(10));

      ln_count := 0;

      FOR j IN 1..l_attrlist.COUNT LOOP

        IF ( lr_class_cnfg.class_type = 'OBJECT' AND l_attrlist(j).db_mapping_type = 'COLUMN')
        AND TableColumnExistAndSupported(lv2_maintable_name, l_attrlist(j).db_sql_syntax) = 'Y' THEN

           IF l_attrlist(j).data_type = 'STRING' THEN
             Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'    IF nvl(o_'||lv2_maintable_name||'.'||l_attrlist(j).db_sql_syntax||',''?NULL?'') <> nvl(n_'||lv2_maintable_name||'.'||l_attrlist(j).db_sql_syntax||',''?NULL?'') THEN' || chr(10) || chr(10));
           ELSIF l_attrlist(j).data_type = 'DATE' THEN
             Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'    IF nvl(o_'||lv2_maintable_name||'.'||l_attrlist(j).db_sql_syntax||',to_date(''01.01.2200'',''dd.mm.yyyy'')) <> nvl(n_'||lv2_maintable_name||'.'||l_attrlist(j).db_sql_syntax||',to_date(''01.01.2200'',''dd.mm.yyyy'')) THEN' || chr(10) || chr(10));
           ELSE
             Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'    IF nvl(o_'||lv2_maintable_name||'.'||l_attrlist(j).db_sql_syntax||',-10000) <> nvl(n_'||lv2_maintable_name||'.'||l_attrlist(j).db_sql_syntax||',-10000) THEN' || chr(10) || chr(10));
           END IF;

             Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'      IF ln_count = 0 THEN' || chr(10));
             Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'        lv2_changed_columns := '''||EcDp_ClassMeta_Cnfg.getLabel(p_class_name,l_attrlist(j).Attribute_name)||''';' || chr(10) || chr(10));
             Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'      ELSE' || chr(10));
             Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'        lv2_changed_columns := lv2_changed_columns || '', '||EcDp_ClassMeta_Cnfg.getLabel(p_class_name,l_attrlist(j).Attribute_name)||''';' || chr(10) || chr(10));
             Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'      END IF;' || chr(10)|| chr(10));
             Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'      ln_count := ln_count +1;' || chr(10)|| chr(10));


           Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'    END IF;' || chr(10) || chr(10));

           ln_count := ln_count + 1;

        END IF;


      END LOOP;

      Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'  END IF; -- old and new row is not null' || chr(10) || chr(10));

    END IF;

    Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'  FOR curJN in c_'||substr(lv2_table_name,1,25)||'_jn LOOP' || chr(10) || chr(10));

    Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'    o_'||lv2_table_name||' :=  curJN;' || chr(10) || chr(10));

    Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'  END LOOP;' || chr(10) || chr(10));


    Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'  FOR curRow in c_'||lv2_table_name||' LOOP' || chr(10) || chr(10));

    Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'    n_'||lv2_table_name||' :=  curRow;' || chr(10) || chr(10));

    Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'  END LOOP;' || chr(10) || chr(10));

    Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'  ln_count := 0;' || chr(10)|| chr(10));


    Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'  IF o_'||lv2_table_name||'.rec_id is not NULL and n_'||lv2_table_name||'.rec_id is not null THEN' || chr(10) || chr(10));

    ln_count := 0;

    FOR j IN 1..l_attrlist.COUNT LOOP

      IF ( ( lr_class_cnfg.class_type = 'OBJECT' AND l_attrlist(j).db_mapping_type = 'ATTRIBUTE')
          OR (  lr_class_cnfg.class_type <> 'OBJECT' AND l_attrlist(j).db_mapping_type = 'COLUMN' ) )
      AND TableColumnExistAndSupported(lv2_table_name, l_attrlist(j).db_sql_syntax) = 'Y' THEN

         IF l_attrlist(j).data_type = 'STRING' THEN
           Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'    IF nvl(o_'||lv2_table_name||'.'||l_attrlist(j).db_sql_syntax||',''?NULL?'') <> nvl(n_'||lv2_table_name||'.'||l_attrlist(j).db_sql_syntax||',''?NULL?'') THEN' || chr(10) || chr(10));
         ELSIF l_attrlist(j).data_type = 'DATE' THEN
           Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'    IF nvl(o_'||lv2_table_name||'.'||l_attrlist(j).db_sql_syntax||',to_date(''01.01.2200'',''dd.mm.yyyy'')) <> nvl(n_'||lv2_table_name||'.'||l_attrlist(j).db_sql_syntax||',to_date(''01.01.2200'',''dd.mm.yyyy'')) THEN' || chr(10) || chr(10));
         ELSE
           Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'    IF nvl(o_'||lv2_table_name||'.'||l_attrlist(j).db_sql_syntax||',-10000) <> nvl(n_'||lv2_table_name||'.'||l_attrlist(j).db_sql_syntax||',-10000) THEN' || chr(10) || chr(10));
         END IF;

           Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'      IF ln_count = 0 THEN' || chr(10));
           Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'        lv2_changed_columns := '''||EcDp_ClassMeta_Cnfg.getLabel(p_class_name,l_attrlist(j).Attribute_name)||''';' || chr(10) || chr(10));
           Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'      ELSE' || chr(10));
           Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'        lv2_changed_columns := lv2_changed_columns || '', '||EcDp_ClassMeta_Cnfg.getLabel(p_class_name,l_attrlist(j).Attribute_name)||''';' || chr(10) || chr(10));
           Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'      END IF;' || chr(10)|| chr(10));
           Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'      ln_count := ln_count +1;' || chr(10)|| chr(10));


         Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'    END IF;' || chr(10) || chr(10));

         ln_count := ln_count + 1;

      END IF;



    END LOOP;

    IF ln_count = 0 THEN

       Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'  NULL; -- No columns to compare'|| chr(10) || chr(10));

    END IF;



    Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'  END IF; -- old and new row is not null' || chr(10) || chr(10));

    Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'  return lv2_changed_columns;' || chr(10) || chr(10));


    Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'END;' || chr(10) || chr(10));

   ELSE  -- No journal table

    Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'BEGIN' || chr(10) || chr(10));
    Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'  RETURN NULL;' || chr(10) || chr(10));
    Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'END;' || chr(10) || chr(10));


   END IF;


   Ecdp_Dynsql.AddSqlLineNoWrap(body_lines,'END;' || chr(10));


   Ecdp_Dynsql.SafeBuild('EC4E_'||p_class_name,'PACKAGE BODY',body_lines,p_target);

   --ecdp_dynsql.WriteDebugText('EC4E_BUILD','Build package body: EC4EA'||p_class_name, ''DEBUG'' );

END;



PROCEDURE BuildEC4EA_AllPackageBodies(
        p_class_name        VARCHAR2 DEFAULT NULL,
        p_target            VARCHAR2 DEFAULT 'CREATE')

IS



BEGIN

   FOR curClass IN c_class(p_class_name) LOOP

      BuildEC4EA_PackageBody(curClass.class_name,p_target);

   END LOOP;

END;



PROCEDURE BuildEC4EA_Package(
        p_class_name        VARCHAR2 DEFAULT NULL,
        p_target            VARCHAR2 DEFAULT 'CREATE')

IS

BEGIN

   BuildEC4EA_PackageHeader(p_class_name, p_target);
   BuildEC4EA_PackageBody(p_class_name, p_target);

END;



END ecdp_4ea_generate;