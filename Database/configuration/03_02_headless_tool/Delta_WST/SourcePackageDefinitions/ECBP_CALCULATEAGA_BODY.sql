CREATE OR REPLACE PACKAGE BODY EcBp_CalculateAGA IS
/****************************************************************
** Package        :  EcBp_CalculateAGA, body part
**
**
** Modification history:
**
**  Date        Whom      Change description:
** ----------  --------  --------------------------------------
** 07-08-2014  abdulmaw  ECPD-23912: AGA dll needs to be 64 bit. (com.ec.prod.bs.agalib.dll)
** 16-03-2015  abdulmaw  ECPD-30274: Convert unit from R to C
** 15-12-2016  shindani  ECPD-41730: Added procedure calcAga3_TestDevice,function calculateTdevFlowDensity and calculateTdevStdDensity to support AGA3 calculation.
** 21-07-2017  shindani  ECPD-43011: Modified procedure calcAga3,calculateStdDensity,calculateFlowDensity to provide support for AGA8 having calculation Method 1.
** 18-01-2018  shindani  ECPD-48685: Added error handling functionality to calcAga3 procedure for missing and out of range attributes.
** 09-03-2018  shindani  ECPD-51471: Added error handling to calcAga3_TestDevice procedure.
*****************************************************************/

  --AGA8 Detail global variable
  ln_cn_rk_a  NUMBER    := 0.42748;--global constant in RK calculation
  ln_cn_rk_b  NUMBER    := 0.08664;-- global constant in RK calculation
  ln_rk_a  NUMBER;
  ln_rk_b  NUMBER;
  ln_t_old_temp NUMBER;
  ln_B011  NUMBER;
  ln_B111  NUMBER;
  ln_B211  NUMBER;
  ln_C011  NUMBER;
  ln_C111  NUMBER;
  ln_C211  NUMBER;
  ln_bbmix NUMBER;  --second virial coefficient
  ln_ccmix NUMBER;  --third virial coefficient
  ln_b022 constant NUMBER    := -0.144600;
  ln_b122 constant NUMBER    :=  0.740910e-3;
  ln_b222 constant NUMBER    := -0.911950e-6;
  ln_b033 constant NUMBER    := -0.868340;
  ln_b133 constant NUMBER    :=  0.403760e-2;
  ln_b233 constant NUMBER    := -0.516570e-5;
  ln_b044 constant NUMBER    := -0.110596e-2;
  ln_b144 constant NUMBER    :=  0.813385e-4;
  ln_b244 constant NUMBER    := -0.987220e-7;
  ln_b055 constant NUMBER    := -0.130820;
  ln_b155 constant NUMBER    :=  0.602540e-3;
  ln_b255 constant NUMBER    := -0.644300e-6;
  ln_b023 constant NUMBER    := -0.339693;
  ln_b123 constant NUMBER    :=  0.161176e-2;
  ln_b223 constant NUMBER    := -0.204429e-5;
  ln_b014 constant NUMBER    := -0.521280e-1;
  ln_b114 constant NUMBER    :=  0.271570e-3;
  ln_b214 constant NUMBER    := -0.250000e-6;
  ln_b015 constant NUMBER    := -0.687290e-1;
  ln_b115 constant NUMBER    := -0.239381e-5;
  ln_b215 constant NUMBER    :=  0.518195e-6;
  ln_b024 constant NUMBER    :=  0.012;
  ln_c022 constant NUMBER    :=  0.784980e-2;
  ln_c122 constant NUMBER    := -0.398950e-4;
  ln_c222 constant NUMBER    :=  0.611870e-7;
  ln_c033 constant NUMBER    :=  0.205130e-2;
  ln_c133 constant NUMBER    :=  0.348880e-4;
  ln_c233 constant NUMBER    := -0.837030e-7;
  ln_c023 constant NUMBER    :=  0.552066e-2;
  ln_c123 constant NUMBER    := -0.168609e-4;
  ln_c223 constant NUMBER    :=  0.157169e-7;
  ln_c032 constant NUMBER    :=  0.358783e-2;
  ln_c132 constant NUMBER    :=  0.806674e-5;
  ln_c232 constant NUMBER    := -0.325798e-7;
  ln_c044 constant NUMBER    :=  0.1047110e-2;
  ln_c144 constant NUMBER    := -0.364887e-5;
  ln_c244 constant NUMBER    :=  0.467095e-8;
  ln_c015 constant NUMBER    :=  0.736748e-2;
  ln_c115 constant NUMBER    := -0.276578e-4;
  ln_c215 constant NUMBER    :=  0.343051e-7;
  ln_n5   constant NUMBER    := 273.15;
  ln_r    constant NUMBER    := 8.31451e-3;
  ln_MWN2 constant NUMBER    := 28.0135;
  ln_MWCo2	constant NUMBER  := 44.01;
  ln_MWH2 constant NUMBER    := 2.0159;
  ln_MWCo constant NUMBER    := 28.01;
  ln_bb00 constant NUMBER    := -0.425468;
  ln_bb10 constant NUMBER    :=  0.877118e-3;
  ln_bb20 constant NUMBER    := -0.824747e-6;
  ln_bb01 constant NUMBER    :=  0.286500e-2;
  ln_bb11 constant NUMBER    := -0.556281e-5;
  ln_bb21 constant NUMBER    :=  0.431436e-8;
  ln_bb02 constant NUMBER    := -0.462073e-5;
  ln_bb12 constant NUMBER    :=  0.881510e-8;
  ln_bb22 constant NUMBER    := -0.608319e-11;
  ln_PatoKpa constant NUMBER    := 1000;
  ln_mr   NUMBER;
  ln_temp NUMBER;
  --AGA8 Detail global variable
  -- z is referring to compressibility factor
  TYPE t_vn_z_table6 is varray( 21 ) of NUMBER;
  TYPE t_vn_z_t6 is varray( 21 ) of t_vn_z_table6;
  ln_z_di   t_pn_z_array := t_pn_z_array(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0); -- Association parameters in Table 5, pg 24
  ln_z_qi   t_pn_z_array := t_pn_z_array(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0); -- Quadrupole parameter in Table 5, pg 24
  ln_z_hi	  t_pn_z_array := t_pn_z_array(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);  -- High Temperature parameter in Table 5, pg 24
  ln_z_rki	t_pn_z_array := t_pn_z_array(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);-- Size Parameter in Table 5, pg 24
  ln_z_ei   t_pn_z_array := t_pn_z_array(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0); -- Energy Parameter in Table 5, pg 24
  ln_z_wi   t_pn_z_array := t_pn_z_array(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0); -- Orientation Parameter in Table 5, pg 24
  ln_z_cmw  t_pn_z_array := t_pn_z_array(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0); -- Molar Mass in Table 5, pg 24
  ln_z_mi   t_pn_z_array := t_pn_z_array(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0); -- Dipole Parameter in Table 5, pg 24
  ln_z_beij t_vn_z_t6 := t_vn_z_t6( t_vn_z_table6(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0) -- Pg 25, Table 6, Eij column that stores the calculated Binary Interaction values.
                                ,t_vn_z_table6(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
                                ,t_vn_z_table6(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
                                ,t_vn_z_table6(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
                                ,t_vn_z_table6(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
                                ,t_vn_z_table6(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
                                ,t_vn_z_table6(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
   			 		                    ,t_vn_z_table6(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
                                ,t_vn_z_table6(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
                                ,t_vn_z_table6(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
                                ,t_vn_z_table6(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
                                ,t_vn_z_table6(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
                                ,t_vn_z_table6(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
                                ,t_vn_z_table6(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
								                ,t_vn_z_table6(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
                                ,t_vn_z_table6(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
                                ,t_vn_z_table6(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
                                ,t_vn_z_table6(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
                                ,t_vn_z_table6(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
                                ,t_vn_z_table6(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
                                ,t_vn_z_table6(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0));

   ln_z_bkij t_vn_z_t6 := t_vn_z_t6( t_vn_z_table6(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0) -- Pg 25, Table 6, Kij column that stores the calculated Binary Interaction values.
                                ,t_vn_z_table6(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
                                ,t_vn_z_table6(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
                                ,t_vn_z_table6(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
                                ,t_vn_z_table6(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
                                ,t_vn_z_table6(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
                                ,t_vn_z_table6(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
   			 		                    ,t_vn_z_table6(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
                                ,t_vn_z_table6(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
                                ,t_vn_z_table6(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
                                ,t_vn_z_table6(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
                                ,t_vn_z_table6(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
                                ,t_vn_z_table6(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
                                ,t_vn_z_table6(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
								                ,t_vn_z_table6(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
                                ,t_vn_z_table6(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
                                ,t_vn_z_table6(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
                                ,t_vn_z_table6(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
                                ,t_vn_z_table6(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
                                ,t_vn_z_table6(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
                                ,t_vn_z_table6(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0));


   ln_z_bwij t_vn_z_t6 := t_vn_z_t6( t_vn_z_table6(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0) -- Pg 25, Table 6, Gij column that stores the calculated Binary Interaction values.
                                ,t_vn_z_table6(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
                                ,t_vn_z_table6(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
                                ,t_vn_z_table6(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
                                ,t_vn_z_table6(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
                                ,t_vn_z_table6(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
                                ,t_vn_z_table6(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
   			 		                    ,t_vn_z_table6(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
                                ,t_vn_z_table6(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
                                ,t_vn_z_table6(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
                                ,t_vn_z_table6(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
                                ,t_vn_z_table6(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
                                ,t_vn_z_table6(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
                                ,t_vn_z_table6(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
								                ,t_vn_z_table6(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
                                ,t_vn_z_table6(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
                                ,t_vn_z_table6(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
                                ,t_vn_z_table6(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
                                ,t_vn_z_table6(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
                                ,t_vn_z_table6(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
                                ,t_vn_z_table6(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0));

   ln_z_buij t_vn_z_t6 := t_vn_z_t6( t_vn_z_table6(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0) -- Pg 25, Table 6,Uij column that stores the calculated Binary Interaction values.
                                ,t_vn_z_table6(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
                                ,t_vn_z_table6(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
                                ,t_vn_z_table6(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
                                ,t_vn_z_table6(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
                                ,t_vn_z_table6(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
                                ,t_vn_z_table6(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
   			 		                    ,t_vn_z_table6(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
                                ,t_vn_z_table6(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
                                ,t_vn_z_table6(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
                                ,t_vn_z_table6(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
                                ,t_vn_z_table6(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
                                ,t_vn_z_table6(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
                                ,t_vn_z_table6(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
							                	,t_vn_z_table6(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
                                ,t_vn_z_table6(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
                                ,t_vn_z_table6(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
                                ,t_vn_z_table6(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
                                ,t_vn_z_table6(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
                                ,t_vn_z_table6(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
                                ,t_vn_z_table6(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0));

	  ln_z_rkib	 t_pn_z_array := t_pn_z_array(0.4619255,0.4479153,0.4557489,0.5279209,0.5837490,0.3825868
	  			 			   		          ,0.4618263,0.3514916,0.4533894,0.4186954,0.6406937,0.6341423
										            ,0.6738577,0.6798307,0.7175118,0.7525189,0.7849550,0.8152731
										            ,0.8437826,0.3589888,0.4216551);

	  ln_z_eib   t_pn_z_array := t_pn_z_array(151.318300,99.737780,241.960600,244.166700,298.118300,514.015600
	  			 			                ,296.355000,26.957940,105.534800,122.766700,324.068900,337.638900
										            ,365.599900,370.68230,402.636293,427.722630,450.325022,470.840891
										            ,489.558373,2.6101110,119.629900);
	  ln_z_wib   t_pn_z_array := t_pn_z_array(0.000000,0.027815,0.189065,0.079300,0.141239,0.332500,0.088500
	  			 			                ,0.034369,0.038953,0.021000,0.256692,0.281835,0.332267,0.366911
										            ,0.289731,0.337542,0.383381,0.427354,0.469659,0.000000,0.000000);

    ln_z_cmwb  t_pn_z_array := t_pn_z_array(16.0430,28.0135,44.0100,30.0700,44.0970,18.0153,34.0820,2.0159
	  			 			                ,28.0100,31.9988,58.1230,58.1230,72.1500,72.1500,86.1770,100.204
										            ,114.231,128.258,142.285,4.00260,39.9480);
    ln_z_dib   t_pn_z_array := t_pn_z_array(0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);
	  ln_z_qib   t_pn_z_array := t_pn_z_array(0,0,0.69,0,0,1.06775,0.633276,0,0,0,0,0,0,0,0,0,0,0,0,0,0);
    ln_z_hib	 t_pn_z_array := t_pn_z_array(0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0);
    ln_z_mib   t_pn_z_array := t_pn_z_array(0,0,0,0,0,1.5822,0.39,0,0,0,0,0,0,0,0,0,0,0,0,0,0);
 	  -- Table 6:CID=1, pg 25, AGA8
	  ln_z_buijb  t_vn_z_t6 := t_vn_z_t6( t_vn_z_table6(1.000000,0.886106,0.963827,1.000000,0.990877,1.000000,0.736833
	  			  		  	 		                ,1.156390,1.000000,1.000000,1.000000,0.992291,1.000000,1.003670
												                ,1.302576,1.191904,1.205769,1.219634,1.233498,1.000000,1.000000)
	                                      -- Table 6:CID=2, pg 25, AGA8
	  			  		  	 		                ,t_vn_z_table6(1.000000,1.000000,0.835058,0.816431,0.915502,1.000000,0.993476
									                      ,0.408838,1.000000,1.000000,1.000000,0.993556,1.000000,1.000000
												                ,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000)
		                                    -- Table 6:CID=3, pg 25, AGA8
									                      ,t_vn_z_table6(1.000000,1.000000,1.000000,0.969870,1.000000,1.000000,1.045290
									                      ,1.000000,0.900000,1.000000,1.000000,1.000000,1.000000,1.000000
												                ,1.066638,1.077634,1.088178,1.098291,1.108021,1.000000,1.000000)
		                                    -- Table 6:CID=4, pg 25, AGA8
									                      ,t_vn_z_table6(1.000000,1.000000,1.000000,1.000000,1.065173,1.000000,0.971926
									                      ,1.616660,1.000000,1.000000,1.250000,1.250000,1.250000,1.250000
												                ,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000)
		                                    -- Table 6:CID=5, pg 25, AGA8
									                      ,t_vn_z_table6(1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000
									                      ,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000
												                ,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000)
		                                    -- Table 6:CID=6, pg 25, AGA8
									                      ,t_vn_z_table6(1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000
									                      ,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000
												                ,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000)
		                                    -- Table 6:CID=7, pg 25, AGA8
									                      ,t_vn_z_table6(1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000
									                      ,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000
												                ,1.028973,1.033754,1.038338,1.042735,1.046966,1.000000,1.000000)
		                                    -- Table 6:CID=8, pg 25, AGA8
									                      ,t_vn_z_table6(1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000
									                      ,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000
												                ,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000)
		                                    -- Table 6:CID=9 pg 25, AGA8
									                      ,t_vn_z_table6(1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000
									                      ,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000
												                ,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000)
	                                      -- Table 6:CID=10, pg 25, AGA8
									                      ,t_vn_z_table6(1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000
									                      ,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000
												                ,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000)
		                                    -- Table 6:CID=11, pg 25, AGA8
									                      ,t_vn_z_table6(1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000
									                      ,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000
												                ,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000)
		                                    -- Table 6:CID=12, pg 25, AGA8
									                      ,t_vn_z_table6(1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000
									                      ,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000
												                ,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000)
		                                    -- Table 6:CID=13, pg 25, AGA8
									                      ,t_vn_z_table6(1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000
									                      ,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000
												                ,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000)
		                                    -- Table 6:CID=14, pg 25, AGA8
									                      ,t_vn_z_table6(1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000
									                      ,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000
												                ,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000)
		                                    -- Table 6:CID=15, pg 25, AGA8
									                      ,t_vn_z_table6(1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000
									                      ,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000
												                ,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000)
		                                    -- Table 6:CID=16, pg 25, AGA8
									                      ,t_vn_z_table6(1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000
									                      ,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000
												                ,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000)
		                                    -- Table 6:CID=17, pg 25, AGA8
									                      ,t_vn_z_table6(1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000
									                      ,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000
												                ,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000)
		                                    -- Table 6:CID=18, pg 25, AGA8
									                      ,t_vn_z_table6(1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000
									                      ,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000
												                ,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000)
		                                    -- Table 6:CID=19, pg 25, AGA8
									                      ,t_vn_z_table6(1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000
									                      ,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000
												                ,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000)
		                                    -- Table 6:CID=20, pg 25, AGA8
									                      ,t_vn_z_table6(1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000
									                      ,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000
												                ,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000)
		                                    -- Table 6:CID=21, pg 25, AGA8
									                      ,t_vn_z_table6(1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000
									                      ,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000
												                ,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000)
									 );

	  -- Table 6:CID=1, pg 25, AGA8, Kij column
	  ln_z_bkijb  t_vn_z_t6 := t_vn_z_t6( t_vn_z_table6(1.000000,1.003630,0.995933,1.000000,1.007619,1.000000,1.000080
	  			  		                        ,1.023260,1.000000,1.000000,1.000000,0.997596,1.000000,1.002529
												                ,0.982962,0.983565,0.982707,0.981849,0.980991,1.000000,1.000000)
		-- Table 6:CID=2, pg 25, AGA8, Kij column
									                     ,t_vn_z_table6(1.000000,1.000000,0.982361,1.007960,1.000000,1.000000,0.942596
									 			               ,1.032270,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000
												               ,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000)
									                     --3
	  								                   ,t_vn_z_table6(1.000000,1.000000,1.000000,1.008510,1.000000,1.000000,1.007790
									                     ,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000
												               ,0.910183,0.895362,0.881152,0.867520,0.854406,1.000000,1.000000)
									                     --4
									                     ,t_vn_z_table6(1.000000,1.000000,1.000000,1.000000,0.986893,1.000000,0.999969
									                     ,1.020340,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000
												               ,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000)
									                     --5
									                     ,t_vn_z_table6(1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000
									                     ,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000
												               ,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000)
									                     --6
									                     ,t_vn_z_table6(1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000
									                     ,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000
												               ,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000)
									                     --7
									                     ,t_vn_z_table6(1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000
									                     ,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000
												               ,0.968130,0.962870,0.957828,0.952441,0.948338,1.000000,1.000000)
									                     --8
									                     ,t_vn_z_table6(1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000
									                     ,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000
												               ,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000)
									                     --9
									                     ,t_vn_z_table6(1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000
									                     ,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000
												               ,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000)
									                     --10
									                     ,t_vn_z_table6(1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000
									                     ,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000
												               ,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000)
									                     --11
									                     ,t_vn_z_table6(1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000
									                     ,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000
												               ,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000)
									                     --12
									                     ,t_vn_z_table6(1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000
									                     ,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000
												               ,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000)
									                     --13
									                     ,t_vn_z_table6(1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000
									                     ,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000
												               ,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000)
									                     --14
									                     ,t_vn_z_table6(1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000
									                     ,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000
												               ,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000)
									                     --15
									                     ,t_vn_z_table6(1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000
									                     ,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000
												               ,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000)
									                     --16
									                     ,t_vn_z_table6(1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000
									                     ,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000
												               ,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000)
									                     --17
									                     ,t_vn_z_table6(1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000
									                     ,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000
												               ,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000)
									                     --18
									                     ,t_vn_z_table6(1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000
									                     ,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000
												               ,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000)
									                     --19
									                     ,t_vn_z_table6(1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000
									                     ,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000
												               ,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000)
									                     --20
									                     ,t_vn_z_table6(1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000
									                     ,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000
												               ,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000)
									                     --21
									                     ,t_vn_z_table6(1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000
									                     ,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000
												               ,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000)
									 );

		 -- Table 6:CID=1, pg 25, AGA8, Eij column
	  ln_z_beijb  t_vn_z_t6 := t_vn_z_t6( t_vn_z_table6(1.000000,0.971640,0.960644,1.000000,0.994635,0.708218,0.931484
	  			  		  	 		                ,1.170520,0.990126,1.000000,1.019530,0.989844,1.002350,0.999268
												                ,1.107274,0.880880,0.880973,0.881067,0.881161,1.000000,1.000000)
									                      --2
									                      ,t_vn_z_table6(1.000000,1.000000,1.022740,0.970120,0.945939,0.746954,0.902271
									                      ,1.086320,1.005710,1.021000,0.946914,0.973384,0.959340,0.945520
												                ,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000)
									                      --3
									                      ,t_vn_z_table6(1.000000,1.000000,1.000000,0.925053,0.960237,0.849408,0.955052
									                      ,1.281790,1.500000,1.000000,0.906849,0.897362,0.726255,0.859764
												                ,0.855134,0.831229,0.808310,0.786323,0.765171,1.000000,1.000000)
									                      --4
									                      ,t_vn_z_table6(1.000000,1.000000,1.000000,1.000000,1.022560,0.693168,0.946871
									                      ,1.164460,1.000000,1.000000,1.000000,1.013060,1.000000,1.005320
	  											              ,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000)
									                      --5
									                      ,t_vn_z_table6(1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000
									                      ,1.034787,1.000000,1.000000,1.000000,1.004900,1.000000,1.000000
												                ,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000)
									                      --6
									                      ,t_vn_z_table6(1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000
									                      ,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000
												                ,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000)
									                      --7
									                      ,t_vn_z_table6(1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000
									                      ,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000
												                ,1.008692,1.010126,1.011501,1.012821,1.014089,1.000000,1.000000)
									                      --8
									                      ,t_vn_z_table6(1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000
									                      ,1.000000,1.100000,1.000000,1.300000,1.300000,1.000000,1.000000
												                ,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000)
									                      --9
									                      ,t_vn_z_table6(1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000
									                      ,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000
												                ,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000)
									                      --10
									                      ,t_vn_z_table6(1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000
									                      ,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000
												                ,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000)
									                      --11
									                      ,t_vn_z_table6(1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000
									                      ,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000
												                ,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000)
										                    --12
									                      ,t_vn_z_table6(1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000
									                      ,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000
												                ,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000)
									                      --13
									                      ,t_vn_z_table6(1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000
									                      ,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000
												                ,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000)
									                      --14
									                      ,t_vn_z_table6(1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000
									                      ,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000
												                ,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000)
									                      --15
									                      ,t_vn_z_table6(1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000
									                      ,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000
												                ,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000)
									                      --16
									                      ,t_vn_z_table6(1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000
									                      ,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000
												                ,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000)
									                      --17
									                      ,t_vn_z_table6(1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000
									                      ,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000
												                ,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000)
									                      --18
									                      ,t_vn_z_table6(1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000
									                      ,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000
												                ,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000)
									                      --19
									                      ,t_vn_z_table6(1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000
									                      ,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000
												                ,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000)
									                      --20
									                      ,t_vn_z_table6(1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000
									                      ,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000
												                ,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000)
									                      --21
									                      ,t_vn_z_table6(1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000
									                      ,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000
												                ,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000)
									 );

		 -- Table 6:CID=1, pg 25, AGA8, Gij column
	  ln_z_bwijb  t_vn_z_t6 := t_vn_z_t6( t_vn_z_table6(1.000000,1.000000,0.807653,1.000000,1.000000,1.000000,1.000000
	  			  		  	 		                ,1.957310,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000
												                ,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000)
									                      --2
									                      ,t_vn_z_table6(1.000000,1.000000,0.982746,1.000000,1.000000,1.000000,1.000000
	  			  		  	 		                ,1.957310,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000
												                ,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000)
									                      --3
									                      ,t_vn_z_table6(1.000000,1.000000,1.000000,0.370296,1.000000,1.673090,1.000000
	  			  		  	 		                ,1.957310,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000
												                ,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000)
									                      --4
									                      ,t_vn_z_table6(1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000
									                      ,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000
												                ,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000)
									                      --5
									                      ,t_vn_z_table6(1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000
									                      ,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000
												                ,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000)
									                      --6
									                      ,t_vn_z_table6(1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000
									                      ,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000
												                ,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000)
									                      --7
									                      ,t_vn_z_table6(1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000
									                      ,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000
												                ,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000)
									                      --8
									                      ,t_vn_z_table6(1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000
									                      ,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000
												                ,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000)
									                      --9
									                      ,t_vn_z_table6(1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000
									                      ,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000
												                ,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000)
									                      --10
									                      ,t_vn_z_table6(1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000
									                      ,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000
												                ,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000)
									                      --11
									                      ,t_vn_z_table6(1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000
									                      ,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000
												                ,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000)
									                      --12
									                      ,t_vn_z_table6(1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000
									                      ,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000
												                ,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000)
									                      --13
									                      ,t_vn_z_table6(1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000
									                      ,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000
												                ,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000)
									                      --14
									                      ,t_vn_z_table6(1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000
									                      ,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000
												                ,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000)
									                      --15
									                      ,t_vn_z_table6(1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000
									                      ,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000
												                ,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000)
									                      --16
									                      ,t_vn_z_table6(1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000
									                      ,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000
												                ,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000)
									                      --17
									                      ,t_vn_z_table6(1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000
									                      ,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000
												                ,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000)
									                      --18
									                      ,t_vn_z_table6(1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000
									                      ,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000
												                ,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000)
									                      --19
									                      ,t_vn_z_table6(1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000
									                      ,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000
												                ,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000)
									                      --20
									                      ,t_vn_z_table6(1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000
									                      ,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000
												                ,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000)
									                      --21
									                      ,t_vn_z_table6(1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000
									                      ,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000
												                ,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000)
									 );


                  --table 5 p24 AGA8

      ln_g_HN    t_pn_z_array := t_pn_z_array(890.63,0,0,1560.69,2219.17,0,562.01,285.83,282.98,0
                                              ,2868.2,2877.4,3528.83,3535.77,4194.95,4853.43,5577.8
                                              ,6171.15,6829.77,0,0);

	    ln_c_ak    t_pn_z_array := t_pn_z_array(93.121,0,0,145.81,193.944,0,36.6857,32.1127,-7.8073,240.02552,304.997
                                              ,353.19,419.077,465.241,511.73,557.8687,604.1078,650.2471,0,0,0);

      ln_c_bk    t_pn_z_array := t_pn_z_array(0.010651,0,0,-0.03085,-0.06369,0,0.0212,-0.01472,0.04565,0,-0.09304
                                              ,-0.02719,-0.03974,0.023946,0.008647,-0.01513,-0.0301,-0.0449,-0.06011,0,0);

      ln_c_ck    t_pn_z_array := t_pn_z_array(-0.0002245,0,0,-0.00033,-0.0004365,0,-0.00005072,0.00004989,-0.00007317
                                              ,0,-0.0004357,-0.0006078,-0.0006618,-0.0008822,-0.001023,-0.001132,-0.001259
                                              ,-0.001386,-0.001516,0,0);

   ln_z_Told NUMBER  := 0;  -- old temperature
   ln_z_Mwx	  NUMBER := 0;  --the molar mass of natural gas
   ln_z_Bmix  NUMBER := 0;  --Aga8=Gross Method

-- Used in procedure calc_zchardl--
   ln_z_Rk3p0 NUMBER := 0;
   ln_z_uu   NUMBER	 := 0;
   ln_z_q2p0 NUMBER	 := 0;
   ln_z_ww   NUMBER	 := 0;
   ln_z_hh	 NUMBER	 := 0;
   ln_z_b1   NUMBER  := 0;
   ln_z_b2   NUMBER	 := 0;
   ln_z_b3   NUMBER	 := 0;
   ln_z_b4   NUMBER	 := 0;
   ln_z_b5   NUMBER	 := 0;
   ln_z_b6   NUMBER	 := 0;
   ln_z_b7   NUMBER	 := 0;
   ln_z_b8   NUMBER	 := 0;
   ln_z_b9   NUMBER	 := 0;
   ln_z_b10  NUMBER	 := 0;
   ln_z_b11  NUMBER	 := 0;
   ln_z_b12  NUMBER	 := 0;
   ln_z_b13  NUMBER	 := 0;
   ln_z_b14  NUMBER	 := 0;
   ln_z_b15  NUMBER	 := 0;
   ln_z_b16  NUMBER	 := 0;
   ln_z_b17  NUMBER	 := 0;
   ln_z_b18  NUMBER	 := 0;
-- End of used in procedure calc_zchardl--

-- Used in procedure calc_z_temp--
   ln_z_fn13 NUMBER	 := 0;
   ln_z_fn14 NUMBER	 := 0;
   ln_z_fn15 NUMBER	 := 0;
   ln_z_fn16 NUMBER	 := 0;
   ln_z_fn17 NUMBER	 := 0;
   ln_z_fn18 NUMBER	 := 0;
   ln_z_fn19 NUMBER	 := 0;
   ln_z_fn20 NUMBER	 := 0;
   ln_z_fn21 NUMBER	 := 0;
   ln_z_fn22 NUMBER	 := 0;
   ln_z_fn23 NUMBER	 := 0;
   ln_z_fn24 NUMBER	 := 0;
   ln_z_fn25 NUMBER	 := 0;
   ln_z_fn26 NUMBER	 := 0;
   ln_z_fn27 NUMBER	 := 0;
   ln_z_fn28 NUMBER	 := 0;
   ln_z_fn29 NUMBER	 := 0;
   ln_z_fn30 NUMBER	 := 0;
   ln_z_fn31 NUMBER	 := 0;
   ln_z_fn32 NUMBER	 := 0;
   ln_z_fn33 NUMBER	 := 0;
   ln_z_fn34 NUMBER	 := 0;
   ln_z_fn35 NUMBER	 := 0;
   ln_z_fn36 NUMBER	 := 0;
   ln_z_fn37 NUMBER	 := 0;
   ln_z_fn38 NUMBER	 := 0;
   ln_z_fn39 NUMBER	 := 0;
   ln_z_fn40 NUMBER	 := 0;
   ln_z_fn41 NUMBER	 := 0;
   ln_z_fn42 NUMBER	 := 0;
   ln_z_fn43 NUMBER	 := 0;
   ln_z_fn44 NUMBER	 := 0;
   ln_z_fn45 NUMBER	 := 0;
   ln_z_fn46 NUMBER	 := 0;
   ln_z_fn47 NUMBER	 := 0;
   ln_z_fn48 NUMBER	 := 0;
   ln_z_fn49 NUMBER	 := 0;
   ln_z_fn50 NUMBER	 := 0;
   ln_z_fn51 NUMBER	 := 0;
   ln_z_fn52 NUMBER	 := 0;
   ln_z_fn53 NUMBER	 := 0;
   ln_z_fn54 NUMBER	 := 0;
   ln_z_fn55 NUMBER	 := 0;
   ln_z_fn56 NUMBER	 := 0;
   ln_z_fn57 NUMBER	 := 0;
   ln_z_fn58 NUMBER	 := 0;
-- End of used in procedure calc_z_temp--

-- Comes from Table 4, pg 22 - Column=an--
   ln_z_a1  constant NUMBER	 := 0.1538326;
   ln_z_a2  constant NUMBER	 := 1.341953;
   ln_z_a3  constant NUMBER	 :=-2.998583;
   ln_z_a4  constant NUMBER	 :=-0.04831228;
   ln_z_a5  constant NUMBER	 := 0.3757965;
   ln_z_a6  constant NUMBER	 :=-1.589575;
   ln_z_a7  constant NUMBER	 :=-0.05358847;
   ln_z_a8  constant NUMBER	 := 0.88659463;
   ln_z_a9  constant NUMBER	 :=-0.71023704;
   ln_z_a10 constant NUMBER	 :=-1.471722;
   ln_z_a11 constant NUMBER	 := 1.32185035;
   ln_z_a12 constant NUMBER	 :=-0.78665925;
   ln_z_a13 constant NUMBER	 := 2.29129e-9;
   ln_z_a14 constant NUMBER	 := 0.1576724;
   ln_z_a15 constant NUMBER	 :=-0.4363864;
   ln_z_a16 constant NUMBER	 :=-0.04408159;
   ln_z_a17 constant NUMBER	 :=-0.003433888;
   ln_z_a18 constant NUMBER	 := 0.03205905;
   ln_z_a19 constant NUMBER	 := 0.02487355;
   ln_z_a20 constant NUMBER	 := 0.07332279;
   ln_z_a21 constant NUMBER	 :=-0.001600573;
   ln_z_a22 constant NUMBER	 := 0.6424706;
   ln_z_a23 constant NUMBER	 :=-0.4162601;
   ln_z_a24 constant NUMBER	 :=-0.06689957;
   ln_z_a25 constant NUMBER	 := 0.2791795;
   ln_z_a26 constant NUMBER	 :=-0.6966051;
   ln_z_a27 constant NUMBER	 :=-0.002860589;
   ln_z_a28 constant NUMBER	 :=-0.008098836;
   ln_z_a29 constant NUMBER	 := 3.150547;
   ln_z_a30 constant NUMBER	 := 0.007224479;
   ln_z_a31 constant NUMBER	 :=-0.7057529;
   ln_z_a32 constant NUMBER	 := 0.5349792;
   ln_z_a33 constant NUMBER	 :=-0.07931491;
   ln_z_a34 constant NUMBER	 :=-1.418465;
   ln_z_a35 constant NUMBER	 :=-5.99905e-17;
   ln_z_a36 constant NUMBER	 := 0.1058402;
   ln_z_a37 constant NUMBER	 := 0.03431729;
   ln_z_a38 constant NUMBER	 :=-0.007022847;
   ln_z_a39 constant NUMBER	 := 0.024955870;
   ln_z_a40 constant NUMBER	 := 0.04296818;
   ln_z_a41 constant NUMBER	 := 0.7465453;
   ln_z_a42 constant NUMBER	 :=-0.2919613;
   ln_z_a43 constant NUMBER	 := 7.294616;
   ln_z_a44 constant NUMBER	 :=-9.936757;
   ln_z_a45 constant NUMBER	 :=-0.005399808;
   ln_z_a46 constant NUMBER	 :=-0.2432567;
   ln_z_a47 constant NUMBER	 := 0.04987016;
   ln_z_a48 constant NUMBER	 := 0.003733797;
   ln_z_a49 constant NUMBER	 := 1.874951;
   ln_z_a50 constant NUMBER	 := 0.002168144;
   ln_z_a51 constant NUMBER	 :=-0.6587164;
   ln_z_a52 constant NUMBER	 := 0.000205518;
   ln_z_a53 constant NUMBER	 := 0.009776195;
   ln_z_a54 constant NUMBER	 :=-0.02048708;
   ln_z_a55 constant NUMBER	 := 0.01557322;
   ln_z_a56 constant NUMBER	 := 0.006862415;
   ln_z_a57 constant NUMBER	 :=-0.001226752;
   ln_z_a58 constant NUMBER	 := 0.002850908;
-- End Of comes from Table 4, pg 22 - Column=an--

   li_MaxIterate_z constant integer   := 200; -- NUMBER of iteration to get the compressibility

-- Constant values to set up limit for input data
   ln_sp_low     CONSTANT NUMBER := 0;
   ln_sp_high    CONSTANT NUMBER := 40000;
   ln_ft_low     CONSTANT NUMBER := -200;
   ln_ft_high    CONSTANT NUMBER := 760;
   ln_dp_low     CONSTANT NUMBER := 0;
   ln_std_press  CONSTANT NUMBER := 14.73;
   ln_std_temp   CONSTANT NUMBER := 519.67;
   ln_rhlow      CONSTANT NUMBER := 0;
   ln_vlow       CONSTANT NUMBER := 0.005;
   ln_vhigh      CONSTANT NUMBER := 0.5;
   ln_klow       CONSTANT NUMBER := 1;
   ln_khigh      CONSTANT NUMBER := 2;
   ln_iflow      CONSTANT NUMBER := 1;
   ln_ifhigh     CONSTANT NUMBER := 2;
   ln_glow       CONSTANT NUMBER := 0.07;
   ln_ghigh      CONSTANT NUMBER := 1.52;
   ln_flow       CONSTANT NUMBER := 0;
   ln_dolow      CONSTANT NUMBER := 0;
   ln_dohigh     CONSTANT NUMBER := 100;
   ln_dmlow      CONSTANT NUMBER := 0;
   ln_dmhigh     CONSTANT NUMBER := 100;
   ln_blow       CONSTANT NUMBER := 0;
   ln_bhigh      CONSTANT NUMBER := 1;
   ln_hv_low     CONSTANT NUMBER := 477.0*1.055056/28.31684659;  -- Converting from BTU/SM^3 to KJ/DM^3.
   ln_hv_high    CONSTANT NUMBER := 1211.0*1.055056/28.31684659; -- Converting from BTU/SM^3 to KJ/DM^3.
   ln_aga8g_low  CONSTANT NUMBER := 0.55;
   ln_aga8g_high CONSTANT NUMBER := 0.8701;
   ln_x_low      CONSTANT NUMBER := 0.0;
   ln_x1_high    CONSTANT NUMBER := 0.5001;
   ln_x2_high    CONSTANT NUMBER := 0.3001;
   ln_x3_high    CONSTANT NUMBER := 0.1001;
   ln_x4_high    CONSTANT NUMBER := 0.0301;
   ln_tmp_low    CONSTANT NUMBER := (31.9+459.67)*5.0/9.0;  -- Converting from Fahrenheit to Kelvin.
   ln_tmp_high   CONSTANT NUMBER := (77.01+459.67)*5.0/9.0; -- Converting from Fahrenheit to Kelvin.
   ln_pr_low     CONSTANT NUMBER := 12.9*0.006894757;       -- Converting from PSIA to Mpa.
   ln_pr_high    CONSTANT NUMBER := 16.01*0.006894757;      -- Converting from PSIA to Mpa.

--AGA8 Detail global variable end

   ex_missing_staticpress EXCEPTION;
   PRAGMA EXCEPTION_INIT (ex_missing_staticpress,-20420);
   ex_static_press EXCEPTION;
   PRAGMA EXCEPTION_INIT (ex_static_press,-20421);
   ex_diff_press EXCEPTION;
   PRAGMA EXCEPTION_INIT (ex_diff_press,-20423);
   ex_flowing_temp EXCEPTION;
   PRAGMA EXCEPTION_INIT (ex_flowing_temp,-20425);
   ex_missing_aga3Rhotp EXCEPTION;
   PRAGMA EXCEPTION_INIT (ex_missing_aga3Rhotp,-20426);
   ex_missing_aga3Rhos EXCEPTION;
   PRAGMA EXCEPTION_INIT (ex_missing_aga3Rhos,-20427);
   ex_std_press EXCEPTION;
   PRAGMA EXCEPTION_INIT (ex_std_press,-20428);
   ex_std_temp EXCEPTION;
   PRAGMA EXCEPTION_INIT (ex_std_temp,-20429);
   ex_aga3visc EXCEPTION;
   PRAGMA EXCEPTION_INIT (ex_aga3visc,-20430);
   ex_aga3kfac EXCEPTION;
   PRAGMA EXCEPTION_INIT (ex_aga3kfac,-20431);
   ex_aga3ifluid EXCEPTION;
   PRAGMA EXCEPTION_INIT (ex_aga3ifluid,-20432);
   ex_aga3grs EXCEPTION;
   PRAGMA EXCEPTION_INIT (ex_aga3grs,-20433);
   ex_aga3zairs EXCEPTION;
   PRAGMA EXCEPTION_INIT (ex_aga3zairs,-20435);
   ex_aga3Rhotpts EXCEPTION;
   PRAGMA EXCEPTION_INIT (ex_aga3Rhotpts,-20436);
   ex_missing_aga3grs EXCEPTION;
   PRAGMA EXCEPTION_INIT (ex_missing_aga3grs,-20437);
   ex_dm EXCEPTION;
   PRAGMA EXCEPTION_INIT (ex_dm,-20438);
   ex_do EXCEPTION;
   PRAGMA EXCEPTION_INIT (ex_do,-20439);
   ex_beta EXCEPTION;
   PRAGMA EXCEPTION_INIT (ex_beta,-20440);
   --AGA 8 Error handling
   ex_aga8grgr EXCEPTION;
   PRAGMA EXCEPTION_INIT (ex_aga8grgr,-20442);
   ex_missing_hv EXCEPTION;
   PRAGMA EXCEPTION_INIT (ex_missing_hv,-20443);
   ex_missing_x1 EXCEPTION;
   PRAGMA EXCEPTION_INIT (ex_missing_x1,-20444);
   ex_x2 EXCEPTION;
   PRAGMA EXCEPTION_INIT (ex_x2,-20446);
   ex_x3 EXCEPTION;
   PRAGMA EXCEPTION_INIT (ex_x3,-20448);
   ex_x4 EXCEPTION;
   PRAGMA EXCEPTION_INIT (ex_x4,-20450);
   ex_x1 EXCEPTION;
   PRAGMA EXCEPTION_INIT (ex_x1,-20458);
   ex_hv EXCEPTION;
   PRAGMA EXCEPTION_INIT (ex_hv,-20459);
   ex_tb EXCEPTION;
   PRAGMA EXCEPTION_INIT (ex_tb,-20460);
   ex_pb EXCEPTION;
   PRAGMA EXCEPTION_INIT (ex_pb,-20461);
   ex_tgr EXCEPTION;
   PRAGMA EXCEPTION_INIT (ex_tgr,-20462);
   ex_pgr EXCEPTION;
   PRAGMA EXCEPTION_INIT (ex_pgr,-20463);
   ex_td EXCEPTION;
   PRAGMA EXCEPTION_INIT (ex_td,-20464);
   ex_pd EXCEPTION;
   PRAGMA EXCEPTION_INIT (ex_pd,-20465);
   ex_th EXCEPTION;
   PRAGMA EXCEPTION_INIT (ex_th,-20466);
   ex_values_not_consistent EXCEPTION;
   PRAGMA EXCEPTION_INIT (ex_values_not_consistent,-20467);
   ex_virgs_sqrt_negative EXCEPTION;
   PRAGMA EXCEPTION_INIT (ex_virgs_sqrt_negative,-20468);
   ex_invalid_terms_virgs EXCEPTION;
   PRAGMA EXCEPTION_INIT (ex_invalid_terms_virgs,-20469);

---------------------------------------------------------------------------------------------------
-- Procedure      : calculateFlowDensity
-- Description    : calculates Flow Density at flowing condition. Is used for AGA3-1990, When Use AGA8 = N
--
-- Preconditions  :
-- Postconditions :
--
-- Using tables   :
--
-- Using functions: Molecular weight of gas mixture(p_mr) is calculated using calc_z_gross_1.
--
-- Configuration
-- required       :
--
-- Behaviour      :
--
---------------------------------------------------------------------------------------------------

FUNCTION calculateFlowDensity(
   p_object_id  VARCHAR2,
   p_daytime DATE,
   p_static_pressure NUMBER,
   p_temp     NUMBER,
   p_compress NUMBER,
   p_mr NUMBER DEFAULT NULL)
RETURN NUMBER

IS

  ln_molar_mass             NUMBER := 28.9625;     -- kg/kmol  Molar mass (molecular weight) of dry air.
  ln_universal_gas_constant NUMBER := 8.31451e-3;
  ln_conver_factor          NUMBER := 273.15;      -- Unit conversion factor- Kelvin(absolute temperature).
  ln_pba                    NUMBER;                -- Pressure in PSIA.
  ln_density                NUMBER;                -- calculated in kg/sm3
  ln_spec_grav              NUMBER;

BEGIN
    IF p_mr IS NOT NULL THEN
      ln_pba := ecdp_unit.convertValue(p_static_pressure,'PSIA', 'MPAA');
      ln_temp := ecdp_unit.convertValue(p_temp,ecdp_Unit.GetUnitFromLogical('TEMP'), 'K');
      ln_density := (ln_pba * p_mr)/ (p_compress *ln_universal_gas_constant * ln_temp);
      ln_density:= ln_density * 0.06242796; --Converting from kg/sm3 to lb/ft3.
    ELSE
       ln_spec_grav := ecbp_stream_fluid.findSpecificGravity(p_object_id, p_daytime);
       ln_pba :=  p_static_pressure/100;
       ln_density := ln_pba * ln_spec_grav *  ln_molar_mass / p_compress /ln_universal_gas_constant / (p_temp + ln_conver_factor);
    END IF;

   RETURN ln_density;

END calculateFlowDensity;


---------------------------------------------------------------------------------------------------
-- Procedure      : calculateStdDensity
-- Description    : calculates Flow Density at Standard condition. Is used for AGA3-1990, When Use AGA8 = N.
--
-- Preconditions  :
-- Postconditions :
--
-- Using tables   :
--
-- Using functions: Molecular weight of gas mixture(p_mr) is calculated using calc_z_gross_1.
--
-- Configuration
-- required       :
--
-- Behaviour      :
--
---------------------------------------------------------------------------------------------------

FUNCTION calculateStdDensity(
   p_object_id  VARCHAR2,
   p_daytime DATE,
   p_pressure NUMBER,
   p_temp     NUMBER,
   p_compress NUMBER,
   p_mr NUMBER DEFAULT NULL)
RETURN NUMBER

IS

  ln_molar_mass             NUMBER := 28.9625;     -- kg/kmol  Molar mass (molecular weight) of dry air.
  ln_universal_gas_constant NUMBER := 8.31451e-3;
  ln_conver_factor          NUMBER := 273.15;      -- Unit conversion factor- Kelvin(absolute temperature).
  ln_pba                    NUMBER;                -- calculated in PSIA
  ln_density                NUMBER;                -- calculated in kg/sm3
  ln_spec_grav              NUMBER;

BEGIN
    IF p_mr IS NOT NULL THEN
      ln_pba := ecdp_unit.convertValue(p_pressure,'PSIA', 'MPAA');
      ln_temp := ecdp_unit.convertValue(p_temp,ecdp_Unit.GetUnitFromLogical('TEMP'), 'K');
      ln_density := (ln_pba * p_mr) / (p_compress * ln_universal_gas_constant * ln_temp);
      ln_density := ln_density * 0.06242796; --Converting from kg/sm3 to lb/ft3.
    ELSE
      ln_spec_grav := ecbp_stream_fluid.findSpecificGravity(p_object_id, p_daytime);
      ln_pba := p_pressure/100;
      ln_density := ln_pba * ln_spec_grav *  ln_molar_mass / p_compress /ln_universal_gas_constant / (p_temp + ln_conver_factor);
    END IF;

  RETURN ln_density;

END calculateStdDensity;

 ---------------------------------------------------------------------------------------------------
  -- Procedure      : calculatetdevFlowDensity
  -- Description    : calculates Flow Density at flowing condition. Is used for AGA3-1990, When Use AGA8 = Y
  --
  -- Preconditions  :
  -- Postconditions :
  --
  -- Using tables   :
  --
  -- Using functions:
  --
  -- Configuration
  -- required       :
  --
  -- Behaviour      :
  --
  ---------------------------------------------------------------------------------------------------

  FUNCTION calculateTdevFlowDensity(p_object_id       VARCHAR2,
                                    p_daytime         DATE,
                                    p_static_pressure NUMBER,
                                    p_temp            NUMBER,
                                    p_compress        NUMBER,
                                    p_grs NUMBER DEFAULT NULL,
                                    p_class_name VARCHAR2 DEFAULT NULL) RETURN NUMBER

   IS

    ln_molar_mass             NUMBER := 28.9625;     -- lb/lbmol  Molar mass (molecular weight) of dry air.
    ln_universal_gas_constant NUMBER := 10.7316;
    ln_conver_factor          NUMBER := 459.67;      -- Unit conversion factor- Rankin(absolute temperature).
    ln_pba                    NUMBER;                -- calculated in PSIA
    ln_density                NUMBER;                -- calculated in lb/ft3
    ln_spec_grav              NUMBER;

  BEGIN

    ln_spec_grav := ec_tdev_reference_value.spec_gravity(p_object_id,
                                                         p_daytime);

      ln_pba       := p_static_pressure ;
    ln_density   := ln_pba * ln_spec_grav * ln_molar_mass / p_compress / ln_universal_gas_constant / (p_temp + ln_conver_factor);

    IF ln_density IS NULL THEN
      ln_density := ue_calculateaga.calculateTdevFlowDensity(p_object_id, p_daytime,p_static_pressure,p_temp,p_compress,p_grs,p_class_name);
    END IF;

    RETURN ln_density;

  END calculateTdevFlowDensity;

 ---------------------------------------------------------------------------------------------------
  -- Procedure      : calculatetdevStdDensity
  -- Description    : calculates Flow Density at Standard condition. Is used for AGA3-1990, When Use AGA8 = Y.
  --
  -- Preconditions  :
  -- Postconditions :
  --
  -- Using tables   :
  --
  -- Using functions:
  --
  -- Configuration
  -- required       :
  --
  -- Behaviour      :
  --
  ---------------------------------------------------------------------------------------------------

  FUNCTION calculateTdevStdDensity(p_object_id VARCHAR2,
                                   p_daytime   DATE,
                                   p_pressure  NUMBER,
                                   p_temp      NUMBER,
                                   p_compress  NUMBER,
                                   p_grs NUMBER DEFAULT NULL
                                ) RETURN NUMBER

   IS

    ln_molar_mass             NUMBER := 28.9625;     -- lb/lbmol  Molar mass (molecular weight) of dry air.
    ln_universal_gas_constant NUMBER := 10.7316;
    ln_conver_factor          NUMBER := 459.67;      -- Unit conversion factor- Rankin(absolute temperature).
    ln_pba                    NUMBER;                -- calculated in psia
    ln_density                NUMBER;                -- calculated in lb/ft3
    ln_spec_grav              NUMBER;

  BEGIN

    ln_spec_grav := ec_tdev_reference_value.spec_gravity(p_object_id,
                                                         p_daytime);
    ln_pba       := p_pressure;
    ln_density   := ln_pba * ln_spec_grav * ln_molar_mass / p_compress / ln_universal_gas_constant / (p_temp + ln_conver_factor);

    IF ln_density IS NULL THEN
      ln_density := ue_calculateaga.calculateTdevStdDensity(p_object_id, p_daytime,p_pressure,p_temp,p_compress,p_grs);
    END IF;
    RETURN ln_density;

  END calculateTdevStdDensity;

---------------------------------------------------------------------------------------------------
-- Procedure      : calcExpansionFactor
-- Description    : Calculates Expansion Factor (Y)
--
-- Preconditions  :
-- Postconditions :
--
-- Using tables   :
--
-- Using functions:
--
-- Configuration
-- required       :
--
-- Behaviour      :
--
---------------------------------------------------------------------------------------------------
FUNCTION calcExpansionFactor(
   p_tapType   VARCHAR2,
   p_beta   NUMBER,
   p_locationType  NUMBER,
   p_isentropicExp  VARCHAR2,
   p_pressureRatio NUMBER,
   p_aga3IFluid NUMBER )
RETURN NUMBER
IS

  ln_Y1 NUMBER;
  ln_Y NUMBER;

BEGIN

  IF p_tapType = 1 THEN -- when tap type = Flange
    IF p_locationType = 1 THEN -- upstream
      ln_Y1 := (0.41 + 0.35 * power(p_beta,4))/p_isentropicExp;
      ln_Y  :=1.0 - (ln_Y1* p_pressureRatio);
      IF  p_aga3IFluid = '2' THEN  -- uncompressable liquid
        ln_Y := 1.0;
      END IF;
    ELSIF p_locationType = 2 THEN  -- downstream
      ln_Y := power((1 + p_pressureRatio),0.5) - (0.41 + 0.35 * p_beta**4) * p_pressureRatio / p_isentropicExp /power((1 + p_pressureRatio),0.5);
      IF  p_aga3IFluid = '2' THEN --(uncompressable liquid.)
        ln_Y := 1.0;
      END IF;
    END IF;
  ELSIF p_tapType = 2 THEN -- when tap type is PIPE
    IF  p_locationType=1 THEN    -- when the location of the tab is upstream
      ln_Y :=  1 - (0.333 + 1.145 * (power(p_beta,2) + 0.7 * power(p_beta,5) + 12 * power(p_beta,13)))*p_pressureRatio/ p_isentropicExp;
    ELSIF p_locationType=2 THEN -- when location of the tab is downstream
      ln_Y :=  power((1 + p_pressureRatio),0.5) - (0.333 + 1.145 * (power(p_beta,2) + 0.7 * power(p_beta,5) + 12 * power(p_beta,13))) *p_pressureRatio/ p_isentropicExp /power((1 + p_pressureRatio),0.5);
    END IF;
  END IF;

  IF ln_Y > 1 then
    RETURN 1;
  END IF;

  RETURN ln_Y;

END calcExpansionFactor;



---------------------------------------------------------------------------------------------------
-- Procedure      : calcEv
-- Description    : Calculates Velocity of Approach factor.
--
-- Preconditions  :
-- Postconditions :
--
-- Using tables   :
--
-- Using functions:
--
-- Configuration
-- required       :
--
-- Behaviour      :
--
---------------------------------------------------------------------------------------------------
FUNCTION calcEv(
   p_beta NUMBER
  )
RETURN NUMBER
IS

  ln_ev NUMBER;

BEGIN
  ln_ev:= 1.0/ power((1.0-power(p_beta,4)),0.5);
  RETURN ln_ev;

END calcEv;

---------------------------------------------------------------------------------------------------
-- Procedure      : calcKo
-- Description    : Calculates the flow coefficient when the orifice Reynolds Number is infinitely large.
--
-- Preconditions  :
-- Postconditions :
--
-- Using tables   :
--
-- Using functions:
--
-- Configuration
-- required       :
--
-- Behaviour      :
--
---------------------------------------------------------------------------------------------------
FUNCTION calcKo(
   p_n_taps VARCHAR2,
   p_beta   NUMBER,
   p_dm     NUMBER,
   p_do NUMBER)


RETURN NUMBER
IS
  ln_ke         NUMBER;
  ln_e          NUMBER;
  ln_return_val NUMBER;

BEGIN

  IF p_n_taps ='1' THEN
    ln_ke:=  0.5993 + 0.007 /p_dm + (0.364 + 0.076 / p_dm**0.5) * p_beta**4;
    IF (0.07 + 0.5/p_dm - p_beta)>0 THEN
      ln_ke := ln_ke + 0.4*(1.6- 1/p_dm )**5 * (0.07 + 0.5/p_dm  - p_beta)**2.5;
    END IF;
    IF p_beta < 0.5 THEN
      ln_ke := ln_ke - (0.009+0.034/p_dm)*(0.5 -  p_beta)**1.5;
    END IF;
    IF p_beta >0.7 THEN
      ln_ke := ln_ke + (65/p_dm**2 +3) * (p_beta - 0.7)**2.5;
    END IF;
  ELSIF p_n_taps ='2' THEN
    ln_ke:= 0.5925 + 0.0182/p_dm + (0.44 +0.06/p_dm) * power(p_beta,2) + (0.935+ 0.225/p_dm) * power(p_beta,5) + (1.35 * power(p_beta,14));
    IF p_beta <0.25 THEN
       ln_ke := ln_ke + (1.43/power(p_dm, 0.5)) * power(0.25- p_beta, 2.5);
     END IF;
  END IF;
  ln_e := calcE( p_n_taps,p_beta,p_dm, p_do);
  ln_return_val:= ln_ke/(1+ 0.000015 *ln_e/p_do);

  RETURN ln_return_val;

END calcKo;

---------------------------------------------------------------------------------------------------
-- Procedure      : calcE
-- Description    : Used for Calculate flow coefficient
--
-- Preconditions  :
-- Postconditions :
--
-- Using tables   :
--
-- Using functions:
--
-- Configuration
-- required       :
--
-- Behaviour      :
--
---------------------------------------------------------------------------------------------------
FUNCTION calcE(
   p_n_taps VARCHAR2,
   p_beta   NUMBER,
   p_dm     NUMBER,
   p_do NUMBER
 )
RETURN NUMBER
IS

  ln_return_val NUMBER;

BEGIN
    IF p_n_taps = '1' THEN
        ln_return_val := p_do * (830 - 5000 * p_Beta + 9000 * p_Beta**2 - 4200 * p_Beta**3 + 530 / p_dm**0.5);
    ELSIF  p_n_taps = '2' THEN
      ln_return_val:= p_do*(830-5000 * p_beta + 9000 * power(p_beta,2) -4200 * power(p_beta,3) + 875/p_dm + 75);
    END IF;

    RETURN ln_return_val;

END calcE;

---------------------------------------------------------------------------------------------------
-- Procedure      : calcFr
-- Description    : Calculates the Reynold Number Factor.
--
-- Preconditions  :
-- Postconditions :
--
-- Using tables   :
--
-- Using functions:
--
-- Configuration
-- required       :
--
-- Behaviour      :
--
---------------------------------------------------------------------------------------------------
FUNCTION calcFr(
   p_beta   NUMBER,
   p_diffPressure     NUMBER,
   p_staticPressure NUMBER,
   p_do NUMBER,
   p_e NUMBER)
RETURN NUMBER
IS

  ln_return_val NUMBER;
  TYPE t_vn_k_array IS VARRAY(25) OF NUMBER;
  vn_k t_vn_k_array;
  ln_vn_i NUMBER;
  ln_b NUMBER;
  ln_ke NUMBER;

BEGIN

  /*vn_k := t_vn_k_array(0.607, 0.608, 0.611,0.614, 0.618,
                      0.623, 0.628, 0.634, 0.641, 0.650,
                      0.658, 0.668, 0.680, 0.692, 0.707,
                      0.724, 0.742, 0.763, 0.785, 0.810,
                      0.837, 0.869, 0.904, 0.943, 0.988);

  ln_vn_i := floor((p_beta - 0.1)/0.025 + 1);
  ln_ke := vn_k(ln_vn_i) + (vn_k(ln_vn_i+1) - vn_k(ln_vn_i))/0.025 * (p_beta - 0.1-0.025 * (ln_vn_i - 1));
  ln_b := p_e /p_do/12835/ln_ke;*/
  ln_b := p_e * (1 - p_beta**4)**0.5/ 7752.34 / p_do;

  ln_return_val := 1 + ln_b /power((p_diffPressure * p_staticpressure),0.5);


  RETURN ln_return_val;

END calcFr;

---------------------------------------------------------------------------------------------------
-- Procedure      : CalculateAga3
-- Description    : Calculates Aga3/8
--
-- Preconditions  : This is being called from Period Gas Stream Aga screen.
-- Postconditions :
--
-- Using tables   :
--
-- Using functions:
--
-- Configuration
-- required       :
--
-- Behaviour      :
--
---------------------------------------------------------------------------------------------------
FUNCTION calcAga3(
   p_object_id   VARCHAR2,
   p_daytime     DATE,
   p_event_type  VARCHAR2,
   p_user VARCHAR2)
RETURN NUMBER
IS

   ln_staticpressure        NUMBER;
   ln_diffPressure          NUMBER;
   ln_flowingTemp           NUMBER;
   ln_hours                 NUMBER ;
   ln_aga3Ts                NUMBER;
   ln_aga3Ps                NUMBER;
   ln_aga3Rhotp             NUMBER;
   ln_aga3Rhos              NUMBER;
   ln_aga3Fpvs              NUMBER;
   lv2_use_aga8_Ind         VARCHAR2(1);
   li_error                 INT;
   ln_aga3Visc              NUMBER;
   ln_aga3Kfac              NUMBER;
   ln_aga3Ifluid            NUMBER;
   ln_aga3Grs               NUMBER;
   ln_aga3Zairs             NUMBER;
   ln_aga8Grgr              NUMBER;
   ln_aga8Th                NUMBER;
   ln_aga8Td                NUMBER;
   ln_aga8Pd                NUMBER;
   ln_aga8tb                NUMBER;
   ln_aga8pb                NUMBER;
   ln_aga8tgr               NUMBER;
   ln_aga8pgr               NUMBER;
   ln_hv                    NUMBER;
   lv2_meter_run_id         VARCHAR2(32);
   lv2_ntaps                VARCHAR2(32);
   ln_matpipe               NUMBER;
   ln_dm                    NUMBER;
   ln_dmc                   NUMBER;
   ln_tpipe                 NUMBER;
   ln_nploc                 VARCHAR2(32);
   ln_factr                 NUMBER;
   lv2_orifice_plate_id     VARCHAR2(32);
   lv2_matorf               VARCHAR2(32); -- material choice
   ln_do                    NUMBER; -- internal diameter size in inches
   ln_torf                  NUMBER; -- temperature in Rankin
   ln_beta                  NUMBER;
   ln_ev                    NUMBER;
   ln_doc                   NUMBER;
   ln_Y                     NUMBER;
   ln_QV                    NUMBER;
   ln_NC                    NUMBER :=323.279 ;  -- is this not 323.279
   ln_PI                    NUMBER :=3.14159 ;
   ln_cd                    NUMBER;  -- ORIFICE PLATE COEFFICIENT OF DISCHARGE
   ln_cd0                   NUMBER;
   ln_cd1                   NUMBER;
   ln_cd2                   NUMBER;
   ln_cd3                   NUMBER;
   ln_cd4                   NUMBER;
   ln_A0                    NUMBER := 0.5961;
   ln_A1                    NUMBER := 0.0291;
   ln_A2                    NUMBER := -0.229;
   ln_A3                    NUMBER := 0.003;
   ln_A4                    NUMBER := 2.8;
   ln_A5                    NUMBER := 0.000511;
   ln_A6                    NUMBER := 0.021;
   ln_S1                    NUMBER := 0.0049;
   ln_S2                    NUMBER := 0.0433;
   ln_S3                    NUMBER := 0.0712;
   ln_S4                    NUMBER := -0.1145;
   ln_S5                    NUMBER := -0.2300;
   ln_S6                    NUMBER := -0.0116;
   ln_S7                    NUMBER :=-0.5200;
   ln_S8                    NUMBER := -0.1400;
   ln_TU                    NUMBER;
   ln_TS                    NUMBER;
   ln_TD                    NUMBER;
   ln_N3                    NUMBER := 27.7070; -- Conversion factor from PSIA to INH2O
   ln_N4                    NUMBER := 1;       -- If diameter is in Inches conversion factor is 1, if in Milimeter then 25.4
   ln_L1                    NUMBER;
   ln_L2                    NUMBER;
   ln_M2                    NUMBER;
   ln_X                     NUMBER;
   ln_NIC                   NUMBER;
   ln_XC                    NUMBER;
   ln_A                     NUMBER;
   ln_B                     NUMBER;
   ln_FIC                   NUMBER;
   ln_FIP                   NUMBER;
   ln_FI                    NUMBER;
   ln_FC                    NUMBER;
   ln_DC                    NUMBER;
   ln_delcd                 NUMBER;
   ln_compressibility_flow  NUMBER;
   ln_compressibility_std   NUMBER;
   ln_ko                    NUMBER;
   ln_fb                    NUMBER;
   ln_fa                    NUMBER;
   ln_Fr                    NUMBER;
   ln_Fpb                   NUMBER;
   ln_Ftf                   NUMBER;
   ln_ftb                   NUMBER;
   ln_Fpv                   NUMBER;
   ln_Fgr                   NUMBER;
   ln_C                     NUMBER;
   ln_condition_factor      NUMBER;
   ln_eff_cor_factor        NUMBER;
   ln_x1 NUMBER; -- Nitrogen mol fraction.
   ln_x2 NUMBER; -- Carbon dioxide mole frac.
   ln_x3 NUMBER; -- Hydrogen mole frac.
   ln_x4 NUMBER; -- Carbon monoxide mole frac.
   ln_spec_grav NUMBER;
   lv2_Aga3Type  VARCHAR2(32);
   lv2_Aga8Method  VARCHAR2(32);

   CURSOR c_object_aga_analysis IS
     SELECT *
     FROM object_aga_analysis oaa
     WHERE oaa.object_id = p_object_id
       AND (oaa.analysis_status = 'APPROVED' OR oaa.analysis_status IS NULL)
       AND oaa.valid_from_date = (
           SELECT MAX(oaab.valid_from_date)
           FROM object_aga_analysis oaab
           WHERE oaab.object_id = oaa.object_id
             AND (oaab.analysis_status = 'APPROVED' OR oaab.analysis_status IS NULL)
             AND oaab.valid_from_date <= p_daytime);

BEGIN

   -- provide user exit here--

   ln_staticPressure := ecbp_stream_fluid.agaStaticPress(p_object_id, p_daytime,'PERIOD_GAS_STRM_DATA_AGA'); -- PF -- flowing pressure
   ln_staticPressure := Ecdp_Unit.convertValue( ln_staticPressure,
                                                  ecdp_Unit.GetUnitFromLogical(EcDp_ClassMeta_Cnfg.getUomCode('PERIOD_GAS_STRM_DATA_AGA','STATIC_PRESS')),
                                                  'PSIA'); -- PSIA is in absolute pressure
    IF ln_staticpressure IS NULL THEN
      RAISE ex_missing_staticpress;
    ELSIF ln_staticpressure <= ln_sp_low OR ln_staticpressure > ln_sp_high THEN
      RAISE ex_static_press;
    END IF;
   ln_diffPressure   := ecbp_stream_fluid.agaDiffStaticPress(p_object_id, p_daytime,'PERIOD_GAS_STRM_DATA_AGA');
   ln_diffPressure   := Ecdp_Unit.convertValue(ln_diffPressure,
                                                  ecdp_Unit.GetUnitFromLogical(EcDp_ClassMeta_Cnfg.getUomCode('PERIOD_GAS_STRM_DATA_AGA','DIFF_PRESS')),
                                                  'INH2O'); -- Converting to INH2O
    IF ln_diffPressure IS NULL THEN
      RAISE ex_diff_press;
    ELSIF ln_diffPressure <= ln_dp_low THEN
      RAISE ex_diff_press;
    END IF;
   ln_flowingTemp    := ec_strm_event.avg_temp(p_object_id,'PERIOD_GAS_STREAM_DATA_AGA',p_daytime,'<=');
   ln_flowingTemp    := Ecdp_Unit.convertValue(ln_flowingTemp,
                                                  ecdp_Unit.GetUnitFromLogical(EcDp_ClassMeta_Cnfg.getUomCode('PERIOD_GAS_STRM_DATA_AGA','FLOW_TEMP')), 'F');
    IF ln_flowingTemp IS NULL THEN
      RAISE ex_flowing_temp;
    ELSIF ln_flowingTemp <= ln_ft_low OR ln_flowingTemp > ln_ft_high THEN
      RAISE ex_flowing_temp;
    END IF;
   ln_hours          := (ec_strm_event.end_date(p_object_id,'PERIOD_GAS_STREAM_DATA_AGA',p_daytime,'<=') - p_daytime) * 24;

   -- setting from strm aga analysis
   FOR cur_object_aga_analysis IN c_object_aga_analysis LOOP
      ln_aga3Rhotp   := cur_object_aga_analysis.rhotp; -- Density of fluid at flowing conditions (TF and PF)
      ln_aga3Rhos    := cur_object_aga_analysis.rhos; -- Density of fluid at standard conditions (TS and PS)
      ln_aga3VISC    := cur_object_aga_analysis.Visc; -- Absolute viscosity of fluid flowing/isentropic exponent
      ln_aga3Kfac    := cur_object_aga_analysis.Kfac; -- Isentropic exponent
      ln_aga3Ifluid  := cur_object_aga_analysis.ifluid; -- compressibility.
      ln_aga3Zairs   := cur_object_aga_analysis.zairs; --compressibility factor of air
      ln_aga3Fpvs    := cur_object_aga_analysis.fpvs; -- supercompressibility factor
      ln_aga3Grs     := cur_object_aga_analysis.grs; -- compressibility factor of air.
      ln_aga3Ts      := cur_object_aga_analysis.ts; -- standard temperature for the system
      ln_aga3Ps      := cur_object_aga_analysis.ps; -- standard pressure for the system
      ln_aga8Td      := cur_object_aga_analysis.td;
      ln_aga8Pd      := cur_object_aga_analysis.pd;
      ln_aga8Grgr    := cur_object_aga_analysis.grgr; -- Gas relative density at standard conditions(TGR and PGR).
      ln_aga8Th      := cur_object_aga_analysis.th; -- Reference temperature for combustion.
      ln_aga8tb      := cur_object_aga_analysis.tb;
      ln_aga8pb      := cur_object_aga_analysis.pb;
      ln_aga8tgr     := cur_object_aga_analysis.tgr;
      ln_aga8pgr     := cur_object_aga_analysis.pgr;
      ln_compressibility_flow := cur_object_aga_analysis.compressibility_flow;
      ln_compressibility_std := cur_object_aga_analysis.compressibility_std;
      ln_condition_factor := cur_object_aga_analysis.condition_factor;
      ln_eff_cor_factor  := cur_object_aga_analysis.eff_corr_factor;
      lv2_Aga3Type := cur_object_aga_analysis.aga3_type;
      lv2_use_aga8_Ind := cur_object_aga_analysis.use_aga8_ind;
      lv2_aga8Method := cur_object_aga_analysis.GS_CALC_METHOD;
      ln_x1 := cur_object_aga_analysis.x1;
      ln_x2 := cur_object_aga_analysis.x2;
      ln_x3 := cur_object_aga_analysis.x3;
      ln_x4 := cur_object_aga_analysis.x4;
      ln_hv := cur_object_aga_analysis.hv;

   END LOOP;

    IF ln_aga3Rhotp IS NULL THEN
        RAISE ex_missing_aga3Rhotp;
    ELSIF ln_aga3Rhos IS NULL THEN
        RAISE ex_missing_aga3Rhos;
    ELSIF ln_aga3Rhotp <= ln_rhlow OR ln_aga3Rhos <= ln_rhlow THEN
        RAISE ex_aga3Rhotpts;
    ELSIF ln_aga3Ps <> ln_std_press THEN
        RAISE ex_std_press;
    ELSIF ln_aga3Ts <> ln_std_temp THEN
        RAISE ex_std_Temp;
    ELSIF ln_aga3VISC < ln_vlow OR ln_aga3VISC > ln_vhigh THEN
        RAISE ex_aga3visc;
    ELSIF ln_aga3Kfac <= ln_klow OR ln_aga3Kfac >= ln_khigh THEN
        RAISE ex_aga3Kfac;
    ELSIF ln_aga3Ifluid < ln_ifLow OR ln_aga3Ifluid > ln_ifhigh THEN
        RAISE ex_aga3Ifluid;
	ELSIF ln_aga3Grs < ln_glow OR ln_aga3Grs > ln_ghigh THEN
        RAISE ex_aga3Grs;
    ELSIF ln_aga3Zairs IS NULL THEN
        RAISE ex_aga3zairs;
    ELSIF ln_aga3Zairs <= ln_flow THEN
        RAISE ex_aga3zairs;
    END IF;
    IF lv2_use_aga8_Ind = 'N' THEN
      IF ln_aga3Grs IS NULL THEN
        RAISE ex_missing_aga3grs;
      END IF;
    END IF;
   lv2_meter_run_id := ecdp_strm_aga.getMeterRun(p_object_id, p_daytime,p_event_type);
   lv2_ntaps  := ec_meter_run_version.type_of_taps(lv2_meter_run_id, p_daytime, '<=');
   ln_matpipe := ec_meter_run_version.pipe_material(lv2_meter_run_id, p_daytime, '<=');
   ln_dm      := ec_meter_run_version.pipe_diameter(lv2_meter_run_id, p_daytime, '<=');
    IF ln_dm <= ln_dmlow OR ln_dm >= ln_dmhigh THEN
      RAISE ex_dm;
    END IF;
   ln_tpipe   := ec_meter_run_version.diameter_meas_temp(lv2_meter_run_id, p_daytime, '<=');
   ln_tpipe   := Ecdp_Unit.convertValue( ln_tpipe,
                                         ecdp_Unit.GetUnitFromLogical(EcDp_ClassMeta_Cnfg.getUomCode('METER_RUN','TPIPE')),
                                         ecdp_Unit.GetUnitFromLogical('TEMP')); -- Convert tpipe from R to TEMP
   ln_nploc   := ec_meter_run_version.location_of_taps(lv2_meter_run_id, p_daytime, '<=');
   ln_factr   := ec_meter_run_version.all_calibration_factor(lv2_meter_run_id, p_daytime, '<=');

   -- data from orifice connected to the stream
   lv2_orifice_plate_id := ecdp_strm_aga.getOrificePlate(p_object_id, p_daytime,p_event_type);
   lv2_matorf           := ec_orifice_plate_version.material( lv2_orifice_plate_id, p_daytime,'<=');
   ln_do                := ec_orifice_plate_version.diameter( lv2_orifice_plate_id, p_daytime,'<='); -- in inches
    IF ln_do <= ln_dolow OR ln_do >= ln_dohigh THEN
      RAISE ex_do;
    END IF;
   ln_torf              := ec_orifice_plate_version.measurement_temp( lv2_orifice_plate_id, p_daytime,'<='); -- in Rankin
   ln_torf              := Ecdp_Unit.convertValue( ln_torf,
                                                   ecdp_Unit.GetUnitFromLogical(EcDp_ClassMeta_Cnfg.getUomCode('ORIFICE_PLATE','TORF')),
                                                   ecdp_Unit.GetUnitFromLogical('TEMP')); -- Convert torf from R to TEMP
   ln_spec_grav         := ecbp_stream_fluid.findSpecificGravity(p_object_id, p_daytime);
   ln_x  := (ln_diffPressure ) /(ln_staticPressure * ln_N3); -- Converting static pressure from PSIA to INH2O
   IF lv2_ntaps = '1' THEN  -- when Tap type is FLANGE -- Aga31990
     IF lv2_Aga3Type ='AGA3-1990' THEN  -- 1 equals 1990
        IF ln_matpipe = '1' THEN             -- Meter Run pipe material = STAINLESS STEEL
          ln_dmc := (ln_dm) * (1. + 9.25e-6 * (ln_flowingtemp - ln_tpipe));
        ELSIF ln_matpipe = '2' THEN          -- MONEL
          ln_dmc := (ln_dm) * (1. + 7.95e-6 * (ln_flowingtemp - ln_tpipe));
        ELSIF ln_matpipe = '3' THEN          -- CARBON STEEL
          ln_dmc := (ln_dm) * (1. + 6.2e-6 * (ln_flowingtemp - ln_tpipe));
        END IF;
        IF lv2_matorf = '1' THEN             --Orifice Plate pipe material = 304/316 STAINLESS STEEL
          ln_doc := (ln_do) * (1. + 9.25e-6  * (ln_flowingtemp - ln_torf));
        ELSIF lv2_matorf = '2' THEN          -- MONEL
          ln_doc := (ln_do) * (1. + 7.95e-6 * (ln_flowingtemp - ln_torf));
        ELSIF lv2_matorf = '3' THEN          -- CARBON STEEL
          ln_doc := (ln_do) * (1. + 6.2e-6 * (ln_flowingtemp - ln_torf));
        ELSIF lv2_matorf = '4' THEN          -- 304 Stainless STEEL
          ln_doc := (ln_do) * (1. + 9.25e-6 * (ln_flowingtemp - ln_torf));
        ELSIF lv2_matorf = '5' THEN          -- 316 Stainless STEEL
          ln_doc := (ln_do) * (1. + 9.25e-6 * (ln_flowingtemp - ln_torf));
        END IF;
       ln_beta := ln_doc/ln_dmc;
        IF ln_beta <=ln_blow OR ln_beta >= ln_bhigh THEN
          RAISE ex_beta; -- RAISE_APPLICATION_ERROR(20003,'BETA RATIO (DO/DM) WAS <= 0 OR >= 1');
        END IF;
       ln_Ev   :=   1.0/ power((1.0-power(ln_beta,4)),0.5);
       ln_Y := calcExpansionFactor(1,ln_beta,ln_nploc,ln_aga3Kfac,ln_x,ln_aga3Ifluid);
       /* N4=UNITS CONVERSION CONSTANT FOR TAP LOCATION
          N4=1.0 IN US UNITS
          L1=DIMENSIONLESS UPSTREAM TAP POSITION (EQUATION 4-15)
          L2=DIMENSIONLESS DOWNSTREAM TAP POSITION (EQUATION 4-16)
          L1 AND L2 FOR FLANGE TAPPED ORIFICES
       */
       ln_L1 :=ln_N4/ln_DMC;
       ln_L2 :=ln_N4/ln_DMC;
       /* M2=DIMENSIONLESS DOWNSTREAM DAM HEIGHT (EQUATION 4-17) */
       ln_M2 :=2.0*ln_L2/(1.0- ln_BETA);
       /* TU=UPSTREAM TAP CORRECTION FACTOR (EQUATION 4-18)  */
       ln_TU :=(ln_S2+ln_S3*exp(-8.5*ln_L1)+ln_S4*exp(-6.0*ln_L1))* power((ln_BETA),4)/(1.0- power((ln_BETA),4));
       /* TD=DOWNSTREAM TAP CORRECTION FACTOR (EQUATION 4-19) */
       ln_TD:=ln_S6*(ln_M2+ ln_S7*(power(ln_M2,1.3)))*power(ln_beta,1.1);
       /* TS */
       IF ln_dmc >  ln_N4 * ln_A4 then
         ln_ts := 0;
       ELSE
         ln_ts := ln_A3 * (1 - ln_beta) * (ln_A4  - ln_dmc / ln_N4);
       END IF;

       /* THE EQUATIONS BELOW FOLLOW 1992 AGA 3, PART 4
          FI=ITERATION FLOW FACTOR
          NIC=UNITS CONVERSION CONSTANT FOR FI
          NIC=0.000623582 IN US UNITS (PG 23, AGA 3, PART 4)
       */
       ln_NIC := 6.23582e-4;
       ln_aga3Ts := Ecdp_Unit.convertValue( ln_aga3Ts,
                                           ecdp_Unit.GetUnitFromLogical(EcDp_ClassMeta_Cnfg.getUomCode('AGA_CONSTANT','TS')),
                                           'F'); -- Converting Std Temperature to 'F'
       ln_aga3Ps := Ecdp_Unit.convertValue( ln_aga3Ps,
                                           ecdp_Unit.GetUnitFromLogical(EcDp_ClassMeta_Cnfg.getUomCode('AGA_CONSTANT','PS')),
                                           'PSIA'); -- Converting Std Pressure to 'PSIA'.

       --AGA8 for Detail Method
       IF lv2_use_aga8_ind = 'Y' THEN
          IF ln_aga8Grgr IS NULL THEN
               RAISE ex_aga8grgr;
             ELSIF ln_aga8Grgr < ln_aga8g_low OR ln_aga8Grgr > ln_aga8g_high THEN
               RAISE ex_aga8grgr;
             ELSIF ln_hv IS NULL THEN
               RAISE ex_hv;
             ELSIF ln_hv < ln_hv_low THEN
               RAISE ex_hv;
             ELSIF ln_x1 IS NULL THEN
               RAISE ex_missing_x1;
             ELSIF ln_x1 < ln_x_low THEN
               RAISE ex_x1;
             ELSIF ln_x2 IS NULL THEN
               RAISE ex_x2;
             ELSIF ln_x2 < ln_x_low OR ln_x2 > ln_x2_high THEN
               RAISE ex_x2;
             ELSIF ln_x3 IS NULL THEN
               RAISE ex_x3;
             ELSIF ln_x3 < ln_x_low OR ln_x3 > ln_x3_high THEN
               RAISE ex_x3;
             ELSIF ln_x4 IS NULL THEN
               RAISE ex_x4;
             ELSIF ln_x4 < ln_x_low OR ln_x4 > ln_x4_high THEN
               RAISE ex_x4;
             ELSIF ln_aga8tb IS NULL THEN
               RAISE ex_tb;
             ELSIF ln_aga8pb IS NULL THEN
               RAISE ex_pb;
             ELSIF ln_aga8tgr IS NULL THEN
               RAISE ex_tgr;
             ELSIF ln_aga8pgr IS NULL THEN
               RAISE ex_pgr;
             ELSIF ln_aga8Td IS NULL THEN
               RAISE ex_td;
             ELSIF ln_aga8Pd IS NULL THEN
               RAISE ex_pd;
             ELSIF ln_aga8th IS NULL THEN
               RAISE ex_th;
             ELSIF ln_aga8tb < ln_tmp_low or ln_aga8tb > ln_tmp_high THEN
               RAISE ex_tb;
             ELSIF ln_aga8pb < ln_pr_low or ln_aga8pb > ln_pr_high THEN
               RAISE ex_pb;
             ELSIF ln_aga8tgr < ln_tmp_low or ln_aga8tgr > ln_tmp_high THEN
               RAISE ex_tgr;
             ELSIF ln_aga8pgr < ln_pr_low or ln_aga8pgr > ln_pr_high THEN
               RAISE ex_pgr;
             ELSIF ln_aga8Td < ln_tmp_low or ln_aga8Td > ln_tmp_high THEN
               RAISE ex_td;
             ELSIF ln_aga8Pd < ln_pr_low or ln_aga8Pd > ln_pr_high THEN
               RAISE ex_pd;
             ELSIF ln_aga8th < ln_tmp_low or ln_aga8th > ln_tmp_high THEN
               RAISE ex_th;
           END IF;

       ln_aga8Pd := Ecdp_Unit.convertValue( ln_aga8Pd,
                                           ecdp_Unit.GetUnitFromLogical(EcDp_ClassMeta_Cnfg.getUomCode('AGA_CONSTANT','PD')),
                                           'PSIA');
       ln_aga8Th := Ecdp_Unit.convertValue( ln_aga8Th,
                                           ecdp_Unit.GetUnitFromLogical(EcDp_ClassMeta_Cnfg.getUomCode('AGA_CONSTANT','TH')),
                                           'F'); --Converting Reference Temperature to 'F'.
         IF lv2_Aga8Method = '3' THEN
           calcCompressibility_Detail(p_object_id
                      ,p_daytime
                      ,ln_staticpressure
                      ,ln_flowingTemp
                      ,ln_aga3Ps
                      ,ln_aga3Ts
                      ,ln_aga3Rhotp
                      ,ln_aga3Rhos
                      ,ln_compressibility_flow
                      ,ln_compressibility_std
                      ,li_error);
           ln_aga3Rhotp:= calculateFlowDensity(p_object_id,p_daytime,ln_staticpressure,ln_flowingTemp,ln_compressibility_flow);
           ln_aga3Rhos := calculateStdDensity(p_object_id,p_daytime,ln_aga3Ps,ln_aga3Ts,ln_compressibility_std);

         --AGA8 for Gross Method 2 - use CO2 and N2 to calculate compressibility and density at std condition
         ELSIF lv2_Aga8Method = '2' THEN
            IF ln_x1 < ln_x_low OR ln_x1 > ln_x1_high THEN
              RAISE ex_x1;
            END IF;
           calc_z_gross_2(p_object_id, p_daytime,ln_staticPressure, ln_flowingTemp,ln_aga3Ps,ln_aga3Ts, ln_aga8Grgr,ln_aga8Th,ln_x1, ln_x2, ln_x3,ln_x4,ln_aga3Rhos,ln_compressibility_std,ln_aga3Rhotp,ln_compressibility_flow,ln_mr);
           ln_aga3Rhotp:= calculateFlowDensity(p_object_id,p_daytime,ln_staticpressure,ln_flowingTemp,ln_compressibility_flow);
           ln_aga3Rhos := calculateStdDensity(p_object_id,p_daytime,ln_aga3Ps,ln_aga3Ts,ln_compressibility_std);
         --AGA8 for Gross Method 1- get the heating value and then calculate compressibility and density at std conditions
         ELSIF lv2_Aga8Method = '1' THEN
           IF ln_hv < ln_hv_low OR ln_hv > ln_hv_high THEN
             RAISE ex_hv;
           END IF;
           calc_z_gross_1(p_object_id, p_daytime,ln_staticPressure, ln_flowingTemp,ln_aga8Pd,ln_aga8Td,ln_aga3Ps,ln_aga3Ts,ln_aga8Grgr,ln_aga8Th,ln_hv,ln_x1, ln_x2, ln_x3,ln_x4,ln_hv,ln_aga3Rhos,ln_compressibility_std,ln_aga3Rhotp,ln_compressibility_flow,ln_mr);
           ln_aga3Rhotp:= calculateFlowDensity(p_object_id,p_daytime,ln_staticpressure,ln_flowingTemp,ln_compressibility_flow,ln_mr);
           ln_aga3Rhos := calculateStdDensity(p_object_id,p_daytime,ln_aga3Ps,ln_aga3Ts,ln_compressibility_std,ln_mr);
         END IF;
       ELSIF lv2_use_aga8_ind = 'N' THEN
         -- ln_flowingTemp must be in celsius and pressure is in kpa.
         ln_aga3Rhotp:= nvl(Ecdp_Unit.convertValue(ln_aga3Rhotp,
                                                  ecdp_Unit.GetUnitFromLogical(EcDp_ClassMeta_Cnfg.getUomCode('AGA_CONSTANT','RHOTP')),
                                                  'KGPERM3'),
                           calculateFlowDensity(p_object_id,p_daytime,ln_staticpressure,ln_flowingTemp,ln_compressibility_flow));

         ln_aga3Rhos := nvl(Ecdp_Unit.convertValue(ln_aga3Rhos,
                                                  ecdp_Unit.GetUnitFromLogical(EcDp_ClassMeta_Cnfg.getUomCode('AGA_CONSTANT','RHOTP')),
                                                  'KGPERM3'),
                           calculateStdDensity(p_object_id,p_daytime,ln_aga3Ps,ln_aga3Ts,ln_compressibility_std));
       END IF;

        /*FI=ITERATION FLOW FACTOR
          CALCULATE ITERATION FLOW FACTOR (FI) AS PER SECTION 4.3.2.8
          FIRST CALCULATE INTERMEDIATE VALUES
          FIC - EQUATION 4-32
          FIP - EQUATION 4-33
          THEN CALCULATE FI USING EQUATIONS 4-34 OR 4-35
        */
       ln_FIC :=4000.0*ln_NIC* ln_DMc*(ln_aga3VISC)/((ln_EV)*(ln_DOc)*(ln_DOc)*(ln_Y));
       ln_FIP :=power((2.0 * ln_aga3Rhotp * ln_diffPressure),0.5);
       IF ln_FIC < (1000.0* ln_FIP) THEN
         ln_FI :=ln_FIC/ln_FIP;
       ELSE
         ln_FI :=1000.0;
       END IF;
       ln_CD0 := ln_A0 + ln_A1 * power(ln_Beta,2) + ln_A2 * power(ln_Beta,8) + ln_TU + ln_TD + ln_TS;
       ln_CD1 := ln_A5 * power(ln_BETA,0.7)* power(250.0,0.7);
       ln_CD2 := ln_A6 * power((ln_BETA),4)*power(250.0,0.35);
       ln_CD3 := ln_S1 * power(ln_BETA,4.8)* power(250.0,0.35)*power(4.75,0.8);
       ln_CD4 := (ln_S5 * ln_TU+ ln_S8 * ln_TD)* power((ln_BETA),0.8)*power(4.75,0.8);
       /* THE FOLLOWING FOLLOWS SECTION 4.3.2.9
       INITIALIZE CD TO VALUE AT INFINITE REYNOLDS NUMBER   */
       -- calculate cd
       -- Initialize CD to CD0
       ln_CD:=ln_CD0;
       <<calculate_Cd>>
       /* X=RATIO OF 4000.0 TO THE ASSUMED REYNOLDS NUMBER=4000.0/RE
       USE EQUATION 4-39         */
       ln_X   := ln_FI / ln_CD;
       /* SET CONSTANTS:
       XC - EQUATION 4-36
       A  - EQUATION 4-37
       B  - EQUATION 4-38
       XC=VALUE OF X WHERE LOW REYNOLDS NUMBER SWITCH OCCURS
       A,B=CORRELATION CONSTANTS FOR LOW REYNOLDS NUMBER FACTOR
       */
       ln_XC :=1.142139337256165;
       ln_A  :=4.343524261523267;
       ln_B  :=3.764387693320165;

       /* CALCULATE FC AND DC USING EQUATIONS 4-40 AND 4-41 OR
         EQUATIONS 4-42 AND 4-43
         FC=VALUE OF CD FROM CORRELATION FOR CD
         DC=DERIVATIVE OF FC WRT CD TIMES -CD=(d(FC)/d(CD))/(-CD)  */
       IF (ln_X < ln_XC) THEN
         ln_FC := ln_CD0+(ln_CD1*power(ln_X,0.35)+ ln_CD2+ ln_CD3*power(ln_X,0.8))* power(ln_X,0.35)+ln_CD4*power(ln_X,0.8);
         ln_DC :=(0.7*ln_CD1*power(ln_X,0.35)+0.35*ln_CD2 +1.15*ln_CD3*power(ln_X,0.8))* power(ln_X,0.35) +0.8*ln_CD4*power(ln_X,0.8);
       ELSE
         ln_FC := ln_CD0+ ln_CD1*power(ln_X,0.7)+(ln_CD2+ln_CD3*power(ln_X,0.8))*(ln_A-ln_B/ln_X)+ln_CD4*power(ln_X,0.8);
         ln_DC := 0.7*ln_CD1*power(ln_X,0.7)+(ln_CD2+ln_CD3*power(ln_X,0.8))*ln_B/ln_X +0.8*ln_CD3*(ln_A-ln_B/ln_X)*power(ln_X,0.8)+0.8*ln_CD4*power(ln_X,0.8);
       END IF;
       /* DELCD=ITERATIVE CHANGE IN CD - EQUATION 4-44     */
       ln_DELCD :=((ln_CD)-ln_FC)/(1.0+ ln_DC/(ln_CD));
       ln_CD:=(ln_CD)-ln_DELCD;
       IF abs(ln_DELCD) > 0.0000004 THEN
         GOTO calculate_Cd;
       END IF;
       ln_QV := ln_PI * ln_NC * ln_ev * ln_doc**2/4 ;
       ln_QV := ln_Qv * ln_cd * ln_Y * sqrt(2 *ln_aga3Rhotp  *  ln_diffPressure);
       ln_QV := ln_QV / ln_aga3Rhos * ln_hours/1000 ; -- result in mSCF.
       ln_QV := ln_QV * 0.028316846592; --the factor convert from mSCF to ksm3

       -- for 1985 only the calculated ko is different between flange and pipe
     ELSIF lv2_Aga3Type ='AGA3-1985' THEN
       ln_do := ecdp_unit.convertValue(ln_do, 'MM', 'IN');
       ln_dm := ecdp_unit.convertValue(ln_dm, 'MM', 'IN');
       ln_beta := ln_do/ln_dm;
       ln_Y  := calcExpansionFactor(lv2_ntaps,ln_beta,ln_nploc,ln_aga3Kfac,ln_x,ln_aga3Ifluid);
       ln_ko := calcKo(lv2_ntaps, ln_beta,ln_dm,ln_do);
       ln_fb := 338.178 * ln_ko * power(ln_do, 2);
       IF lv2_matorf IN (1,4,5) THEN
         ln_fa := 1+ 0.0000185 * (ln_flowingTemp   - ln_torf) * 1.8;
       ELSE
         ln_fa := 1+ 0.0000159 * (ln_flowingTemp   - ln_torf) * 1.8;
       END IF;
       ln_fr := calcFr(ln_beta,
                     Ecdp_Unit.convertValue( ecbp_stream_fluid.agaDiffStaticPress(p_object_id, p_daytime,'PERIOD_GAS_STRM_DATA_AGA') ,
                                                  ecdp_Unit.GetUnitFromLogical(EcDp_ClassMeta_Cnfg.getUomCode('PERIOD_GAS_STRM_DATA_AGA','DIFF_PRESS')),
                                                  'INH2O'),
                     Ecdp_Unit.convertValue( ecbp_stream_fluid.agaStaticPress(p_object_id, p_daytime,'PERIOD_GAS_STRM_DATA_AGA'),
                                                  ecdp_Unit.GetUnitFromLogical(EcDp_ClassMeta_Cnfg.getUomCode('PERIOD_GAS_STRM_DATA_AGA','STATIC_PRESS')),
                                                  'PSIA'),
                     ln_do,
                     calcE( lv2_ntaps,ln_beta,ln_dm,ln_do));

       ln_Fpb:= 14.73/Ecdp_Unit.convertValue( ln_aga3Ps,ecdp_Unit.GetUnitFromLogical(EcDp_ClassMeta_Cnfg.getUomCode('AGA_CONSTANT','PS')),'PSIA');
       ln_Ftf := power(288.71/(ln_flowingTemp + 273.15),0.5);
       -- calculate ftb, assuming std temp is in Rankin
       ln_ftb := (ecdp_unit.convertValue( ln_aga3Ts, 'R', 'C') +273.15)/288.7055556; -- temperature at base condition
       IF lv2_use_aga8_Ind = 'Y' THEN
         ln_compressibility_flow := calcCompressibility_RK(p_object_id,p_daytime,ln_staticpressure,ln_flowingTemp);
         ln_compressibility_std := calcCompressibility_RK(p_object_id,
                                       p_daytime,
                                       ecdp_unit.convertValue( ln_aga3Ps, ecdp_Unit.GetUnitFromLogical(EcDp_ClassMeta_Cnfg.getUomCode('AGA_CONSTANT','PS')), 'KPAA'),
                                       ecdp_unit.convertValue( ln_aga3Ts, ecdp_Unit.GetUnitFromLogical(EcDp_ClassMeta_Cnfg.getUomCode('AGA_CONSTANT','TS')), 'C'));
         ln_Fpv := power((ln_compressibility_std/ln_compressibility_flow), 0.5);
       ELSIF lv2_use_aga8_Ind = 'N' THEN
         ln_Fpv := ln_aga3Fpvs;
       END IF;
       ln_fgr := power(1/( ln_spec_grav * ln_aga3Zairs / ln_compressibility_std),0.5);
       ln_C   := ln_fb * ln_Y * ln_ftb * ln_fgr * ln_fr * ln_fpb * ln_ftf * ln_fpv * ln_fa * ln_condition_factor * ln_eff_cor_factor;
       ln_diffPressure := ecdp_unit.convertValue( ln_diffPressure, 'KPA', 'INH2O');
       ln_staticPressure := ecdp_unit.convertValue(ln_staticPressure, 'KPAA', 'PSIA');
       ln_QV  := ln_C * power(( ln_diffPressure  *ln_staticPressure),0.5) * ln_hours/1000;  -- unit returned MCF
       ln_QV := ln_QV * 0.028316846592;--the factor convert from mCF to ksm3
     END If;
   END IF;

 RETURN ln_qv;

END calcAga3;

---------------------------------------------------------------------------------------------------
-- Procedure      : calculate_AGA
-- Description    : Calculates Aga3/8 via 'Calculate Selected' button
--
-- Preconditions  : This is being called from Period Gas Stream Aga screen.
-- Postconditions :
--
-- Using tables   :
--
-- Using functions:
--
-- Configuration
-- required       :
--
-- Behaviour      :
--
---------------------------------------------------------------------------------------------------
PROCEDURE calculate_AGA(
   p_object_id  VARCHAR2,
   p_daytime    DATE,
   p_event_type VARCHAR2,
   p_user VARCHAR2)
IS

  ln_calc_aga NUMBER;
  ln_calc_vol NUMBER;

BEGIN

  ln_calc_vol := calcAga3(p_object_id, p_daytime, p_event_type, p_user);

  IF ln_calc_vol IS NOT NULL THEN

     ln_calc_aga := Ecdp_Unit.convertValue(ln_calc_vol,
                                           'KSM3',
                                           Ecdp_Unit.GetUnitFromLogical(EcDp_ClassMeta_Cnfg.getUomCode('PERIOD_GAS_STRM_DATA_AGA','VOLUME')));

     UPDATE STRM_EVENT se
     SET se.grs_vol = ln_calc_aga,
         se.last_updated_by = p_user
     WHERE se.object_id = p_object_id
       AND se.daytime = p_daytime
       AND se.event_type = p_event_type;
  END IF;

END;

---------------------------------------------------------------------------------------------------
-- Procedure      : calculate_all_AGA
-- Description    : Calculates Aga3/8 via 'Calculate All' button
--
-- Preconditions  : This is being called from Period Gas Stream Aga screen.
-- Postconditions :
--
-- Using tables   :
--
-- Using functions:
--
-- Configuration
-- required       :
--
-- Behaviour      :
--
---------------------------------------------------------------------------------------------------
PROCEDURE calculate_all_AGA(
   p_object_id  VARCHAR2,
   p_fromdate DATE,
   p_todate DATE,
   p_event_type VARCHAR2,
   p_user VARCHAR2)
IS

  CURSOR c_strm_event IS
   SELECT se.object_id, se.daytime, se.event_type
   FROM STRM_EVENT se
   WHERE se.event_type = p_event_type
   AND se.daytime between p_fromdate and p_todate
   AND se.object_id IN
       (SELECT object_id s
        FROM OV_STREAM s
        WHERE s.OP_FCTY_1_ID = EcDp_Facility.getParentFacility(p_object_id,p_fromdate));

  ln_calc_aga NUMBER;
  ln_calc_vol NUMBER;

BEGIN

  FOR cur_strm_event IN c_strm_event LOOP

    ln_calc_vol := calcAga3(cur_strm_event.object_id, cur_strm_event.daytime, cur_strm_event.event_type, p_user);

    ln_calc_aga := Ecdp_Unit.convertValue(ln_calc_vol,
                                           'KSM3',
                                           Ecdp_Unit.GetUnitFromLogical(EcDp_ClassMeta_Cnfg.getUomCode('PERIOD_GAS_STRM_DATA_AGA','VOLUME')));

    UPDATE STRM_EVENT se
    SET se.grs_vol = ln_calc_aga
    WHERE se.object_id = cur_strm_event.object_id
       AND se.daytime = cur_strm_event.daytime
       AND se.event_type = cur_strm_event.event_type;

  END LOOP;

END;

 ---------------------------------------------------------------------------------------------------
  -- Procedure      : calcAga3_TestDevice
  -- Description    : Calculates Aga3/8
  --
  -- Preconditions  : This is being called from Single Production Well Test Result.
  -- Postconditions :
  --
  -- Using tables   :
  --
  -- Using functions: calcAga3_TestDevice
  --
  -- Configuration
  -- required       :
  --
  -- Behaviour      :
  --
  ---------------------------------------------------------------------------------------------------
   PROCEDURE calcAga3_TestDevice(p_result_no VARCHAR2,
                                p_phase     VARCHAR2,
                                p_object_id VARCHAR2,
                                p_daytime   DATE,
                                p_user      VARCHAR2) IS

    ln_staticpressure       NUMBER;
    ln_diffPressure         NUMBER;
    ln_flowingTemp          NUMBER;
    ln_hours                NUMBER;
    ln_aga3Ts               NUMBER;
    ln_aga3Ps               NUMBER;
    ln_aga3Rhotp            NUMBER;
    ln_aga3Rhos             NUMBER;
    ln_aga3Fpvs             NUMBER;
    lv2_use_aga8_Ind        VARCHAR2(1);
    li_error                INT;
    ln_aga3Visc             NUMBER;
    ln_aga3Kfac             NUMBER;
    ln_aga3Ifluid           NUMBER;
    ln_aga3Grs              NUMBER;
    ln_aga3Zairs            NUMBER;
    ln_aga3Th               NUMBER;
    ln_hv                   NUMBER;
    lv2_meter_run_id        VARCHAR2(32);
    lv2_ntaps               VARCHAR2(32);
    ln_matpipe              NUMBER;
    ln_dm                   NUMBER;
    ln_dmc                  NUMBER;
    ln_tpipe                NUMBER;
    ln_nploc                VARCHAR2(32);
    ln_factr                NUMBER;
    lv2_orifice_plate_id    VARCHAR2(32);
    lv2_matorf              VARCHAR2(32); -- material choice
    ln_do                   NUMBER; -- internal diameter size in inches
    ln_torf                 NUMBER; -- temperature in Rankin
    ln_beta                 NUMBER;
    ln_ev                   NUMBER;
    ln_doc                  NUMBER;
    ln_Y                    NUMBER;
    ln_QV                   NUMBER;
    ln_NC                   NUMBER := 323.279;
    ln_PI                   NUMBER := 3.14159;
    ln_cd                   NUMBER; -- ORIFICE PLATE COEFFICIENT OF DISCHARGE
    ln_cd0                  NUMBER;
    ln_cd1                  NUMBER;
    ln_cd2                  NUMBER;
    ln_cd3                  NUMBER;
    ln_cd4                  NUMBER;
    ln_A0                   NUMBER := 0.5961;
    ln_A1                   NUMBER := 0.0291;
    ln_A2                   NUMBER := -0.229;
    ln_A3                   NUMBER := 0.003;
    ln_A4                   NUMBER := 2.8;
    ln_A5                   NUMBER := 0.000511;
    ln_A6                   NUMBER := 0.021;
    ln_S1                   NUMBER := 0.0049;
    ln_S2                   NUMBER := 0.0433;
    ln_S3                   NUMBER := 0.0712;
    ln_S4                   NUMBER := -0.1145;
    ln_S5                   NUMBER := -0.2300;
    ln_S6                   NUMBER := -0.0116;
    ln_S7                   NUMBER := -0.5200;
    ln_S8                   NUMBER := -0.1400;
    ln_TU                   NUMBER;
    ln_TS                   NUMBER;
    ln_TD                   NUMBER;
    ln_N3                   NUMBER := 27.7070;
    ln_N4                   NUMBER := 1;
    ln_L1                   NUMBER;
    ln_L2                   NUMBER;
    ln_M2                   NUMBER;
    ln_X                    NUMBER;
    ln_NIC                  NUMBER;
    ln_XC                   NUMBER;
    ln_A                    NUMBER;
    ln_B                    NUMBER;
    ln_FIC                  NUMBER;
    ln_FIP                  NUMBER;
    ln_FI                   NUMBER;
    ln_FC                   NUMBER;
    ln_DC                   NUMBER;
    ln_delcd                NUMBER;
    ln_compressibility_flow NUMBER;
    ln_compressibility_std  NUMBER;
    ln_ko                   NUMBER;
    ln_fb                   NUMBER;
    ln_fa                   NUMBER;
    ln_Fr                   NUMBER;
    ln_Fpb                  NUMBER;
    ln_Ftf                  NUMBER;
    ln_ftb                  NUMBER;
    ln_Fpv                  NUMBER;
    ln_Fgr                  NUMBER;
    ln_C                    NUMBER;
    ln_condition_factor     NUMBER;
    ln_eff_cor_factor       NUMBER;
    ln_x1                   NUMBER; -- Nitrogen mol fraction.
    ln_x2                   NUMBER; -- Carbon dioxide mole frac.
    ln_x3                   NUMBER; -- Hydrogen mole frac.
    ln_x4                   NUMBER; -- Carbon monoxide mole frac.
    ln_spec_grav            NUMBER;
    lv2_Aga3Type            VARCHAR2(32);
    lv2_Aga8Method          VARCHAR2(32);
    lv2_strm_id             VARCHAR2(32);
    ld_daytime              DATE;
    lv2_class_name          VARCHAR2(32);
    lv2_gas_vol_method      VARCHAR2(32);
    lv2_gas_lift_vol_method VARCHAR2(32);
    lv2_object_id           VARCHAR2(32);
    lv2_prod_method         VARCHAR2(32);

    CURSOR c_object_aga_analysis IS
      SELECT *
        FROM object_aga_analysis oaa
        WHERE oaa.object_id =
             (SELECT t.analysis_strm_id
                FROM tdev_reference_value t
               WHERE t.object_id = p_object_id
                 AND t.daytime =
                    ( SELECT max(t2.daytime)
                      FROM tdev_reference_value t2
                      WHERE t2.object_id = t.object_id
                      AND t2.daytime <= p_daytime)
             )
        AND (oaa.analysis_status = 'APPROVED');



   CURSOR c_object_aga_analysis_gl IS
      SELECT *
         FROM object_aga_analysis oaa
        WHERE oaa.object_id =
             (SELECT t.analysis_gl_strm_id
                FROM tdev_reference_value t
                WHERE t.object_id = p_object_id
                AND t.daytime =
                    ( SELECT max(t2.daytime)
                      FROM tdev_reference_value t2
                      WHERE t2.object_id = t.object_id
                      AND t2.daytime <= p_daytime)
             )
         AND (oaa.analysis_status = 'APPROVED');

  BEGIN

     -- Checking for Gas/Gas Lift Volume method
     lv2_gas_vol_method := nvl(ec_test_device_version.grs_gas_vol_method(p_object_id,p_daytime,'<='), 'MEASURED');
     lv2_gas_lift_vol_method := nvl(ec_test_device_version.grs_gl_vol_method(p_object_id,p_daytime,'<='), 'MEASURED');

     SELECT OBJECT_ID,DAYTIME
     INTO lv2_object_id,ld_daytime
     FROM PWEL_RESULT
     WHERE RESULT_NO=p_result_no;

     lv2_prod_method := ec_well_version.prod_method(lv2_object_id,ld_daytime,'<='); -- Checking for production method.
     lv2_class_name  := ec_test_device_result.data_class_name(p_object_id,p_result_no);
    -- Converting static pressure to PSIA and differential pressure to INH2O.

    IF (p_phase='GAS' and lv2_gas_vol_method='ORIFICE_AGA') THEN
      ln_flowingTemp    := ec_test_device_result.gas_flow_temp(p_object_id,p_result_no);
      ln_flowingTemp    := ecdp_unit.convertValue(ln_flowingTemp,NVL(ecdp_unit.GetUnitFromLogical(EcDp_ClassMeta_Cnfg.getUomCode(lv2_class_name,'GAS_FLOW_TEMP')),'F'),'F');
       IF ln_flowingTemp IS NULL OR ln_flowingTemp <= ln_ft_low OR ln_flowingTemp > ln_ft_high THEN
         RAISE ex_flowing_temp;
       END IF;
     FOR cur_object_aga_analysis IN c_object_aga_analysis LOOP
      ln_aga3Rhotp            := cur_object_aga_analysis.rhotp; -- Density of fluid at flowing conditions (TF and PF)
      ln_aga3Rhos             := cur_object_aga_analysis.rhos; -- Density of fluid at standard conditions (TS and PS)
      ln_aga3VISC             := cur_object_aga_analysis.visc; -- Absolute viscosity of fluid flowing/isentropic exponent
      ln_aga3Kfac             := cur_object_aga_analysis.Kfac; -- Isentropic exponent
      ln_aga3Ifluid           := cur_object_aga_analysis.Ifluid; -- compressibility.
      ln_aga3Zairs            := cur_object_aga_analysis.zairs; --compressibility factor of air
      ln_aga3Fpvs             := cur_object_aga_analysis.fpvs; -- supercompressibility factor
      ln_aga3Grs              := cur_object_aga_analysis.grs; -- compressibility factor of air.
      ln_aga3Ts               := cur_object_aga_analysis.ts; -- standard temperature for the system
      ln_aga3Ps               := cur_object_aga_analysis.ps; -- standard pressure for the system
      ln_aga3Th               := cur_object_aga_analysis.th; -- Reference temperature for combustion.
      ln_compressibility_flow := cur_object_aga_analysis.compressibility_flow;
      ln_compressibility_std  := cur_object_aga_analysis.compressibility_std;
      ln_condition_factor     := cur_object_aga_analysis.condition_factor;
      ln_eff_cor_factor       := cur_object_aga_analysis.eff_corr_factor;
      lv2_Aga3Type            := cur_object_aga_analysis.aga3_type;
      lv2_use_aga8_Ind        := cur_object_aga_analysis.use_aga8_ind;
      lv2_aga8Method          := cur_object_aga_analysis.GS_CALC_METHOD;
      ln_x1                   := cur_object_aga_analysis.x1;
      ln_x2                   := cur_object_aga_analysis.x2;
      ln_x3                   := cur_object_aga_analysis.x3;
      ln_x4                   := cur_object_aga_analysis.x4;
      ln_hv                   := cur_object_aga_analysis.hv;
      lv2_strm_id             := cur_object_aga_analysis.object_id;
     END LOOP;
    ELSIF (p_phase='GAS_LIFT' and lv2_gas_lift_vol_method = 'ORIFICE_AGA' AND lv2_prod_method='GL') THEN
      ln_flowingTemp    := ec_test_device_result.gl_flow_temp(p_object_id, p_result_no);
      ln_flowingTemp    := ecdp_unit.convertValue(ln_flowingTemp,NVL(ecdp_unit.GetUnitFromLogical(EcDp_ClassMeta_Cnfg.getUomCode(lv2_class_name,'GL_FLOW_TEMP')),'F'),'F');
       IF ln_flowingTemp IS NULL OR ln_flowingTemp <= ln_ft_low OR ln_flowingTemp > ln_ft_high THEN
         RAISE ex_flowing_temp;
       END IF;
     FOR cur_object_aga_analysis_gl IN c_object_aga_analysis_gl LOOP
      ln_aga3Rhotp            := cur_object_aga_analysis_gl.rhotp; -- Density of fluid at flowing conditions (TF and PF)
      ln_aga3Rhos             := cur_object_aga_analysis_gl.rhos; -- Density of fluid at standard conditions (TS and PS)
      ln_aga3VISC             := cur_object_aga_analysis_gl.visc; -- Absolute viscosity of fluid flowing/isentropic exponent
      ln_aga3Kfac             := cur_object_aga_analysis_gl.Kfac; -- Isentropic exponent
      ln_aga3Ifluid           := cur_object_aga_analysis_gl.Ifluid; -- compressibility.
      ln_aga3Zairs            := cur_object_aga_analysis_gl.zairs; --compressibility factor of air
      ln_aga3Fpvs             := cur_object_aga_analysis_gl.fpvs; -- supercompressibility factor
      ln_aga3Grs              := cur_object_aga_analysis_gl.grs; -- compressibility factor of air.
      ln_aga3Ts               := cur_object_aga_analysis_gl.ts; -- standard temperature for the system
      ln_aga3Ps               := cur_object_aga_analysis_gl.ps; -- standard pressure for the system
      ln_aga3Th               := cur_object_aga_analysis_gl.th; -- Reference temperature for combustion.
      ln_compressibility_flow := cur_object_aga_analysis_gl.compressibility_flow;
      ln_compressibility_std  := cur_object_aga_analysis_gl.compressibility_std;
      ln_condition_factor     := cur_object_aga_analysis_gl.condition_factor;
      ln_eff_cor_factor       := cur_object_aga_analysis_gl.eff_corr_factor;
      lv2_Aga3Type            := cur_object_aga_analysis_gl.aga3_type;
      lv2_use_aga8_Ind        := cur_object_aga_analysis_gl.use_aga8_ind;
      lv2_aga8Method          := cur_object_aga_analysis_gl.GS_CALC_METHOD;
      ln_x1                   := cur_object_aga_analysis_gl.x1;
      ln_x2                   := cur_object_aga_analysis_gl.x2;
      ln_x3                   := cur_object_aga_analysis_gl.x3;
      ln_x4                   := cur_object_aga_analysis_gl.x4;
      ln_hv                   := cur_object_aga_analysis_gl.hv;
      lv2_strm_id             := cur_object_aga_analysis_gl.object_id;
     END LOOP;
    ELSE
      RETURN; -- Exit calculation when Gas/Gas Lift method is not set to 'Orifice AGA'.
    END IF;
    IF ln_aga3Ps <> ln_std_press THEN
        RAISE ex_std_press;
    ELSIF ln_aga3Ts <> ln_std_temp THEN
        RAISE ex_std_Temp;
    ELSIF ln_aga3Grs < ln_glow OR ln_aga3Grs > ln_ghigh THEN
        RAISE ex_aga3Grs;
    ELSIF ln_aga3Zairs IS NULL OR ln_aga3Zairs <= ln_flow THEN
        RAISE ex_aga3zairs;
    END IF;
    IF lv2_use_aga8_Ind = 'N' THEN
      IF ln_aga3Grs IS NULL THEN
        RAISE ex_missing_aga3grs;
      END IF;
    END IF;
    ln_staticPressure := ecbp_testdevice.agaStaticPress(p_result_no,p_object_id,p_phase);
    ln_staticPressure := Ecdp_Unit.convertValue(ln_staticPressure,ecdp_Unit.GetUnitFromLogical(EcDp_ClassMeta_Cnfg.getUomCode(lv2_class_name,'GAS_STATIC_PRESS')),'PSIA');
     IF ln_staticpressure IS NULL THEN
       RAISE ex_missing_staticpress;
     ELSIF ln_staticpressure <= ln_sp_low OR ln_staticpressure > ln_sp_high THEN
       RAISE ex_static_press;
     END IF;
    ln_diffPressure   := Ecbp_Testdevice.agaDiffPress(p_result_no,p_object_id,p_phase);
    ln_diffPressure   := Ecdp_Unit.convertValue(ln_diffPressure,ecdp_Unit.GetUnitFromLogical(EcDp_ClassMeta_Cnfg.getUomCode(lv2_class_name,'GAS_DIFF_PRESS')),'INH2O');
     IF ln_diffPressure IS NULL OR ln_diffPressure <= ln_dp_low THEN
       RAISE ex_diff_press;
     END IF;

    -- data from Meter Run connected to the stream
    lv2_meter_run_id := Ecbp_TestDevice.findTdevMeterRun(p_result_no,p_phase,p_object_id,p_daytime);
    lv2_ntaps        := ec_meter_run_version.type_of_taps(lv2_meter_run_id,p_daytime,'<=');
    ln_matpipe       := ec_meter_run_version.pipe_material(lv2_meter_run_id,p_daytime,'<=');
    ln_dm            := ec_meter_run_version.pipe_diameter(lv2_meter_run_id,p_daytime,'<=');
    ln_tpipe         := ec_meter_run_version.diameter_meas_temp(lv2_meter_run_id,p_daytime,'<=');
    ln_nploc         := ec_meter_run_version.location_of_taps(lv2_meter_run_id,p_daytime,'<=');
    ln_factr         := ec_meter_run_version.all_calibration_factor(lv2_meter_run_id,p_daytime,'<=');

    -- data from orifice connected to the stream
    lv2_orifice_plate_id := Ecbp_TestDevice.findTdevOrificePlate(p_result_no,p_phase,p_object_id,p_daytime);
    lv2_matorf           := ec_orifice_plate_version.material(lv2_orifice_plate_id,p_daytime,'<=');
    ln_do                := ec_orifice_plate_version.diameter(lv2_orifice_plate_id,p_daytime,'<='); -- in inches
    ln_torf              := ec_orifice_plate_version.measurement_temp(lv2_orifice_plate_id,p_daytime,'<='); -- in Rankin
    ln_spec_grav         := ec_tdev_reference_value.spec_gravity(p_object_id,p_daytime,'<=');
    ln_x                 := ln_diffPressure/(ln_staticPressure * ln_N3);

   -- Converting Meter run and orifice diameter to inches and temp to fahrenheit.
    ln_dm          := ecdp_unit.convertValue(ln_dm, NVL(ecdp_Unit.GetUnitFromLogical(EcDp_ClassMeta_Cnfg.getUomCode('METER_RUN','DM')),'IN'), 'IN');
     IF ln_dm <= ln_dmlow OR ln_dm >= ln_dmhigh THEN
       RAISE ex_dm;
     END IF;
    ln_tpipe       := ecdp_unit.convertValue(ln_tpipe,NVL(ecdp_Unit.GetUnitFromLogical(EcDp_ClassMeta_Cnfg.getUomCode('METER_RUN','TPIPE')),'R'),'F');
    ln_do          := ecdp_unit.convertValue(ln_do, NVL(ecdp_Unit.GetUnitFromLogical(EcDp_ClassMeta_Cnfg.getUomCode('ORIFICE_PLATE','DO')),'IN'),'IN');
     IF ln_do <= ln_dolow OR ln_do >= ln_dohigh THEN
       RAISE ex_do;
     END IF;
    ln_torf        := ecdp_unit.convertValue(ln_torf,NVL(ecdp_Unit.GetUnitFromLogical(EcDp_ClassMeta_Cnfg.getUomCode('ORIFICE_PLATE','TORF')),'R'),'F');


    IF lv2_ntaps = '1' THEN      -- when Tap type is FLANGE -- Aga31990
      -- [TIETO:AGA Report 3: Table 4-4, pg 22]
      IF lv2_Aga3Type = 'AGA3-1990' THEN        -- 1 equals 1990
        IF ln_matpipe = '1' THEN          -- Meter Run pipe = STAINLESS STEEL
          ln_dmc := (ln_dm) * (1. + 9.25e-6 * (ln_flowingtemp - ln_tpipe));
        ELSIF ln_matpipe = '2' THEN          --Meter Run pipe = MONEL
          ln_dmc := (ln_dm) * (1. + 7.95e-6 * (ln_flowingtemp - ln_tpipe));
        ELSIF ln_matpipe = '3' THEN          --Meter Run pipe = CARBON STEEL
          ln_dmc := (ln_dm) * (1. + 6.2e-6 * (ln_flowingtemp - ln_tpipe));
        END IF;
        IF lv2_matorf = '1' THEN          --Orifice Plate pipe = 304/316 STAINLESS STEEL
          ln_doc := (ln_do) * (1. + 9.25e-6  * (ln_flowingtemp - ln_torf));
        ELSIF lv2_matorf = '2' THEN          -- pipe = MONEL
          ln_doc := (ln_do) * (1. + 7.95e-6 * (ln_flowingtemp - ln_torf));
        ELSIF lv2_matorf = '3' THEN          -- pipe = CARBON STEEL
          ln_doc := (ln_do) * (1. + 6.2e-6 * (ln_flowingtemp - ln_torf));
        ELSIF lv2_matorf = '4' THEN          -- pipe = 304 Stainless Steel
          ln_doc := (ln_do) * (1. + 9.25e-6 * (ln_flowingtemp - ln_torf));
        ELSIF lv2_matorf = '5' THEN          -- pipe = 316 Stainless STEEL
          ln_doc := (ln_do) * (1. + 9.25e-6 * (ln_flowingtemp - ln_torf));
        END IF;
        -- [Tieto:AGA Report 3:Procedure 4.3.2.3A, page 25 (EQUATION 4-9)]
        ln_beta := ln_doc / ln_dmc;
         IF ln_beta <=ln_blow OR ln_beta >= ln_bhigh THEN
           RAISE ex_beta;
         END IF;
         BEGIN
        -- [Tieto:AGA Report 3:Procedure 4.3.2.4, page 26, (EQUATION 4-14)]
          ln_Ev   := 1.0 / power((1.0 - power(ln_beta, 4)), 0.5);
         EXCEPTION
           WHEN VALUE_ERROR THEN
           RAISE_APPLICATION_ERROR(-20347,'Please check if UOM configuration of Meter Run and Orifice Plate are in sync.');
         END;
        -- [Tieto:AGA Report 3:Procedure 4.3.2.7A, page 28, (EQUATION 4-29)]
        ln_Y    := calcExpansionFactor(1,ln_beta,ln_nploc,ln_aga3Kfac,ln_x,ln_aga3Ifluid);
        /* N4=UNITS CONVERSION CONSTANT FOR TAP LOCATION
           N4=1.0 IN US UNITS
           L1=DIMENSIONLESS UPSTREAM TAP POSITION (EQUATION 4-15)
           L2=DIMENSIONLESS DOWNSTREAM TAP POSITION (EQUATION 4-16)
           L1 AND L2 FOR FLANGE TAPPED ORIFICES
        */
        -- [Tieto:AGA Report 3:Procedure 4.3.2.7A, page 28, (EQUATION 4-15 and 4-16)]
        ln_L1 := ln_N4 / ln_DMC;
        ln_L2 := ln_N4 / ln_DMC;

        /* M2=DIMENSIONLESS DOWNSTREAM DAM HEIGHT (EQUATION 4-17) */
        ln_M2 := 2.0 * ln_L2 / (1.0 - ln_BETA);

        /* TU=UPSTREAM TAP CORRECTION FACTOR (EQUATION 4-18)  */
        ln_TU := (ln_S2 + ln_S3 * exp(-8.5 * ln_L1) +ln_S4 * exp(-6.0 * ln_L1)) * power((ln_BETA), 4) /(1.0 - power((ln_BETA), 4));

        /* TD=DOWNSTREAM TAP CORRECTION FACTOR (EQUATION 4-19) */
        ln_TD := ln_S6 * (ln_M2 + ln_S7 * (power(ln_M2, 1.3))) *power(ln_beta, 1.1);


        -- [Tieto:AGA Report 3:Procedure 4.3.2.5, page 27, (EQUATION 4-20 and 4-21)]
        /* TS */
        IF ln_dmc > ln_N4 * ln_A4 THEN
          ln_ts := 0;
        ELSE
          ln_ts := ln_A3 * (1 - ln_beta) * (ln_A4 - ln_dmc / ln_N4 );
        END IF;

        /* THE EQUATIONS BELOW FOLLOW 1992 AGA 3, PART 4
        NIC=UNITS CONVERSION CONSTANT FOR FI */
         ln_NIC    :=6.23582e-4;

         ln_aga3Ts := Ecdp_Unit.convertValue(ln_aga3Ts,ecdp_Unit.GetUnitFromLogical(EcDp_ClassMeta_Cnfg.getUomCode
                                           ('AGA_CONSTANT','TS')),'F');
         ln_aga3Ps := Ecdp_Unit.convertValue(ln_aga3Ps,ecdp_Unit.GetUnitFromLogical(EcDp_ClassMeta_Cnfg.getUomCode
                                           ('AGA_CONSTANT','PS')),'PSIA');
         ln_aga3Th := NVL(Ecdp_Unit.convertValue(ln_aga3Th,ecdp_Unit.GetUnitFromLogical(EcDp_ClassMeta_Cnfg.getUomCode
                                           ('AGA_CONSTANT','TH')),'F'),0);

        -- START: To Be Convert to US--

        --[Tieto:All the AGA methods follows the guidelines from AGA Report #8 to calculate the compressibility, z)]
        --AGA8 for Detail Method
        --[Tieto:AGA Report 8,A.3.1, pg 40]
        IF lv2_use_aga8_ind = 'Y' THEN
          IF ln_hv IS NULL OR ln_hv < ln_hv_low THEN
            RAISE ex_hv;
          ELSIF ln_x1 IS NULL THEN
            RAISE ex_missing_x1;
          ELSIF ln_x1 < ln_x_low THEN
            RAISE ex_x1;
          ELSIF ln_x2 IS NULL OR ln_x2 < ln_x_low OR ln_x2 > ln_x2_high THEN
            RAISE ex_x2;
          ELSIF ln_x3 IS NULL OR ln_x3 < ln_x_low OR ln_x3 > ln_x3_high THEN
            RAISE ex_x3;
          ELSIF ln_x4 IS NULL OR ln_x4 < ln_x_low OR ln_x4 > ln_x4_high THEN
            RAISE ex_x4;
          ELSIF ln_aga3th IS NULL OR ln_aga3th < ln_tmp_low OR ln_aga3th > ln_tmp_high THEN
            RAISE ex_th;
          END IF;
          IF lv2_Aga8Method = '3' THEN
           calcCompressibility_Detail(lv2_strm_id,p_daytime,ln_staticpressure,ln_flowingTemp,ln_aga3Ps,ln_aga3Ts,ln_aga3Rhotp,ln_aga3Rhos,
                                      ln_compressibility_flow,ln_compressibility_std,li_error);
           ln_aga3Rhotp := calculateTdevFlowDensity(p_object_id,p_daytime,ln_staticpressure,ln_flowingTemp,ln_compressibility_flow);
           ln_aga3Rhos  := calculateTdevStdDensity(p_object_id,p_daytime,ln_aga3Ps,ln_aga3Ts,ln_compressibility_std);

          --AGA8 for Gross Method 2 - use CO2 and N2 to calculate compressibility and density at std condition
          --[Tieto:AGA Report 8, B.2.3, pg 87]
          ELSIF lv2_Aga8Method = '2' THEN
           calc_z_gross_2(p_object_id,p_daytime,ln_staticPressure,ln_flowingTemp,ln_aga3Ps,ln_aga3Ts,ln_spec_grav,ln_aga3Th,ln_x1,ln_x2,
                          ln_x3,ln_x4,ln_aga3Rhos,ln_compressibility_std,ln_aga3Rhotp,ln_compressibility_flow,ln_mr);
           ln_aga3Rhos  := calculateTdevStdDensity(p_object_id,p_daytime,ln_aga3Ps,ln_aga3Ts,ln_compressibility_std);
           ln_aga3Rhotp := calculateTdevFlowDensity(p_object_id,p_daytime,ln_staticpressure,ln_flowingTemp,ln_compressibility_flow);

          --AGA8 for Gross Method 1- get the heating value and then calculate compressibility and density at std conditions
          --[Tieto:AGA Report 8, B.2.2, pg 84]
          ELSIF lv2_Aga8Method = '1' THEN
           calc_z_gross_1(p_object_id,
                          p_daytime,
                          ln_staticPressure,
                          ln_flowingTemp,
                          ln_aga3Ps,
                          ln_aga3Ts,
                          NULL,
                          NULL,
                          ln_spec_grav,
                          ln_aga3Th,
                          ln_hv,
                          ln_x1,
                          ln_x2,
                          ln_x3,
                          ln_x4,
                          ln_hv,
                          ln_aga3Rhos,
                          ln_compressibility_std,
                          ln_aga3Rhotp,
                          ln_compressibility_flow,
                          ln_mr);


           ln_aga3Rhos  := calculateTdevStdDensity(p_object_id,p_daytime,ln_aga3Ps,ln_aga3Ts,ln_compressibility_std);
           ln_aga3Rhotp := calculateTdevFlowDensity(p_object_id,p_daytime,ln_staticpressure,ln_flowingTemp,ln_compressibility_flow);
          -- END: To Be Convert to US--
          END IF;
        ELSIF lv2_use_aga8_ind = 'N' THEN
          -- ln_flowingTemp must be in celsius and pressure is in kpa.
          /*If ln_aga3Rhotp/ln_aga3Rhos are null then check Stream aga analysis screen and verify
           ln_compressibility(Compressibility[Flow]) and ln_aga3Grs(Relative Density TS  PS) are having correct values.*/
          ln_aga3Rhotp := nvl(Ecdp_Unit.convertValue(ln_aga3Rhotp,ecdp_Unit.GetUnitFromLogical(EcDp_ClassMeta_Cnfg.getUomCode('AGA_CONSTANT','RHOTP')),'KGPERM3'),
                        calculateTdevFlowDensity(p_object_id,p_daytime,ln_staticpressure,ln_flowingTemp,ln_compressibility_flow,ln_aga3Grs, lv2_class_name));
            IF ln_aga3Rhotp IS NULL THEN
              RAISE ex_missing_aga3Rhotp;
            ELSIF ln_aga3Rhotp <= ln_rhlow THEN
              RAISE ex_aga3Rhotpts;
            END IF;
          ln_aga3Rhos := nvl(Ecdp_Unit.convertValue(ln_aga3Rhos,ecdp_Unit.GetUnitFromLogical(EcDp_ClassMeta_Cnfg.getUomCode('AGA_CONSTANT','RHOTP')),'KGPERM3'),
                         calculateTdevStdDensity(p_object_id,p_daytime,ln_aga3Ps,ln_aga3Ts,ln_compressibility_std,ln_aga3Grs));
            IF ln_aga3Rhos IS NULL THEN
              RAISE ex_missing_aga3Rhos;
            ELSIF ln_aga3Rhos <= ln_rhlow THEN
              RAISE ex_aga3Rhotpts;
            END IF;
        END IF;
        /*FI=ITERATION FLOW FACTOR
          CALCULATE ITERATION FLOW FACTOR (FI) AS PER SECTION 4.3.2.8
          FIRST CALCULATE INTERMEDIATE VALUES
          FIC - EQUATION 4-32
          FIP - EQUATION 4-33
          THEN CALCULATE FI USING EQUATIONS 4-34 OR 4-35
        */
        --[Tieto:AGA Report 3, Equations 4-32]
        ln_FIC := 4000.0 * ln_NIC * ln_DMc * (ln_aga3VISC) / ((ln_EV) * (ln_DOc) * (ln_DOc) * (ln_Y));
        --[Tieto:AGA Report 3, Equations 4-33]
        ln_FIP := power((2.0 * ln_aga3Rhotp * ln_diffPressure), 0.5);

        --[Tieto:AGA Report 3, Equations 4-34 or 4-35]
        IF ln_FIC < (1000.0 * ln_FIP) THEN
          ln_FI := ln_FIC / ln_FIP;
        ELSE
          ln_FI := 1000.0;
        END IF;
        ln_CD0 := ln_A0 + ln_A1 * power(ln_Beta, 2) + ln_A2 * power(ln_Beta, 8) + ln_TU + ln_TD + ln_TS;
        ln_CD1 := ln_A5 * power(ln_BETA, 0.7) * power(250.0, 0.7);
        ln_CD2 := ln_A6 * power((ln_BETA), 4) * power(250.0, 0.35);
        ln_CD3 := ln_S1 * power(ln_BETA, 4.8) * power(250.0, 0.35) * power(4.75, 0.8);
        ln_CD4 := (ln_S5 * ln_TU + ln_S8 * ln_TD) * power((ln_BETA), 0.8) * power(4.75, 0.8);
        /* THE FOLLOWING FOLLOWS SECTION 4.3.2.9
        INITIALIZE CD TO VALUE AT INFINITE REYNOLDS NUMBER   */
        -- calculate cd
        -- Initialize CD to CD0
        ln_CD := ln_CD0;
        <<calculate_Cd>>
      /* X=RATIO OF 4000.0 TO THE ASSUMED REYNOLDS NUMBER=4000.0/RE
        USE EQUATION 4-39         */
        ln_X := ln_FI / ln_CD;
        /* SET CONSTANTS:
        XC - EQUATION 4-36
        A  - EQUATION 4-37
        B  - EQUATION 4-38
        XC=VALUE OF X WHERE LOW REYNOLDS NUMBER SWITCH OCCURS
        A,B=CORRELATION CONSTANTS FOR LOW REYNOLDS NUMBER FACTOR
        */
        ln_XC := 1.142139337256165;
        ln_A  := 4.343524261523267;
        ln_B  := 3.764387693320165;

        /* CALCULATE FC AND DC USING EQUATIONS 4-40 AND 4-41 OR
        EQUATIONS 4-42 AND 4-43
        FC=VALUE OF CD FROM CORRELATION FOR CD
        DC=DERIVATIVE OF FC WRT CD TIMES -CD=(d(FC)/d(CD))/(-CD)  */
        IF (ln_X < ln_XC) THEN
          ln_FC := ln_CD0 + (ln_CD1 * power(ln_X, 0.35) + ln_CD2 +ln_CD3 * power(ln_X, 0.8)) *
                   power(ln_X, 0.35) + ln_CD4 * power(ln_X, 0.8);
          ln_DC := (0.7 * ln_CD1 * power(ln_X, 0.35) + 0.35 * ln_CD2 +
                    1.15 * ln_CD3 * power(ln_X, 0.8)) * power(ln_X, 0.35) + 0.8 * ln_CD4 * power(ln_X, 0.8);
        ELSE
          ln_FC := ln_CD0 + ln_CD1 * power(ln_X, 0.7) +
                   (ln_CD2 + ln_CD3 * power(ln_X, 0.8)) *
                   (ln_A - ln_B / ln_X) + ln_CD4 * power(ln_X, 0.8);
          ln_DC := 0.7 * ln_CD1 * power(ln_X, 0.7) +
                   (ln_CD2 + ln_CD3 * power(ln_X, 0.8)) * ln_B / ln_X +
                   0.8 * ln_CD3 * (ln_A - ln_B / ln_X) * power(ln_X, 0.8) +
                   0.8 * ln_CD4 * power(ln_X, 0.8);
        END IF;
        /* DELCD=ITERATIVE CHANGE IN CD - EQUATION 4-44     */
        ln_DELCD := ((ln_CD) - ln_FC) / (1.0 + ln_DC / (ln_CD));
        ln_CD    := (ln_CD) - ln_DELCD;
        IF abs(ln_DELCD) > 0.0000004 THEN
          GOTO calculate_Cd;
        END IF;
        --[Tieto:AGA Report 3, Equations 4-46b, page 31]
        ln_QV := ln_PI * ln_NC * ln_ev * ln_doc ** 2 / 4;
        ln_QV := ln_Qv * ln_cd * ln_Y * sqrt(2 * ln_aga3Rhotp * ln_diffPressure);
        ln_QV := (ln_QV / ln_aga3Rhos);-- result in scf/hr
        ln_QV := ln_QV * 0.0283168; --conversion factor: SCF to SCM
        IF (p_phase='GAS') THEN
          -- converting result from SM3/hr to DB unit set for Gas/Gas Lift volume out aga.
          ln_QV := Ecdp_Unit.convertValue(ln_QV,'SM3PERHR',NVL(ecdp_Unit.GetUnitFromLogical(EcDp_ClassMeta_Cnfg.getUomCode(lv2_class_name,'GAS_VOL_OUT_AGA')),'SM3PERHR'));
        ELSE
          ln_QV := Ecdp_Unit.convertValue(ln_QV,'SM3PERHR',NVL(ecdp_Unit.GetUnitFromLogical(EcDp_ClassMeta_Cnfg.getUomCode(lv2_class_name,'GAS_LIFT_VOL_OUT_AGA')),'SM3PERHR'));
        END IF;

        -- for 1985 only the calculated ko is different between flange and pipe
      ELSIF lv2_Aga3Type = 'AGA3-1985' THEN
        ln_do   := ecdp_unit.convertValue(ln_do, 'IN', 'MM');
        ln_dm   := ecdp_unit.convertValue(ln_dm, 'IN', 'MM');
        ln_beta := ln_do / ln_dm;
        ln_Y    := calcExpansionFactor(lv2_ntaps,ln_beta,ln_nploc,ln_aga3Kfac,ln_x,ln_aga3Ifluid);
        ln_ko   := calcKo(lv2_ntaps, ln_beta, ln_dm, ln_do);
        ln_fb   := 338.178 * ln_ko * power(ln_do, 2);

        --[Tieto: AGA3 Report (1985), P10, Equations 4.2.7]
        IF lv2_matorf IN (1, 4, 5) THEN
          ln_fa := 1 + 0.0000185 * (ln_flowingTemp - ln_torf) * 1.8;
        ELSE
          ln_fa := 1 + 0.0000159 * (ln_flowingTemp - ln_torf) * 1.8;
        END IF;
        --[Tieto: AGA3 Report(1985) Page 40 and 119, calculate the Reynold Number factor]
        ln_fr   := calcFr(ln_beta,
                        Ecdp_Unit.convertValue(ecbp_testdevice.agaDiffPress(p_result_no,p_object_id,p_phase),
                                               ecdp_Unit.GetUnitFromLogical(EcDp_ClassMeta_Cnfg.getUomCode(lv2_class_name,
                                                                                                                'GAS_DIFF_PRESS')),
                                               'INH2O'),
                        Ecdp_Unit.convertValue(ecbp_testdevice.agaStaticPress(p_result_no,p_object_id,p_phase),
                                               ecdp_Unit.GetUnitFromLogical(EcDp_ClassMeta_Cnfg.getUomCode(lv2_class_name,
                                                                                                                'GAS_STATIC_PRESS')),
                                               'PSIA'),
                        ln_do,
                        calcE(lv2_ntaps, ln_beta, ln_dm, ln_do));

        ln_Fpb := 14.73 / Ecdp_Unit.convertValue(ln_aga3Ps,ecdp_Unit.GetUnitFromLogical
                                    (EcDp_ClassMeta_Cnfg.getUomCode('AGA_CONSTANT','PS')),'PSIA');
        ln_Ftf := power(288.71 / (ln_flowingTemp + 273.15), 0.5);
        -- calculate ftb, assuming std temp is in Rankin
        ln_ftb := (ecdp_unit.convertValue(ln_aga3Ts, 'R', 'C') + 273.15) /288.7055556; -- temperature at base condition
        IF lv2_use_aga8_Ind = 'Y' THEN
          BEGIN
             SELECT MAX(ofa.daytime)
               INTO ld_daytime
               FROM object_fluid_analysis ofa
              WHERE ofa.object_id = lv2_strm_id
           GROUP BY ofa.object_id;
          EXCEPTION
            WHEN NO_DATA_FOUND THEN
              RAISE_APPLICATION_ERROR(-20348, 'No Data Found for Stream Analysis');
          END;
          ln_compressibility_flow := calcCompressibility_RK(lv2_strm_id,ld_daytime,ln_staticpressure,ln_flowingTemp);
          ln_compressibility_std := calcCompressibility_RK(lv2_strm_id,ld_daytime,ecdp_unit.convertValue(ln_aga3Ps,
                                       ecdp_Unit.GetUnitFromLogical(EcDp_ClassMeta_Cnfg.getUomCode('AGA_CONSTANT','PS')),'KPAA'),
                                       ecdp_unit.convertValue(ln_aga3Ts,ecdp_Unit.GetUnitFromLogical(EcDp_ClassMeta_Cnfg.getUomCode('AGA_CONSTANT','TS')),'C'));

          --[Tieto: AGA3 Report(1985), calculate the supercompressibility factor]
          ln_Fpv                 := power((ln_compressibility_std /ln_compressibility_flow),0.5);

        ELSIF lv2_use_aga8_Ind = 'N' THEN
          ln_Fpv := ln_aga3Fpvs;
        END IF;

        --[Tieto: AGA3 Report(1985) Real gas relative density factor]
        ln_fgr            := power(1 / (ln_spec_grav * ln_aga3Zairs /ln_compressibility_std),0.5);
        --[Tieto:AGA3 Report(1985) orifice flow constant factor]
        ln_C              := ln_fb * ln_Y * ln_ftb * ln_fgr * ln_fr *ln_fpb * ln_ftf * ln_fpv * ln_fa * nvl(ln_condition_factor, 1) * nvl(ln_eff_cor_factor, 1);
        ln_diffPressure   := ecdp_unit.convertValue(ln_diffPressure,'KPA','INH2O');
        ln_staticPressure := ecdp_unit.convertValue(ln_staticPressure,'KPAA','PSIA');
        ln_QV             := ln_C * power((ln_diffPressure * ln_staticPressure),0.5); -- unit returned MCF
        -- ln_QV             := ln_QV * 0.028316846592; --the factor convert from mCF to ksm3
        ln_QV := ln_QV * 0.0283168;
        --  ln_QV             := ln_QV * 0.028261959;

      END If;
    END IF;

    IF (p_phase='GAS') THEN
      UPDATE TEST_DEVICE_RESULT tdr
         SET tdr.gas_vol_out_aga = ln_qv,
             tdr.last_updated_by = p_user
       WHERE tdr.object_id = p_object_id
         AND tdr.result_no = p_result_no;
    ELSE
      UPDATE TEST_DEVICE_RESULT tdr
         SET tdr.gas_lift_vol_out_aga = ln_qv,
             tdr.last_updated_by = p_user
       WHERE tdr.object_id = p_object_id
         AND tdr.result_no = p_result_no;
    END IF;

  END calcAga3_TestDevice;

---------------------------------------------------------------------------------------------------
-- Procedure      : calcFpv_Detail
-- Description    : Calculates compressibility factor and density for standard and flowing fluid for AGA3-1990 and USe AGA8=Y.
--                  AGA8 Detail method is supported. Will be enhanced later to support AGA8 Gross method.
-- Preconditions  :
-- Postconditions :
--
-- Using tables   :
--
-- Using functions:
--
-- Configuration
-- required       :
--
-- Behaviour      :
--
--1: Methane(C1); 2: Nitrogen(N2); 3: Carbon Dioxide(CO2); 4: Ethane(C2); 5: Propane(C3);
--6: Water(H2O);  7: Hydrogen Sulfide(H2S); 8:Hydrogen(H2);9: Carbon Monoxide(CO); 10:Oxygen(O2);
--11:i-Butane(iC4); 12:n-Butane(C4); 13:i-Pentane(iC5);	14: n-Pentane(nC5); 15: n-Hexane(nC6);
--16:n-Heptane(nC7);17:n-Octane(nC8);18:n-Nonane(nC9); 19:n-Decane(nC10); 20: Helium(He);
--21:Argon(Ar)
---------------------------------------------------------------------------------------------------
PROCEDURE calcCompressibility_Detail(p_object_id varchar2,
                        p_daytime date,
                        p_flowing_pressure NUMBER,
                        p_flowing_Temp NUMBER,
                        p_base_pressure NUMBER,
                        p_base_Temp NUMBER,
                        p_flowing_density OUT NUMBER,
                        p_base_density OUT NUMBER,
                        p_flowing_compressibility OUT NUMBER,
                        p_base_compressibility OUT NUMBER,
                        p_error OUT INT)
IS
  lr_analysis_sample object_fluid_analysis%ROWTYPE;
  vn_Compmolfrac t_pn_z_array := t_pn_z_array(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0); -- component mol frac, we can add more components. There are 21 components for now.
  vi_cid t_pi_z_cid :=  t_pi_z_cid(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21);

  CURSOR c_component(cp_analysis_no NUMBER) IS
  SELECT *
  FROM fluid_analysis_component
  WHERE analysis_no = cp_analysis_no;

  component t_componentName := t_componentName('C1', 'N2', 'CO2', 'C2', 'C3', 'H2O', 'H2S' , 'H2', 'CO', 'O2', 'IC4', 'NC4', 'IC5', 'NC5','C6','C7+','NC8','NC9','NC10','HE','AR' ) ;
  i INT;
BEGIN
  lr_analysis_sample := EcDp_Fluid_Analysis.getLastAnalysisSample(p_object_id,'STRM_GAS_COMP',NULL,p_daytime,'GAS');
  FOR cur_comp IN c_component(lr_analysis_sample.analysis_no) LOOP
    FOR i IN component.FIRST .. component.LAST LOOP
      IF component(i) = cur_comp.component_no THEN
        vn_Compmolfrac(i) := cur_comp.MOL_PCT/100;
      EXIT;
      END IF;
    END LOOP;
  END LOOP;
  p_error := calc_z_paramdl(21,vi_cid);

  IF p_error = 0 then
  --the function below will calculate base/std compressibility
    calc_z_chardl(21
                  ,vn_Compmolfrac
                  ,ecdp_unit.convertValue(p_base_Temp,'C','K')
                  ,ecdp_unit.convertValue(p_base_pressure,'KPAA','MPAA')
                  ,p_base_compressibility
                  ,p_base_density
                  ,p_error);

    IF p_error <> 0 then
      RETURN; -- exit the procedure -- can add an oracle error here.
	  END IF;
	  --calculates density for the AGA8 model given pressure and temperature.
    --this function uses brent's method and pdetail to determine the density
    p_flowing_density := calc_z_ddetail(p_flowing_pressure/ln_PatoKpa,p_flowing_temp+ln_n5);
    --calculates the compressibility factor
    p_flowing_compressibility := calc_z_zdetail(p_flowing_density,p_flowing_temp+ln_n5);
  ELSE
    RETURN;
  END IF;
END;

---------------------------------------------------------------------------------------------------
-- Procedure      : calc_z_chardl
-- Description    : calculates a NUMBER of composition dependent quantities using the mole percent values for the
--		              components in the mixture. Function calc_z_paramdl should be called before this procedure.
-- Preconditions  :
-- Postconditions : Returns compressibility and density at Standard Condition.
--
-- Using tables   :
--
-- Using functions:
--
-- Configuration
-- required       :
--
-- Behaviour      :
--
--------------------------------------------------------------------------------------------------
PROCEDURE calc_z_chardl(
   	p_ncc IN INT,
		p_xi  IN t_pn_z_array,
	  p_Tkb IN NUMBER,
		p_Pb  IN NUMBER,
		p_zb  OUT NUMBER,
		p_db  OUT NUMBER,
		p_err OUT INT)
IS
   ln_rk5p0 NUMBER :=0 ;
 	 ln_u5p0  NUMBER :=0 ;
	 ln_u2p5  NUMBER :=0 ;
	 ln_q1p0  NUMBER :=0 ;
	 ln_rk2p5 NUMBER :=0 ;
	 ln_xij   NUMBER :=0 ;
	 ln_eij	  NUMBER :=0 ;
	 ln_wij	  NUMBER :=0 ;
	 ln_e0p5  NUMBER :=0 ;
	 ln_e2p0  NUMBER :=0 ;
	 ln_e3p0  NUMBER :=0 ;
	 ln_e3p5  NUMBER :=0 ;
	 ln_e4p5  NUMBER :=0 ;
	 ln_e6p0  NUMBER :=0 ;
	 ln_e11p0 NUMBER :=0 ;
	 ln_e7p5  NUMBER :=0 ;
	 ln_e9p5  NUMBER :=0 ;
	 ln_e12p0 NUMBER :=0 ;
	 ln_e12p5 NUMBER :=0 ;
	 ln_s3	  NUMBER :=0 ;
	 li_j	   INT;
	 li_i	   INT;
	 ln_mol_sum  NUMBER :=0;
 	 ln_xi t_pn_z_array := t_pn_z_array();

BEGIN
	 ln_z_Told := 0;
	 FOR li_i IN 1 .. p_ncc LOOP
	 -- the value of percentage should not be NULL
	 IF p_xi(li_i) IS NULL THEN -- check that there is no mol fraction that is null
	   p_err := 300+li_i; -- i
		 RETURN;
	 END IF;
 	 ln_mol_sum := ln_mol_sum + p_xi(li_i);  -- sum of all the mol frac of the components
	 END LOOP;
	 -- re calculate the percentage
	 FOR li_i IN 1 .. p_ncc LOOP
 	   ln_xi.extend;
	 	 ln_xi(li_i) := p_xi(li_i) / ln_mol_sum;
	 END LOOP;
	 --when call this procedure, the variables will be recalculated.
	 ln_z_b1     := 0;
	 ln_z_b2   	 := 0;
	 ln_z_b3   	 := 0;
	 ln_z_b4   	 := 0;
	 ln_z_b5   	 := 0;
	 ln_z_b6   	 := 0;
	 ln_z_b7   	 := 0;
	 ln_z_b8   	 := 0;
	 ln_z_b9   	 := 0;
	 ln_z_b10  	 := 0;
	 ln_z_b11  	 := 0;
	 ln_z_b12  	 := 0;
	 ln_z_b13  	 := 0;
	 ln_z_b14  	 := 0;
	 ln_z_b15  	 := 0;
	 ln_z_b16  	 := 0;
	 ln_z_b17  	 := 0;
	 ln_z_b18  	 := 0;

	 ln_z_Rk3p0  := 0;
	 ln_z_uu   	 := 0;
	 ln_z_q2p0 	 := 0;
	 ln_z_ww   	 := 0;
	 ln_z_hh	   := 0;
	 ln_z_mwx    := 0;
	 --calculated the molar weight of the mix gas
	 FOR li_j IN 1 .. p_ncc LOOP
	   ln_z_mwx := ln_z_mwx + ln_xi(li_j) * ln_z_cmw(li_j);
	 END LOOP loop;
   FOR li_i IN 1 .. p_ncc LOOP
	   --AGA8 14 p17 part of formalor "sum (Xi * Ki^2.5) i=1 to 18"
	 	 ln_rk2p5 := ln_rk2p5 + ln_xi(li_i) * ln_z_rki(li_i) * ln_z_rki(li_i) * sqrt(ln_z_rki(li_i));
		 --AGA8 20 p20 part of formalor "sum (Xi * Ei^2.5) i=1 to 18"
	 	 ln_u2p5  := ln_u2p5 + ln_xi(li_i) * ln_z_ei(li_i) * ln_z_ei(li_i) * sqrt(ln_z_ei(li_i));
		 --AGA8 21 p20 part of formalor "sum (Xi * Gi) i=1 to 18"
		 ln_z_ww  := ln_z_ww + ln_xi(li_i) * ln_z_wi(li_i);
		 --AGA8 22 p20 part of formalor "sum (Xi * Qi) i=1 to 18"
		 ln_q1p0  := ln_q1p0 + ln_xi(li_i) * ln_z_qi(li_i);
		 --AGA8 23 p20 part of formalor "sum (Xi^2 * Fi) i=1 to 18"
		 ln_z_hh  := ln_z_hh + ln_xi(li_i) * ln_xi(li_i) * ln_z_hi(li_i);
		 FOR li_j IN li_i .. p_ncc LOOP
		   --AGA8 14 20 21 part of formalor "sum(i=1 to N-1) sum(j=i+1 to N) 2*(Xi * Xj) "
		   IF li_i <> li_j THEN
	 	     ln_xij := 2 * ln_xi(li_i) * ln_xi(li_j);
			 ELSE
				 ln_xij := ln_xi(li_i) * ln_xi(li_j);
			 END IF;
			 --AGA8 14 p17 part of formalor "sum(i=1 to N-1) sum(j=i+1 to N) 2*(Xi * Xj)*(Kij^5 - 1)*(Ki*Kj)^2.5)"
			 IF ln_z_bkij(li_i)(li_j) <> 1 THEN
			   ln_rk5p0 := ln_rk5p0 + ln_xij * (ln_z_bkij(li_i)(li_j) ** 5 - 1)
				 		  * sqrt((ln_z_rki(li_i) ** 5) * (ln_z_rki(li_j) ** 5));
       END IF;
			 --AGA8 20 p20 part of formalor "sum(i=1 to N-1) sum(j=i+1 to N) 2*(Xi * Xj)*(Uij^5 - 1)*(Ei*Ej)^2.5)"
			 IF ln_z_buij(li_i)(li_j) <> 1 THEN
			 	 ln_u5p0 := ln_u5p0 + ln_xij * (ln_z_buij(li_i)(li_j) ** 5 -1)
				 		 * sqrt((ln_z_ei(li_i) ** 5) * (ln_z_ei(li_j) ** 5));
       END IF;
			 --AGA8 21 p20 part of formalor "sum(i=1 to N-1) sum(j=i+1 to N) (Xi * Xj)*(Gij - 1)*(Gi+Gj))"
			 IF ln_z_bwij(li_i)(li_j) <>1 THEN
			 	 ln_z_ww := ln_z_ww + ln_xij * (ln_z_bwij(li_i)(li_j) - 1) * ((ln_z_wi(li_i) + ln_z_wi(li_j)/2)) ;
       END IF;
			 --AGA8 17 p19
			 ln_eij := ln_z_beij(li_i)(li_j) * sqrt(ln_z_ei(li_i) * ln_z_ei(li_j));
			 --AGA8 18 p19
			 ln_wij	:= ln_z_bwij(li_i)(li_j) * (ln_z_wi(li_i) + ln_z_wi(li_j)) / 2;
			 --the (Eij^Un) Un=1 to 18 in table 4 AGA8
			 ln_e0p5 := sqrt(ln_eij);
			 ln_e2p0 := ln_eij * ln_eij;
			 ln_e3p0 := ln_e2p0 * ln_eij;
			 ln_e3p5 := ln_e3p0 * ln_e0p5;
			 ln_e4p5 := ln_eij * ln_e3p5;
			 ln_e6p0 := ln_e3p0 * ln_e3p0;
			 ln_e11p0:= ln_e4p5  * ln_e4p5 * ln_e2p0;
			 ln_e7p5 := ln_e4p5 * ln_e3p0;
			 ln_e9p5 := ln_e7p5 * ln_e2p0;
			 ln_e12p0:= ln_e11p0 * ln_eij;
			 ln_e12p5:= ln_e12p0 * ln_e0p5;
			 --AGA8 15 p18 part of formula "XiXj * (KiKj) ** 1.5"
			 ln_s3 := ln_xij * sqrt((ln_z_rki(li_i) ** 3) * (ln_z_rki(li_j) ** 3));
	     -- B = second virial coefficient
       --AGA8 eqn 15, p18 for n=1 to 18  "sum(i=1 to N-1) sum(j=i+1 to N) XiXj *Eij^Un*(KiKj) ** 1.5 * Bnij"
  	   ln_z_b1 := ln_z_b1 + ln_s3;
			 ln_z_b2 := ln_z_b2 + ln_s3 * ln_e0p5;
			 ln_z_b3 := ln_z_b3 + ln_s3 * ln_eij;
			 ln_z_b4 := ln_z_b4 + ln_s3 * ln_e3p5;
			 ln_z_b5 := ln_z_b5 + ln_s3 * ln_wij / ln_e0p5;
			 ln_z_b6 := ln_z_b6 + ln_s3 * ln_e4p5 * ln_wij;
			 ln_z_b7 := ln_z_b7 + ln_s3 * ln_z_qi(li_i) * ln_z_qi(li_j) * ln_e0p5;
			 ln_z_b8 := ln_z_b8 + ln_s3 * ln_z_mi(li_i) * ln_z_mi(li_j) * ln_e7p5;
			 ln_z_b9 := ln_z_b9 + ln_s3 * ln_z_mi(li_i) * ln_z_mi(li_j) * ln_e9p5;
			 ln_z_b10:= ln_z_b10+ ln_s3 * ln_z_di(li_i) * ln_z_di(li_j) * ln_e6p0;
			 ln_z_b11:= ln_z_b11+ ln_s3 * ln_z_di(li_i) * ln_z_di(li_j) * ln_e12p0;
			 ln_z_b12:= ln_z_b12+ ln_s3 * ln_z_di(li_i) * ln_z_di(li_j) * ln_e12p5;
			 ln_z_b13:= ln_z_b13+ ln_s3 * ln_z_hi(li_i) * ln_z_hi(li_j) / ln_e6p0;
			 ln_z_b14:= ln_z_b14+ ln_s3 * ln_e2p0;
			 ln_z_b15:= ln_z_b15+ ln_s3 * ln_e3p0;
			 ln_z_b16:= ln_z_b16+ ln_s3 * ln_z_qi(li_i) * ln_z_qi(li_j) * ln_e2p0;
			 ln_z_b17:= ln_z_b17+ ln_s3 * ln_e2p0;
			 ln_z_b18:= ln_z_b18+ ln_s3 * ln_e11p0;
		 END LOOP;
	 END LOOP;
   --AGA8 eqn 15 p18 B =[ pn_z_bX ]* (T ^ -Un)
	 ln_z_b1 := ln_z_b1 * ln_z_a1;
	 ln_z_b2 := ln_z_b2 * ln_z_a2;
	 ln_z_b3 := ln_z_b3 * ln_z_a3;
	 ln_z_b4 := ln_z_b4 * ln_z_a4;
	 ln_z_b5 := ln_z_b5 * ln_z_a5;
	 ln_z_b6 := ln_z_b6 * ln_z_a6;
	 ln_z_b7 := ln_z_b7 * ln_z_a7;
	 ln_z_b8 := ln_z_b8 * ln_z_a8;
	 ln_z_b9 := ln_z_b9 * ln_z_a9;
	 ln_z_b10:= ln_z_b10* ln_z_a10;
	 ln_z_b11:= ln_z_b11* ln_z_a11;
	 ln_z_b12:= ln_z_b12* ln_z_a12;
	 ln_z_b13:= ln_z_b13* ln_z_a13;
	 ln_z_b14:= ln_z_b14* ln_z_a14;
	 ln_z_b15:= ln_z_b15* ln_z_a15;
	 ln_z_b16:= ln_z_b16* ln_z_a16;
	 ln_z_b17:= ln_z_b17* ln_z_a17;
	 ln_z_b18:= ln_z_b18* ln_z_a18;
	 -- k^3 = (k ^ 5) ^ 0.6
	 ln_z_Rk3p0:= (ln_rk5p0 + ln_rk2p5 * ln_rk2p5) ** 0.6;
	 -- u = (u ^5) ^ 0.2
	 ln_z_uu   := (ln_u5p0 + ln_u2p5 * ln_u2p5) ** 0.2;
	 -- q^2 = q * q
	 ln_z_q2p0 := ln_q1p0 * ln_q1p0;
	 -- calculate the molar density at base(reference) condition
	 p_db := calc_z_ddetail(p_Pb,p_Tkb);
	 -- calculate the compressibility factor at base condition
   p_zb := calc_z_zdetail(p_db,p_Tkb);
	 p_err:=0;

END calc_z_chardl;

---------------------------------------------------------------------------------------------------
-- Procedure      : calc_z_Bmix
-- Description    : Calculates the second virial coefficient for the gas mixture.
--
-- Preconditions  :
-- Postconditions : Returns compressibility and density at Standard Condition.
--
-- Using tables   :
--
-- Using functions:
--
-- Configuration
-- required       :
--
-- Behaviour      :
--
--------------------------------------------------------------------------------------------------
FUNCTION calc_z_Bmix(
   		 p_tk	NUMBER)   --temperature in kelvins
RETURN NUMBER
IS
   ln_Bmix NUMBER;
	 ln_T0p5 NUMBER;
	 ln_T6p0 NUMBER;
	 ln_T2p0 NUMBER;
	 ln_T3p0 NUMBER;
	 ln_T3p5 NUMBER;
	 ln_T4p5 NUMBER;
	 ln_T11p0 NUMBER;
	 ln_T7p5 NUMBER;
	 ln_T9p5 NUMBER;
	 ln_T12p0 NUMBER;
	 ln_T12p5 NUMBER;

BEGIN
	 -- T ^ Un  n=1 to 18 in table 4 p22 AGA8
	 ln_T0p5 := sqrt(p_tk);
	 ln_T2p0 := p_tk * p_tk;
	 ln_T3p0 := p_tk * ln_T2p0;
	 ln_T3p5 := ln_T3p0 * ln_T0p5;
	 ln_T4p5 := ln_T3p5 * p_tk;
	 ln_T6p0 := ln_T3p0 * ln_T3p0;
	 ln_T11p0:= ln_T4p5 * ln_T4p5 * ln_T2p0;
	 ln_T7p5 := ln_T6p0 * p_tk * ln_T0p5;
	 ln_T9p5 := ln_T7p5 * ln_T2p0;
	 ln_T12p0:= ln_T9p5 * ln_T0p5 * ln_T2p0;
	 ln_T12p5:= ln_T12p0* ln_T0p5;

	 --AGA8 15 p18 Bmix = Bn * T ** (-Un)
	 ln_Bmix := ln_z_b1 + ln_z_b2 / ln_T0p5 + ln_z_b3 / p_tk + ln_z_b4 / ln_T3p5 + ln_z_b5 * ln_T0p5
			  + ln_z_b6 / ln_T4p5 + ln_z_b7 / ln_T0p5 + ln_z_b8 / ln_T7p5 + ln_z_b9 / ln_T9p5 + ln_z_b10/ ln_T6p0
			  + ln_z_b11/ ln_T12p0+ ln_z_b12/ ln_T12p5+ ln_z_b13* ln_T6p0 + ln_z_b14/ ln_T2p0 + ln_z_b15/ ln_T3p0
			  + ln_z_b16/ ln_T2p0 +ln_z_b17/ ln_T2p0 + ln_z_b18/ ln_T11p0;

  RETURN ln_Bmix;
END;

---------------------------------------------------------------------------------------------------
-- Procedure      : calc_z_temp
-- Description    : Calculates a NUMBER of quantities which are functions of temperature but not density
--
-- Preconditions  :
-- Postconditions :
--
-- Using tables   :
--
-- Using functions:
--
-- Configuration
-- required       :
--
-- Behaviour      :
--
--------------------------------------------------------------------------------------------------
PROCEDURE calc_z_temp(
		  p_tk NUMBER) --temperature in kelvins
IS
  ln_Tr NUMBER;
	ln_Tr0p5 NUMBER;
	ln_Tr1p5 NUMBER;
	ln_Tr2p0 NUMBER;
	ln_Tr3p0 NUMBER;
	ln_Tr4p0 NUMBER;
	ln_Tr5p0 NUMBER;
	ln_Tr6p0 NUMBER;
	ln_Tr7p0 NUMBER;
	ln_Tr8p0 NUMBER;
	ln_Tr9p0 NUMBER;
	ln_Tr11p0 NUMBER;
	ln_Tr13p0 NUMBER;
	ln_Tr21p0 NUMBER;
	ln_Tr22p0 NUMBER;
	ln_Tr23p0 NUMBER;

BEGIN
	 ln_z_Bmix := calc_z_bmix(p_tk);
	 --AGA8 19 "T^(-Un) * U^(Un) = (T/U)^(-Un) n=13 to 58 in table 4 p22 AGA8"
	 ln_Tr := p_tk / ln_z_uu;
	 ln_Tr0p5 := sqrt(ln_Tr);
	 ln_Tr1p5 := ln_Tr * ln_Tr0p5;
	 ln_Tr2p0 := ln_Tr * ln_Tr;
	 ln_Tr3p0 := ln_Tr2p0 * ln_Tr;
	 ln_Tr4p0 := ln_Tr3p0 * ln_Tr;
	 ln_Tr5p0 := ln_Tr4p0 * ln_Tr;
	 ln_Tr6p0 := ln_Tr5p0 * ln_Tr;
	 ln_Tr7p0 := ln_Tr6p0 * ln_Tr;
	 ln_Tr8p0 := ln_Tr7p0 * ln_Tr;
	 ln_Tr9p0 := ln_Tr8p0 * ln_Tr;
	 ln_Tr11p0:= ln_Tr6p0 * ln_Tr5p0;
	 ln_Tr13p0:= ln_Tr6p0 * ln_Tr7p0;
	 ln_Tr21p0:= ln_Tr9p0 * ln_Tr9p0 * ln_Tr3p0;
	 ln_Tr22p0:= ln_Tr21p0* ln_Tr;
	 ln_Tr23p0:= ln_Tr22p0* ln_Tr;

	 --AGA8 24 p21 part of formular Cn * T^(-Un) n=13 to 58 in table 4 p22 AGA8
	 ln_z_fn13 := ln_z_a13 * ln_z_hh * ln_Tr6p0;
	 ln_z_fn14 := ln_z_a14 / ln_Tr2p0;
	 ln_z_fn15 := ln_z_a15 / ln_Tr3p0;
	 ln_z_fn16 := ln_z_a16 * ln_z_q2p0 / ln_Tr2p0;
	 ln_z_fn17 := ln_z_a17 / ln_Tr2p0;
	 ln_z_fn18 := ln_z_a18 / ln_Tr11p0;
	 ln_z_fn19 := ln_z_a19 * ln_Tr0p5;
	 ln_z_fn20 := ln_z_a20 / ln_Tr0p5;
	 ln_z_fn21 := ln_z_a21;
	 ln_z_fn22 := ln_z_a22 / ln_Tr4p0;
	 ln_z_fn23 := ln_z_a23 / ln_Tr6p0;
	 ln_z_fn24 := ln_z_a24 / ln_Tr21p0;
	 ln_z_fn25 := ln_z_a25 * ln_z_ww / ln_Tr23p0;
	 ln_z_fn26 := ln_z_a26 * ln_z_q2p0 / ln_Tr22p0;
	 ln_z_fn27 := ln_z_a27 * ln_z_hh * ln_Tr;
	 ln_z_fn28 := ln_z_a28 * ln_z_q2p0 * ln_Tr0p5;
	 ln_z_fn29 := ln_z_a29 * ln_z_ww / ln_Tr7p0;
	 ln_z_fn30 := ln_z_a30 * ln_z_hh * ln_Tr;
	 ln_z_fn31 := ln_z_a31 / ln_Tr6p0;
	 ln_z_fn32 := ln_z_a32 * ln_z_ww / ln_Tr4p0;
	 ln_z_fn33 := ln_z_a33 * ln_z_ww / ln_Tr;
	 ln_z_fn34 := ln_z_a34 * ln_z_ww / ln_Tr9p0;
	 ln_z_fn35 := ln_z_a35 * ln_z_hh * ln_Tr13p0;
	 ln_z_fn36 := ln_z_a36 / ln_Tr21p0;
	 ln_z_fn37 := ln_z_a37 * ln_z_q2p0 / ln_Tr8p0;
	 ln_z_fn38 := ln_z_a38 * ln_Tr0p5;
	 ln_z_fn39 := ln_z_a39;
	 ln_z_fn40 := ln_z_a40 / ln_Tr2p0;
	 ln_z_fn41 := ln_z_a41 / ln_Tr7p0;
	 ln_z_fn42 := ln_z_a42 * ln_z_q2p0 / ln_Tr9p0;
	 ln_z_fn43 := ln_z_a43 / ln_Tr22p0;
	 ln_z_fn44 := ln_z_a44 / ln_Tr23p0;
	 ln_z_fn45 := ln_z_a45 / ln_Tr;
	 ln_z_fn46 := ln_z_a46 / ln_Tr9p0;
	 ln_z_fn47 := ln_z_a47 * ln_z_q2p0 / ln_Tr3p0;
	 ln_z_fn48 := ln_z_a48 / ln_Tr8p0;
	 ln_z_fn49 := ln_z_a49 * ln_z_q2p0 / ln_Tr23p0;
	 ln_z_fn50 := ln_z_a50 / ln_Tr1p5;
	 ln_z_fn51 := ln_z_a51 * ln_z_ww / ln_Tr5p0;
	 ln_z_fn52 := ln_z_a52 * ln_z_q2p0 * ln_Tr0p5;
	 ln_z_fn53 := ln_z_a53 / ln_Tr4p0;
	 ln_z_fn54 := ln_z_a54 * ln_z_ww / ln_Tr7p0;
	 ln_z_fn55 := ln_z_a55 / ln_Tr3p0;
	 ln_z_fn56 := ln_z_a56 * ln_z_ww;
	 ln_z_fn57 := ln_z_a57 / ln_Tr;
	 ln_z_fn58 := ln_z_a58 * ln_z_q2p0;

END calc_z_temp;

---------------------------------------------------------------------------------------------------
-- Procedure      : calc_z_zdetail
-- Description    : Calculates the compressibility factor.
--
-- Preconditions  :
-- Postconditions :
--
-- Using tables   :
--
-- Using functions:
--
-- Configuration
-- required       :
--
-- Behaviour      :
--
--------------------------------------------------------------------------------------------------
function calc_z_zdetail(
		 p_d NUMBER  -- molar density in mol/dm^3
		,p_tk NUMBER --temperature in kelvins
		)
RETURN NUMBER
IS
  ln_d1 NUMBER;
	ln_d2 NUMBER;
	ln_d3 NUMBER;
	ln_d4 NUMBER;
	ln_d5 NUMBER;
	ln_d6 NUMBER;
	ln_d7 NUMBER;
	ln_d8 NUMBER;
	ln_d9 NUMBER;
  ln_exp1 NUMBER;
	ln_exp2 NUMBER;
	ln_exp3 NUMBER;
	ln_exp4 NUMBER;
  ln_Z NUMBER;

BEGIN
	 IF ln_z_Told <> p_tk THEN
 	  calc_z_temp(p_tk);
	 END IF;
	 ln_z_Told := p_tk;
	 --AGA8  eqn 12
	 ln_d1 := ln_z_Rk3p0 * p_d;
	 ln_d2 := ln_d1 * ln_d1;
	 ln_d3 := ln_d2 * ln_d1;
	 ln_d4 := ln_d3 * ln_d1;
	 ln_d5 := ln_d4 * ln_d1;
	 ln_d6 := ln_d5 * ln_d1;
	 ln_d7 := ln_d6 * ln_d1;
	 ln_d8 := ln_d7 * ln_d1;
	 ln_d9 := ln_d8 * ln_d1;
	 ln_exp1 := exp(-ln_d1);
	 ln_exp2 := exp(-ln_d2);
	 ln_exp3 := exp(-ln_d3);
	 ln_exp4 := exp(-ln_d4);
	 --AGA8 eqn 12 p17
	 ln_Z := 1 + ln_z_Bmix * p_d
	 	   + ln_z_fn13 * ln_d1 * (ln_exp3 - 1 - 3 * ln_d3 * ln_exp3)
		  + (ln_z_fn14 + ln_z_fn15 + ln_z_fn16) * ln_d1 * (ln_exp2 - 1 - 2 * ln_d2 * ln_exp2)
		  + (ln_z_fn17 + ln_z_fn18) * ln_d1 * (ln_exp4 - 1 - 4 * ln_d4 * ln_exp4)
		  + (ln_z_fn19 + ln_z_fn20) * ln_d2 * 2
		  + (ln_z_fn21 + ln_z_fn22 + ln_z_fn23) * ln_d2 * (2 - 2 * ln_d2) * ln_exp2
		  + (ln_z_fn24 + ln_z_fn25 + ln_z_fn26) * ln_d2 * (2 - 4 * ln_d4) * ln_exp4
		  +  ln_z_fn27 * ln_d2 * (2 - 4 * ln_d4) * ln_exp4
		  +  ln_z_fn28 * ln_d3 * 3
		  + (ln_z_fn29 + ln_z_fn30) * ln_d3 * (3 - ln_d1) * ln_exp1
		  + (ln_z_fn31 + ln_z_fn32) * ln_d3 * (3 - 2 * ln_d2) * ln_exp2
		  + (ln_z_fn33 + ln_z_fn34) * ln_d3 * (3 - 3 * ln_d3) * ln_exp3
		  + (ln_z_fn35 + ln_z_fn36 + ln_z_fn37) * ln_d3 * (3 - 4 * ln_d4) * ln_exp4
		  + (ln_z_fn38 + ln_z_fn39) * ln_d4 * 4
		  + (ln_z_fn40 + ln_z_fn41 + ln_z_fn42) * ln_d4 * (4 - 2 * ln_d2) * ln_exp2
		  + (ln_z_fn43 + ln_z_fn44) * ln_d4 * (4 - 4 * ln_d4) * ln_exp4
		  +  ln_z_fn45 * ln_d5 * 5
		  + (ln_z_fn46 + ln_z_fn47) * ln_d5 * (5 - 2 * ln_d2) * ln_exp2
		  + (ln_z_fn48 + ln_z_fn49) * ln_d5 * (5 - 4 * ln_d4) * ln_exp4
		  +  ln_z_fn50 * ln_d6 * 6
		  +  ln_z_fn51 * ln_d6 * (6 - 2 * ln_d2) * ln_exp2
		  +  ln_z_fn52 * ln_d7 * 7
		  +  ln_z_fn53 * ln_d7 * (7 - 2 * ln_d2) * ln_exp2
		  +  ln_z_fn54 * ln_d8 * (8 - ln_d1) * ln_exp1
		  + (ln_z_fn55 + ln_z_fn56) * ln_d8 * (8 - 2 * ln_d2) * ln_exp2
		  + (ln_z_fn57 + ln_z_fn58) * ln_d9 * (9 - 2 * ln_d2) * ln_exp2;

	 RETURN ln_Z;
END calc_z_zdetail;

---------------------------------------------------------------------------------------------------
-- Procedure      : calc_z_Bracket
-- Description    : Determines two densities, RHOL and RHOH, which bracket the solution for density. Called by Calc_z_DDetail function.

--
-- Preconditions  :
-- Postconditions :
--
-- Using tables   :
--
-- Using functions:
--
-- Configuration
-- required       :
--
-- Behaviour      :
--
--------------------------------------------------------------------------------------------------
PROCEDURE calc_z_Bracket(
		p_p IN NUMBER,   -- the pressure
		p_tk IN NUMBER, --temperature in kelvins
		p_code OUT NUMBER,
		p_Rho OUT NUMBER,
		p_Rhol OUT NUMBER,
		p_Rhoh OUT NUMBER,
		p_PRhol OUT NUMBER,
		p_PRhoh OUT NUMBER,
		p_err OUT INT)
IS
  li_imax INT := li_MaxIterate_z;
	ln_p1 NUMBER := 0;
	ln_p2 NUMBER;
	ln_Rhomax NUMBER;
	ln_videal NUMBER;
	ln_Rho1 NUMBER ;
	ln_Rho2 NUMBER;
	ln_del  NUMBER;
	li_it   INT := 0;

BEGIN
  p_code := 0;
	ln_Rho1 := 0;
	p_err	:= 0;
	ln_Rhomax := 1 / ln_z_Rk3p0;
  IF p_tk > 1.2596 * ln_z_uu THEN
    ln_Rhomax := 20 * ln_Rhomax;
	END IF;
	ln_videal := ln_r * p_tk / p_p ;
	IF abs(ln_z_Bmix) < 0.167 * ln_videal THEN
    ln_Rho2 := 0.95 / (ln_videal + ln_z_Bmix);
  ELSE
	  ln_Rho2 := 1.15 / ln_videal;
  END IF;
	--note: pressure (P2) at density Rho2 not yet calculated
	ln_del := ln_Rho2 / 20;
	<<density_search>>
	li_it := li_it + 1;
	--maximum NUMBER of iterations exceeded
	IF li_it > li_imax THEN
    p_code := 3;
		p_Rho := ln_Rho2;
		p_err := 6101;
	  RETURN;
  END IF;
	--density in bracket exceeds maximum allowable density
	IF p_code <> 2 AND ln_Rho2 > ln_Rhomax THEN
    p_code := 2;
		ln_del := 0.01 * (ln_Rhomax - ln_Rho1) + p_p / (ln_r * p_tk) / 20;
		ln_Rho2 := ln_Rho1 + ln_del;
		GOTO density_search;
	END IF;
	--calculate pressure P2 at density Rho2
  ln_p2 := calc_z_pdetail(ln_Rho2,p_tk);
	--test value of P2 relative to P and relative to P1
	IF ln_p2 > p_p THEN
	--the density root is bracketed (p1<p and p2>p)
	  p_Rhol := ln_Rho1;
		p_PRhol:= ln_p1;
		p_Rhoh := ln_Rho2;
		p_PRhoh:= ln_p2;
	  RETURN;
	ELSIF ln_p2 > ln_p1 AND p_code = 2 THEN
	--retain constant value for del (code = 2)
	  ln_Rho1 := ln_Rho2;
		ln_p1   := ln_p2;
		ln_Rho2 := ln_Rho1 + ln_del;
		GOTO density_search;
	ELSIF ln_p2 > ln_p1 AND p_code = 0 THEN
		--increase value for del(code = 2)
	  ln_del := 2 * ln_del;
		ln_Rho1 := ln_Rho2;
		ln_p1	  := ln_p2;
		ln_Rho2 := ln_Rho1 + ln_del;
		GOTO density_search;
	END IF;

	/*
		above if/elsif condition unsatisfied implies p2<p1 code =1 indicates that pressure has
		a negative density derivative,since p2 is less than some previous pressure
	*/
	p_code := 1;
	p_Rho := ln_Rho1;
	p_err := 6103;

END calc_z_Bracket;

---------------------------------------------------------------------------------------------------
-- Procedure      : calc_z_pdetail
-- Description    : Calculates the absolute pressure using the equation of state equation for pressure.

--
-- Preconditions  :
-- Postconditions :
--
-- Using tables   :
--
-- Using functions:
--
-- Configuration
-- required       :
--
-- Behaviour      :
--
--------------------------------------------------------------------------------------------------
FUNCTION calc_z_pdetail(
		p_d NUMBER, -- molar density in mol/dm^3
		p_tk NUMBER--temperature in kelvins
)
RETURN NUMBER
IS
BEGIN
   --AGA8 5 p10 P=d*Z*R*T
	 RETURN calc_z_zdetail(p_d, p_tk) * p_d * ln_r * p_tk;
END calc_z_pdetail;


---------------------------------------------------------------------------------------------------
-- Procedure      : calc_z_ddetail
-- Description    : Calculates density for the AGA8 model given pressure and temperature.
--		              This function uses brent's method and pdetail to determine the density

--
-- Preconditions  :
-- Postconditions :
--
-- Using tables   :
--
-- Using functions:
--
-- Configuration
-- required       :
--
-- Behaviour      :
--
--------------------------------------------------------------------------------------------------
FUNCTION calc_z_ddetail(
		p_p NUMBER,  -- Pressure in Mpa
		p_tk NUMBER --temperature in kelvins   ,p_bmix NUMBER
)
RETURN NUMBER
IS
	li_i    INT;
	li_imax INT := 150;
	ln_epsp NUMBER := 1e-6;
	ln_epsr NUMBER := 1e-6;
	ln_epsmin NUMBER := 1e-7;
	li_code NUMBER := 0;
	ln_rho NUMBER;
	ln_rhol NUMBER;
	ln_rhoh NUMBER;
	ln_prhol NUMBER;
	ln_prhoh NUMBER;
	li_Err  NUMBER;
	ln_x1 NUMBER;
	ln_x2 NUMBER;
	ln_x3 NUMBER;
	ln_y1 NUMBER;
	ln_y2 NUMBER;
	ln_y3 NUMBER;
	ln_delx NUMBER;
	ln_delprv NUMBER;
	ln_delmin NUMBER;
  ln_delbis NUMBER;
  ln_y2my3 NUMBER;
  ln_y3my1 NUMBER;
  ln_y1my2 NUMBER;
	ln_xdenom NUMBER;
	ln_xnumber NUMBER;
	ln_sgndel NUMBER;
	ln_boundn NUMBER;

BEGIN
	   /*
       call subroutine Bracket, which brackets the solution for the density bracket determines two values of density
       RHOL and RHOH, which, when used in the equation of state, yield calculated absolute pressures PRHOL and PRHOH which
       bracket the specified pressure P. The densities RHOL and RHOH, which bracket the solution for density at the specified
       pressure P, are then used by DDETAIL as initial values for use in Brent's method
       */
	 calc_z_bracket(p_p,p_tk,li_code,ln_rho,ln_rhol,ln_rhoh,ln_prhol,ln_prhoh,li_Err);
   IF li_Err <> 0 THEN
	   RETURN 0;
	 END IF;
   --check value of "code" RETURN from subroutine bracket
	 IF li_code = 1 or li_code = 3 THEN
	   RETURN ln_rho;
   END IF;

	  /*  set up to start brent's method
	   	   x is the independent variable, y the dependent variable
		   delx is the current iteration change in x
		   delprv is the previous iteration change in x
	  */
	  ln_x1 := ln_rhol;
	  ln_x2 := ln_rhoh;
	  ln_y1 := ln_prhol - p_p;
	  ln_y2 := ln_prhoh - p_p;
	  ln_delx := ln_x1 - ln_x2;
	  ln_delprv := ln_delx;
	   /*
	   note that solution is bracketed between x1 and x2
	   a third point x3 is introduced for quadratic interpolation
	   */
	   ln_x3 :=  ln_x1;
	   ln_y3 :=  ln_y1;
	   --iterative loop starts
	   FOR li_i IN 1 .. li_imax LOOP
 		   IF ln_y2 * ln_y3 > 0 THEN
         ln_x3 := ln_x1 ;
			   ln_y3 := ln_y1;
			   ln_delx := ln_x1 - ln_x2;
	   	   ln_delprv := ln_delx;
		   END IF;
 		   --y2 must be value of y closest to y =0.0 then x2new = x2old + delx
		   IF abs(ln_y3) < abs(ln_y2) THEN
         ln_x1 := ln_x2;
			   ln_x2 := ln_x3;
			   ln_x3 := ln_x1;
	 	     ln_y1 := ln_y2;
			   ln_y2 := ln_y3;
			   ln_y3 := ln_y1;
		   END IF;
		   --delmin is minimum allowed step size for unconverged iteration
		   --smaller steps than delmin can cause oscillations
  	   ln_delmin := ln_epsmin * abs(ln_x2);
			 /* if procedure is not converging, I.E., abs(y2)>abs(y1), or if delprv is less than delmin, I.E.,
			   interpolation is converging too slowly, use bisection delbis = 0.5 * (x3 -x2) is
			   the bisection delx
			*/
			 ln_delbis := 0.5 * (ln_x3 - ln_x2);
      --test to decide numerical method for current iteration
			IF abs(ln_delprv) < ln_delmin or abs(ln_y1) < abs(ln_y2) THEN
      --use bisection
			  ln_delx := ln_delbis;
				ln_delprv := ln_delbis;
			ELSE
	      IF ln_x3 <> ln_x1 THEN
        --use inverse quadratic interpolation
				  ln_y2my3 := ln_y2 - ln_y3;
					ln_y3my1 := ln_y3 - ln_y1;
					ln_y1my2 := ln_y1 - ln_y2;
				  ln_xdenom := -1 * ln_y1my2 * ln_y2my3 * ln_y3my1;
					ln_xnumber:= ln_x1 * ln_y2 * ln_y3 * ln_y2my3
					  			  +ln_x2 * ln_y1 * ln_y3 * ln_y3my1
									  +ln_x3 * ln_y2 * ln_y1 * ln_y1my2
									  - ln_x2 * ln_xdenom;
				ELSE
				  --use inverse linear interpolation
					ln_xnumber := (ln_x2 - ln_x1) * ln_y2;
					ln_xdenom	 := ln_y1 - ln_y2;
				END IF;
          --following Brent's procedure, before calculating Delx, check that delx=xnumer/xdenom
          --does not step OUT of bounds
			  IF 2 * abs(ln_xnumber) < abs(ln_delprv * ln_xdenom) THEN
          --procedure converging, use interpolation
					ln_delprv := ln_delx;
					ln_delx := ln_xnumber / ln_xdenom;
				ELSE
          --procedure diverging, use bisection
				  ln_delx := ln_delbis;
					ln_delprv:=ln_delbis;
			  END IF;
			END IF;
      --check for convergence
			IF abs(ln_y2) < (ln_epsp * p_p) AND abs(ln_delx) < (ln_epsr * abs ( ln_x2)) THEN
   		  RETURN ln_x2 + ln_delx;
			END IF;
      --when unconverged, abs(delx) must be greater than delmin minimum allowed magnitude of change in
            --X2 is 1.0000009*Delmin sgndel,The sign of change in X2 is sign of delbis
			IF abs(ln_delx) < ln_delmin THEN
   		  ln_sgndel := ln_delbis / abs(ln_delbis);
				ln_delx := 1.0000009 * ln_sgndel * ln_delmin;
				ln_delprv := ln_delx;
			END IF;
      --final check to insure that new x2 is in range of old X2 and X3,
      --boundn is negative if new X2 is in range of old X2 and X3
			ln_boundn := ln_delx * (ln_x2 + ln_delx - ln_x3);
			IF ln_boundn > 0 THEN
        --procedure stepping OUT of bounds, use bisection
			  ln_delx := ln_delbis;
				ln_delprv := ln_delbis;
			END IF;
      --relabel variables for next iteration  X1new=X2old, Y1new=Y2old
			ln_x1 := ln_x2;
			ln_y1 := ln_y2;
      --next iteration values for X2,Y2
			ln_x2 := ln_x2 + ln_delx;
			ln_y2 := calc_z_pdetail(ln_x2,p_tk) - p_p;
    --RETURN to start of loop for next iteration
	  END LOOP;

	  RETURN ln_x2;
END calc_z_ddetail;

---------------------------------------------------------------------------------------------------
-- Procedure      : calc_z_paramdl
-- Description    : Sets up constants used by the Detail model
--

--
-- Preconditions  :
-- Postconditions :
--
-- Using tables   :
--
-- Using functions:
--
-- Configuration
-- required       :
--
-- Behaviour      :
--
--------------------------------------------------------------------------------------------------
FUNCTION calc_z_paramdl(
    p_ncc INT,
		p_cid t_pi_z_cid)
RETURN INT
IS
	li_j INT;
	li_k INT;

BEGIN
   --compare the NUMBER of components with the NUMBER of array elements
	 IF p_cid.count <> p_ncc THEN
	   RETURN 300;
	 END IF;
	 --set up the constants from the mix gas component
   --AGA8 Page24 Table5
	 FOR li_j IN 1..p_ncc LOOP
	   -- ln_z_cmw.extend;
	   ln_z_cmw(li_j) := ln_z_cmwb(p_cid(li_j));
		 -- ln_z_rki.extend;
		 ln_z_rki(li_j) := ln_z_rkib(p_cid(li_j));
		 -- ln_z_ei.extend;
		 ln_z_ei(li_j) := ln_z_eib(p_cid(li_j));
		 -- ln_z_wi.extend;
		 ln_z_wi(li_j) := ln_z_wib(p_cid(li_j));
		 -- ln_z_qi.extend;
		 ln_z_qi(li_j) := ln_z_qib(p_cid(li_j));
		 -- ln_z_hi.extend;
		 ln_z_hi(li_j) := 0;
		 IF p_cid(li_j) = 8 THEN
		   ln_z_hi(li_j) := ln_z_hib(8);
		 END IF;
		 -- ln_z_mi.extend;
		 ln_z_mi(li_j) := ln_z_mib(p_cid(li_j));
		 -- ln_z_di.extend;
		 ln_z_di(li_j) := ln_z_dib(p_cid(li_j));
	 END LOOP;
   --set up the constants from the mix gas component
   --AGA8 Page25 Table6
	 FOR li_j IN 1 .. p_ncc LOOP
	   FOR li_k IN li_j .. p_ncc LOOP
		   ln_z_beij(li_j)(li_k) := ln_z_beijb(p_cid(li_j))(p_cid(li_k));
			 ln_z_bkij(li_j)(li_k) := ln_z_bkijb(p_cid(li_j))(p_cid(li_k));
			 ln_z_bwij(li_j)(li_k) := ln_z_bwijb(p_cid(li_j))(p_cid(li_k));
	 		 ln_z_buij(li_j)(li_k) := ln_z_buijb(p_cid(li_j))(p_cid(li_k));
	 	 END LOOP;
	 END LOOP;
   RETURN 0;
END;

---------------------------------------------------------------------------------------------------
-- Procedure      : calc_z_gross_2
-- Description    : Calculates compressibility factor and density for standard and flowing fluid for AGA3-1990 and USe AGA8=Y.
--                  AGA8 Gross method is supported. In this method, only Co2, H2S,CO1 and N2 mol fractions are needed unlike detail method where all 21 mol fractions of components are needed.
--

--
-- Preconditions  :
-- Postconditions :
--
-- Using tables   :
--
-- Using functions:
--
-- Configuration
-- required       :
--
-- Behaviour      :
--
--------------------------------------------------------------------------------------------------
PROCEDURE calc_z_gross_2(
    p_object_id string,
    p_daytime   date,
    p_flowing_pressure NUMBER,
    p_flowing_temperature NUMBER,
    p_base_pressure NUMBER,
    p_base_temperature NUMBER,
    p_spec_grav NUMBER,
    p_th NUMBER,
    p_n2 NUMBER,
    p_co2 NUMBER,
    p_h2 NUMBER,
    p_co NUMBER,
    p_db OUT NUMBER,
    p_zb OUT NUMBER,
    p_df OUT NUMBER,
    p_zf OUT NUMBER,
    p_mr OUT NUMBER
)
IS
   ln_n2 NUMBER;
   ln_co2 NUMBER;
   ln_h2 NUMBER;
   ln_co NUMBER;
   ln_xch NUMBER;
   ln_th NUMBER;
   li_err INT;
   lr_analysis_sample     object_fluid_analysis%ROWTYPE;
   ln_base_pressure_mpaa NUMBER;
   ln_flow_pressure_mpaa NUMBER;
   ln_flow_temperature_k NUMBER;
   ln_base_temperature_k NUMBER;

BEGIN
   ln_base_pressure_mpaa :=ecdp_unit.convertValue(p_base_pressure,'KPAA', 'MPAA');
   ln_flow_pressure_mpaa :=ecdp_unit.convertValue(p_flowing_pressure,'KPAA', 'MPAA');
   ln_flow_temperature_k :=ecdp_unit.convertValue(p_flowing_temperature,'C', 'K');
   ln_base_temperature_k :=ecdp_unit.convertValue(p_base_temperature,'C', 'K');
   ln_th                 :=NVL(ecdp_unit.convertValue(p_th,'F', 'K'),0); --Reference temperature for combustion (deg k)

   calc_charges(2,
                     0,
                     p_spec_grav,
                     p_co2,
                     p_n2,
                     p_h2,
                     p_co,
                     ln_th,
                     ln_base_temperature_k,
                     ln_base_temperature_k,
                     ln_base_pressure_mpaa,
                     ln_base_pressure_mpaa,
                     ln_xch,
                     ln_n2,
                     p_zb,
                     p_db,
                     li_err,
                     p_mr);

   p_df :=calc_dgross(ln_flow_pressure_mpaa,
                      ln_flow_temperature_k,
                      ln_xch,
                      ln_n2,
                      p_co2,
                      p_h2,
                      p_co);

   p_zf := calc_zgross(p_df,
                      ln_flow_temperature_k,
                      ln_xch,
                      ln_n2,
                      p_co2,
                      p_h2,
                      p_co);
END calc_z_gross_2;

---------------------------------------------------------------------------------------------------
-- Procedure      : calc_z_gross_1
-- Description    : Calculates the heating value and then calculate compressibility and density at std conditions.
--                  Calculates compressibility factor and molar density for standard and flowing fluid for AGA3-1990 , Use AGA8=Y
--                  and AGA8 Method = Gross Method 1.
--

--
-- Preconditions  :
-- Postconditions :
--
-- Using tables   :
--
-- Using functions:
--
-- Configuration
-- required       :
--
-- Behaviour      : Calculates compressibility factor and molar density for fluid at standard and flowing condition.
--                  Also calculates molecular weight of gas mixture(mr) which is used to calculate density of fluid at
--                  flowing and standard conditions.
--------------------------------------------------------------------------------------------------
PROCEDURE calc_z_gross_1(
    p_object_id string,
    p_daytime   date,
    p_flowing_pressure NUMBER,
    p_flowing_temperature NUMBER,
    p_base_pressure NUMBER,
    p_base_temperature NUMBER,
    p_std_pressure NUMBER DEFAULT NULL,
    p_std_temperature NUMBER DEFAULT NULL,
    p_spec_grav NUMBER,
    p_th NUMBER,
    p_hv NUMBER,
    p_n2 NUMBER,
    p_co2 NUMBER,
    p_h2 NUMBER,
    p_co NUMBER,
    p_heating_value NUMBER,
    p_db OUT NUMBER,
    p_zb OUT NUMBER,
    p_df OUT NUMBER,
    p_zf OUT NUMBER,
    p_mr OUT NUMBER
)
IS
   ln_n2 NUMBER;
   ln_co2 NUMBER;
   ln_h2 NUMBER;
   ln_co NUMBER;
   ln_xch NUMBER;
   ln_th NUMBER;
   li_err INT;
   lr_analysis_sample     object_fluid_analysis%ROWTYPE;
   ln_base_pressure_mpaa NUMBER;
   ln_flow_pressure_mpaa NUMBER;
   ln_flow_temperature_k NUMBER;
   ln_base_temperature_k NUMBER;
   ln_std_pressure_mpaa  NUMBER;
   ln_std_temperature_k  NUMBER;
   ln_hv NUMBER;


BEGIN
   ln_base_pressure_mpaa :=ecdp_unit.convertValue(p_base_pressure,'PSIA', 'MPAA');
   ln_flow_pressure_mpaa :=ecdp_unit.convertValue(p_flowing_pressure,'PSIA', 'MPAA');
   ln_std_pressure_mpaa  :=NVL(ecdp_unit.convertValue(p_std_pressure,'PSIA', 'MPAA'),ln_base_pressure_mpaa);
   ln_flow_temperature_k :=ecdp_unit.convertValue(p_flowing_temperature,'F', 'K');
   ln_base_temperature_k :=ecdp_unit.convertValue(p_base_temperature,ecdp_Unit.GetUnitFromLogical(EcDp_ClassMeta_Cnfg.getUomCode('AGA_CONSTANT','TD')), 'K');
   ln_std_temperature_k  :=NVL(ecdp_unit.convertValue(p_std_temperature,'F','K'),ln_base_temperature_k);
   ln_th                 :=NVL(ecdp_unit.convertValue(p_th,'F', 'K'),0); --Reference temperature for combustion (deg k)

   calc_charges(1,
                     p_hv,
                     p_spec_grav,
                     p_co2,
                     p_n2,
                     p_h2,
                     p_co,
                     ln_th,
                     ln_base_temperature_k,
                     ln_std_temperature_k,
                     ln_base_pressure_mpaa,
                     ln_std_pressure_mpaa,
                     ln_xch,
                     ln_n2,
                     p_zb,
                     p_db,
                     li_err,
                     p_mr);

   p_df :=calc_dgross(ln_flow_pressure_mpaa,
                      ln_flow_temperature_k,
                      ln_xch,
                      ln_n2,
                      p_co2,
                      p_h2,
                      p_co);

   p_zf := calc_zgross(p_df,
                      ln_flow_temperature_k,
                      ln_xch,
                      ln_n2,
                      p_co2,
                      p_h2,
                      p_co);
END calc_z_gross_1;

---------------------------------------------------------------------------------------------------
-- Procedure      : calcFpv_RK
-- Description    : Calculates compressibility factor for standard and flowing fluid for AGA3-1985 and Use AGA8=Y.
-- Preconditions  :
-- Postconditions :
--
-- Using tables   :
--
-- Using functions:
--
-- Configuration
-- required       :
--
-- Behaviour      :
--
--1: Methane(C1); 2: Nitrogen(N2); 3: Carbon Dioxide(CO2); 4: Ethane(C2); 5: Propane(C3);
--6: Water(H2O);  7: Hydrogen Sulfide(H2S); 8:Hydrogen(H2);9: Carbon Monoxide(CO); 10:Oxygen(O2);
--11:i-Butane(iC4); 12:n-Butane(C4); 13:i-Pentane(iC5);	14: n-Pentane(nC5); 15: n-Hexane(nC6);
--16:n-Heptane(nC7);17:n-Octane(nC8);18:n-Nonane(nC9); 19:n-Decane(nC10); 20: Helium(He);
--21:Argon(Ar)
---------------------------------------------------------------------------------------------------
FUNCTION calcCompressibility_RK(
   p_object_id  VARCHAR2,
   p_daytime    DATE,
   p_pressure NUMBER,
   p_temp NUMBER
)
RETURN NUMBER
IS

   lr_analysis_sample     object_fluid_analysis%ROWTYPE;
   ln_n2 NUMBER;
   ln_co2 NUMBER;
   ln_h2s NUMBER;
   ln_adjusted_factor NUMBER;
   ln_temp NUMBER;
   ln_pressure NUMBER;
   ln_A NUMBER;
   ln_B NUMBER;
   ln_z NUMBER;
   ln_fz NUMBER;
   n NUMBER;
   TYPE t_pn_z_array IS VARRAY(21) OF NUMBER;
   TYPE t_pn_zcomp_array IS VARRAY(21) OF VARCHAR2(10);

   vn_Compname t_pn_zcomp_array := t_pn_zcomp_array(); --component name
   vn_Compmolfrac t_pn_z_array := t_pn_z_array(); -- component mol frac
   vn_Tci t_pn_z_array := t_pn_z_array();  --k
   vn_Pci t_pn_z_array := t_pn_z_array();  --ba

  CURSOR c_component(cp_analysis_no NUMBER) IS
   SELECT *
   FROM TV_STRM_GAS_COMPONENT
   --FROM fluid_analysis_component
   WHERE analysis_no = cp_analysis_no
   ORDER BY sort_order;

   component   t_componentName := t_componentName('C1', 'N2', 'CO2', 'C2', 'C3', 'H2O', 'H2S' , 'H2', 'CO', 'O2', 'IC4', 'NC4', 'IC5', 'NC5','C6','C7+','NC8','NC9','NC10','HE','AR' ) ;
   PC          t_componentPC   := t_componentPC(45.99,33.96,73.77,48.72,42.44,220.64,90.08,13.15,34.94,50.43,36.40,37.98,33.81,33.7,30.12,27.36,24.87,22.8,21,2.275,49);
   TC          t_componentTC   := t_componentTC(190.56,126.19,304.13,305.33,369.77,647.10,373.60,33.2,132.8,154.58,407.82,425.12,460.4,469.7,507.5,540.3,568.8,594.7,617.7,5.2,150.86);

BEGIN

   lr_analysis_sample := EcDp_Fluid_Analysis.getLastAnalysisSample(p_object_id,'STRM_GAS_COMP',NULL,p_daytime,'GAS');
   FOR cur_rec IN c_component( lr_analysis_sample.analysis_no) LOOP
     IF cur_rec.COMPONENT_NO = 'N2' THEN
       ln_n2 := cur_rec.comp_mol_pct/100 ;
     ELSIF cur_rec.COMPONENT_NO = 'CO2' THEN
       ln_co2 := cur_rec.comp_mol_pct/100 ;
     ELSIF cur_rec.COMPONENT_NO = 'H2S' THEN
       ln_h2s := cur_rec.comp_mol_pct/100 ;
     END IF;
   END LOOP;
   ln_adjusted_factor :=  15 * (ln_co2 + ln_h2s) * (1 - ln_co2 - ln_h2s) + 4.1666667 * (ln_h2s**0.5 - ln_h2s**2);
   -- ln_pressure := ecdp_unit.convertValue(p_pressure, 'PSIA', 'KPAA');
   -- To do... p_pressure is now assumed to be in KPAA.
   ln_pressure := p_pressure;
   IF  ln_pressure < 17300 THEN --- system can popup a msg that the pressure this very high if it is more than 17300kpa
     ln_temp :=  (p_temp + 273.15) + 1.94444444 * ( ln_pressure / 2757.9 - 2.103e-8 *  ln_pressure**2);
   END IF;
   n:= 1;
   FOR cur_comp IN c_component(lr_analysis_sample.analysis_no) LOOP
     FOR i IN component.FIRST .. component.LAST LOOP
       IF component(i) = cur_comp.component_no THEN
         vn_compname.extend;
         vn_Compmolfrac.extend;
         vn_Tci.extend;
         vn_Pci.extend;
         vn_compname(n) := cur_comp.component_no;
         vn_Compmolfrac(n) := cur_comp.comp_mol_pct/100;
         vn_Tci(n) :=  ln_temp  /( TC(i)- ln_adjusted_factor);
         vn_Pci(n) := ln_pressure/100/(PC(i) * (TC(i)  - ln_adjusted_factor)/TC(i));
         n:= n +1;
         EXIT;
       END IF;
     END LOOP;
   END LOOP;
   --Calculate A and B
   ln_a :=0;
   ln_b :=0;
   FOR i IN 1 .. vn_compname.count LOOP
     ln_b := ln_b + vn_Compmolfrac(i) * vn_Pci(i) / vn_tci(i);
     FOR j IN i..vn_compname.count LOOP
       IF i = j THEN
         ln_a := ln_a + vn_Compmolfrac(j)**2 * vn_Pci(j) /vn_tci(j)**2.5;
       ELSE
         ln_a := ln_a + 2 *   vn_Compmolfrac(i) *  vn_Compmolfrac(j) * (vn_PCi(j) * vn_Pci(i))**0.5 / (vn_Tci(i) * vn_TCi(j))**1.25;
       END IF;
     END LOOP;
   END LOOP;
   ln_rk_a := ln_cn_rk_a * ln_a;
   ln_rk_b := ln_cn_rk_b * ln_b;
   --the compressibility is in (0, 1)
   ln_z := 0;
   ln_fz:=1;
   --calculate the compressibility
   WHILE ln_z + 0.000001 < ln_fz and abs(calc_rk_fz((ln_fz+ln_z)/2))>= 0.000001 LOOP
     IF calc_rk_fz(ln_z) * calc_rk_fz((ln_z+ln_fz)/2) <0 THEN
       ln_fz :=(ln_z + ln_fz )/2;
     ELSE
       ln_z := (ln_z + ln_fz ) / 2;
     END IF;
   END LOOP;
   RETURN (ln_z + ln_fz) /2;

END calcCompressibility_RK;

---------------------------------------------------------------------------------------------------
-- Procedure      : calc_rk_fz
-- Description    : Calculate compressibility according to the Redlich-Kwong and Wichert-Aziz correction.
--
-- Preconditions  :
-- Postconditions :
--
-- Using tables   :
--
-- Using functions:
--
-- Configuration
-- required       :
--
-- Behaviour      :
--
---------------------------------------------------------------------------------------------------
FUNCTION calc_rk_fz(
   p_compressibility NUMBER)

RETURN NUMBER
IS
  ln_return_value NUMBER;
BEGIN
  ln_return_value :=  p_compressibility**3 -  p_compressibility**2 + (ln_rk_a - ln_rk_b - ln_rk_b**2) *  p_compressibility - ln_rk_a * ln_rk_b;
  RETURN ln_return_value;
END calc_rk_fz;

---------------------------------------------------------------------------------------------------
-- Procedure      : calc_charges
-- Description    : Calculates compressibility and density factor for standard and flowing fluid for AGA3-1990 and Use AGA8=Y and Aga8 method = Gross 1 or Gross 2
-- Preconditions  :
-- Postconditions :
--
-- Using tables   :
--
-- Using functions:
--
-- Configuration
-- required       :
--
-- Behaviour      :
--
--1: Methane(C1); 2: Nitrogen(N2); 3: Carbon Dioxide(CO2); 4: Ethane(C2); 5: Propane(C3);
--6: Water(H2O);  7: Hydrogen Sulfide(H2S); 8:Hydrogen(H2);9: Carbon Monoxide(CO); 10:Oxygen(O2);
--11:i-Butane(iC4); 12:n-Butane(C4); 13:i-Pentane(iC5);	14: n-Pentane(nC5); 15: n-Hexane(nC6);
--16:n-Heptane(nC7);17:n-Octane(nC8);18:n-Nonane(nC9); 19:n-Decane(nC10); 20: Helium(He);
--21:Argon(Ar)
---------------------------------------------------------------------------------------------------
procedure calc_charges (
    p_method   IN       INT,    --1:use gross caloric,relative density,mole fraction of CO2
                               --2:use relative density and mole fraction of N2 and CO2
                               --option NUMBER for selecting the method
    p_hv       IN       NUMBER, --Gross calorific heating value for gas mixture in KJ/dm^3 for method 1
    p_gr       IN       NUMBER, --Relative density
    p_Xco2     IN       NUMBER, --the mole faction of CO2, percent
    p_Xn2      IN       NUMBER, --the mole faction of N2, percent
    p_Xh2      IN       NUMBER, --the mole faction of H2, percent
    p_Xco      IN       NUMBER, --the mole faction of CO, percent
    p_th       IN       NUMBER, --reference temperature for heating value in kelvin
    p_td       IN       NUMBER, --reference temperature for molar density in kelvin
    p_tgr      IN       NUMBER, --reference temperature for relative density in kelvin
    p_pd       IN       NUMBER, --reference pressure for molar density in Mpa
    p_pgr      IN       NUMBER, --reference pressure for relative density in Mpa
    p_Xch      OUT      NUMBER, --the mole faction of Ch, percent
    p_n2       OUT      NUMBER, --the mole faction of N2, percent(calculated)
    p_zb       OUT      NUMBER, --compressibility factor at 60F and 14.73 psia
    p_db       OUT      NUMBER, --molar density at 60F and 14.73 psia
    p_err      OUT      INT,     --Error Flag. 0: no error
    p_mr       OUT      NUMBER  -- Molecular weight of gas mixture.
)
IS
   ln_vir      NUMBER;
   ln_d0air    NUMBER;
   --AGA8 P86 B2-4
   ln_g1       NUMBER := -2.709328;
   --AGA8 P86 B2-4
   ln_g2       NUMBER := 0.021062199;
   ln_htv4     NUMBER := 285.83;
   ln_htv5     NUMBER := 282.98;
   ln_z0       NUMBER;
   ln_z0tdpd   NUMBER;
   ln_hn0      NUMBER;
   ln_mr       NUMBER;
   ln_sum      NUMBER;
   ln_flag     NUMBER;
   ln_hch      NUMBER;
   ln_bch      NUMBER;
   ln_bmix     NUMBER;
   ln_temp     NUMBER;
   ln_z0new    NUMBER;
   ln_XN2      NUMBER;
   ln_Mch      NUMBER;

BEGIN
   --initialized some value
   ln_t_old_temp  := 0;
   p_err         := 0;
   --AGA8 P86 B2-3
   ln_vir := -0.12527 + 5.91e-4 *  p_tgr - 6.62e-7 * ( p_tgr ** 2);
   ln_d0air:= 28.96256 / ( ln_r * p_tgr / p_pgr + ln_vir );
   /*
   Method 1 Given the caloric value,specific gravity/relative density and the mole fraction of CO2
   */
   IF p_method = 1 THEN
     ln_z0     := 0.99;
     ln_z0tdpd := 1;
     <<calculates_z_1>>
     ln_hn0  := p_hv * ln_z0tdpd * ln_r * p_td / p_pd *(1.0+1.027E-4*(p_th-298.15));-- HN take HV's place
     --HN0 = (*HV)*Z0TDPD*RGAS*(*TD)/(*PD)*(1.0+1.027E-4*((*TH)-298.15))
     --AGA8 P86 B2-2
     ln_mr   := p_gr * ln_z0 * ln_r * p_tgr / p_pgr * ln_d0air;
     ln_sum  := p_Xco2 * ( ln_MWN2 - ln_MWCo2)
                  + p_Xh2 * ( ln_MWN2 - ln_MWH2 + ln_g2 * ln_htv4 )
                  + p_Xco * ( ln_MWN2 - ln_MWCo + ln_g2 * ln_htv5 );

         --AGA8 P86 B2-4
     p_Xch := ( ln_mr - ln_g2 * ln_hn0 - ln_MWN2 + ln_sum ) / ( ln_g1 - ln_MWN2);
     ln_XN2 := 1 - p_Xch - p_Xco2 - p_Xh2 - p_Xco;
     ln_flag := 0;
     IF ln_XN2 < 0 THEN
       ln_flag:= 1;
       ln_XN2:= 0;
       p_Xch:= 1 - ln_XN2 - p_Xco2 - p_Xh2 - p_Xco;
     END IF;
     --AGA8 P87 B2-6
     ln_hch:= ( ln_hn0 - p_Xh2 * ln_htv4 - p_Xco * ln_htv5 ) / p_Xch;
     IF ln_hch < 0 THEN
       ln_hch := 0;
     END IF;
     ln_Mch := ln_g1 + ln_g2 * ln_hch;
     ln_bch:= ln_bb00 + p_td * (ln_bb01 + ln_bb02 * p_td)
              + (ln_bb10 + p_td * (ln_bb11 + ln_bb12 * p_td )) * ln_hch
              + (ln_bb20 + p_td * (ln_bb21 + ln_bb22 * p_td )) * ln_hch ** 2;
     --calculates the Bmix
     calc_virgs ( p_td,
                  p_Xch,
                  p_Xco2,      --the mole faction of CO2, percent
                  ln_XN2,       --the mole faction of N2, percent
                  p_Xh2,       --the mole faction of H2, percent
                  p_Xco,       --the mole faction of CO, percent
                  ln_bmix,
                  ln_temp,
                  ln_bch,
                  1,
                  p_err);

     ln_z0tdpd:= 1 + ln_bmix * p_pd / ln_r / p_td;
     ln_bch:= ln_bb00 + p_tgr * (ln_bb01 + ln_bb02 * p_tgr)
               + (ln_bb10 + p_tgr * (ln_bb11 + ln_bb12 * p_tgr )) * ln_hch
               + (ln_bb20 + p_tgr * (ln_bb21 + ln_bb22 * p_tgr )) * ln_hch ** 2;

     --calculates the Bmix
     calc_virgs ( p_tgr,
                  p_Xch,
                  p_Xco2,
                  ln_XN2,
                  p_Xh2,
                  p_Xco,
                  ln_bmix,
                  ln_temp,
                  ln_bch,
                  1,
                  p_err);


     ln_z0new := 1 + ln_bmix * p_pgr / ln_r / p_tgr;
     IF abs ( ln_z0 / ln_z0new - 1 ) > 0.5e-10 THEN
       ln_z0    := ln_z0new;
       GOTO calculates_z_1;
     END IF;
     ln_XN2 := 1 - p_Xch - p_Xco2 - p_Xh2 - p_Xco;
     IF ln_XN2 < 0 or ln_flag = 1 THEN
    -- Combined values of grgr, XN2 and hv not consistent.
       p_err    := 3;
     RAISE ex_values_not_consistent;
     END IF;
     /*
     Method 2 : Given the specific gravity/relative density and the mole fraction of N2 and CO2
     */
   ELSIF p_method = 2 THEN
     ln_z0    := 0.99;
     ln_z0new :=1;
  	 ----AGA 8  B.2-9  p87
  	 p_Xch := 1 -  p_Xco2 - p_Xn2 - p_Xco - p_Xh2 ;
   	 <<calculate_Z>>
  	 --AGA 8  B.2-10  p87
     ln_mr := p_gr * ln_z0 * ln_r * p_tgr * ln_d0air / p_pgr;
  	 --AGA 8  B.2-12  p89
   	 ln_Mch := (ln_mr - p_Xn2 * ln_MWN2
                      - p_Xco2* ln_MWCo2
                      - p_Xh2 * ln_MWH2
                      - p_Xco * ln_MWCo) / p_Xch;
     --AGA 8  B.2-13  p89
     ln_hch := ( ln_Mch - ln_g1 ) / ln_g2;
  	 --AGA 8  32 and 34  p31
     ln_bch := ln_bb00 + p_tgr * ( ln_bb01 + ln_bb02 * p_tgr )
               + (ln_bb10 + p_tgr * ( ln_bb11 + ln_bb12 * p_tgr )) * ln_hch
               + (ln_bb20 + p_tgr * ( ln_bb21 + ln_bb22 * p_tgr )) * power(ln_hch,2);

     --calculates the Bmix
     calc_virgs ( p_tgr,
                  p_Xch,
                  p_Xco2,
                  p_Xn2,
                  p_Xh2,
                  p_Xco,
                  ln_bmix,
                  ln_temp,
                  ln_bch,
                  1,
                  p_err );

     --AGA8 B.2-7 p87
     --ln_hch := ln_Bmix;
     ln_z0new := 1 + ln_Bmix * p_pgr/ ln_r / p_tgr;
     IF abs(ln_z0 / ln_z0new - 1) > 0.5e-10 THEN
      ln_z0 := ln_z0new;
      GOTO calculate_Z;
     END IF;
   END IF;
   IF p_err <> 0 THEN
     RETURN;
   END IF;
   --Find the virial coefficient constants for pure hydrocarbon using the caloric value
   ln_B011 := ln_bb00 + ln_hch * (ln_bb10 + ln_bb20 * ln_hch);
   ln_B111 := ln_bb01 + ln_hch * (ln_bb11 + ln_bb21 * ln_hch);
   ln_B211 := ln_bb02 + ln_hch * (ln_bb12 + ln_bb22 * ln_hch);
   ln_C011 := -0.302488 + ln_hch * ( 0.646422e-3 - 0.332805e-6 * ln_hch );
   ln_C111 := 0.195861e-2 + ln_hch * ( -0.422876e-5 + 0.223160e-8 * ln_hch );
   ln_C211 := -0.316302e-5 + ln_hch * ( 0.688157e-8 - 0.367713e-11 * ln_hch );

   IF p_method = 1 THEN
     p_n2 := ln_xn2;
   ELSIF p_method = 2 THEN
     p_n2 := p_xn2;
   END IF;
   p_mr := ln_mr;
   p_db := calc_dgross ( p_pgr,
                         p_tgr,
                         p_Xch,
                         p_n2,
                         p_Xco2,
                         p_Xh2,
                         p_Xco);

      --ZB = compressibility factor at base conditions( 60 F and 14.73 psia)
   p_zb:= calc_zgross ( p_db,
                        p_tgr,
                        p_Xch,
                        p_n2,
                        p_Xco2,
                        p_Xh2,
                        p_Xco);

END calc_charges;

---------------------------------------------------------------------------------------------------
-- Procedure      : calc_virgs
-- Description    : Calculates the second and third virial coefficients in the GERG (Gross Energy) model at the given temperature.
--                  The coefficient constants are stored in arrays and are mixed using the combining rules Of AGA8-Detail and AGA8-Gross.
-- Preconditions  :
-- Postconditions :
--
-- Using tables   :
--
-- Using functions:
--
-- Configuration
-- required       :
--
-- Behaviour      :
--
--1: Methane(C1); 2: Nitrogen(N2); 3: Carbon Dioxide(CO2); 4: Ethane(C2); 5: Propane(C3);
--6: Water(H2O);  7: Hydrogen Sulfide(H2S); 8:Hydrogen(H2);9: Carbon Monoxide(CO); 10:Oxygen(O2);
--11:i-Butane(iC4); 12:n-Butane(C4); 13:i-Pentane(iC5);	14: n-Pentane(nC5); 15: n-Hexane(nC6);
--16:n-Heptane(nC7);17:n-Octane(nC8);18:n-Nonane(nC9); 19:n-Decane(nC10); 20: Helium(He);
--21:Argon(Ar)
---------------------------------------------------------------------------------------------------
PROCEDURE calc_virgs (
    p_t      IN       NUMBER, -- Kelvin
    p_Xch    IN       NUMBER, --the mole faction of CH, percent                                                                                                                                                                                                       --temperature in kelvins
    p_Xco2   IN       NUMBER, --the mole faction of CO2, percent
    p_Xn2    IN       NUMBER, --the mole faction of N2, percent
    p_Xh2    IN       NUMBER, --the mole faction of H2, percent
    p_Xco    IN       NUMBER, --the mole faction of CO, percent                                                                                                                                                                                                                  --mole faction
    p_bmix   OUT      NUMBER,                                                                                                                                                                                      --second virial coefficient of the mixture
    p_cmix   OUT      NUMBER,                                                                                                                                                                                       --third virial coefficient of the mixture
    p_bch    IN OUT   NUMBER,                                                                                                                                                                                          --binary ch-ch interaction coefficient
    p_opt    IN       INT,    --option NUMBER 0: calculate BCH, 1: use BCH input
    p_err    OUT      INT                                                                                                                                                                                                          --Error flag 0:No error,
   )
IS
    ln_x11    NUMBER;
    ln_x22    NUMBER;
    ln_x33    NUMBER;
    ln_x44    NUMBER;
    ln_x55    NUMBER;
    ln_bn2    NUMBER;
    ln_bco2   NUMBER;
    ln_bh2    NUMBER;
    ln_bco    NUMBER;
    ln_b12    NUMBER;
    ln_b13    NUMBER;
    ln_b14    NUMBER;
    ln_b15    NUMBER;
    ln_b23    NUMBER;
    ln_b24    NUMBER;
    ln_e      NUMBER;
    ln_f      NUMBER;
    ln_c11    NUMBER;
    ln_c22    NUMBER;
    ln_c33    NUMBER;
    ln_c23    NUMBER;
    ln_c32    NUMBER;
    ln_c15    NUMBER;
    ln_c44    NUMBER;

BEGIN
   IF p_t = ln_t_old_temp THEN
     p_bmix := ln_bbmix;-- use AGA8-Detail
     p_cmix := ln_ccmix; -- use AGA8-Gross
     RETURN;
   END IF;
   --double times of the percents of each gas
   ln_x11  := power ( p_Xch, 2 );
   ln_x22  := power ( p_Xn2, 2 );
   ln_x33  := power ( p_Xco2, 2 );
   ln_x44  := power ( p_Xh2, 2 );
   ln_x55  := power ( p_Xco, 2 );
   --AGA8 34 P31
   IF p_opt = 0 THEN
     p_bch := ln_B011 + p_t * (ln_B111 + ln_B211 * p_t);
   END IF;
   ln_bn2  := ln_b022 + p_t * ( ln_b122 + ln_b222 * p_t );
   ln_bco2 := ln_b033 + p_t * ( ln_b133 + ln_b233 * p_t );
   ln_bh2  := ln_b044 + p_t * ( ln_b144 + ln_b244 * p_t );
   ln_bco  := ln_b055 + p_t * ( ln_b155 + ln_b255 * p_t );
   --check the value
    IF ( ln_bco2 * p_bch ) < 0 THEN
     p_err:= 1;
     RAISE ex_virgs_sqrt_negative;
    END IF;
   --AGA8 36 p32
     ln_b12  := ( 0.72 + 1.875e-5 * power ( ( 320 - p_t ), 2 )) * ( ln_bn2 + p_bch ) / 2;
     --AGA8 37 p32
   ln_b13  := -0.865 * sqrt ( ln_bco2 * p_bch );
     --AGA8 34 p31
   ln_b14  := ln_b014 + p_t * ( ln_b114 + ln_b214 * p_t );
   ln_b15  := ln_b015 + p_t * ( ln_b115 + ln_b215 * p_t );
   ln_b23  := ln_b023 + p_t * ( ln_b123 + ln_b223 * p_t );
   ln_b24  := ln_b024;
   --AGA8 28 p30
    p_bmix := p_bch * ln_x11
               + ln_bn2 * ln_x22
               + ln_bco2 * ln_x33
               + ln_bh2 * ln_x44
               + ln_bco * ln_x55
               + 2 * ln_b12 * p_Xch * p_Xn2
               + 2 * ln_b13 * p_Xch * p_Xco2
               + 2 * ln_b14 * p_Xch * p_Xh2
               + 2 * ln_b15 * p_Xch * p_Xco
               + 2 * ln_b23 * p_Xn2 * p_Xco2
               + 2 * ln_b24 * p_Xn2 * p_Xh2;

    IF p_opt = 1 THEN
      RETURN;
    END IF;
    ln_t_old_temp    := p_t;
    ln_bbmix         := p_bmix;
    --calculate the third virial coefficient
    ln_e   := 0.92 + 0.0013 * ( p_t - 270 );
    ln_f   := 1 / 3;
    --AGA8 35 p32
    ln_c11 := ln_C011 + p_t * ( ln_C111 + ln_C211 * p_t );
    ln_c22 := ln_c022 + p_t * ( ln_c122 + ln_c222 * p_t );
    ln_c33 := ln_c033 + p_t * ( ln_c133 + ln_c233 * p_t );
    ln_c44 := ln_c044 + p_t * ( ln_c144 + ln_c244 * p_t );
    --invalid term in Cmix
    IF ln_c11 < 0 or ln_c33 < 0 THEN
     -- Invalid term in virgs.
     p_err    := 1;
     RAISE ex_invalid_terms_virgs;
    END IF;
    --AGA8 31 and 28 p30
    ln_c15 := 3 * ( ln_c015 + p_t * ( ln_c115 + ln_c215 * p_t ));
    ln_c23 := 3 * ( ln_c023 + p_t * ( ln_c123 + ln_c223 * p_t ));
    ln_c32 := 3 * ( ln_c032 + p_t * ( ln_c132 + ln_c232 * p_t ));
    --AGA8 28 p30
    p_cmix:= ln_c11 * ln_x11 * p_Xch
         + ln_c22 * ln_x22 * p_Xn2
         + ln_c33 * ln_x33 * p_Xco2
         + ln_c44 * ln_x44 * p_Xh2
         + ln_c23 * ln_x22 * p_Xco2
         + ln_c32 * ln_x33 * p_Xn2
         + ln_c15 * ln_x11 * p_Xco
         + 3 * ln_e * ln_x11 * p_Xn2 * power ( ( ln_c11 * ln_c11 * ln_c22 ), ln_f )
         + 3 * ln_e * ln_x22 * p_Xch * power ( ( ln_c11 * ln_c22 * ln_c22 ), ln_f )
         + 2.76 * ln_x11 * p_Xco2 * power ( ( ln_c11 * ln_c11 * ln_c33 ), ln_f )
         + 2.76 * ln_x33 * p_Xch * power ( ( ln_c11 * ln_c33 * ln_c33 ), ln_f )
         + 3.6 * ln_x11 * p_Xh2 * power ( ( ln_c11 * ln_c11 * ln_c44 ), ln_f )
         + 6.6 * p_Xch * p_Xn2 * p_Xco2 * power ( ( ln_c11 * ln_c22 * ln_c33 ), ln_f );

    ln_ccmix := p_cmix;

END calc_virgs;


---------------------------------------------------------------------------------------------------
-- Procedure      : calc_dgross
-- Description    : calculates density from the GERG model give pressure and temperature. This function uses chambers's
--                  method and PGROSS to determine the density.
-- Preconditions  :
-- Postconditions :
--
-- Using tables   :
--
-- Using functions:
--
-- Configuration
-- required       :
--
-- Behaviour      :
--
--1: Methane(C1); 2: Nitrogen(N2); 3: Carbon Dioxide(CO2); 4: Ethane(C2); 5: Propane(C3);
--6: Water(H2O);  7: Hydrogen Sulfide(H2S); 8:Hydrogen(H2);9: Carbon Monoxide(CO); 10:Oxygen(O2);
--11:i-Butane(iC4); 12:n-Butane(C4); 13:i-Pentane(iC5);	14: n-Pentane(nC5); 15: n-Hexane(nC6);
--16:n-Heptane(nC7);17:n-Octane(nC8);18:n-Nonane(nC9); 19:n-Decane(nC10); 20: Helium(He);
--21:Argon(Ar)
---------------------------------------------------------------------------------------------------
FUNCTION calc_dgross (
    p_p   NUMBER,   --pressure in Mpa
    p_t   NUMBER,   --temperature in kelvin
    p_Xch  NUMBER,
    p_Xn2  NUMBER,
    p_Xco2 NUMBER,
    p_Xh2  NUMBER,
    p_Xco  NUMBER
)
RETURN NUMBER
IS
   ln_dgross   NUMBER ;
   ln_tol      NUMBER;
   ln_x1       real;
   ln_x2       real;
   ln_x3       real;
   ln_f        real;
   ln_f1       real;
   ln_f2       real;
   ln_f3       real;
   li_ic       INT;
	 ln_Pm		  NUMBER;
	 ln_Tk		  NUMBER;

BEGIN
   ln_Pm := p_p ;
   ln_Tk := p_t;
	 ln_tol:= 1e-6;
   --Bracket density solution
	 ln_x1 := calc_pgross ( 0,
	  			   	  					ln_Tk,
												  p_Xch,
												  p_Xn2,
												  p_Xco2,
												  p_Xh2,
												  p_Xco);


   ln_x2 := calc_pgross ( 8,
	  			   	  					ln_Tk,
												  p_Xch,
												  p_Xn2,
												  p_Xco2,
												  p_Xh2,
												  p_Xco);

      --check the boundaries
   ln_f1 := calc_pgross ( ln_x1,
	  			   	  					ln_Tk,
												  p_Xch,
												  p_Xn2,
												  p_Xco2,
												  p_Xh2,
												  p_Xco) - ln_Pm;

   IF abs ( ln_f1 ) <= ln_tol THEN
     ln_dgross:= ln_x1;
     RETURN ln_dgross;
   END IF;
   ln_f2 := calc_pgross ( ln_x2,
	  			   	  					ln_Tk,
												  p_Xch,
												  p_Xn2,
												  p_Xco2,
												  p_Xh2,
												  p_Xco ) - ln_Pm;

   IF abs( ln_f2 ) <= ln_tol THEN
     ln_dgross    := ln_x2;
     RETURN ln_dgross;
   END IF;
   IF ln_f1 * ln_f2 > 0.0e0 THEN
   -- The root was not bounded in dgross.
     ln_dgross    := 0;
     RETURN ln_dgross;
   END IF;
   --begin iterating
   FOR li_ic IN 1 .. 100 LOOP
     ln_x3    := ( ln_x1 * ln_f2 - ln_x2 * ln_f1 ) / ( ln_f2 - ln_f1 );
     ln_f3    := calc_pgross ( ln_x3,
		 		  	 						       ln_Tk,
											         p_Xch,
											         p_Xn2,
											         p_Xco2,
											         p_Xh2,
											         p_Xco) - ln_Pm;
     IF mod ( li_ic, 6 ) = 0 THEN
       ln_dgross := ( ln_x1 + ln_x2 ) / 2;
     ELSE
       IF ( ( ln_f1 - ln_f2 ) * ( ln_f1 - ln_f3 ) * ( ln_f2 - ln_f3 )) = 0 then
         RETURN ln_dgross;
       END IF;
       ln_dgross := ln_x1 * ln_f2 * ln_f3 / ( ( ln_f1 - ln_f2 ) * ( ln_f1 - ln_f3 ) )
					          + ln_x2 * ln_f1 * ln_f3 / ( ( ln_f2 - ln_f1 ) * ( ln_f2 - ln_f3 ) )
						        + ln_x3 * ln_f1 * ln_f2 / ( ( ln_f3 - ln_f1 ) * ( ln_f3 - ln_f2 ) );
       IF ( ln_dgross - ln_x1 ) * ( ln_dgross - ln_x2 ) >= 0 THEN
         ln_dgross := ( ln_x1 + ln_x2 ) / 2;
			 END IF;
     END IF;
     ln_f  := calc_pgross ( ln_dgross,
		 		  	 						    ln_Tk,
											      p_Xch,
											      p_Xn2,
											      p_Xco2,
											      p_Xh2,
											      p_Xco) - ln_Pm;

     IF abs ( ln_f ) <= ln_tol THEN
       RETURN ln_dgross;
     END IF;
     IF ln_f * ln_f3 < 0 THEN
       ln_x1    := ln_dgross;
       ln_f1    := ln_f;
       ln_x2    := ln_x3;
       ln_f2    := ln_f3;
     ELSIF ln_f3 * ln_f1 > 0 THEN
       ln_x1    := ln_dgross;
       ln_f1    := ln_f;
     ELSE
       ln_x2    := ln_dgross;
       ln_f2    := ln_f;
     END IF;
   END LOOP;
   -- No convergence in dgross
   ln_dgross    := 0;
 RETURN ln_dgross;
 END;

---------------------------------------------------------------------------------------------------
-- Procedure      : calc_zgross
-- Description    : Calculates the compressibility factor from GERG model as a function of density and temperature.
--
-- Preconditions  :
-- Postconditions :
--
-- Using tables   :
--
-- Using functions:
--
-- Configuration
-- required       :
--
-- Behaviour      :
--
---------------------------------------------------------------------------------------------------
FUNCTION calc_zgross (
    p_d    NUMBER,                                                                                                                                                                                                            --molar density in mol/dm^3
    p_tk   NUMBER,
    p_Xch  NUMBER,
    p_Xn2  NUMBER,
    p_Xco2 NUMBER,
    p_Xh2  NUMBER,
    p_Xco  NUMBER
)                                                                                                                                                                                                                                   --temperature in kelvins
RETURN NUMBER
IS
   ln_zgross   NUMBER;
   ln_bmix     NUMBER;
   ln_cmix     NUMBER;
   ln_temp     NUMBER;
   li_err      INT;
BEGIN
     --binary ch-ch interaction coefficient
   calc_virgs (p_tk,
               p_Xch,
               p_Xco2,
               p_Xn2,
               p_Xh2,
               p_Xco,
               ln_bmix,
               ln_cmix,
               ln_temp,
               0,
               li_err);


   ln_zgross := 1 + ln_bmix * p_d + ln_cmix * p_d * p_d;
   RETURN ln_zgross;
END calc_zgross;

---------------------------------------------------------------------------------------------------
-- Procedure      : calc_pgross
-- Description    : Calculates the pressure from natural gas mixtures as a function of density and temperature
--
-- Preconditions  :
-- Postconditions :
--
-- Using tables   :
--
-- Using functions:
--
-- Configuration
-- required       :
--
-- Behaviour      :
--
---------------------------------------------------------------------------------------------------
FUNCTION calc_pgross (
    p_d   NUMBER,                                                                                                                                                                                                            --Molar density in mol/dm^3
    p_tk  NUMBER,
    p_Xch  NUMBER,
    p_Xn2  NUMBER,
    p_Xco2 NUMBER,
    p_Xh2  NUMBER,
    p_Xco  NUMBER
)                                                                                                                                                                                                                                    --temperature in kelvin
RETURN NUMBER
IS
   vn_pgross NUMBER;
BEGIN
   vn_pgross := p_d * ln_r * p_tk * calc_zgross ( p_d,
	  			   	  	   	 	   	 	   	 			          p_tk,
														                      p_Xch,
														                      p_Xn2,
														                      p_Xco2,
														                      p_Xh2,
														                      p_Xco);
   RETURN vn_pgross;
END calc_pgross ;



---------------------------------------------------------------------------------------------------
-- Procedure      : calc_HN
-- Description    : Calculates the pressure from natural gas mixtures as a function of density and temperature
--
-- Preconditions  :
-- Postconditions :
--
-- Using tables   :
--
-- Using functions:
--
-- Configuration
-- required       :
--
-- Behaviour      :
--
---------------------------------------------------------------------------------------------------
FUNCTION calc_HN (
    p_cid t_pi_z_cid,
    p_x   t_pn_z_array,
    p_ncc INT,
    p_Tb  NUMBER -- Celsius
)
RETURN NUMBER
is

   li_i INT;
   ln_hak NUMBER;
   ln_hbk NUMBER;
   ln_hck NUMBER;
   ln_r NUMBER := 8.31451;
   ln_hn NUMBER;
BEGIN

   ln_hn:=0;
   FOR li_i IN 1..p_ncc loop
     ln_hn := ln_hn + p_x(li_i) * ( ln_g_HN(p_cid(li_i)) - ln_c_ak(p_cid(li_i)) * (p_Tb -25)/1000 -
              ln_c_bk(p_cid(li_i)) * (p_Tb**2 - 625) /2000 - ln_c_ck(p_cid(li_i)) * (p_Tb**3 -15625)/3000);
   END LOOP;

   RETURN ln_hn;
END calc_HN ;

END EcBp_CalculateAGA;