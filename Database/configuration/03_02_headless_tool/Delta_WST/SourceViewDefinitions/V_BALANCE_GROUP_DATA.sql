CREATE OR REPLACE FORCE EDITIONABLE VIEW "V_BALANCE_GROUP_DATA" ("DAYTIME", "TOTAL_VOL", "NET_ADJ_VOL", "DILUENT_VOL", "SHRINKAGE_VOL", "BITUMEN_VOL", "ALLOC_ENERGY", "NET_ADJ_ALLOC_ENERGY", "NET_MASS", "OBJECT_CODE", "NAME", "OBJECT_ID", "OP_FCTY_CLASS_1_ID", "PRODUCT_ID", "PRODUCT_BALANCE", "STRM_BAL_CATEGORY", "ACTIVITY_CODE", "PRODUCT_BALANCE_GROUP", "BALANCE_GROUP_CODE", "IN_OUT_FLAG", "FROM_NODE_ID", "TO_NODE_ID", "PARENT_OBJECT_ID", "URL", "SCREEN_NAME", "SORT_ORDER", "TRUCK_TICKET_FLAG", "RECORD_STATUS", "CREATED_BY", "CREATED_DATE", "LAST_UPDATED_BY", "LAST_UPDATED_DATE", "REV_NO", "REV_TEXT") AS 
  SELECT sma.daytime daytime,
       sma.net_vol - EcBp_Balancing.getAdjVolume(strm_data.object_id,
                                                 sma.daytime,
                                                 'NET_VOL') total_vol,
       sma.net_vol net_adj_vol,
       sma.net_diluent_vol diluent_vol,
       sma.net_shrinkage_vol shrinkage_vol,
       sma.net_bitumen_vol bitumen_vol,
       sma.alloc_energy -
       EcBp_Balancing.getAdjVolume(strm_data.object_id,
                                   sma.daytime,
                                   'NET_ENERGY') alloc_energy,
       sma.alloc_energy net_adj_alloc_energy,
       sma.net_mass net_mass,
       strm_data.object_code object_code,
       strm_data.name name,
       strm_data.object_id object_id,
       strm_data.op_fcty_1_id op_fcty_class_1_id,
       strm_data.product_id product_id,
       strm_data.product_balance product_balance,
       strm_data.strm_bal_category strm_bal_category,
       strm_data.activity_code activity_code,
       strm_data.product_balance_group product_balance_group,
       strm_data.balance_group_code balance_group_code,
       NULL in_out_flag,
       strm_data.from_node_id from_node_id,
       strm_data.to_node_id to_node_id,
       strm_data.parent_object_id parent_object_id,
       strm_set_list.main_url url,
       strm_set_list.bf_name screen_name,
       ec_prosty_codes.sort_order(balance_group_code, 'BALANCE_GROUP') sort_order,
       'N' truck_ticket_flag,
       NULL record_status,
       NULL created_by,
       NULL created_date,
       NULL last_updated_by,
       NULL last_updated_date,
       NULL rev_no,
       NULL rev_text
  FROM strm_mth_alloc sma,
       (SELECT sv.daytime,
               sv.end_date,
               ecdp_objects.getobjcode(sv.object_id) object_code,
               sv.object_id object_id,
               sv.name,
               sv.op_fcty_class_1_id op_fcty_1_id,
               sv.product_id,
               ec_prosty_codes.alt_code(ecdp_system.getdependentcode('BALANCE_GROUP',
                                                                     'STRM_BAL_CATEGORY',
                                                                     sv.strm_bal_category),
                                        'BALANCE_GROUP') in_out_flag,
               sv.strm_bal_category,
               ec_prosty_codes.alt_code(sv.strm_bal_category,
                                        'STRM_BAL_CATEGORY') activity_code,
               ecdp_objects.getobjcode(sv.product_id) product_balance,
               ecbp_balancing.getproductbalgroup(sv.product_id,
                                                 sv.daytime,
                                                 sv.end_date,
                                                 sv.strm_bal_category,
                                                 'ID') product_balance_group,
               ecdp_system.getdependentcode('BALANCE_GROUP',
                                            'STRM_BAL_CATEGORY',
                                            sv.strm_bal_category) balance_group_code,
               ec_prosty_codes.code_text(ecdp_system.getdependentcode('BALANCE_GROUP',
                                                                      'STRM_BAL_CATEGORY',
                                                                      sv.strm_bal_category),
                                         'BALANCE_GROUP') balance_group_text,
               sv.from_node_id,
               sv.to_node_id,
               (CASE
                 WHEN sv.from_node_id IS NOT NULL AND
                      sv.to_node_id IS NOT NULL AND ecdp_system.getdependentcode('BALANCE_GROUP',
                                                                                 'STRM_BAL_CATEGORY',
                                                                                 sv.strm_bal_category) =
                      'RECEIPT' THEN
                  sv.from_node_id
                 WHEN sv.from_node_id IS NOT NULL AND
                      sv.to_node_id IS NOT NULL AND ecdp_system.getdependentcode('BALANCE_GROUP',
                                                                                 'STRM_BAL_CATEGORY',
                                                                                 sv.strm_bal_category) =
                      'DISPOSITION' THEN
                  sv.to_node_id
               END) parent_object_id
          FROM strm_version sv
         WHERE sv.product_id IS NOT NULL
           AND sv.strm_bal_category IS NOT NULL) strm_data
  LEFT OUTER JOIN (SELECT DISTINCT ssl.object_id,
                                   tv.component_label    bf_name,
                                   b.bf_code             bf_code,
                                   tv.component_ext_name main_url
                     FROM business_function    b,
                          ctrl_tv_presentation tv,
                          strm_set             ss,
                          strm_set_list        ssl
                    WHERE (tv.component_ext_name LIKE b.url || '?%' OR
                          tv.component_ext_name = b.url)
                      AND b.bf_code =
                          DECODE(instr(ss.stream_set, '_'),
                                 0,
                                 ss.stream_set,
                                 substr(ss.stream_set,
                                        0,
                                        instr(ss.stream_set, '_') - 1))
                      AND ssl.stream_set = ss.stream_set
                      AND ssl.balancing_usage like '%PO.0124%') strm_set_list
    ON strm_set_list.object_id = strm_data.object_id
 WHERE sma.object_id = strm_data.object_id
   AND strm_data.daytime <= sma.daytime
   AND (strm_data.end_date > sma.daytime OR strm_data.end_date IS NULL)
UNION ALL
SELECT DAYTIME,
       SUM(total_vol) total_Vol,
       NULL net_adj_vol,
       diluent_vol,
       shrinkage_vol,
       bitumen_vol,
       alloc_energy,
       NULL net_adj_alloc_energy,
       net_mass,
       object_code,
       name,
       object_id,
       op_fcty_class_1_id,
       product_id,
       product_balance,
       strm_bal_category,
       activity_code,
       product_balance_group,
       balance_group_code,
       in_out_flag,
       from_node_id,
       to_node_id,
       parent_object_id,
       url,
       screen_name,
       sort_order,
       'Y' truck_ticket_flag,
       record_status,
       created_by,
       created_date,
       last_updated_by,
       last_updated_date,
       rev_no,
       rev_text
  FROM (SELECT TRUNC(ote.daytime, 'MONTH') daytime -- Get Net Vol for all product and Grs Vol for Water product
              ,
               SUM(DECODE(EcBp_Balancing.isWaterProductGroup(ote.product_id,
                                                             ote.daytime,
                                                             ote.daytime,
                                                             'TOTAL_TRUCKED_IN'),
                          'Y',
                          EcBp_Truck_Ticket.findGrsStdVol(ote.event_no),
                          EcBp_Truck_Ticket.findNetstdVol(ote.event_no))) total_vol,
               NULL diluent_vol,
               NULL shrinkage_vol,
               NULL bitumen_vol,
               NULL alloc_energy,
               NULL net_mass,
               NULL object_code,
               'Total Trucked In' NAME,
               NULL object_id,
               DECODE(ote.to_object_type,
                      'FCTY_CLASS_1',
                      ote.to_object_id,
                      ecgp_group.findparentobjectid('operational',
                                                    'FCTY_CLASS_1',
                                                    ote.to_object_type,
                                                    ote.to_object_id,
                                                    ote.production_day)) op_fcty_class_1_id,
               ote.product_id product_id,
               ecdp_objects.getobjcode(psbc.product_id) product_balance,
               'TOTAL_TRUCKED_IN' strm_bal_category,
               ec_prosty_codes.alt_code('TOTAL_TRUCKED_IN',
                                        'STRM_BAL_CATEGORY') activity_code,
               psbc.object_id product_balance_group,
               'RECEIPT' balance_group_code,
               NULL in_out_flag,
               DECODE(ote.object_type,
                      'FCTY_CLASS_1',
                      ote.object_id,
                      'EXTERNAL_LOCATION',
                      ote.object_id,
                      ecgp_group.findparentobjectid('operational',
                                                    'FCTY_CLASS_1',
                                                    ote.object_type,
                                                    ote.object_id,
                                                    ote.production_day)) from_node_id,
               '' to_node_id,
               DECODE(ote.object_type,
                      'FCTY_CLASS_1',
                      ote.object_id,
                      'EXTERNAL_LOCATION',
                      ote.object_id,
                      ecgp_group.findparentobjectid('operational',
                                                    'FCTY_CLASS_1',
                                                    ote.object_type,
                                                    ote.object_id,
                                                    ote.production_day)) parent_object_id,
               '/com.ec.prod.po.screens/truck_ticket_single_transfer_object' url,
               (SELECT tv.component_label
                  FROM ctrl_tv_presentation tv
                 WHERE tv.component_ext_name =
                       '/com.ec.prod.po.screens/truck_ticket_single_transfer_object') screen_name,
               ec_prosty_codes.sort_order('RECEIPT', 'BALANCE_GROUP') sort_order,
               NULL record_status,
               NULL created_by,
               NULL created_date,
               NULL last_updated_by,
               NULL last_updated_date,
               NULL rev_no,
               NULL rev_text
          FROM object_transport_event ote
          LEFT OUTER JOIN product_strm_bal_cat psbc
            ON ote.product_id = psbc.product_id
           AND ote.daytime BETWEEN psbc.daytime AND
               nvl(psbc.end_date, ote.daytime)
         WHERE ote.to_object_type IN
               ('FCTY_CLASS_1', 'STREAM', 'TANK', 'WELL')
           AND ote.data_class_name = 'OBJECT_SINGLE_TRANSFER'
           AND DECODE(EcBp_Balancing.isWaterProductGroup(ote.product_id,
                                                         ote.daytime,
                                                         ote.daytime,
                                                         'TOTAL_TRUCKED_IN'),
                      'Y',
                      EcBp_Truck_Ticket.findGrsStdVol(ote.event_no),
                      EcBp_Truck_Ticket.findNetstdVol(ote.event_no)) <> 0
         GROUP BY trunc(ote.daytime, 'MONTH'),
                  DECODE(ote.to_object_type,
                         'FCTY_CLASS_1',
                         ote.to_object_id,
                         ecgp_group.findparentobjectid('operational',
                                                       'FCTY_CLASS_1',
                                                       ote.to_object_type,
                                                       ote.to_object_id,
                                                       ote.production_day)),
                  ote.product_id,
                  ecdp_objects.getobjcode(psbc.product_id),
                  'TOTAL_TRUCKED_IN',
                  psbc.object_id,
                  'RECEIPT',
                  'IN',
                  DECODE(ote.object_type,
                         'FCTY_CLASS_1',
                         ote.object_id,
                         'EXTERNAL_LOCATION',
                         ote.object_id,
                         ecgp_group.findparentobjectid('operational',
                                                       'FCTY_CLASS_1',
                                                       ote.object_type,
                                                       ote.object_id,
                                                       ote.production_day))
        UNION ALL
        SELECT TRUNC(ote.daytime, 'MONTH') daytime -- Get Water Volume for non water products
              ,
               SUM(EcBp_Truck_Ticket.findWatVol(ote.event_no)) total_vol,
               NULL diluent_vol,
               NULL shrinkage_vol,
               NULL bitumen_vol,
               NULL alloc_energy,
               NULL net_mass,
               NULL object_code,
               'Total Trucked In' NAME,
               NULL object_id,
               DECODE(ote.to_object_type,
                      'FCTY_CLASS_1',
                      ote.to_object_id,
                      ecgp_group.findparentobjectid('operational',
                                                    'FCTY_CLASS_1',
                                                    ote.to_object_type,
                                                    ote.to_object_id,
                                                    ote.production_day)) op_fcty_class_1_id,
               EcDp_Objects.getObjIdFromCode('PRODUCT', 'WATER_PROD_BAL') product_id,
               'WATER_PROD_BAL' product_balance,
               'TOTAL_TRUCKED_IN' strm_bal_category,
               ec_prosty_codes.alt_code('TOTAL_TRUCKED_IN',
                                        'STRM_BAL_CATEGORY') activity_code,
               EcDp_Objects.getObjIdFromCode('PRODUCT_GROUP',
                                             'WATER_PROD_BAL') product_balance_group,
               'RECEIPT' balance_group_code,
               NULL in_out_flag,
               DECODE(ote.object_type,
                      'FCTY_CLASS_1',
                      ote.object_id,
                      'EXTERNAL_LOCATION',
                      ote.object_id,
                      ecgp_group.findparentobjectid('operational',
                                                    'FCTY_CLASS_1',
                                                    ote.object_type,
                                                    ote.object_id,
                                                    ote.production_day)) from_node_id,
               '' to_node_id,
               DECODE(ote.object_type,
                      'FCTY_CLASS_1',
                      ote.object_id,
                      'EXTERNAL_LOCATION',
                      ote.object_id,
                      ecgp_group.findparentobjectid('operational',
                                                    'FCTY_CLASS_1',
                                                    ote.object_type,
                                                    ote.object_id,
                                                    ote.production_day)) parent_object_id,
               '/com.ec.prod.po.screens/truck_ticket_single_transfer_object' url,
               (SELECT tv.component_label
                  FROM ctrl_tv_presentation tv
                 WHERE tv.component_ext_name =
                       '/com.ec.prod.po.screens/truck_ticket_single_transfer_object') screen_name,
               ec_prosty_codes.sort_order('RECEIPT', 'BALANCE_GROUP') sort_order,
               NULL record_status,
               NULL created_by,
               NULL created_date,
               NULL last_updated_by,
               NULL last_updated_date,
               NULL rev_no,
               NULL rev_text
          FROM object_transport_event ote
         WHERE ote.to_object_type IN
               ('FCTY_CLASS_1', 'STREAM', 'TANK', 'WELL')
           AND ote.data_class_name = 'OBJECT_SINGLE_TRANSFER'
           AND ecbp_truck_ticket.findwatvol(ote.event_no) <> 0
           AND ote.product_id NOT IN
               (SELECT product_id
                  FROM product_strm_bal_cat
                 WHERE object_id IN
                       (SELECT object_id
                          FROM product_group_version pgv
                         WHERE product_group_type = 'BALANCING'
                           AND is_water_product = 'Y'
                           AND ote.daytime BETWEEN pgv.daytime AND
                               NVL(pgv.end_date, ote.daytime))
                   AND strm_bal_category IN ('ALL', 'TOTAL_TRUCKED_IN'))
         GROUP BY TRUNC(ote.daytime, 'MONTH'),
                  'Total Trucked In',
                  DECODE(ote.to_object_type,
                         'FCTY_CLASS_1',
                         ote.to_object_id,
                         ecgp_group.findparentobjectid('operational',
                                                       'FCTY_CLASS_1',
                                                       ote.to_object_type,
                                                       ote.to_object_id,
                                                       ote.production_day)),
                  EcDp_Objects.getObjIdFromCode('PRODUCT', 'WATER_PROD_BAL'),
                  'WATER_PROD_BAL',
                  'TOTAL_TRUCKED_IN',
                  ec_prosty_codes.alt_code('TOTAL_TRUCKED_IN',
                                           'STRM_BAL_CATEGORY'),
                  EcDp_Objects.getObjIdFromCode('PRODUCT_GROUP',
                                                'WATER_PROD_BAL'),
                  'RECEIPT',
                  DECODE(ote.object_type,
                         'FCTY_CLASS_1',
                         ote.object_id,
                         'EXTERNAL_LOCATION',
                         ote.object_id,
                         ecgp_group.findparentobjectid('operational',
                                                       'FCTY_CLASS_1',
                                                       ote.object_type,
                                                       ote.object_id,
                                                       ote.production_day)),
                  DECODE(ote.object_type,
                         'FCTY_CLASS_1',
                         ote.object_id,
                         'EXTERNAL_LOCATION',
                         ote.object_id,
                         ecgp_group.findparentobjectid('operational',
                                                       'FCTY_CLASS_1',
                                                       ote.object_type,
                                                       ote.object_id,
                                                       ote.production_day)),
                  '/com.ec.prod.po.screens/truck_ticket_single_transfer_object')
 GROUP BY daytime,
          diluent_vol,
          shrinkage_vol,
          bitumen_vol,
          alloc_energy,
          net_mass,
          object_code,
          name,
          object_id,
          op_fcty_class_1_id,
          product_id,
          product_balance,
          strm_bal_category,
          activity_code,
          product_balance_group,
          balance_group_code,
          in_out_flag,
          from_node_id,
          to_node_id,
          parent_object_id,
          url,
          screen_name,
          sort_order,
          record_status,
          created_by,
          created_date,
          last_updated_by,
          last_updated_date,
          rev_no,
          rev_text
UNION ALL
SELECT daytime,
       SUM(total_vol) total_vol,
       NULL net_adj_vol,
       diluent_vol,
       shrinkage_vol,
       bitumen_vol,
       alloc_energy,
       null net_adj_alloc_energy,
       net_mass,
       object_code,
       name,
       object_id,
       op_fcty_class_1_id,
       product_id,
       product_balance,
       strm_bal_category,
       activity_code,
       product_balance_group,
       balance_group_code,
       in_out_flag,
       from_node_id,
       to_node_id,
       parent_object_id,
       url,
       screen_name,
       sort_order,
       'Y' truck_ticket_flag,
       record_status,
       created_by,
       created_date,
       last_updated_by,
       last_updated_date,
       rev_no,
       rev_text
  FROM (SELECT trunc(ote.daytime, 'MONTH') daytime -- Get Net Vol for all product and Grs Vol for Water product
              ,
               SUM(DECODE(EcBp_Balancing.isWaterProductGroup(ote.product_id,
                                                             ote.daytime,
                                                             ote.daytime,
                                                             'TOTAL_TRUCKED_OUT'),
                          'Y',
                          EcBp_Truck_Ticket.findGrsStdVol(ote.event_no),
                          EcBp_Truck_Ticket.findNetstdVol(ote.event_no))) total_vol,
               NULL diluent_vol,
               NULL shrinkage_vol,
               NULL bitumen_vol,
               NULL alloc_energy,
               NULL net_mass,
               NULL object_code,
               'Total Trucked Out' NAME,
               NULL object_id,
               DECODE(ote.object_type,
                      'FCTY_CLASS_1',
                      ote.object_id,
                      ecgp_group.findparentobjectid('operational',
                                                    'FCTY_CLASS_1',
                                                    ote.object_type,
                                                    ote.object_id,
                                                    ote.production_day)) op_fcty_class_1_id,
               ote.product_id product_id,
               ecdp_objects.getobjcode(ote.product_id) product_balance,
               'TOTAL_TRUCKED_OUT' strm_bal_category,
               ec_prosty_codes.alt_code('TOTAL_TRUCKED_IN',
                                        'STRM_BAL_CATEGORY') activity_code,
               psbc.object_id product_balance_group,
               'DISPOSITION' balance_group_code,
               NULL in_out_flag,
               '' from_node_id,
               DECODE(ote.to_object_type,
                      'FCTY_CLASS_1',
                      ote.to_object_id,
                      'EXTERNAL_LOCATION',
                      ote.to_object_id,
                      ecgp_group.findparentobjectid('operational',
                                                    'FCTY_CLASS_1',
                                                    ote.to_object_type,
                                                    ote.to_object_id,
                                                    ote.production_day)) to_node_id,
               DECODE(ote.to_object_type,
                      'FCTY_CLASS_1',
                      ote.to_object_id,
                      'EXTERNAL_LOCATION',
                      ote.to_object_id,
                      ecgp_group.findparentobjectid('operational',
                                                    'FCTY_CLASS_1',
                                                    ote.to_object_type,
                                                    ote.to_object_id,
                                                    ote.production_day)) parent_object_id,
               '/com.ec.prod.po.screens/truck_ticket_single_transfer_object' url,
               (SELECT tv.component_label
                  FROM ctrl_tv_presentation tv
                 WHERE tv.component_ext_name =
                       '/com.ec.prod.po.screens/truck_ticket_single_transfer_object') screen_name,
               ec_prosty_codes.sort_order('DISPOSITION', 'BALANCE_GROUP') sort_order,
               NULL record_status,
               NULL created_by,
               NULL created_date,
               NULL last_updated_by,
               NULL last_updated_date,
               NULL rev_no,
               NULL rev_text
          FROM object_transport_event ote
          LEFT OUTER JOIN product_strm_bal_cat psbc
            ON ote.product_id = psbc.product_id
           AND ote.daytime BETWEEN psbc.daytime AND
               nvl(psbc.end_date, ote.daytime)
         WHERE ote.object_type IN ('FCTY_CLASS_1', 'STREAM', 'TANK', 'WELL')
           AND ote.data_class_name = 'OBJECT_SINGLE_TRANSFER'
           AND DECODE(EcBp_Balancing.isWaterProductGroup(ote.product_id,
                                                         ote.daytime,
                                                         ote.daytime,
                                                         'TOTAL_TRUCKED_OUT'),
                      'Y',
                      EcBp_Truck_Ticket.findGrsStdVol(ote.event_no),
                      EcBp_Truck_Ticket.findNetstdVol(ote.event_no)) <> 0
         GROUP BY trunc(ote.daytime, 'MONTH'),
                  DECODE(ote.object_type,
                         'FCTY_CLASS_1',
                         ote.object_id,
                         ecgp_group.findparentobjectid('operational',
                                                       'FCTY_CLASS_1',
                                                       ote.object_type,
                                                       ote.object_id,
                                                       ote.production_day)),
                  ote.product_id,
                  ecdp_objects.getobjcode(ote.product_id),
                  'TOTAL_TRUCKED_OUT',
                  psbc.object_id,
                  'DISPOSITION',
                  'OUT',
                  DECODE(ote.to_object_type,
                         'FCTY_CLASS_1',
                         ote.to_object_id,
                         'EXTERNAL_LOCATION',
                         ote.to_object_id,
                         ecgp_group.findparentobjectid('operational',
                                                       'FCTY_CLASS_1',
                                                       ote.to_object_type,
                                                       ote.to_object_id,
                                                       ote.production_day))
        UNION ALL
        SELECT trunc(ote.daytime, 'MONTH') daytime -- Get Water Vol for Non Water Products
              ,
               SUM(ecbp_truck_ticket.findwatvol(ote.event_no)) total_vol,
               NULL diluent_vol,
               NULL shrinkage_vol,
               NULL bitumen_vol,
               NULL alloc_energy,
               NULL net_mass,
               NULL object_code,
               'Total Trucked Out' NAME,
               NULL object_id,
               DECODE(ote.object_type,
                      'FCTY_CLASS_1',
                      ote.object_id,
                      ecgp_group.findparentobjectid('operational',
                                                    'FCTY_CLASS_1',
                                                    ote.object_type,
                                                    ote.object_id,
                                                    ote.production_day)) op_fcty_class_1_id,
               EcDp_Objects.getObjIdFromCode('PRODUCT', 'WATER_PROD_BAL') product_id,
               'WATER_PROD_BAL' product_balance,
               'TOTAL_TRUCKED_OUT' strm_bal_category,
               ec_prosty_codes.alt_code('TOTAL_TRUCKED_IN',
                                        'STRM_BAL_CATEGORY') activity_code,
               EcDp_Objects.getObjIdFromCode('PRODUCT_GROUP',
                                             'WATER_PROD_BAL') product_balance_group,
               'DISPOSITION' balance_group_code,
               NULL in_out_flag,
               '' from_node_id,
               DECODE(ote.to_object_type,
                      'FCTY_CLASS_1',
                      ote.to_object_id,
                      'EXTERNAL_LOCATION',
                      ote.to_object_id,
                      ecgp_group.findparentobjectid('operational',
                                                    'FCTY_CLASS_1',
                                                    ote.to_object_type,
                                                    ote.to_object_id,
                                                    ote.production_day)) to_node_id,
               DECODE(ote.to_object_type,
                      'FCTY_CLASS_1',
                      ote.to_object_id,
                      'EXTERNAL_LOCATION',
                      ote.to_object_id,
                      ecgp_group.findparentobjectid('operational',
                                                    'FCTY_CLASS_1',
                                                    ote.to_object_type,
                                                    ote.to_object_id,
                                                    ote.production_day)) parent_object_id,
               '/com.ec.prod.po.screens/truck_ticket_single_transfer_object' url,
               (SELECT tv.component_label
                  FROM ctrl_tv_presentation tv
                 WHERE tv.component_ext_name =
                       '/com.ec.prod.po.screens/truck_ticket_single_transfer_object') screen_name,
               ec_prosty_codes.sort_order('DISPOSITION', 'BALANCE_GROUP') sort_order,
               NULL record_status,
               NULL created_by,
               NULL created_date,
               NULL last_updated_by,
               NULL last_updated_date,
               NULL rev_no,
               NULL rev_text
          FROM object_transport_event ote
         WHERE ote.object_type IN ('FCTY_CLASS_1', 'STREAM', 'TANK', 'WELL')
           AND ote.data_class_name = 'OBJECT_SINGLE_TRANSFER'
           AND ecbp_truck_ticket.findWatVol(ote.event_no) <> 0
           AND ote.product_id NOT IN
               (SELECT product_id
                  FROM product_strm_bal_cat
                 WHERE object_id IN
                       (SELECT object_id
                          FROM product_group_version pgv
                         WHERE product_group_type = 'BALANCING'
                           AND is_water_product = 'Y'
                           AND ote.daytime BETWEEN pgv.daytime AND
                               NVL(pgv.end_date, ote.daytime))
                   AND strm_bal_category IN ('ALL', 'TOTAL_TRUCKED_OUT'))
         GROUP BY trunc(ote.daytime, 'MONTH'),
                  'Total Trucked Out',
                  DECODE(ote.object_type,
                         'FCTY_CLASS_1',
                         ote.object_id,
                         ecgp_group.findparentobjectid('operational',
                                                       'FCTY_CLASS_1',
                                                       ote.object_type,
                                                       ote.object_id,
                                                       ote.production_day)),
                  EcDp_Objects.getObjIdFromCode('PRODUCT', 'WATER_PROD_BAL'),
                  'WATER_PROD_BAL',
                  'TOTAL_TRUCKED_OUT',
                  ec_prosty_codes.alt_code('TOTAL_TRUCKED_IN',
                                           'STRM_BAL_CATEGORY'),
                  EcDp_Objects.getObjIdFromCode('PRODUCT_GROUP',
                                                'WATER_PROD_BAL'),
                  'DISPOSITION',
                  DECODE(ote.to_object_type,
                         'FCTY_CLASS_1',
                         ote.to_object_id,
                         'EXTERNAL_LOCATION',
                         ote.to_object_id,
                         ecgp_group.findparentobjectid('operational',
                                                       'FCTY_CLASS_1',
                                                       ote.to_object_type,
                                                       ote.to_object_id,
                                                       ote.production_day)),
                  DECODE(ote.to_object_type,
                         'FCTY_CLASS_1',
                         ote.to_object_id,
                         'EXTERNAL_LOCATION',
                         ote.to_object_id,
                         ecgp_group.findparentobjectid('operational',
                                                       'FCTY_CLASS_1',
                                                       ote.to_object_type,
                                                       ote.to_object_id,
                                                       ote.production_day)),
                  '/com.ec.prod.po.screens/truck_ticket_single_transfer_object')
 GROUP BY daytime,
          diluent_vol,
          shrinkage_vol,
          bitumen_vol,
          alloc_energy,
          net_mass,
          object_code,
          name,
          object_id,
          op_fcty_class_1_id,
          product_id,
          product_balance,
          strm_bal_category,
          activity_code,
          product_balance_group,
          balance_group_code,
          in_out_flag,
          from_node_id,
          to_node_id,
          parent_object_id,
          url,
          screen_name,
          sort_order,
          record_status,
          created_by,
          created_date,
          last_updated_by,
          last_updated_date,
          rev_no,
          rev_text
UNION ALL
SELECT sma.daytime daytime,
       SUM(sma.net_vol) total_vol,
       NULL net_adj_Vol,
       NULL diluent_vol,
       NULL shrinkage_vol,
       NULL bitumen_vol,
       NULL alloc_energy,
       NULL net_adj_alloc_energy,
       NULL net_mass,
       NULL object_code,
       'Total Stream Adjustment' NAME,
       NULL object_id,
       strm_data.op_fcty_1_id op_fcty_class_1_id,
       strm_data.product_id product_id,
       strm_data.product_balance product_balance,
       strm_data.strm_bal_category strm_bal_category,
       strm_data.activity_code activity_code,
       strm_data.product_balance_group product_balance_group,
       strm_data.balance_group_code balance_group_code,
       NULL in_out_flag,
       strm_data.from_node_id from_node_id,
       strm_data.to_node_id to_node_id,
       strm_data.parent_object_id parent_object_id,
       '/com.ec.prod.po.screens/monthly_fcty_balancing_adj' url,
       'Monthly Facility Balancing - Adjustment' screen_name,
       ec_prosty_codes.sort_order(strm_data.balance_group_code,
                                  'BALANCE_GROUP') sort_order,
       'N' truck_ticket_flag,
       NULL record_status,
       NULL created_by,
       NULL created_date,
       NULL last_updated_by,
       NULL last_updated_date,
       NULL rev_no,
       NULL rev_text
  FROM balancing_adj_mth sma,
       (SELECT sv.daytime,
               sv.end_date,
               ecdp_objects.getobjcode(sv.object_id) object_code,
               sv.object_id object_id,
               sv.name,
               sv.op_fcty_class_1_id op_fcty_1_id,
               sv.product_id,
               ec_prosty_codes.alt_code(ecdp_system.getdependentcode('BALANCE_GROUP',
                                                                     'STRM_BAL_CATEGORY',
                                                                     sv.strm_bal_category),
                                        'BALANCE_GROUP') in_out_flag,
               sv.strm_bal_category,
               ec_prosty_codes.alt_code(sv.strm_bal_category,
                                        'STRM_BAL_CATEGORY') activity_code,
               ecdp_objects.getobjcode(sv.product_id) product_balance,
               ecbp_balancing.getproductbalgroup(sv.product_id,
                                                 sv.daytime,
                                                 sv.end_date,
                                                 sv.strm_bal_category,
                                                 'ID') product_balance_group,
               ecdp_system.getdependentcode('BALANCE_GROUP',
                                            'STRM_BAL_CATEGORY',
                                            sv.strm_bal_category) balance_group_code,
               ec_prosty_codes.code_text(ecdp_system.getdependentcode('BALANCE_GROUP',
                                                                      'STRM_BAL_CATEGORY',
                                                                      sv.strm_bal_category),
                                         'BALANCE_GROUP') balance_group_text,
               sv.from_node_id,
               sv.to_node_id,
               (CASE
                 WHEN sv.from_node_id IS NOT NULL AND
                      sv.to_node_id IS NOT NULL AND ecdp_system.getdependentcode('BALANCE_GROUP',
                                                                                 'STRM_BAL_CATEGORY',
                                                                                 sv.strm_bal_category) =
                      'RECEIPT' THEN
                  sv.from_node_id
                 WHEN sv.from_node_id IS NOT NULL AND
                      sv.to_node_id IS NOT NULL AND ecdp_system.getdependentcode('BALANCE_GROUP',
                                                                                 'STRM_BAL_CATEGORY',
                                                                                 sv.strm_bal_category) =
                      'DISPOSITION' THEN
                  sv.to_node_id
               END) parent_object_id
          FROM strm_version sv
         WHERE sv.product_id IS NOT NULL
           AND sv.strm_bal_category IS NOT NULL) strm_data
 WHERE sma.stream_id = strm_data.object_id
   AND strm_data.daytime <= sma.daytime
   AND (strm_data.end_date > sma.daytime OR strm_data.end_date IS NULL)
   AND stream_id IS NOT NULL
 GROUP BY sma.daytime,
          strm_data.op_fcty_1_id,
          strm_data.product_id,
          strm_data.product_balance,
          strm_data.strm_bal_category,
          strm_data.activity_code,
          strm_data.product_balance_group,
          strm_data.balance_group_code,
          strm_data.from_node_id,
          strm_data.to_node_id,
          strm_data.parent_object_id,
          '/com.ec.prod.po.screens/monthly_fcty_balancing_adj',
          'Monthly Facility Balancing - Adjustment'
UNION ALL
SELECT trunc(bam.daytime, 'MONTH') daytime,
       SUM(bam.net_vol) total_vol,
       NULL net_adj_vol,
       NULL diluent_vol,
       NULL shrinkage_vol,
       NULL bitumen_vol,
       NULL alloc_energy,
       NULL net_adj_alloc_energy,
       NULL net_mass,
       NULL object_code,
       'Total Truck Out Adjustment' NAME,
       NULL object_id,
       DECODE(bam.from_object_type,
              'FCTY_CLASS_1',
              bam.from_object_id,
              ecgp_group.findparentobjectid('operational',
                                            'FCTY_CLASS_1',
                                            bam.from_object_type,
                                            bam.from_object_id,
                                            bam.daytime)) op_fcty_class_1_id,
       bam.product_id product_id,
       ecdp_objects.getobjcode(bam.product_id) product_balance,
       'TOTAL_TRUCKED_OUT' strm_bal_category,
       ec_prosty_codes.alt_code('TOTAL_TRUCKED_OUT', 'STRM_BAL_CATEGORY') activity_code,
       ecbp_balancing.getproductbalgroup(bam.product_id,
                                         bam.daytime,
                                         bam.daytime,
                                         'TOTAL_TRUCKED_OUT',
                                         'ID') product_balance_group,
       'DISPOSITION' balance_group_code,
       NULL in_out_flag,
       '' from_node_id,
       DECODE(bam.to_object_type,
              'FCTY_CLASS_1',
              bam.to_object_id,
              'EXTERNAL_LOCATION',
              bam.to_object_id,
              ecgp_group.findparentobjectid('operational',
                                            'FCTY_CLASS_1',
                                            bam.to_object_type,
                                            bam.to_object_id,
                                            bam.daytime)) to_node_id,
       DECODE(bam.to_object_type,
              'FCTY_CLASS_1',
              bam.to_object_id,
              'EXTERNAL_LOCATION',
              bam.to_object_id,
              ecgp_group.findparentobjectid('operational',
                                            'FCTY_CLASS_1',
                                            bam.to_object_type,
                                            bam.to_object_id,
                                            bam.daytime)) parent_object_id,
       '/com.ec.prod.po.screens/monthly_fcty_balancing_adj' url,
       (SELECT tv.component_label
          FROM ctrl_tv_presentation tv
         WHERE tv.component_ext_name =
               '/com.ec.prod.po.screens/monthly_fcty_balancing_adj') screen_name,
       ec_prosty_codes.sort_order('DISPOSITION', 'BALANCE_GROUP') sort_order,
       'Y' truck_ticket_flag,
       NULL record_status,
       NULL created_by,
       NULL created_date,
       NULL last_updated_by,
       NULL last_updated_date,
       NULL rev_no,
       NULL rev_text
  FROM balancing_adj_mth bam
 WHERE stream_id IS NULL
   AND strm_bal_category = 'TOTAL_TRUCKED_OUT'
 GROUP BY trunc(bam.daytime, 'MONTH'),
          'Total Truck Out Adjustment',
          DECODE(bam.from_object_type,
                 'FCTY_CLASS_1',
                 bam.from_object_id,
                 ecgp_group.findparentobjectid('operational',
                                               'FCTY_CLASS_1',
                                               bam.from_object_type,
                                               bam.from_object_id,
                                               bam.daytime)),
          bam.product_id,
          ecdp_objects.getobjcode(bam.product_id),
          'TOTAL_TRUCKED_OUT',
          ec_prosty_codes.alt_code('TOTAL_TRUCKED_OUT', 'STRM_BAL_CATEGORY'),
          ecbp_balancing.getproductbalgroup(bam.product_id,
                                            bam.daytime,
                                            bam.daytime,
                                            'TOTAL_TRUCKED_OUT',
                                            'ID'),
          'DISPOSITION',
          DECODE(bam.to_object_type,
                 'FCTY_CLASS_1',
                 bam.to_object_id,
                 'EXTERNAL_LOCATION',
                 bam.to_object_id,
                 ecgp_group.findparentobjectid('operational',
                                               'FCTY_CLASS_1',
                                               bam.to_object_type,
                                               bam.to_object_id,
                                               bam.daytime)),
          DECODE(bam.to_object_type,
                 'FCTY_CLASS_1',
                 bam.to_object_id,
                 'EXTERNAL_LOCATION',
                 bam.to_object_id,
                 ecgp_group.findparentobjectid('operational',
                                               'FCTY_CLASS_1',
                                               bam.to_object_type,
                                               bam.to_object_id,
                                               bam.daytime)),
          '/com.ec.prod.po.screens/monthly_fcty_balancing_adj'
UNION ALL
SELECT trunc(bam.daytime, 'MONTH') daytime,
       SUM(bam.net_vol) total_vol,
       NULL net_adj_vol,
       NULL diluent_vol,
       NULL shrinkage_vol,
       NULL net_adj_alloc_energy,
       NULL bitumen_vol,
       NULL alloc_energy,
       NULL net_mass,
       NULL object_code,
       'Total Truck In Adjustment' NAME,
       NULL object_id,
       DECODE(bam.to_object_type,
              'FCTY_CLASS_1',
              bam.to_object_id,
              ecgp_group.findparentobjectid('operational',
                                            'FCTY_CLASS_1',
                                            bam.to_object_type,
                                            bam.to_object_id,
                                            bam.daytime)) op_fcty_class_1_id,
       bam.product_id product_id,
       ecdp_objects.getobjcode(bam.product_id) product_balance,
       'TOTAL_TRUCKED_IN' strm_bal_category,
       ec_prosty_codes.alt_code('TOTAL_TRUCKED_IN', 'STRM_BAL_CATEGORY') activity_code,
       ecbp_balancing.getproductbalgroup(bam.product_id,
                                         bam.daytime,
                                         bam.daytime,
                                         'TOTAL_TRUCKED_OUT',
                                         'ID') product_balance_group,
       'RECEIPT' balance_group_code,
       NULL in_out_flag,
       DECODE(bam.from_object_type,
              'FCTY_CLASS_1',
              bam.from_object_id,
              'EXTERNAL_LOCATION',
              bam.from_object_id,
              ecgp_group.findparentobjectid('operational',
                                            'FCTY_CLASS_1',
                                            bam.from_object_type,
                                            bam.from_object_id,
                                            bam.daytime)) from_node_id,
       '' to_node_id,
       DECODE(bam.from_object_type,
              'FCTY_CLASS_1',
              bam.from_object_id,
              'EXTERNAL_LOCATION',
              bam.from_object_id,
              ecgp_group.findparentobjectid('operational',
                                            'FCTY_CLASS_1',
                                            bam.from_object_type,
                                            bam.from_object_id,
                                            bam.daytime)) parent_object_id,
       '/com.ec.prod.po.screens/monthly_fcty_balancing_adj' url,
       (SELECT tv.component_label
          FROM ctrl_tv_presentation tv
         WHERE tv.component_ext_name =
               '/com.ec.prod.po.screens/monthly_fcty_balancing_adj') screen_name,
       ec_prosty_codes.sort_order('RECEIPT', 'BALANCE_GROUP') sort_order,
       'Y' truck_ticket_flag,
       NULL record_status,
       NULL created_by,
       NULL created_date,
       NULL last_updated_by,
       NULL last_updated_date,
       NULL rev_no,
       NULL rev_text
  FROM balancing_adj_mth bam
 WHERE stream_id IS NULL
   AND strm_bal_category = 'TOTAL_TRUCKED_IN'
 GROUP BY trunc(bam.daytime, 'MONTH'),
          'Total Truck In Adjustment',
          DECODE(bam.to_object_type,
                 'FCTY_CLASS_1',
                 bam.to_object_id,
                 ecgp_group.findparentobjectid('operational',
                                               'FCTY_CLASS_1',
                                               bam.to_object_type,
                                               bam.to_object_id,
                                               bam.daytime)),
          bam.product_id,
          ecdp_objects.getobjcode(bam.product_id),
          'TOTAL_TRUCKED_IN',
          ec_prosty_codes.alt_code('TOTAL_TRUCKED_IN', 'STRM_BAL_CATEGORY'),
          ecbp_balancing.getproductbalgroup(bam.product_id,
                                            bam.daytime,
                                            bam.daytime,
                                            'TOTAL_TRUCKED_OUT',
                                            'ID'),
          'RECEIPT',
          DECODE(bam.from_object_type,
                 'FCTY_CLASS_1',
                 bam.from_object_id,
                 'EXTERNAL_LOCATION',
                 bam.from_object_id,
                 ecgp_group.findparentobjectid('operational',
                                               'FCTY_CLASS_1',
                                               bam.from_object_type,
                                               bam.from_object_id,
                                               bam.daytime)),
          DECODE(bam.from_object_type,
                 'FCTY_CLASS_1',
                 bam.from_object_id,
                 'EXTERNAL_LOCATION',
                 bam.from_object_id,
                 ecgp_group.findparentobjectid('operational',
                                               'FCTY_CLASS_1',
                                               bam.from_object_type,
                                               bam.from_object_id,
                                               bam.daytime)),
          '/com.ec.prod.po.screens/monthly_fcty_balancing_adj'