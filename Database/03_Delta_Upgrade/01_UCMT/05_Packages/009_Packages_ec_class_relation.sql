CREATE OR REPLACE PACKAGE ec_class_relation IS
------------------------------------------------------------------------------------
-- Package: ec_class_relation
-- Generated by EC_GENERATE.

-- DO NOT MODIFY THIS PACKAGE! Changes will be lost when the package is regenerated.
-- Packages named pck_<component> will hold all manual written common code.
-- Packages named <sysnam>_<component> will hold all code not beeing common.
------------------------------------------------------------------------------------

------------------------------------------------------------------------------------
FUNCTION name(
         p_from_class_name VARCHAR2,
         p_to_class_name VARCHAR2,
         p_role_name VARCHAR2) RETURN CLASS_RELATION.NAME%TYPE ;
------------------------------------------------------------------------------------
FUNCTION is_key(
         p_from_class_name VARCHAR2,
         p_to_class_name VARCHAR2,
         p_role_name VARCHAR2) RETURN CLASS_RELATION.IS_KEY%TYPE ;
------------------------------------------------------------------------------------
FUNCTION is_mandatory(
         p_from_class_name VARCHAR2,
         p_to_class_name VARCHAR2,
         p_role_name VARCHAR2) RETURN CLASS_RELATION.IS_MANDATORY%TYPE ;
------------------------------------------------------------------------------------
FUNCTION is_bidirectional(
         p_from_class_name VARCHAR2,
         p_to_class_name VARCHAR2,
         p_role_name VARCHAR2) RETURN CLASS_RELATION.IS_BIDIRECTIONAL%TYPE ;
------------------------------------------------------------------------------------
FUNCTION context_code(
         p_from_class_name VARCHAR2,
         p_to_class_name VARCHAR2,
         p_role_name VARCHAR2) RETURN CLASS_RELATION.CONTEXT_CODE%TYPE ;
------------------------------------------------------------------------------------
FUNCTION group_type(
         p_from_class_name VARCHAR2,
         p_to_class_name VARCHAR2,
         p_role_name VARCHAR2) RETURN CLASS_RELATION.GROUP_TYPE%TYPE ;
------------------------------------------------------------------------------------
FUNCTION multiplicity(
         p_from_class_name VARCHAR2,
         p_to_class_name VARCHAR2,
         p_role_name VARCHAR2) RETURN CLASS_RELATION.MULTIPLICITY%TYPE ;
------------------------------------------------------------------------------------
FUNCTION disabled_ind(
         p_from_class_name VARCHAR2,
         p_to_class_name VARCHAR2,
         p_role_name VARCHAR2) RETURN CLASS_RELATION.DISABLED_IND%TYPE ;
------------------------------------------------------------------------------------
FUNCTION report_only_ind(
         p_from_class_name VARCHAR2,
         p_to_class_name VARCHAR2,
         p_role_name VARCHAR2) RETURN CLASS_RELATION.REPORT_ONLY_IND%TYPE ;
------------------------------------------------------------------------------------
FUNCTION access_control_method(
         p_from_class_name VARCHAR2,
         p_to_class_name VARCHAR2,
         p_role_name VARCHAR2) RETURN CLASS_RELATION.ACCESS_CONTROL_METHOD%TYPE ;
------------------------------------------------------------------------------------
FUNCTION alloc_priority(
         p_from_class_name VARCHAR2,
         p_to_class_name VARCHAR2,
         p_role_name VARCHAR2) RETURN CLASS_RELATION.ALLOC_PRIORITY%TYPE ;
------------------------------------------------------------------------------------
FUNCTION calc_mapping_syntax(
         p_from_class_name VARCHAR2,
         p_to_class_name VARCHAR2,
         p_role_name VARCHAR2) RETURN CLASS_RELATION.CALC_MAPPING_SYNTAX%TYPE ;
------------------------------------------------------------------------------------
FUNCTION description(
         p_from_class_name VARCHAR2,
         p_to_class_name VARCHAR2,
         p_role_name VARCHAR2) RETURN CLASS_RELATION.DESCRIPTION%TYPE ;
------------------------------------------------------------------------------------
FUNCTION record_status(
         p_from_class_name VARCHAR2,
         p_to_class_name VARCHAR2,
         p_role_name VARCHAR2) RETURN CLASS_RELATION.RECORD_STATUS%TYPE ;
------------------------------------------------------------------------------------
FUNCTION reverse_approval_ind(
         p_from_class_name VARCHAR2,
         p_to_class_name VARCHAR2,
         p_role_name VARCHAR2) RETURN CLASS_RELATION.REVERSE_APPROVAL_IND%TYPE ;
------------------------------------------------------------------------------------
FUNCTION approval_ind(
         p_from_class_name VARCHAR2,
         p_to_class_name VARCHAR2,
         p_role_name VARCHAR2) RETURN CLASS_RELATION.APPROVAL_IND%TYPE ;
------------------------------------------------------------------------------------
FUNCTION approval_state(
         p_from_class_name VARCHAR2,
         p_to_class_name VARCHAR2,
         p_role_name VARCHAR2) RETURN CLASS_RELATION.APPROVAL_STATE%TYPE ;
------------------------------------------------------------------------------------
FUNCTION approval_by(
         p_from_class_name VARCHAR2,
         p_to_class_name VARCHAR2,
         p_role_name VARCHAR2) RETURN CLASS_RELATION.APPROVAL_BY%TYPE ;
------------------------------------------------------------------------------------
FUNCTION approval_date(
         p_from_class_name VARCHAR2,
         p_to_class_name VARCHAR2,
         p_role_name VARCHAR2) RETURN CLASS_RELATION.APPROVAL_DATE%TYPE ;
------------------------------------------------------------------------------------
FUNCTION rec_id(
         p_from_class_name VARCHAR2,
         p_to_class_name VARCHAR2,
         p_role_name VARCHAR2) RETURN CLASS_RELATION.REC_ID%TYPE ;
------------------------------------------------------------------------------------
FUNCTION row_by_pk (
         p_from_class_name VARCHAR2,
         p_to_class_name VARCHAR2,
         p_role_name VARCHAR2) RETURN CLASS_RELATION%ROWTYPE;

END ec_class_relation;
/
CREATE OR REPLACE PACKAGE BODY ec_class_relation IS
------------------------------------------------------------------------------------
-- Package body: ec_class_relation
-- Generated by EC_GENERATE.
------------------------------------------------------------------------------------















------------------------------------------------------------------------------------
FUNCTION name(
         p_from_class_name VARCHAR2,
         p_to_class_name VARCHAR2,
         p_role_name VARCHAR2)
RETURN CLASS_RELATION.NAME%TYPE  IS
   v_return_val CLASS_RELATION.NAME%TYPE ;
   CURSOR c_col_val IS
   SELECT name col
   FROM CLASS_RELATION
WHERE from_class_name = p_from_class_name
AND to_class_name = p_to_class_name
AND role_name = p_role_name;
BEGIN
   FOR cur_row IN c_col_val LOOP
      v_return_val := cur_row.col;
   END LOOP;
   RETURN v_return_val;
END name;

------------------------------------------------------------------------------------
FUNCTION is_key(
         p_from_class_name VARCHAR2,
         p_to_class_name VARCHAR2,
         p_role_name VARCHAR2)
RETURN CLASS_RELATION.IS_KEY%TYPE  IS
   v_return_val CLASS_RELATION.IS_KEY%TYPE ;
   CURSOR c_col_val IS
   SELECT is_key col
   FROM CLASS_RELATION
WHERE from_class_name = p_from_class_name
AND to_class_name = p_to_class_name
AND role_name = p_role_name;
BEGIN
   FOR cur_row IN c_col_val LOOP
      v_return_val := cur_row.col;
   END LOOP;
   RETURN v_return_val;
END is_key;

------------------------------------------------------------------------------------
FUNCTION is_mandatory(
         p_from_class_name VARCHAR2,
         p_to_class_name VARCHAR2,
         p_role_name VARCHAR2)
RETURN CLASS_RELATION.IS_MANDATORY%TYPE  IS
   v_return_val CLASS_RELATION.IS_MANDATORY%TYPE ;
   CURSOR c_col_val IS
   SELECT is_mandatory col
   FROM CLASS_RELATION
WHERE from_class_name = p_from_class_name
AND to_class_name = p_to_class_name
AND role_name = p_role_name;
BEGIN
   FOR cur_row IN c_col_val LOOP
      v_return_val := cur_row.col;
   END LOOP;
   RETURN v_return_val;
END is_mandatory;

------------------------------------------------------------------------------------
FUNCTION is_bidirectional(
         p_from_class_name VARCHAR2,
         p_to_class_name VARCHAR2,
         p_role_name VARCHAR2)
RETURN CLASS_RELATION.IS_BIDIRECTIONAL%TYPE  IS
   v_return_val CLASS_RELATION.IS_BIDIRECTIONAL%TYPE ;
   CURSOR c_col_val IS
   SELECT is_bidirectional col
   FROM CLASS_RELATION
WHERE from_class_name = p_from_class_name
AND to_class_name = p_to_class_name
AND role_name = p_role_name;
BEGIN
   FOR cur_row IN c_col_val LOOP
      v_return_val := cur_row.col;
   END LOOP;
   RETURN v_return_val;
END is_bidirectional;

------------------------------------------------------------------------------------
FUNCTION context_code(
         p_from_class_name VARCHAR2,
         p_to_class_name VARCHAR2,
         p_role_name VARCHAR2)
RETURN CLASS_RELATION.CONTEXT_CODE%TYPE  IS
   v_return_val CLASS_RELATION.CONTEXT_CODE%TYPE ;
   CURSOR c_col_val IS
   SELECT context_code col
   FROM CLASS_RELATION
WHERE from_class_name = p_from_class_name
AND to_class_name = p_to_class_name
AND role_name = p_role_name;
BEGIN
   FOR cur_row IN c_col_val LOOP
      v_return_val := cur_row.col;
   END LOOP;
   RETURN v_return_val;
END context_code;

------------------------------------------------------------------------------------
FUNCTION group_type(
         p_from_class_name VARCHAR2,
         p_to_class_name VARCHAR2,
         p_role_name VARCHAR2)
RETURN CLASS_RELATION.GROUP_TYPE%TYPE  IS
   v_return_val CLASS_RELATION.GROUP_TYPE%TYPE ;
   CURSOR c_col_val IS
   SELECT group_type col
   FROM CLASS_RELATION
WHERE from_class_name = p_from_class_name
AND to_class_name = p_to_class_name
AND role_name = p_role_name;
BEGIN
   FOR cur_row IN c_col_val LOOP
      v_return_val := cur_row.col;
   END LOOP;
   RETURN v_return_val;
END group_type;

------------------------------------------------------------------------------------
FUNCTION multiplicity(
         p_from_class_name VARCHAR2,
         p_to_class_name VARCHAR2,
         p_role_name VARCHAR2)
RETURN CLASS_RELATION.MULTIPLICITY%TYPE  IS
   v_return_val CLASS_RELATION.MULTIPLICITY%TYPE ;
   CURSOR c_col_val IS
   SELECT multiplicity col
   FROM CLASS_RELATION
WHERE from_class_name = p_from_class_name
AND to_class_name = p_to_class_name
AND role_name = p_role_name;
BEGIN
   FOR cur_row IN c_col_val LOOP
      v_return_val := cur_row.col;
   END LOOP;
   RETURN v_return_val;
END multiplicity;

------------------------------------------------------------------------------------
FUNCTION disabled_ind(
         p_from_class_name VARCHAR2,
         p_to_class_name VARCHAR2,
         p_role_name VARCHAR2)
RETURN CLASS_RELATION.DISABLED_IND%TYPE  IS
   v_return_val CLASS_RELATION.DISABLED_IND%TYPE ;
   CURSOR c_col_val IS
   SELECT disabled_ind col
   FROM CLASS_RELATION
WHERE from_class_name = p_from_class_name
AND to_class_name = p_to_class_name
AND role_name = p_role_name;
BEGIN
   FOR cur_row IN c_col_val LOOP
      v_return_val := cur_row.col;
   END LOOP;
   RETURN v_return_val;
END disabled_ind;

------------------------------------------------------------------------------------
FUNCTION report_only_ind(
         p_from_class_name VARCHAR2,
         p_to_class_name VARCHAR2,
         p_role_name VARCHAR2)
RETURN CLASS_RELATION.REPORT_ONLY_IND%TYPE  IS
   v_return_val CLASS_RELATION.REPORT_ONLY_IND%TYPE ;
   CURSOR c_col_val IS
   SELECT report_only_ind col
   FROM CLASS_RELATION
WHERE from_class_name = p_from_class_name
AND to_class_name = p_to_class_name
AND role_name = p_role_name;
BEGIN
   FOR cur_row IN c_col_val LOOP
      v_return_val := cur_row.col;
   END LOOP;
   RETURN v_return_val;
END report_only_ind;

------------------------------------------------------------------------------------
FUNCTION access_control_method(
         p_from_class_name VARCHAR2,
         p_to_class_name VARCHAR2,
         p_role_name VARCHAR2)
RETURN CLASS_RELATION.ACCESS_CONTROL_METHOD%TYPE  IS
   v_return_val CLASS_RELATION.ACCESS_CONTROL_METHOD%TYPE ;
   CURSOR c_col_val IS
   SELECT access_control_method col
   FROM CLASS_RELATION
WHERE from_class_name = p_from_class_name
AND to_class_name = p_to_class_name
AND role_name = p_role_name;
BEGIN
   FOR cur_row IN c_col_val LOOP
      v_return_val := cur_row.col;
   END LOOP;
   RETURN v_return_val;
END access_control_method;

------------------------------------------------------------------------------------
FUNCTION alloc_priority(
         p_from_class_name VARCHAR2,
         p_to_class_name VARCHAR2,
         p_role_name VARCHAR2)
RETURN CLASS_RELATION.ALLOC_PRIORITY%TYPE  IS
   v_return_val CLASS_RELATION.ALLOC_PRIORITY%TYPE ;
   CURSOR c_col_val IS
   SELECT alloc_priority col
   FROM CLASS_RELATION
WHERE from_class_name = p_from_class_name
AND to_class_name = p_to_class_name
AND role_name = p_role_name;
BEGIN
   FOR cur_row IN c_col_val LOOP
      v_return_val := cur_row.col;
   END LOOP;
   RETURN v_return_val;
END alloc_priority;

------------------------------------------------------------------------------------
FUNCTION calc_mapping_syntax(
         p_from_class_name VARCHAR2,
         p_to_class_name VARCHAR2,
         p_role_name VARCHAR2)
RETURN CLASS_RELATION.CALC_MAPPING_SYNTAX%TYPE  IS
   v_return_val CLASS_RELATION.CALC_MAPPING_SYNTAX%TYPE ;
   CURSOR c_col_val IS
   SELECT calc_mapping_syntax col
   FROM CLASS_RELATION
WHERE from_class_name = p_from_class_name
AND to_class_name = p_to_class_name
AND role_name = p_role_name;
BEGIN
   FOR cur_row IN c_col_val LOOP
      v_return_val := cur_row.col;
   END LOOP;
   RETURN v_return_val;
END calc_mapping_syntax;

------------------------------------------------------------------------------------
FUNCTION description(
         p_from_class_name VARCHAR2,
         p_to_class_name VARCHAR2,
         p_role_name VARCHAR2)
RETURN CLASS_RELATION.DESCRIPTION%TYPE  IS
   v_return_val CLASS_RELATION.DESCRIPTION%TYPE ;
   CURSOR c_col_val IS
   SELECT description col
   FROM CLASS_RELATION
WHERE from_class_name = p_from_class_name
AND to_class_name = p_to_class_name
AND role_name = p_role_name;
BEGIN
   FOR cur_row IN c_col_val LOOP
      v_return_val := cur_row.col;
   END LOOP;
   RETURN v_return_val;
END description;

------------------------------------------------------------------------------------
FUNCTION record_status(
         p_from_class_name VARCHAR2,
         p_to_class_name VARCHAR2,
         p_role_name VARCHAR2)
RETURN CLASS_RELATION.RECORD_STATUS%TYPE  IS
   v_return_val CLASS_RELATION.RECORD_STATUS%TYPE ;
   CURSOR c_col_val IS
   SELECT record_status col
   FROM CLASS_RELATION
WHERE from_class_name = p_from_class_name
AND to_class_name = p_to_class_name
AND role_name = p_role_name;
BEGIN
   FOR cur_row IN c_col_val LOOP
      v_return_val := cur_row.col;
   END LOOP;
   RETURN v_return_val;
END record_status;

------------------------------------------------------------------------------------
FUNCTION reverse_approval_ind(
         p_from_class_name VARCHAR2,
         p_to_class_name VARCHAR2,
         p_role_name VARCHAR2)
RETURN CLASS_RELATION.REVERSE_APPROVAL_IND%TYPE  IS
   v_return_val CLASS_RELATION.REVERSE_APPROVAL_IND%TYPE ;
   CURSOR c_col_val IS
   SELECT reverse_approval_ind col
   FROM CLASS_RELATION
WHERE from_class_name = p_from_class_name
AND to_class_name = p_to_class_name
AND role_name = p_role_name;
BEGIN
   FOR cur_row IN c_col_val LOOP
      v_return_val := cur_row.col;
   END LOOP;
   RETURN v_return_val;
END reverse_approval_ind;

------------------------------------------------------------------------------------
FUNCTION approval_ind(
         p_from_class_name VARCHAR2,
         p_to_class_name VARCHAR2,
         p_role_name VARCHAR2)
RETURN CLASS_RELATION.APPROVAL_IND%TYPE  IS
   v_return_val CLASS_RELATION.APPROVAL_IND%TYPE ;
   CURSOR c_col_val IS
   SELECT approval_ind col
   FROM CLASS_RELATION
WHERE from_class_name = p_from_class_name
AND to_class_name = p_to_class_name
AND role_name = p_role_name;
BEGIN
   FOR cur_row IN c_col_val LOOP
      v_return_val := cur_row.col;
   END LOOP;
   RETURN v_return_val;
END approval_ind;

------------------------------------------------------------------------------------
FUNCTION approval_state(
         p_from_class_name VARCHAR2,
         p_to_class_name VARCHAR2,
         p_role_name VARCHAR2)
RETURN CLASS_RELATION.APPROVAL_STATE%TYPE  IS
   v_return_val CLASS_RELATION.APPROVAL_STATE%TYPE ;
   CURSOR c_col_val IS
   SELECT approval_state col
   FROM CLASS_RELATION
WHERE from_class_name = p_from_class_name
AND to_class_name = p_to_class_name
AND role_name = p_role_name;
BEGIN
   FOR cur_row IN c_col_val LOOP
      v_return_val := cur_row.col;
   END LOOP;
   RETURN v_return_val;
END approval_state;

------------------------------------------------------------------------------------
FUNCTION approval_by(
         p_from_class_name VARCHAR2,
         p_to_class_name VARCHAR2,
         p_role_name VARCHAR2)
RETURN CLASS_RELATION.APPROVAL_BY%TYPE  IS
   v_return_val CLASS_RELATION.APPROVAL_BY%TYPE ;
   CURSOR c_col_val IS
   SELECT approval_by col
   FROM CLASS_RELATION
WHERE from_class_name = p_from_class_name
AND to_class_name = p_to_class_name
AND role_name = p_role_name;
BEGIN
   FOR cur_row IN c_col_val LOOP
      v_return_val := cur_row.col;
   END LOOP;
   RETURN v_return_val;
END approval_by;

------------------------------------------------------------------------------------
FUNCTION approval_date(
         p_from_class_name VARCHAR2,
         p_to_class_name VARCHAR2,
         p_role_name VARCHAR2)
RETURN CLASS_RELATION.APPROVAL_DATE%TYPE  IS
   v_return_val CLASS_RELATION.APPROVAL_DATE%TYPE ;
   CURSOR c_col_val IS
   SELECT approval_date col
   FROM CLASS_RELATION
WHERE from_class_name = p_from_class_name
AND to_class_name = p_to_class_name
AND role_name = p_role_name;
BEGIN
   FOR cur_row IN c_col_val LOOP
      v_return_val := cur_row.col;
   END LOOP;
   RETURN v_return_val;
END approval_date;

------------------------------------------------------------------------------------
FUNCTION rec_id(
         p_from_class_name VARCHAR2,
         p_to_class_name VARCHAR2,
         p_role_name VARCHAR2)
RETURN CLASS_RELATION.REC_ID%TYPE  IS
   v_return_val CLASS_RELATION.REC_ID%TYPE ;
   CURSOR c_col_val IS
   SELECT rec_id col
   FROM CLASS_RELATION
WHERE from_class_name = p_from_class_name
AND to_class_name = p_to_class_name
AND role_name = p_role_name;
BEGIN
   FOR cur_row IN c_col_val LOOP
      v_return_val := cur_row.col;
   END LOOP;
   RETURN v_return_val;
END rec_id;


------------------------------------------------------------------------------------
FUNCTION row_by_pk (
         p_from_class_name VARCHAR2,
         p_to_class_name VARCHAR2,
         p_role_name VARCHAR2)
RETURN CLASS_RELATION%ROWTYPE IS
   v_return_rec CLASS_RELATION%ROWTYPE;
   CURSOR c_read_row IS
   SELECT *
   FROM CLASS_RELATION
WHERE from_class_name = p_from_class_name
AND to_class_name = p_to_class_name
AND role_name = p_role_name;
BEGIN
   FOR cur_rec IN c_read_row LOOP
      v_return_rec := cur_rec;
   END LOOP;
   RETURN v_return_rec;
END row_by_pk;



END ec_class_relation;
/
